
Nucleo_I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dcc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f84  08005f84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f8c  08005f8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f0  20000070  08006004  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002260  08006004  00022260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1b6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca0  00000000  00000000  0002b256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001683d  00000000  00000000  0002e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c855  00000000  00000000  000449f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903fb  00000000  00000000  0005124a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1645  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c8  00000000  00000000  000e1698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005f4c 	.word	0x08005f4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005f4c 	.word	0x08005f4c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	2118      	movs	r1, #24
 80004e2:	2001      	movs	r0, #1
 80004e4:	f005 fc30 	bl	8005d48 <calloc>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4618      	mov	r0, r3
 80004ec:	bd80      	pop	{r7, pc}

080004ee <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d102      	bne.n	8000504 <AS5600_init+0x16>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	220a      	movs	r2, #10
 8000502:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7b9b      	ldrb	r3, [r3, #14]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d102      	bne.n	8000512 <AS5600_init+0x24>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2201      	movs	r2, #1
 8000510:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7bdb      	ldrb	r3, [r3, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d102      	bne.n	8000520 <AS5600_init+0x32>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7c1b      	ldrb	r3, [r3, #16]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <AS5600_init+0x40>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2201      	movs	r2, #1
 800052c:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7c5b      	ldrb	r3, [r3, #17]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <AS5600_init+0x4e>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7c9b      	ldrb	r3, [r3, #18]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <AS5600_init+0x5c>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2201      	movs	r2, #1
 8000548:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7cdb      	ldrb	r3, [r3, #19]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <AS5600_init+0x6a>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2201      	movs	r2, #1
 8000556:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7d1b      	ldrb	r3, [r3, #20]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <AS5600_init+0x78>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7d5b      	ldrb	r3, [r3, #21]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d102      	bne.n	8000574 <AS5600_init+0x86>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2202      	movs	r2, #2
 8000572:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7bdb      	ldrb	r3, [r3, #15]
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f86a 	bl	8000654 <AS5600_set_low_power_mode>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <AS5600_init+0x9c>
 8000586:	2301      	movs	r3, #1
 8000588:	e05f      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7c1b      	ldrb	r3, [r3, #16]
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f8b3 	bl	80006fc <AS5600_set_hysteresis>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <AS5600_init+0xb2>
 800059c:	2301      	movs	r3, #1
 800059e:	e054      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7c59      	ldrb	r1, [r3, #17]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7c9b      	ldrb	r3, [r3, #18]
 80005a8:	461a      	mov	r2, r3
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f8fa 	bl	80007a4 <AS5600_set_output_mode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <AS5600_init+0xcc>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e047      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7cdb      	ldrb	r3, [r3, #19]
 80005be:	4619      	mov	r1, r3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f983 	bl	80008cc <AS5600_set_slow_filter>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <AS5600_init+0xe2>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e03c      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7d1b      	ldrb	r3, [r3, #20]
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f9cc 	bl	8000974 <AS5600_set_fast_filter_threshold>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <AS5600_init+0xf8>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e031      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7d5b      	ldrb	r3, [r3, #21]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fa61 	bl	8000ab4 <AS5600_set_watchdog_timer>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <AS5600_init+0x10e>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e026      	b.n	800064a <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fa80 	bl	8000b02 <AS5600_write_config_register>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <AS5600_init+0x11e>
 8000608:	2301      	movs	r3, #1
 800060a:	e01e      	b.n	800064a <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000610:	f107 030f 	add.w	r3, r7, #15
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fa8b 	bl	8000b32 <AS5600_get_magnet_status>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <AS5600_init+0x138>
 8000622:	2301      	movs	r3, #1
 8000624:	e011      	b.n	800064a <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d104      	bne.n	8000644 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <AS5600_init+0x15a>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <AS5600_init+0x15c>
	return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	3b01      	subs	r3, #1
 8000664:	2b03      	cmp	r3, #3
 8000666:	d83f      	bhi.n	80006e8 <AS5600_set_low_power_mode+0x94>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <AS5600_set_low_power_mode+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	08000693 	.word	0x08000693
 8000678:	080006b5 	.word	0x080006b5
 800067c:	080006d7 	.word	0x080006d7
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7ddb      	ldrb	r3, [r3, #23]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	75da      	strb	r2, [r3, #23]
		break;
 8000690:	e02c      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7ddb      	ldrb	r3, [r3, #23]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f023 0302 	bic.w	r3, r3, #2
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	75da      	strb	r2, [r3, #23]
	break;
 80006b2:	e01b      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7ddb      	ldrb	r3, [r3, #23]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	75da      	strb	r2, [r3, #23]
		break;
 80006d4:	e00a      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7ddb      	ldrb	r3, [r3, #23]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f043 0303 	orr.w	r3, r3, #3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	75da      	strb	r2, [r3, #23]
		break;
 80006e6:	e001      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	3b01      	subs	r3, #1
 800070c:	2b03      	cmp	r3, #3
 800070e:	d83f      	bhi.n	8000790 <AS5600_set_hysteresis+0x94>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <AS5600_set_hysteresis+0x1c>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	0800073b 	.word	0x0800073b
 8000720:	0800075d 	.word	0x0800075d
 8000724:	0800077f 	.word	0x0800077f
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7ddb      	ldrb	r3, [r3, #23]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f023 030c 	bic.w	r3, r3, #12
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	75da      	strb	r2, [r3, #23]
		break;
 8000738:	e02c      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7ddb      	ldrb	r3, [r3, #23]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2da      	uxtb	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7ddb      	ldrb	r3, [r3, #23]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f023 0308 	bic.w	r3, r3, #8
 8000754:	b2da      	uxtb	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	75da      	strb	r2, [r3, #23]
		break;
 800075a:	e01b      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7ddb      	ldrb	r3, [r3, #23]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f023 0304 	bic.w	r3, r3, #4
 8000766:	b2da      	uxtb	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7ddb      	ldrb	r3, [r3, #23]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	b2da      	uxtb	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	75da      	strb	r2, [r3, #23]
		break;
 800077c:	e00a      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7ddb      	ldrb	r3, [r3, #23]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f043 030c 	orr.w	r3, r3, #12
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	75da      	strb	r2, [r3, #23]
		break;
 800078e:	e001      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d020      	beq.n	8000800 <AS5600_set_output_mode+0x5c>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	dc31      	bgt.n	8000826 <AS5600_set_output_mode+0x82>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d002      	beq.n	80007cc <AS5600_set_output_mode+0x28>
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d009      	beq.n	80007de <AS5600_set_output_mode+0x3a>
 80007ca:	e02c      	b.n	8000826 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7ddb      	ldrb	r3, [r3, #23]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	75da      	strb	r2, [r3, #23]
		break;
 80007dc:	e025      	b.n	800082a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7ddb      	ldrb	r3, [r3, #23]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f023 0320 	bic.w	r3, r3, #32
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	75da      	strb	r2, [r3, #23]
		break;
 80007fe:	e014      	b.n	800082a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7ddb      	ldrb	r3, [r3, #23]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	b2da      	uxtb	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7ddb      	ldrb	r3, [r3, #23]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	b2da      	uxtb	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8000826:	2301      	movs	r3, #1
 8000828:	e04a      	b.n	80008c0 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d045      	beq.n	80008bc <AS5600_set_output_mode+0x118>
		switch (frequency) {
 8000830:	78bb      	ldrb	r3, [r7, #2]
 8000832:	3b01      	subs	r3, #1
 8000834:	2b03      	cmp	r3, #3
 8000836:	d83f      	bhi.n	80008b8 <AS5600_set_output_mode+0x114>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <AS5600_set_output_mode+0x9c>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	08000863 	.word	0x08000863
 8000848:	08000885 	.word	0x08000885
 800084c:	080008a7 	.word	0x080008a7
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7ddb      	ldrb	r3, [r3, #23]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800085a:	b2da      	uxtb	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	75da      	strb	r2, [r3, #23]
			break;
 8000860:	e02d      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7ddb      	ldrb	r3, [r3, #23]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7ddb      	ldrb	r3, [r3, #23]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	75da      	strb	r2, [r3, #23]
			break;
 8000882:	e01c      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7ddb      	ldrb	r3, [r3, #23]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7ddb      	ldrb	r3, [r3, #23]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	75da      	strb	r2, [r3, #23]
			break;
 80008a4:	e00b      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7ddb      	ldrb	r3, [r3, #23]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	75da      	strb	r2, [r3, #23]
			break;
 80008b6:	e002      	b.n	80008be <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 80008b8:	2301      	movs	r3, #1
 80008ba:	e001      	b.n	80008c0 <AS5600_set_output_mode+0x11c>
		}
	}
 80008bc:	bf00      	nop
	return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	3b01      	subs	r3, #1
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d83f      	bhi.n	8000960 <AS5600_set_slow_filter+0x94>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <AS5600_set_slow_filter+0x1c>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	0800090b 	.word	0x0800090b
 80008f0:	0800092d 	.word	0x0800092d
 80008f4:	0800094f 	.word	0x0800094f
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7d9b      	ldrb	r3, [r3, #22]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f023 0303 	bic.w	r3, r3, #3
 8000902:	b2da      	uxtb	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	759a      	strb	r2, [r3, #22]
		break;
 8000908:	e02c      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7d9b      	ldrb	r3, [r3, #22]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7d9b      	ldrb	r3, [r3, #22]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f023 0302 	bic.w	r3, r3, #2
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	759a      	strb	r2, [r3, #22]
		break;
 800092a:	e01b      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7d9b      	ldrb	r3, [r3, #22]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7d9b      	ldrb	r3, [r3, #22]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	759a      	strb	r2, [r3, #22]
		break;
 800094c:	e00a      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7d9b      	ldrb	r3, [r3, #22]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f043 0303 	orr.w	r3, r3, #3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	759a      	strb	r2, [r3, #22]
		break;
 800095e:	e001      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	3b01      	subs	r3, #1
 8000984:	2b07      	cmp	r3, #7
 8000986:	f200 808b 	bhi.w	8000aa0 <AS5600_set_fast_filter_threshold+0x12c>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <AS5600_set_fast_filter_threshold+0x1c>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009b1 	.word	0x080009b1
 8000994:	080009c3 	.word	0x080009c3
 8000998:	080009e5 	.word	0x080009e5
 800099c:	08000a07 	.word	0x08000a07
 80009a0:	08000a29 	.word	0x08000a29
 80009a4:	08000a4b 	.word	0x08000a4b
 80009a8:	08000a6d 	.word	0x08000a6d
 80009ac:	08000a8f 	.word	0x08000a8f
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7d9b      	ldrb	r3, [r3, #22]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f023 031c 	bic.w	r3, r3, #28
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	759a      	strb	r2, [r3, #22]
		break;
 80009c0:	e070      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7d9b      	ldrb	r3, [r3, #22]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f023 0318 	bic.w	r3, r3, #24
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7d9b      	ldrb	r3, [r3, #22]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	759a      	strb	r2, [r3, #22]
		break;
 80009e2:	e05f      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7d9b      	ldrb	r3, [r3, #22]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f023 0314 	bic.w	r3, r3, #20
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7d9b      	ldrb	r3, [r3, #22]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	759a      	strb	r2, [r3, #22]
		break;
 8000a04:	e04e      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7d9b      	ldrb	r3, [r3, #22]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f023 0310 	bic.w	r3, r3, #16
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7d9b      	ldrb	r3, [r3, #22]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f043 030c 	orr.w	r3, r3, #12
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	759a      	strb	r2, [r3, #22]
		break;
 8000a26:	e03d      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7d9b      	ldrb	r3, [r3, #22]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f023 030c 	bic.w	r3, r3, #12
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d9b      	ldrb	r3, [r3, #22]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	759a      	strb	r2, [r3, #22]
		break;
 8000a48:	e02c      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7d9b      	ldrb	r3, [r3, #22]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f023 0308 	bic.w	r3, r3, #8
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7d9b      	ldrb	r3, [r3, #22]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f043 0314 	orr.w	r3, r3, #20
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	759a      	strb	r2, [r3, #22]
		break;
 8000a6a:	e01b      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7d9b      	ldrb	r3, [r3, #22]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f023 0304 	bic.w	r3, r3, #4
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	7d9b      	ldrb	r3, [r3, #22]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f043 0318 	orr.w	r3, r3, #24
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	759a      	strb	r2, [r3, #22]
		break;
 8000a8c:	e00a      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7d9b      	ldrb	r3, [r3, #22]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f043 031c 	orr.w	r3, r3, #28
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	759a      	strb	r2, [r3, #22]
		break;
 8000a9e:	e001      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d002      	beq.n	8000acc <AS5600_set_watchdog_timer+0x18>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d009      	beq.n	8000ade <AS5600_set_watchdog_timer+0x2a>
 8000aca:	e011      	b.n	8000af0 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7d9b      	ldrb	r3, [r3, #22]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	759a      	strb	r2, [r3, #22]
		break;
 8000adc:	e00a      	b.n	8000af4 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7d9b      	ldrb	r3, [r3, #22]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	759a      	strb	r2, [r3, #22]
		break;
 8000aee:	e001      	b.n	8000af4 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af04      	add	r7, sp, #16
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3316      	adds	r3, #22
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6892      	ldr	r2, [r2, #8]
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2207      	movs	r2, #7
 8000b22:	216c      	movs	r1, #108	; 0x6c
 8000b24:	f002 f976 	bl	8002e14 <HAL_I2C_Mem_Write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <AS5600_get_magnet_status>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af04      	add	r7, sp, #16
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	220b      	movs	r2, #11
 8000b52:	216c      	movs	r1, #108	; 0x6c
 8000b54:	f002 fa58 	bl	8003008 <HAL_I2C_Mem_Read>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	AS5600_TypeDef* sensor = AS5600_new();
 8000b6a:	f7ff fcb7 	bl	80004dc <AS5600_new>
 8000b6e:	6078      	str	r0, [r7, #4]
	sensor->i2c_handle = &hi2c1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <main+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <main+0x6c>)
 8000b7a:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b82:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CCW;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2202      	movs	r2, #2
 8000b88:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fbed 	bl	8001368 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f827 	bl	8000be0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f92d 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b96:	f000 f90b 	bl	8000db0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b9a:	f000 f8db 	bl	8000d54 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b9e:	f000 f887 	bl	8000cb0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  while (AS5600_init(sensor) != HAL_OK) {
 8000ba2:	e006      	b.n	8000bb2 <main+0x4e>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <main+0x70>)
 8000ba8:	f001 ffd5 	bl	8002b56 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000bac:	2032      	movs	r0, #50	; 0x32
 8000bae:	f000 fc4d 	bl	800144c <HAL_Delay>
  while (AS5600_init(sensor) != HAL_OK) {
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fc9b 	bl	80004ee <AS5600_init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f2      	bne.n	8000ba4 <main+0x40>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)angle_data, ADC_IN_BUFFER_SIZE);
 8000bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc2:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <main+0x74>)
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <main+0x78>)
 8000bc6:	f000 fdb9 	bl	800173c <HAL_ADC_Start_DMA>
  while (1)
 8000bca:	e7fe      	b.n	8000bca <main+0x66>
 8000bcc:	20000134 	.word	0x20000134
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	20000248 	.word	0x20000248
 8000bdc:	2000008c 	.word	0x2000008c

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	2230      	movs	r2, #48	; 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f005 f8dc 	bl	8005dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <SystemClock_Config+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <SystemClock_Config+0xcc>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <SystemClock_Config+0xcc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c50:	2310      	movs	r3, #16
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c54:	23c0      	movs	r3, #192	; 0xc0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fc2b 	bl	80054c0 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c70:	f000 f9a6 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2103      	movs	r1, #3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fe8d 	bl	80059b0 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c9c:	f000 f990 	bl	8000fc0 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3750      	adds	r7, #80	; 0x50
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_ADC1_Init+0x9c>)
 8000cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <MX_ADC1_Init+0xa0>)
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d12:	f000 fbbf 	bl	8001494 <HAL_ADC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f000 f950 	bl	8000fc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d32:	f000 fe07 	bl	8001944 <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d3c:	f000 f940 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	40012000 	.word	0x40012000
 8000d50:	0f000001 	.word	0x0f000001

08000d54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C1_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C1_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d92:	f001 fefb 	bl	8002b8c <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 f910 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000134 	.word	0x20000134
 8000da8:	40005400 	.word	0x40005400
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2038      	movs	r0, #56	; 0x38
 8000dd8:	f001 f949 	bl	800206e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ddc:	2038      	movs	r0, #56	; 0x38
 8000dde:	f001 f962 	bl	80020a6 <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <MX_GPIO_Init+0xc8>)
 8000e60:	f001 fe60 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AS5600_DIR_GPIO_Port, AS5600_DIR_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0xcc>)
 8000e6c:	f001 fe5a 	bl	8002b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e70:	2320      	movs	r3, #32
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_GPIO_Init+0xc8>)
 8000e88:	f001 fcc8 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pin : AS5600_DIR_Pin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8000e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0xcc>)
 8000ea6:	f001 fcb9 	bl	800281c <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/// CALLBACKS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
/// TODO: measure fill times
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < 32; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	81fb      	strh	r3, [r7, #14]
 8000ee0:	e05b      	b.n	8000f9a <HAL_ADC_ConvCpltCallback+0xc6>
		adc_min[i] = angle_data[i * 128];
 8000ee2:	89fb      	ldrh	r3, [r7, #14]
 8000ee4:	01da      	lsls	r2, r3, #7
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	4931      	ldr	r1, [pc, #196]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000eea:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000eee:	4a31      	ldr	r2, [pc, #196]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000ef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_max[i] = angle_data[i * 128];
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	01da      	lsls	r2, r3, #7
 8000ef8:	89fb      	ldrh	r3, [r7, #14]
 8000efa:	492d      	ldr	r1, [pc, #180]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000efc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f00:	4a2d      	ldr	r2, [pc, #180]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t j = 0; j < 128; j++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	81bb      	strh	r3, [r7, #12]
 8000f0a:	e032      	b.n	8000f72 <HAL_ADC_ConvCpltCallback+0x9e>
			if (angle_data[i * 128 + j] < adc_min[i]) { adc_min[i] = angle_data[i * 128 + j]; }
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	01da      	lsls	r2, r3, #7
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	4925      	ldr	r1, [pc, #148]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d20a      	bcs.n	8000f3c <HAL_ADC_ConvCpltCallback+0x68>
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	01da      	lsls	r2, r3, #7
 8000f2a:	89bb      	ldrh	r3, [r7, #12]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	89fb      	ldrh	r3, [r7, #14]
 8000f30:	491f      	ldr	r1, [pc, #124]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f32:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f36:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (angle_data[i * 128 + j] > adc_max[i]) { adc_max[i] = angle_data[i * 128 + j]; }
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	01da      	lsls	r2, r3, #7
 8000f40:	89bb      	ldrh	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	491a      	ldr	r1, [pc, #104]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f4e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d90a      	bls.n	8000f6c <HAL_ADC_ConvCpltCallback+0x98>
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	01da      	lsls	r2, r3, #7
 8000f5a:	89bb      	ldrh	r3, [r7, #12]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	4913      	ldr	r1, [pc, #76]	; (8000fb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8000f62:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint16_t j = 0; j < 128; j++) {
 8000f6c:	89bb      	ldrh	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	81bb      	strh	r3, [r7, #12]
 8000f72:	89bb      	ldrh	r3, [r7, #12]
 8000f74:	2b7f      	cmp	r3, #127	; 0x7f
 8000f76:	d9c9      	bls.n	8000f0c <HAL_ADC_ConvCpltCallback+0x38>
		}
		adc_dif[i] = adc_max[i] - adc_min[i];
 8000f78:	89fb      	ldrh	r3, [r7, #14]
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8000f7c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000f84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	1a8a      	subs	r2, r1, r2
 8000f8c:	b291      	uxth	r1, r2
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8000f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint16_t i = 0; i < 32; i++) {
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	3301      	adds	r3, #1
 8000f98:	81fb      	strh	r3, [r7, #14]
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	2b1f      	cmp	r3, #31
 8000f9e:	d9a0      	bls.n	8000ee2 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000248 	.word	0x20000248
 8000fb4:	20000188 	.word	0x20000188
 8000fb8:	200001c8 	.word	0x200001c8
 8000fbc:	20000208 	.word	0x20000208

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_MspInit+0x4c>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <HAL_MspInit+0x4c>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x4c>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800

0800101c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a38      	ldr	r2, [pc, #224]	; (800111c <HAL_ADC_MspInit+0x100>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d169      	bne.n	8001112 <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HAL_ADC_MspInit+0x104>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <HAL_ADC_MspInit+0x104>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_ADC_MspInit+0x104>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <HAL_ADC_MspInit+0x104>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_ADC_MspInit+0x104>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_ADC_MspInit+0x104>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8001076:	2301      	movs	r3, #1
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107a:	2303      	movs	r3, #3
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4826      	ldr	r0, [pc, #152]	; (8001124 <HAL_ADC_MspInit+0x108>)
 800108a:	f001 fbc7 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_ADC_MspInit+0x110>)
 8001092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010d0:	2204      	movs	r2, #4
 80010d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010d6:	2203      	movs	r2, #3
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010e6:	4810      	ldr	r0, [pc, #64]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010e8:	f000 fff8 	bl	80020dc <HAL_DMA_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 80010f2:	f7ff ff65 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_ADC_MspInit+0x10c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2012      	movs	r0, #18
 8001108:	f000 ffb1 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800110c:	2012      	movs	r0, #18
 800110e:	f000 ffca 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40012000 	.word	0x40012000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020000 	.word	0x40020000
 8001128:	200000d4 	.word	0x200000d4
 800112c:	40026410 	.word	0x40026410

08001130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_I2C_MspInit+0xa4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d13c      	bne.n	80011cc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001174:	2312      	movs	r3, #18
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001180:	2304      	movs	r3, #4
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <HAL_I2C_MspInit+0xac>)
 800118c:	f001 fb46 	bl	800281c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_I2C_MspInit+0xa8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	201f      	movs	r0, #31
 80011b2:	f000 ff5c 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011b6:	201f      	movs	r0, #31
 80011b8:	f000 ff75 	bl	80020a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2020      	movs	r0, #32
 80011c2:	f000 ff54 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011c6:	2020      	movs	r0, #32
 80011c8:	f000 ff6d 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40005400 	.word	0x40005400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f8ee 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}

08001234 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <ADC_IRQHandler+0x10>)
 800123a:	f000 f96e 	bl	800151a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000008c 	.word	0x2000008c

08001248 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <I2C1_EV_IRQHandler+0x10>)
 800124e:	f002 f901 	bl	8003454 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000134 	.word	0x20000134

0800125c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <I2C1_ER_IRQHandler+0x10>)
 8001262:	f002 fa68 	bl	8003736 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000134 	.word	0x20000134

08001270 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA2_Stream0_IRQHandler+0x10>)
 8001276:	f001 f859 	bl	800232c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000d4 	.word	0x200000d4

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f004 fd50 	bl	8005d58 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20020000 	.word	0x20020000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20002248 	.word	0x20002248
 80012ec:	20002260 	.word	0x20002260

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133e:	f7ff ffd7 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f004 fd0f 	bl	8005d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff fc0d 	bl	8000b64 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001358:	08005f94 	.word	0x08005f94
  ldr r2, =_sbss
 800135c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001360:	20002260 	.word	0x20002260

08001364 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <DMA1_Stream0_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 fe61 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fe16 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fe79 	bl	80020c2 <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 fe41 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	2000224c 	.word	0x2000224c

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000224c 	.word	0x2000224c

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e033      	b.n	8001512 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fdb2 	bl	800101c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014da:	f023 0302 	bic.w	r3, r3, #2
 80014de:	f043 0202 	orr.w	r2, r3, #2
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fb5e 	bl	8001ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f023 0303 	bic.w	r3, r3, #3
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
 8001502:	e001      	b.n	8001508 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d049      	beq.n	80015e4 <HAL_ADC_IRQHandler+0xca>
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d046      	beq.n	80015e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d105      	bne.n	800156e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d12b      	bne.n	80015d4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001580:	2b00      	cmp	r3, #0
 8001582:	d127      	bne.n	80015d4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800159c:	2b00      	cmp	r3, #0
 800159e:	d119      	bne.n	80015d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0220 	bic.w	r2, r2, #32
 80015ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f043 0201 	orr.w	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fc7d 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0212 	mvn.w	r2, #18
 80015e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d057      	beq.n	80016aa <HAL_ADC_IRQHandler+0x190>
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d054      	beq.n	80016aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d139      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800163e:	2b00      	cmp	r3, #0
 8001640:	d12b      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800164c:	2b00      	cmp	r3, #0
 800164e:	d124      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d11d      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d119      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001674:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fc02 	bl	8001ea4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f06f 020c 	mvn.w	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d017      	beq.n	80016f0 <HAL_ADC_IRQHandler+0x1d6>
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d014      	beq.n	80016f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10d      	bne.n	80016f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f91b 	bl	800191c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f06f 0201 	mvn.w	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0320 	and.w	r3, r3, #32
 80016f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d015      	beq.n	8001732 <HAL_ADC_IRQHandler+0x218>
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d012      	beq.n	8001732 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0220 	mvn.w	r2, #32
 8001720:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f904 	bl	8001930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0220 	mvn.w	r2, #32
 8001730:	601a      	str	r2, [r3, #0]
  }
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_ADC_Start_DMA+0x1e>
 8001756:	2302      	movs	r3, #2
 8001758:	e0ce      	b.n	80018f8 <HAL_ADC_Start_DMA+0x1bc>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b01      	cmp	r3, #1
 800176e:	d018      	beq.n	80017a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001780:	4b5f      	ldr	r3, [pc, #380]	; (8001900 <HAL_ADC_Start_DMA+0x1c4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5f      	ldr	r2, [pc, #380]	; (8001904 <HAL_ADC_Start_DMA+0x1c8>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9a      	lsrs	r2, r3, #18
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001794:	e002      	b.n	800179c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	3b01      	subs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f9      	bne.n	8001796 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017b0:	d107      	bne.n	80017c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	f040 8086 	bne.w	80018de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001810:	d106      	bne.n	8001820 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f023 0206 	bic.w	r2, r3, #6
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
 800181e:	e002      	b.n	8001826 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_ADC_Start_DMA+0x1cc>)
 8001830:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <HAL_ADC_Start_DMA+0x1d0>)
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_ADC_Start_DMA+0x1d4>)
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001846:	4a33      	ldr	r2, [pc, #204]	; (8001914 <HAL_ADC_Start_DMA+0x1d8>)
 8001848:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001852:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001862:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001872:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	334c      	adds	r3, #76	; 0x4c
 800187e:	4619      	mov	r1, r3
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f000 fcd8 	bl	8002238 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10f      	bne.n	80018b4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d129      	bne.n	80018f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e020      	b.n	80018f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_ADC_Start_DMA+0x1dc>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11b      	bne.n	80018f6 <HAL_ADC_Start_DMA+0x1ba>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d114      	bne.n	80018f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	e00b      	b.n	80018f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f043 0210 	orr.w	r2, r3, #16
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	431bde83 	.word	0x431bde83
 8001908:	40012300 	.word	0x40012300
 800190c:	08001da1 	.word	0x08001da1
 8001910:	08001e5b 	.word	0x08001e5b
 8001914:	08001e77 	.word	0x08001e77
 8001918:	40012000 	.word	0x40012000

0800191c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x1c>
 800195c:	2302      	movs	r3, #2
 800195e:	e113      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x244>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b09      	cmp	r3, #9
 800196e:	d925      	bls.n	80019bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68d9      	ldr	r1, [r3, #12]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	3b1e      	subs	r3, #30
 8001986:	2207      	movs	r2, #7
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43da      	mvns	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	400a      	ands	r2, r1
 8001994:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68d9      	ldr	r1, [r3, #12]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4618      	mov	r0, r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4403      	add	r3, r0
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	409a      	lsls	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	e022      	b.n	8001a02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	2207      	movs	r2, #7
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	400a      	ands	r2, r1
 80019de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6919      	ldr	r1, [r3, #16]
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4403      	add	r3, r0
 80019f8:	409a      	lsls	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d824      	bhi.n	8001a54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b05      	subs	r3, #5
 8001a1c:	221f      	movs	r2, #31
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	400a      	ands	r2, r1
 8001a2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	3b05      	subs	r3, #5
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	635a      	str	r2, [r3, #52]	; 0x34
 8001a52:	e04c      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b0c      	cmp	r3, #12
 8001a5a:	d824      	bhi.n	8001aa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b23      	subs	r3, #35	; 0x23
 8001a6e:	221f      	movs	r2, #31
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43da      	mvns	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b23      	subs	r3, #35	; 0x23
 8001a98:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa4:	e023      	b.n	8001aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3b41      	subs	r3, #65	; 0x41
 8001ab8:	221f      	movs	r2, #31
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b41      	subs	r3, #65	; 0x41
 8001ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <HAL_ADC_ConfigChannel+0x250>)
 8001af0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a28      	ldr	r2, [pc, #160]	; (8001b98 <HAL_ADC_ConfigChannel+0x254>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d10f      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1d8>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b12      	cmp	r3, #18
 8001b02:	d10b      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_ADC_ConfigChannel+0x254>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d12b      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_ADC_ConfigChannel+0x258>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d003      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0x1f4>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b11      	cmp	r3, #17
 8001b36:	d122      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a11      	ldr	r2, [pc, #68]	; (8001b9c <HAL_ADC_ConfigChannel+0x258>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d111      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_ADC_ConfigChannel+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_ConfigChannel+0x260>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9a      	lsrs	r2, r3, #18
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40012300 	.word	0x40012300
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	10000012 	.word	0x10000012
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb0:	4b79      	ldr	r3, [pc, #484]	; (8001d98 <ADC_Init+0x1f0>)
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021a      	lsls	r2, r3, #8
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6899      	ldr	r1, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <ADC_Init+0x1f4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d022      	beq.n	8001c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	e00f      	b.n	8001ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0202 	bic.w	r2, r2, #2
 8001cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6899      	ldr	r1, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	005a      	lsls	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01b      	beq.n	8001d0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	035a      	lsls	r2, r3, #13
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	e007      	b.n	8001d1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	051a      	lsls	r2, r3, #20
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d5e:	025a      	lsls	r2, r3, #9
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	029a      	lsls	r2, r3, #10
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	0f000001 	.word	0x0f000001

08001da0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d13c      	bne.n	8001e34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12b      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d127      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d119      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0220 	bic.w	r2, r2, #32
 8001e06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff f851 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e32:	e00e      	b.n	8001e52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fd75 	bl	8001930 <HAL_ADC_ErrorCallback>
}
 8001e46:	e004      	b.n	8001e52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e68:	68f8      	ldr	r0, [r7, #12]
 8001e6a:	f7ff f829 	bl	8000ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff fd4a 	bl	8001930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <__NVIC_SetPriorityGrouping+0x44>)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	60d3      	str	r3, [r2, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_GetPriorityGrouping+0x18>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	f003 0307 	and.w	r3, r3, #7
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0b      	blt.n	8001f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	f003 021f 	and.w	r2, r3, #31
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <__NVIC_EnableIRQ+0x38>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff8e 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff29 	bl	8001eb8 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff3e 	bl	8001f00 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff8e 	bl	8001fac <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5d 	bl	8001f58 <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff31 	bl	8001f1c <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff f9a4 	bl	8001434 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e099      	b.n	800222c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 0201 	bic.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002118:	e00f      	b.n	800213a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800211a:	f7ff f98b 	bl	8001434 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b05      	cmp	r3, #5
 8002126:	d908      	bls.n	800213a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2203      	movs	r2, #3
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e078      	b.n	800222c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e8      	bne.n	800211a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_DMA_Init+0x158>)
 8002154:	4013      	ands	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002166:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	2b04      	cmp	r3, #4
 8002192:	d107      	bne.n	80021a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	4313      	orrs	r3, r2
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f023 0307 	bic.w	r3, r3, #7
 80021ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d117      	bne.n	80021fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00e      	beq.n	80021fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fa9f 	bl	8002724 <DMA_CheckFifoParam>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021fa:	2301      	movs	r3, #1
 80021fc:	e016      	b.n	800222c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fa56 	bl	80026b8 <DMA_CalcBaseAndBitshift>
 800220c:	4603      	mov	r3, r0
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	223f      	movs	r2, #63	; 0x3f
 8002216:	409a      	lsls	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	f010803f 	.word	0xf010803f

08002238 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <HAL_DMA_Start_IT+0x26>
 800225a:	2302      	movs	r3, #2
 800225c:	e040      	b.n	80022e0 <HAL_DMA_Start_IT+0xa8>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d12f      	bne.n	80022d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f9e8 	bl	800265c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	223f      	movs	r2, #63	; 0x3f
 8002292:	409a      	lsls	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0216 	orr.w	r2, r2, #22
 80022a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0208 	orr.w	r2, r2, #8
 80022be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e005      	b.n	80022de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022da:	2302      	movs	r3, #2
 80022dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022de:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d004      	beq.n	8002306 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00c      	b.n	8002320 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002338:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_DMA_IRQHandler+0x248>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8e      	ldr	r2, [pc, #568]	; (8002578 <HAL_DMA_IRQHandler+0x24c>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2208      	movs	r2, #8
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01a      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	2208      	movs	r2, #8
 8002386:	409a      	lsls	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	2201      	movs	r2, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f043 0202 	orr.w	r2, r3, #2
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d2:	2204      	movs	r2, #4
 80023d4:	409a      	lsls	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d012      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00b      	beq.n	8002404 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2204      	movs	r2, #4
 80023f2:	409a      	lsls	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	2210      	movs	r2, #16
 800240a:	409a      	lsls	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d043      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03c      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2210      	movs	r2, #16
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d018      	beq.n	800246e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d108      	bne.n	800245c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2b00      	cmp	r3, #0
 8002450:	d024      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	4798      	blx	r3
 800245a:	e01f      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	4798      	blx	r3
 800246c:	e016      	b.n	800249c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0208 	bic.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	2220      	movs	r2, #32
 80024a2:	409a      	lsls	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 808f 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 8087 	beq.w	80025cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	2220      	movs	r2, #32
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b05      	cmp	r3, #5
 80024d4:	d136      	bne.n	8002544 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0216 	bic.w	r2, r2, #22
 80024e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <HAL_DMA_IRQHandler+0x1da>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0208 	bic.w	r2, r2, #8
 8002514:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	223f      	movs	r2, #63	; 0x3f
 800251c:	409a      	lsls	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	2b00      	cmp	r3, #0
 8002538:	d07e      	beq.n	8002638 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
        }
        return;
 8002542:	e079      	b.n	8002638 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01d      	beq.n	800258e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10d      	bne.n	800257c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	2b00      	cmp	r3, #0
 8002566:	d031      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
 8002570:	e02c      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000
 8002578:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d023      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	4798      	blx	r3
 800258c:	e01e      	b.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0210 	bic.w	r2, r2, #16
 80025aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d032      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d022      	beq.n	8002626 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2205      	movs	r2, #5
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	3301      	adds	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	d307      	bcc.n	8002614 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f2      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x2cc>
 8002612:	e000      	b.n	8002616 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002614:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
 8002636:	e000      	b.n	800263a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002638:	bf00      	nop
    }
  }
}
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264e:	b2db      	uxtb	r3, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002678:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	3b10      	subs	r3, #16
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <DMA_CalcBaseAndBitshift+0x64>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <DMA_CalcBaseAndBitshift+0x68>)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d909      	bls.n	80026fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	1d1a      	adds	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	659a      	str	r2, [r3, #88]	; 0x58
 80026f8:	e007      	b.n	800270a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08005f7c 	.word	0x08005f7c

08002724 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d11f      	bne.n	800277e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b03      	cmp	r3, #3
 8002742:	d856      	bhi.n	80027f2 <DMA_CheckFifoParam+0xce>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <DMA_CheckFifoParam+0x28>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	0800275d 	.word	0x0800275d
 8002750:	0800276f 	.word	0x0800276f
 8002754:	0800275d 	.word	0x0800275d
 8002758:	080027f3 	.word	0x080027f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d046      	beq.n	80027f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276c:	e043      	b.n	80027f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002776:	d140      	bne.n	80027fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e03d      	b.n	80027fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002786:	d121      	bne.n	80027cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d837      	bhi.n	80027fe <DMA_CheckFifoParam+0xda>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x70>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027ab 	.word	0x080027ab
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	080027bd 	.word	0x080027bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
      break;
 80027a8:	e030      	b.n	800280c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d025      	beq.n	8002802 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ba:	e022      	b.n	8002802 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c4:	d11f      	bne.n	8002806 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ca:	e01c      	b.n	8002806 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d903      	bls.n	80027da <DMA_CheckFifoParam+0xb6>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d003      	beq.n	80027e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027d8:	e018      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      break;
 80027de:	e015      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e00b      	b.n	800280a <DMA_CheckFifoParam+0xe6>
      break;
 80027f2:	bf00      	nop
 80027f4:	e00a      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027f6:	bf00      	nop
 80027f8:	e008      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fa:	bf00      	nop
 80027fc:	e006      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 80027fe:	bf00      	nop
 8002800:	e004      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 8002802:	bf00      	nop
 8002804:	e002      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;   
 8002806:	bf00      	nop
 8002808:	e000      	b.n	800280c <DMA_CheckFifoParam+0xe8>
      break;
 800280a:	bf00      	nop
    }
  } 
  
  return status; 
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800282e:	2300      	movs	r3, #0
 8002830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e159      	b.n	8002aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002838:	2201      	movs	r2, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4013      	ands	r3, r2
 800284a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	f040 8148 	bne.w	8002ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d005      	beq.n	800286e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800286a:	2b02      	cmp	r3, #2
 800286c:	d130      	bne.n	80028d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	2203      	movs	r2, #3
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	69b9      	ldr	r1, [r7, #24]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a2 	beq.w	8002ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x2e8>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a56      	ldr	r2, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x2e8>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2e8>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029be:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x2ec>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2f0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x202>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2f4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x1fe>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2f8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x1fa>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <HAL_GPIO_Init+0x2fc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x1f6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a45      	ldr	r2, [pc, #276]	; (8002b1c <HAL_GPIO_Init+0x300>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x1f2>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a0e:	2307      	movs	r3, #7
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x204>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x2ec>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a62:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a68:	4b2d      	ldr	r3, [pc, #180]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ab6:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_GPIO_Init+0x304>)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f67f aea2 	bls.w	8002838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3724      	adds	r7, #36	; 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40013800 	.word	0x40013800
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40020c00 	.word	0x40020c00
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
 8002b30:	4613      	mov	r3, r2
 8002b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b34:	787b      	ldrb	r3, [r7, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3a:	887a      	ldrh	r2, [r7, #2]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b40:	e003      	b.n	8002b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b42:	887b      	ldrh	r3, [r7, #2]
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	041a      	lsls	r2, r3, #16
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	400b      	ands	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	619a      	str	r2, [r3, #24]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e12b      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fabc 	bl	8001130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f003 f896 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4a81      	ldr	r2, [pc, #516]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d807      	bhi.n	8002c10 <HAL_I2C_Init+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a80      	ldr	r2, [pc, #512]	; (8002e04 <HAL_I2C_Init+0x278>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	e006      	b.n	8002c1e <HAL_I2C_Init+0x92>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a7d      	ldr	r2, [pc, #500]	; (8002e08 <HAL_I2C_Init+0x27c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	bf94      	ite	ls
 8002c18:	2301      	movls	r3, #1
 8002c1a:	2300      	movhi	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0e7      	b.n	8002df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4a78      	ldr	r2, [pc, #480]	; (8002e0c <HAL_I2C_Init+0x280>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	0c9b      	lsrs	r3, r3, #18
 8002c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d802      	bhi.n	8002c60 <HAL_I2C_Init+0xd4>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	e009      	b.n	8002c74 <HAL_I2C_Init+0xe8>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a69      	ldr	r2, [pc, #420]	; (8002e10 <HAL_I2C_Init+0x284>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	099b      	lsrs	r3, r3, #6
 8002c72:	3301      	adds	r3, #1
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	495c      	ldr	r1, [pc, #368]	; (8002e00 <HAL_I2C_Init+0x274>)
 8002c90:	428b      	cmp	r3, r1
 8002c92:	d819      	bhi.n	8002cc8 <HAL_I2C_Init+0x13c>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e59      	subs	r1, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca2:	1c59      	adds	r1, r3, #1
 8002ca4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ca8:	400b      	ands	r3, r1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_I2C_Init+0x138>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	e051      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x168>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x18e>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x196>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1bc>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1dc>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7fe fb01 	bl	8001434 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80d9 	bne.w	8002ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2319      	movs	r3, #25
 8002e48:	2201      	movs	r2, #1
 8002e4a:	496d      	ldr	r1, [pc, #436]	; (8003000 <HAL_I2C_Mem_Write+0x1ec>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f002 f90d 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x56>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0c5      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a4d      	ldr	r2, [pc, #308]	; (8003004 <HAL_I2C_Mem_Write+0x1f0>)
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed2:	88f8      	ldrh	r0, [r7, #6]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f001 fe9c 	bl	8004c20 <I2C_RequestMemoryWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d052      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e081      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f002 f98e 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_I2C_Mem_Write+0x180>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1aa      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f002 f97a 	bl	800529a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e016      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000

08003008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	460b      	mov	r3, r1
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7fe fa07 	bl	8001434 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 8208 	bne.w	8003446 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	497b      	ldr	r1, [pc, #492]	; (800322c <HAL_I2C_Mem_Read+0x224>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f002 f813 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	e1fb      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x56>
 800305a:	2302      	movs	r3, #2
 800305c:	e1f4      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d007      	beq.n	8003084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2222      	movs	r2, #34	; 0x22
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	; 0x40
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a5b      	ldr	r2, [pc, #364]	; (8003230 <HAL_I2C_Mem_Read+0x228>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c6:	88f8      	ldrh	r0, [r7, #6]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4603      	mov	r3, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f001 fe38 	bl	8004d4c <I2C_RequestMemoryRead>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1b0      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e184      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11b      	bne.n	8003156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e164      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11b      	bne.n	8003196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	e144      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031ac:	e138      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f200 80f1 	bhi.w	800339a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d123      	bne.n	8003208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f002 f8db 	bl	8005380 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e139      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003206:	e10b      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b02      	cmp	r3, #2
 800320e:	d14e      	bne.n	80032ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	2200      	movs	r2, #0
 8003218:	4906      	ldr	r1, [pc, #24]	; (8003234 <HAL_I2C_Mem_Read+0x22c>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f001 ff26 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e10e      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
 800322a:	bf00      	nop
 800322c:	00100002 	.word	0x00100002
 8003230:	ffff0000 	.word	0xffff0000
 8003234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ac:	e0b8      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	2200      	movs	r2, #0
 80032b6:	4966      	ldr	r1, [pc, #408]	; (8003450 <HAL_I2C_Mem_Read+0x448>)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f001 fed7 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0bf      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2200      	movs	r2, #0
 8003312:	494f      	ldr	r1, [pc, #316]	; (8003450 <HAL_I2C_Mem_Read+0x448>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f001 fea9 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e091      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003398:	e042      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f001 ffee 	bl	8005380 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e04c      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d118      	bne.n	8003420 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f aec2 	bne.w	80031ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3728      	adds	r7, #40	; 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010004 	.word	0x00010004

08003454 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003474:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800347e:	7bfb      	ldrb	r3, [r7, #15]
 8003480:	2b10      	cmp	r3, #16
 8003482:	d003      	beq.n	800348c <HAL_I2C_EV_IRQHandler+0x38>
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	f040 80c1 	bne.w	800360e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034ac:	d003      	beq.n	80034b6 <HAL_I2C_EV_IRQHandler+0x62>
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_EV_IRQHandler+0x66>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_I2C_EV_IRQHandler+0x68>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	f000 8132 	beq.w	8003726 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x92>
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	0a5b      	lsrs	r3, r3, #9
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f001 ffd6 	bl	800548a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fd83 	bl	8003fea <I2C_Master_SB>
 80034e4:	e092      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	08db      	lsrs	r3, r3, #3
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_I2C_EV_IRQHandler+0xb2>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	0a5b      	lsrs	r3, r3, #9
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fdf9 	bl	80040f6 <I2C_Master_ADD10>
 8003504:	e082      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_I2C_EV_IRQHandler+0xd2>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	0a5b      	lsrs	r3, r3, #9
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fe13 	bl	800414a <I2C_Master_ADDR>
 8003524:	e072      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d03b      	beq.n	80035aa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003540:	f000 80f3 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	09db      	lsrs	r3, r3, #7
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00f      	beq.n	8003570 <HAL_I2C_EV_IRQHandler+0x11c>
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	0a9b      	lsrs	r3, r3, #10
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_I2C_EV_IRQHandler+0x11c>
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d103      	bne.n	8003570 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9f3 	bl	8003954 <I2C_MasterTransmit_TXE>
 800356e:	e04d      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80d6 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	0a5b      	lsrs	r3, r3, #9
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80cf 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800358c:	7bbb      	ldrb	r3, [r7, #14]
 800358e:	2b21      	cmp	r3, #33	; 0x21
 8003590:	d103      	bne.n	800359a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa7a 	bl	8003a8c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003598:	e0c7      	b.n	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	f040 80c4 	bne.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fae8 	bl	8003b78 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a8:	e0bf      	b.n	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b8:	f000 80b7 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	099b      	lsrs	r3, r3, #6
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00f      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x194>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_I2C_EV_IRQHandler+0x194>
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	089b      	lsrs	r3, r3, #2
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fb5d 	bl	8003ca0 <I2C_MasterReceive_RXNE>
 80035e6:	e011      	b.n	800360c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 809a 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	0a5b      	lsrs	r3, r3, #9
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8093 	beq.w	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fc06 	bl	8003e16 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800360a:	e08e      	b.n	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
 800360c:	e08d      	b.n	800372a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e007      	b.n	8003630 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	085b      	lsrs	r3, r3, #1
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x20e>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 ffc4 	bl	80045e8 <I2C_Slave_ADDR>
 8003660:	e066      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0x22e>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	0a5b      	lsrs	r3, r3, #9
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fffe 	bl	800467c <I2C_Slave_STOPF>
 8003680:	e056      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003682:	7bbb      	ldrb	r3, [r7, #14]
 8003684:	2b21      	cmp	r3, #33	; 0x21
 8003686:	d002      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x23a>
 8003688:	7bbb      	ldrb	r3, [r7, #14]
 800368a:	2b29      	cmp	r3, #41	; 0x29
 800368c:	d125      	bne.n	80036da <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	09db      	lsrs	r3, r3, #7
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00f      	beq.n	80036ba <HAL_I2C_EV_IRQHandler+0x266>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	0a9b      	lsrs	r3, r3, #10
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <HAL_I2C_EV_IRQHandler+0x266>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 feda 	bl	800446c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036b8:	e039      	b.n	800372e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d033      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0x2da>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	0a5b      	lsrs	r3, r3, #9
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d02d      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 ff07 	bl	80044e6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036d8:	e029      	b.n	800372e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00f      	beq.n	8003706 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	0a9b      	lsrs	r3, r3, #10
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_I2C_EV_IRQHandler+0x2b2>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 ff12 	bl	8004528 <I2C_SlaveReceive_RXNE>
 8003704:	e014      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00e      	beq.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	0a5b      	lsrs	r3, r3, #9
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d008      	beq.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 ff40 	bl	80045a4 <I2C_SlaveReceive_BTF>
 8003724:	e004      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003726:	bf00      	nop
 8003728:	e002      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800372e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08a      	sub	sp, #40	; 0x28
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003758:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00e      	beq.n	8003784 <HAL_I2C_ER_IRQHandler+0x4e>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003782:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	0a5b      	lsrs	r3, r3, #9
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <HAL_I2C_ER_IRQHandler+0x78>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	f043 0302 	orr.w	r3, r3, #2
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80037ac:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	0a9b      	lsrs	r3, r3, #10
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d03f      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x104>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d039      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80037c6:	7efb      	ldrb	r3, [r7, #27]
 80037c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037e0:	7ebb      	ldrb	r3, [r7, #26]
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d112      	bne.n	800380c <HAL_I2C_ER_IRQHandler+0xd6>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10f      	bne.n	800380c <HAL_I2C_ER_IRQHandler+0xd6>
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b21      	cmp	r3, #33	; 0x21
 80037f0:	d008      	beq.n	8003804 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b29      	cmp	r3, #41	; 0x29
 80037f6:	d005      	beq.n	8003804 <HAL_I2C_ER_IRQHandler+0xce>
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	2b28      	cmp	r3, #40	; 0x28
 80037fc:	d106      	bne.n	800380c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b21      	cmp	r3, #33	; 0x21
 8003802:	d103      	bne.n	800380c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f001 f869 	bl	80048dc <I2C_Slave_AF>
 800380a:	e016      	b.n	800383a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003814:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800381e:	7efb      	ldrb	r3, [r7, #27]
 8003820:	2b10      	cmp	r3, #16
 8003822:	d002      	beq.n	800382a <HAL_I2C_ER_IRQHandler+0xf4>
 8003824:	7efb      	ldrb	r3, [r7, #27]
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d107      	bne.n	800383a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003838:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	0adb      	lsrs	r3, r3, #11
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00e      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x12e>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f043 0308 	orr.w	r3, r3, #8
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003862:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f001 f8a0 	bl	80049bc <I2C_ITError>
  }
}
 800387c:	bf00      	nop
 800387e:	3728      	adds	r7, #40	; 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
 80038e0:	4613      	mov	r3, r2
 80038e2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003962:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800396a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003976:	2b00      	cmp	r3, #0
 8003978:	d150      	bne.n	8003a1c <I2C_MasterTransmit_TXE+0xc8>
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b21      	cmp	r3, #33	; 0x21
 800397e:	d14d      	bne.n	8003a1c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b08      	cmp	r3, #8
 8003984:	d01d      	beq.n	80039c2 <I2C_MasterTransmit_TXE+0x6e>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b20      	cmp	r3, #32
 800398a:	d01a      	beq.n	80039c2 <I2C_MasterTransmit_TXE+0x6e>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003992:	d016      	beq.n	80039c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2211      	movs	r2, #17
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ff62 	bl	8003884 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039c0:	e060      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d107      	bne.n	8003a0c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff7d 	bl	8003904 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a0a:	e03b      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff35 	bl	8003884 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a1a:	e033      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b21      	cmp	r3, #33	; 0x21
 8003a20:	d005      	beq.n	8003a2e <I2C_MasterTransmit_TXE+0xda>
 8003a22:	7bbb      	ldrb	r3, [r7, #14]
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d12d      	bne.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2b22      	cmp	r3, #34	; 0x22
 8003a2c:	d12a      	bne.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d108      	bne.n	8003a4a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a48:	e01c      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d103      	bne.n	8003a5e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f88e 	bl	8003b78 <I2C_MemoryTransmit_TXE_BTF>
}
 8003a5c:	e012      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a82:	e7ff      	b.n	8003a84 <I2C_MasterTransmit_TXE+0x130>
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b21      	cmp	r3, #33	; 0x21
 8003aa4:	d164      	bne.n	8003b70 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d012      	beq.n	8003ad6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ad4:	e04c      	b.n	8003b70 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d01d      	beq.n	8003b18 <I2C_MasterTransmit_BTF+0x8c>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d01a      	beq.n	8003b18 <I2C_MasterTransmit_BTF+0x8c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ae8:	d016      	beq.n	8003b18 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2211      	movs	r2, #17
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff feb7 	bl	8003884 <HAL_I2C_MasterTxCpltCallback>
}
 8003b16:	e02b      	b.n	8003b70 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b26:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b36:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d107      	bne.n	8003b62 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fed2 	bl	8003904 <HAL_I2C_MemTxCpltCallback>
}
 8003b60:	e006      	b.n	8003b70 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fe8a 	bl	8003884 <HAL_I2C_MasterTxCpltCallback>
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11d      	bne.n	8003bcc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10b      	bne.n	8003bb0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba8:	1c9a      	adds	r2, r3, #2
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003bae:	e073      	b.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	121b      	asrs	r3, r3, #8
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bca:	e065      	b.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10b      	bne.n	8003bec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bea:	e055      	b.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d151      	bne.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b22      	cmp	r3, #34	; 0x22
 8003bf8:	d10d      	bne.n	8003c16 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c08:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c14:	e040      	b.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	2b21      	cmp	r3, #33	; 0x21
 8003c24:	d112      	bne.n	8003c4c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c4a:	e025      	b.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d120      	bne.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b21      	cmp	r3, #33	; 0x21
 8003c5a:	d11d      	bne.n	8003c98 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c6a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fe36 	bl	8003904 <HAL_I2C_MemTxCpltCallback>
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b22      	cmp	r3, #34	; 0x22
 8003cb2:	f040 80ac 	bne.w	8003e0e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d921      	bls.n	8003d08 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	f040 808c 	bne.w	8003e0e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d04:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003d06:	e082      	b.n	8003e0e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d075      	beq.n	8003dfc <I2C_MasterReceive_RXNE+0x15c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d002      	beq.n	8003d1c <I2C_MasterReceive_RXNE+0x7c>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d16f      	bne.n	8003dfc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f001 fafd 	bl	800531c <I2C_WaitOnSTOPRequestThroughIT>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d142      	bne.n	8003dae <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d36:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d10a      	bne.n	8003d98 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fdc1 	bl	8003918 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d96:	e03a      	b.n	8003e0e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2212      	movs	r2, #18
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fd76 	bl	8003898 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dac:	e02f      	b.n	8003e0e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dbc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff fd99 	bl	800392c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dfa:	e008      	b.n	8003e0e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0a:	605a      	str	r2, [r3, #4]
}
 8003e0c:	e7ff      	b.n	8003e0e <I2C_MasterReceive_RXNE+0x16e>
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d11b      	bne.n	8003e66 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003e64:	e0bd      	b.n	8003fe2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d129      	bne.n	8003ec4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d00a      	beq.n	8003e9c <I2C_MasterReceive_BTF+0x86>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d007      	beq.n	8003e9c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ec2:	e08e      	b.n	8003fe2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d176      	bne.n	8003fbc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d002      	beq.n	8003eda <I2C_MasterReceive_BTF+0xc4>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d108      	bne.n	8003eec <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	e019      	b.n	8003f20 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d002      	beq.n	8003ef8 <I2C_MasterReceive_BTF+0xe2>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d108      	bne.n	8003f0a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e00a      	b.n	8003f20 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d007      	beq.n	8003f20 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f7a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b40      	cmp	r3, #64	; 0x40
 8003f8e:	d10a      	bne.n	8003fa6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fcba 	bl	8003918 <HAL_I2C_MemRxCpltCallback>
}
 8003fa4:	e01d      	b.n	8003fe2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2212      	movs	r2, #18
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7ff fc6f 	bl	8003898 <HAL_I2C_MasterRxCpltCallback>
}
 8003fba:	e012      	b.n	8003fe2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d117      	bne.n	800402e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004016:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004018:	e067      	b.n	80040ea <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b2da      	uxtb	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]
}
 800402c:	e05d      	b.n	80040ea <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004036:	d133      	bne.n	80040a0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b21      	cmp	r3, #33	; 0x21
 8004042:	d109      	bne.n	8004058 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	b2db      	uxtb	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e008      	b.n	800406a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <I2C_Master_SB+0x92>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	d108      	bne.n	800408e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d032      	beq.n	80040ea <I2C_Master_SB+0x100>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d02d      	beq.n	80040ea <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409c:	605a      	str	r2, [r3, #4]
}
 800409e:	e024      	b.n	80040ea <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10e      	bne.n	80040c6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	11db      	asrs	r3, r3, #7
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f003 0306 	and.w	r3, r3, #6
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f063 030f 	orn	r3, r3, #15
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]
}
 80040c4:	e011      	b.n	80040ea <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d10d      	bne.n	80040ea <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	11db      	asrs	r3, r3, #7
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	f003 0306 	and.w	r3, r3, #6
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	f063 030e 	orn	r3, r3, #14
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	b2da      	uxtb	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	2b00      	cmp	r3, #0
 8004110:	d004      	beq.n	800411c <I2C_Master_ADD10+0x26>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d108      	bne.n	800412e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <I2C_Master_ADD10+0x48>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d007      	beq.n	800413e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800413c:	605a      	str	r2, [r3, #4]
  }
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800414a:	b480      	push	{r7}
 800414c:	b091      	sub	sp, #68	; 0x44
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004158:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b22      	cmp	r3, #34	; 0x22
 8004172:	f040 8169 	bne.w	8004448 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <I2C_Master_ADDR+0x54>
 800417e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d10b      	bne.n	800419e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	633b      	str	r3, [r7, #48]	; 0x30
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	e160      	b.n	8004460 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d11d      	bne.n	80041e2 <I2C_Master_ADDR+0x98>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041ae:	d118      	bne.n	80041e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	651a      	str	r2, [r3, #80]	; 0x50
 80041e0:	e13e      	b.n	8004460 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d113      	bne.n	8004214 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ec:	2300      	movs	r3, #0
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e115      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	f040 808a 	bne.w	8004334 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004226:	d137      	bne.n	8004298 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004236:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004246:	d113      	bne.n	8004270 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004256:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	e0e7      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004270:	2300      	movs	r3, #0
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	623b      	str	r3, [r7, #32]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e0d3      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b08      	cmp	r3, #8
 800429c:	d02e      	beq.n	80042fc <I2C_Master_ADDR+0x1b2>
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d02b      	beq.n	80042fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	2b12      	cmp	r3, #18
 80042a8:	d102      	bne.n	80042b0 <I2C_Master_ADDR+0x166>
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d125      	bne.n	80042fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d00e      	beq.n	80042d4 <I2C_Master_ADDR+0x18a>
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d00b      	beq.n	80042d4 <I2C_Master_ADDR+0x18a>
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d008      	beq.n	80042d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e007      	b.n	80042e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e4:	2300      	movs	r3, #0
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	e0a1      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430c:	2300      	movs	r3, #0
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e085      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d14d      	bne.n	80043da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b04      	cmp	r3, #4
 8004342:	d016      	beq.n	8004372 <I2C_Master_ADDR+0x228>
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b02      	cmp	r3, #2
 8004348:	d013      	beq.n	8004372 <I2C_Master_ADDR+0x228>
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b10      	cmp	r3, #16
 800434e:	d010      	beq.n	8004372 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e007      	b.n	8004382 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004380:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004390:	d117      	bne.n	80043c2 <I2C_Master_ADDR+0x278>
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004398:	d00b      	beq.n	80043b2 <I2C_Master_ADDR+0x268>
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b01      	cmp	r3, #1
 800439e:	d008      	beq.n	80043b2 <I2C_Master_ADDR+0x268>
 80043a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d005      	beq.n	80043b2 <I2C_Master_ADDR+0x268>
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d002      	beq.n	80043b2 <I2C_Master_ADDR+0x268>
 80043ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d107      	bne.n	80043c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	e032      	b.n	8004440 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f8:	d117      	bne.n	800442a <I2C_Master_ADDR+0x2e0>
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004400:	d00b      	beq.n	800441a <I2C_Master_ADDR+0x2d0>
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004404:	2b01      	cmp	r3, #1
 8004406:	d008      	beq.n	800441a <I2C_Master_ADDR+0x2d0>
 8004408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440a:	2b08      	cmp	r3, #8
 800440c:	d005      	beq.n	800441a <I2C_Master_ADDR+0x2d0>
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b10      	cmp	r3, #16
 8004412:	d002      	beq.n	800441a <I2C_Master_ADDR+0x2d0>
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	2b20      	cmp	r3, #32
 8004418:	d107      	bne.n	800442a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004428:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004446:	e00b      	b.n	8004460 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
}
 800445e:	e7ff      	b.n	8004460 <I2C_Master_ADDR+0x316>
 8004460:	bf00      	nop
 8004462:	3744      	adds	r7, #68	; 0x44
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d02b      	beq.n	80044de <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d114      	bne.n	80044de <I2C_SlaveTransmit_TXE+0x72>
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	2b29      	cmp	r3, #41	; 0x29
 80044b8:	d111      	bne.n	80044de <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2221      	movs	r2, #33	; 0x21
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2228      	movs	r2, #40	; 0x28
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff f9e7 	bl	80038ac <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d011      	beq.n	800451c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02c      	beq.n	800459c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d114      	bne.n	800459c <I2C_SlaveReceive_RXNE+0x74>
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b2a      	cmp	r3, #42	; 0x2a
 8004576:	d111      	bne.n	800459c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2222      	movs	r2, #34	; 0x22
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2228      	movs	r2, #40	; 0x28
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f992 	bl	80038c0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d012      	beq.n	80045dc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004602:	2b28      	cmp	r3, #40	; 0x28
 8004604:	d127      	bne.n	8004656 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004614:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	09db      	lsrs	r3, r3, #7
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d103      	bne.n	800463a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	81bb      	strh	r3, [r7, #12]
 8004638:	e002      	b.n	8004640 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004648:	89ba      	ldrh	r2, [r7, #12]
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff f940 	bl	80038d4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004654:	e00e      	b.n	8004674 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800469a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800469c:	2300      	movs	r3, #0
 800469e:	60bb      	str	r3, [r7, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d8:	d172      	bne.n	80047c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b22      	cmp	r3, #34	; 0x22
 80046de:	d002      	beq.n	80046e6 <I2C_Slave_STOPF+0x6a>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d135      	bne.n	8004752 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f043 0204 	orr.w	r2, r3, #4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4618      	mov	r0, r3
 8004720:	f7fd ff8e 	bl	8002640 <HAL_DMA_GetState>
 8004724:	4603      	mov	r3, r0
 8004726:	2b01      	cmp	r3, #1
 8004728:	d049      	beq.n	80047be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <I2C_Slave_STOPF+0x258>)
 8004730:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	4618      	mov	r0, r3
 8004738:	f7fd fdd6 	bl	80022e8 <HAL_DMA_Abort_IT>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03d      	beq.n	80047be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800474c:	4610      	mov	r0, r2
 800474e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004750:	e035      	b.n	80047be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f043 0204 	orr.w	r2, r3, #4
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004784:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd ff58 	bl	8002640 <HAL_DMA_GetState>
 8004790:	4603      	mov	r3, r0
 8004792:	2b01      	cmp	r3, #1
 8004794:	d014      	beq.n	80047c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <I2C_Slave_STOPF+0x258>)
 800479c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fda0 	bl	80022e8 <HAL_DMA_Abort_IT>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
 80047bc:	e000      	b.n	80047c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03e      	beq.n	8004848 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d112      	bne.n	80047fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	3b01      	subs	r3, #1
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d112      	bne.n	8004832 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	f043 0204 	orr.w	r2, r3, #4
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8b3 	bl	80049bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004856:	e039      	b.n	80048cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	2b2a      	cmp	r3, #42	; 0x2a
 800485c:	d109      	bne.n	8004872 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2228      	movs	r2, #40	; 0x28
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff f827 	bl	80038c0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b28      	cmp	r3, #40	; 0x28
 800487c:	d111      	bne.n	80048a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <I2C_Slave_STOPF+0x25c>)
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7ff f828 	bl	80038f0 <HAL_I2C_ListenCpltCallback>
}
 80048a0:	e014      	b.n	80048cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	2b22      	cmp	r3, #34	; 0x22
 80048a8:	d002      	beq.n	80048b0 <I2C_Slave_STOPF+0x234>
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b22      	cmp	r3, #34	; 0x22
 80048ae:	d10d      	bne.n	80048cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fffa 	bl	80038c0 <HAL_I2C_SlaveRxCpltCallback>
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08004f1d 	.word	0x08004f1d
 80048d8:	ffff0000 	.word	0xffff0000

080048dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d002      	beq.n	80048fe <I2C_Slave_AF+0x22>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d129      	bne.n	8004952 <I2C_Slave_AF+0x76>
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b28      	cmp	r3, #40	; 0x28
 8004902:	d126      	bne.n	8004952 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <I2C_Slave_AF+0xdc>)
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004918:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004922:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004932:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fe ffd0 	bl	80038f0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004950:	e02e      	b.n	80049b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b21      	cmp	r3, #33	; 0x21
 8004956:	d126      	bne.n	80049a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <I2C_Slave_AF+0xdc>)
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004982:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800498c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe ff84 	bl	80038ac <HAL_I2C_SlaveTxCpltCallback>
}
 80049a4:	e004      	b.n	80049b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ae:	615a      	str	r2, [r3, #20]
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	ffff0000 	.word	0xffff0000

080049bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80049d4:	7bbb      	ldrb	r3, [r7, #14]
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d002      	beq.n	80049e0 <I2C_ITError+0x24>
 80049da:	7bbb      	ldrb	r3, [r7, #14]
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d10a      	bne.n	80049f6 <I2C_ITError+0x3a>
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b22      	cmp	r3, #34	; 0x22
 80049e4:	d107      	bne.n	80049f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049fc:	2b28      	cmp	r3, #40	; 0x28
 80049fe:	d107      	bne.n	8004a10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2228      	movs	r2, #40	; 0x28
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a0e:	e015      	b.n	8004a3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1e:	d00a      	beq.n	8004a36 <I2C_ITError+0x7a>
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b60      	cmp	r3, #96	; 0x60
 8004a24:	d007      	beq.n	8004a36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d162      	bne.n	8004b12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d020      	beq.n	8004aac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	4a6a      	ldr	r2, [pc, #424]	; (8004c18 <I2C_ITError+0x25c>)
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fc36 	bl	80022e8 <HAL_DMA_Abort_IT>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8089 	beq.w	8004b96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0201 	bic.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4798      	blx	r3
 8004aaa:	e074      	b.n	8004b96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	4a59      	ldr	r2, [pc, #356]	; (8004c18 <I2C_ITError+0x25c>)
 8004ab2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fc15 	bl	80022e8 <HAL_DMA_Abort_IT>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d068      	beq.n	8004b96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d10b      	bne.n	8004aea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4798      	blx	r3
 8004b10:	e041      	b.n	8004b96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b60      	cmp	r3, #96	; 0x60
 8004b1c:	d125      	bne.n	8004b6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d10b      	bne.n	8004b52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0201 	bic.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fe feec 	bl	8003940 <HAL_I2C_AbortCpltCallback>
 8004b68:	e015      	b.n	8004b96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d10b      	bne.n	8004b90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fe fecb 	bl	800392c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10e      	bne.n	8004bc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d113      	bne.n	8004c10 <I2C_ITError+0x254>
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b28      	cmp	r3, #40	; 0x28
 8004bec:	d110      	bne.n	8004c10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <I2C_ITError+0x260>)
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fe fe70 	bl	80038f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c10:	bf00      	nop
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08004f1d 	.word	0x08004f1d
 8004c1c:	ffff0000 	.word	0xffff0000

08004c20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4603      	mov	r3, r0
 8004c30:	817b      	strh	r3, [r7, #10]
 8004c32:	460b      	mov	r3, r1
 8004c34:	813b      	strh	r3, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fa08 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d103      	bne.n	8004c7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e05f      	b.n	8004d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c7e:	897b      	ldrh	r3, [r7, #10]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	492d      	ldr	r1, [pc, #180]	; (8004d48 <I2C_RequestMemoryWrite+0x128>)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa40 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e04c      	b.n	8004d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 faaa 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e02b      	b.n	8004d3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ce6:	88fb      	ldrh	r3, [r7, #6]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	611a      	str	r2, [r3, #16]
 8004cf6:	e021      	b.n	8004d3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	0a1b      	lsrs	r3, r3, #8
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fa84 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00d      	beq.n	8004d32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d107      	bne.n	8004d2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e005      	b.n	8004d3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d32:	893b      	ldrh	r3, [r7, #8]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	00010002 	.word	0x00010002

08004d4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	813b      	strh	r3, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f96a 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dac:	d103      	bne.n	8004db6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e0aa      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dba:	897b      	ldrh	r3, [r7, #10]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	4952      	ldr	r1, [pc, #328]	; (8004f18 <I2C_RequestMemoryRead+0x1cc>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f9a2 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e097      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	6a39      	ldr	r1, [r7, #32]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fa0c 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d107      	bne.n	8004e1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e076      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d105      	bne.n	8004e34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e28:	893b      	ldrh	r3, [r7, #8]
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	611a      	str	r2, [r3, #16]
 8004e32:	e021      	b.n	8004e78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e34:	893b      	ldrh	r3, [r7, #8]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f9e6 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e050      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e6e:	893b      	ldrh	r3, [r7, #8]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e7a:	6a39      	ldr	r1, [r7, #32]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f000 f9cb 	bl	8005218 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00d      	beq.n	8004ea4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d107      	bne.n	8004ea0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e035      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f8d3 	bl	800506c <I2C_WaitOnFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eda:	d103      	bne.n	8004ee4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e013      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ee8:	897b      	ldrh	r3, [r7, #10]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f043 0301 	orr.w	r3, r3, #1
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	4906      	ldr	r1, [pc, #24]	; (8004f18 <I2C_RequestMemoryRead+0x1cc>)
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f90b 	bl	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e000      	b.n	8004f10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	00010002 	.word	0x00010002

08004f1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f36:	4b4b      	ldr	r3, [pc, #300]	; (8005064 <I2C_DMAAbort+0x148>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	4a4a      	ldr	r2, [pc, #296]	; (8005068 <I2C_DMAAbort+0x14c>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	0a1a      	lsrs	r2, r3, #8
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	00da      	lsls	r2, r3, #3
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f62:	e00a      	b.n	8004f7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d0ea      	beq.n	8004f50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	2200      	movs	r2, #0
 8004f88:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	2200      	movs	r2, #0
 8004f98:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	2200      	movs	r2, #0
 8004fce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b60      	cmp	r3, #96	; 0x60
 8004fea:	d10e      	bne.n	800500a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7fe fc9c 	bl	8003940 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005008:	e027      	b.n	800505a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800500a:	7cfb      	ldrb	r3, [r7, #19]
 800500c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005010:	2b28      	cmp	r3, #40	; 0x28
 8005012:	d117      	bne.n	8005044 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f042 0201 	orr.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005032:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2228      	movs	r2, #40	; 0x28
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005042:	e007      	b.n	8005054 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005054:	6978      	ldr	r0, [r7, #20]
 8005056:	f7fe fc69 	bl	800392c <HAL_I2C_ErrorCallback>
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000000 	.word	0x20000000
 8005068:	14f8b589 	.word	0x14f8b589

0800506c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507c:	e025      	b.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d021      	beq.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fc f9d5 	bl	8001434 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d116      	bne.n	80050ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e023      	b.n	8005112 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10d      	bne.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	43da      	mvns	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	e00c      	b.n	800510a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	43da      	mvns	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	bf0c      	ite	eq
 8005102:	2301      	moveq	r3, #1
 8005104:	2300      	movne	r3, #0
 8005106:	b2db      	uxtb	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d0b6      	beq.n	800507e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b084      	sub	sp, #16
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005128:	e051      	b.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005138:	d123      	bne.n	8005182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005148:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005152:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2220      	movs	r2, #32
 800515e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e046      	b.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fc f953 	bl	8001434 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e020      	b.n	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10c      	bne.n	80051f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	43da      	mvns	r2, r3
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4013      	ands	r3, r2
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e00b      	b.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	43da      	mvns	r2, r3
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d18d      	bne.n	800512a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005224:	e02d      	b.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f900 	bl	800542c <I2C_IsAcknowledgeFailed>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e02d      	b.n	8005292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523c:	d021      	beq.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523e:	f7fc f8f9 	bl	8001434 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d116      	bne.n	8005282 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e007      	b.n	8005292 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d1ca      	bne.n	8005226 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a6:	e02d      	b.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f8bf 	bl	800542c <I2C_IsAcknowledgeFailed>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e02d      	b.n	8005314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052be:	d021      	beq.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c0:	f7fc f8b8 	bl	8001434 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d302      	bcc.n	80052d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d116      	bne.n	8005304 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f043 0220 	orr.w	r2, r3, #32
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e007      	b.n	8005314 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b04      	cmp	r3, #4
 8005310:	d1ca      	bne.n	80052a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005328:	4b13      	ldr	r3, [pc, #76]	; (8005378 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	4a13      	ldr	r2, [pc, #76]	; (800537c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	0a1a      	lsrs	r2, r3, #8
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3b01      	subs	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d107      	bne.n	800535a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f043 0220 	orr.w	r2, r3, #32
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e008      	b.n	800536c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005368:	d0e9      	beq.n	800533e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	20000000 	.word	0x20000000
 800537c:	14f8b589 	.word	0x14f8b589

08005380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800538c:	e042      	b.n	8005414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d119      	bne.n	80053d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0210 	mvn.w	r2, #16
 80053a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e029      	b.n	8005424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fc f830 	bl	8001434 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d116      	bne.n	8005414 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b40      	cmp	r3, #64	; 0x40
 8005420:	d1b5      	bne.n	800538e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d11b      	bne.n	800547c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800544c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f043 0204 	orr.w	r2, r3, #4
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800549a:	d103      	bne.n	80054a4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80054a2:	e007      	b.n	80054b4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054ac:	d102      	bne.n	80054b4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2208      	movs	r2, #8
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e267      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d075      	beq.n	80055ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054de:	4b88      	ldr	r3, [pc, #544]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 030c 	and.w	r3, r3, #12
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d00c      	beq.n	8005504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ea:	4b85      	ldr	r3, [pc, #532]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d112      	bne.n	800551c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054f6:	4b82      	ldr	r3, [pc, #520]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005502:	d10b      	bne.n	800551c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005504:	4b7e      	ldr	r3, [pc, #504]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d05b      	beq.n	80055c8 <HAL_RCC_OscConfig+0x108>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d157      	bne.n	80055c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e242      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005524:	d106      	bne.n	8005534 <HAL_RCC_OscConfig+0x74>
 8005526:	4b76      	ldr	r3, [pc, #472]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a75      	ldr	r2, [pc, #468]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	e01d      	b.n	8005570 <HAL_RCC_OscConfig+0xb0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800553c:	d10c      	bne.n	8005558 <HAL_RCC_OscConfig+0x98>
 800553e:	4b70      	ldr	r3, [pc, #448]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a6f      	ldr	r2, [pc, #444]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	4b6d      	ldr	r3, [pc, #436]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a6c      	ldr	r2, [pc, #432]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e00b      	b.n	8005570 <HAL_RCC_OscConfig+0xb0>
 8005558:	4b69      	ldr	r3, [pc, #420]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a68      	ldr	r2, [pc, #416]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800555e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	4b66      	ldr	r3, [pc, #408]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a65      	ldr	r2, [pc, #404]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800556a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800556e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d013      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005578:	f7fb ff5c 	bl	8001434 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005580:	f7fb ff58 	bl	8001434 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e207      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005592:	4b5b      	ldr	r3, [pc, #364]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0xc0>
 800559e:	e014      	b.n	80055ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a0:	f7fb ff48 	bl	8001434 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055a8:	f7fb ff44 	bl	8001434 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e1f3      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ba:	4b51      	ldr	r3, [pc, #324]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1f0      	bne.n	80055a8 <HAL_RCC_OscConfig+0xe8>
 80055c6:	e000      	b.n	80055ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d063      	beq.n	800569e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e2:	4b47      	ldr	r3, [pc, #284]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d11c      	bne.n	8005628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ee:	4b44      	ldr	r3, [pc, #272]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fa:	4b41      	ldr	r3, [pc, #260]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_RCC_OscConfig+0x152>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d001      	beq.n	8005612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e1c7      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005612:	4b3b      	ldr	r3, [pc, #236]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4937      	ldr	r1, [pc, #220]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005622:	4313      	orrs	r3, r2
 8005624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005626:	e03a      	b.n	800569e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005630:	4b34      	ldr	r3, [pc, #208]	; (8005704 <HAL_RCC_OscConfig+0x244>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005636:	f7fb fefd 	bl	8001434 <HAL_GetTick>
 800563a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563c:	e008      	b.n	8005650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800563e:	f7fb fef9 	bl	8001434 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e1a8      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005650:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800565c:	4b28      	ldr	r3, [pc, #160]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4925      	ldr	r1, [pc, #148]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
 8005670:	e015      	b.n	800569e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005672:	4b24      	ldr	r3, [pc, #144]	; (8005704 <HAL_RCC_OscConfig+0x244>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005678:	f7fb fedc 	bl	8001434 <HAL_GetTick>
 800567c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005680:	f7fb fed8 	bl	8001434 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e187      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005692:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d036      	beq.n	8005718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_RCC_OscConfig+0x248>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b8:	f7fb febc 	bl	8001434 <HAL_GetTick>
 80056bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056be:	e008      	b.n	80056d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c0:	f7fb feb8 	bl	8001434 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e167      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d2:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_RCC_OscConfig+0x240>)
 80056d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0f0      	beq.n	80056c0 <HAL_RCC_OscConfig+0x200>
 80056de:	e01b      	b.n	8005718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e0:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_OscConfig+0x248>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e6:	f7fb fea5 	bl	8001434 <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056ec:	e00e      	b.n	800570c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ee:	f7fb fea1 	bl	8001434 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d907      	bls.n	800570c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e150      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
 8005700:	40023800 	.word	0x40023800
 8005704:	42470000 	.word	0x42470000
 8005708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570c:	4b88      	ldr	r3, [pc, #544]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ea      	bne.n	80056ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8097 	beq.w	8005854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005726:	2300      	movs	r3, #0
 8005728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572a:	4b81      	ldr	r3, [pc, #516]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	4b7d      	ldr	r3, [pc, #500]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	4a7c      	ldr	r2, [pc, #496]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6413      	str	r3, [r2, #64]	; 0x40
 8005746:	4b7a      	ldr	r3, [pc, #488]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005756:	4b77      	ldr	r3, [pc, #476]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d118      	bne.n	8005794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005762:	4b74      	ldr	r3, [pc, #464]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a73      	ldr	r2, [pc, #460]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800576e:	f7fb fe61 	bl	8001434 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005776:	f7fb fe5d 	bl	8001434 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e10c      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005788:	4b6a      	ldr	r3, [pc, #424]	; (8005934 <HAL_RCC_OscConfig+0x474>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f0      	beq.n	8005776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x2ea>
 800579c:	4b64      	ldr	r3, [pc, #400]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6713      	str	r3, [r2, #112]	; 0x70
 80057a8:	e01c      	b.n	80057e4 <HAL_RCC_OscConfig+0x324>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d10c      	bne.n	80057cc <HAL_RCC_OscConfig+0x30c>
 80057b2:	4b5f      	ldr	r3, [pc, #380]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b6:	4a5e      	ldr	r2, [pc, #376]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	6713      	str	r3, [r2, #112]	; 0x70
 80057be:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	4a5b      	ldr	r2, [pc, #364]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ca:	e00b      	b.n	80057e4 <HAL_RCC_OscConfig+0x324>
 80057cc:	4b58      	ldr	r3, [pc, #352]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d0:	4a57      	ldr	r2, [pc, #348]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	6713      	str	r3, [r2, #112]	; 0x70
 80057d8:	4b55      	ldr	r3, [pc, #340]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	4a54      	ldr	r2, [pc, #336]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80057de:	f023 0304 	bic.w	r3, r3, #4
 80057e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fb fe22 	bl	8001434 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f2:	e00a      	b.n	800580a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fb fe1e 	bl	8001434 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e0cb      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580a:	4b49      	ldr	r3, [pc, #292]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0ee      	beq.n	80057f4 <HAL_RCC_OscConfig+0x334>
 8005816:	e014      	b.n	8005842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005818:	f7fb fe0c 	bl	8001434 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800581e:	e00a      	b.n	8005836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005820:	f7fb fe08 	bl	8001434 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	; 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0b5      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005836:	4b3e      	ldr	r3, [pc, #248]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ee      	bne.n	8005820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d105      	bne.n	8005854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005848:	4b39      	ldr	r3, [pc, #228]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4a38      	ldr	r2, [pc, #224]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 800584e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80a1 	beq.w	80059a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800585e:	4b34      	ldr	r3, [pc, #208]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 030c 	and.w	r3, r3, #12
 8005866:	2b08      	cmp	r3, #8
 8005868:	d05c      	beq.n	8005924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d141      	bne.n	80058f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7fb fddc 	bl	8001434 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fb fdd8 	bl	8001434 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e087      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005892:	4b27      	ldr	r3, [pc, #156]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69da      	ldr	r2, [r3, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	019b      	lsls	r3, r3, #6
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	3b01      	subs	r3, #1
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	491b      	ldr	r1, [pc, #108]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058c8:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fb fdb1 	bl	8001434 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fb fdad 	bl	8001434 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e05c      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e8:	4b11      	ldr	r3, [pc, #68]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x416>
 80058f4:	e054      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <HAL_RCC_OscConfig+0x478>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fc:	f7fb fd9a 	bl	8001434 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005904:	f7fb fd96 	bl	8001434 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e045      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005916:	4b06      	ldr	r3, [pc, #24]	; (8005930 <HAL_RCC_OscConfig+0x470>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x444>
 8005922:	e03d      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d107      	bne.n	800593c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e038      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
 8005930:	40023800 	.word	0x40023800
 8005934:	40007000 	.word	0x40007000
 8005938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800593c:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCC_OscConfig+0x4ec>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d028      	beq.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d121      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d11a      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800596c:	4013      	ands	r3, r2
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005974:	4293      	cmp	r3, r2
 8005976:	d111      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	3b01      	subs	r3, #1
 8005986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d107      	bne.n	800599c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40023800 	.word	0x40023800

080059b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e0cc      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d90c      	bls.n	80059ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d2:	4b65      	ldr	r3, [pc, #404]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b63      	ldr	r3, [pc, #396]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0b8      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d020      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a04:	4b59      	ldr	r3, [pc, #356]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a58      	ldr	r2, [pc, #352]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a1c:	4b53      	ldr	r3, [pc, #332]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a52      	ldr	r2, [pc, #328]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b50      	ldr	r3, [pc, #320]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	494d      	ldr	r1, [pc, #308]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d044      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d107      	bne.n	8005a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a4e:	4b47      	ldr	r3, [pc, #284]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d119      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e07f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d003      	beq.n	8005a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d107      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e06f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e067      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f023 0203 	bic.w	r2, r3, #3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	4934      	ldr	r1, [pc, #208]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fb fcc8 	bl	8001434 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aa8:	f7fb fcc4 	bl	8001434 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e04f      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abe:	4b2b      	ldr	r3, [pc, #172]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 020c 	and.w	r2, r3, #12
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d1eb      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad0:	4b25      	ldr	r3, [pc, #148]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d20c      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ade:	4b22      	ldr	r3, [pc, #136]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae6:	4b20      	ldr	r3, [pc, #128]	; (8005b68 <HAL_RCC_ClockConfig+0x1b8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d001      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e032      	b.n	8005b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b04:	4b19      	ldr	r3, [pc, #100]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4916      	ldr	r1, [pc, #88]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	490e      	ldr	r1, [pc, #56]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b36:	f000 f821 	bl	8005b7c <HAL_RCC_GetSysClockFreq>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	091b      	lsrs	r3, r3, #4
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	490a      	ldr	r1, [pc, #40]	; (8005b70 <HAL_RCC_ClockConfig+0x1c0>)
 8005b48:	5ccb      	ldrb	r3, [r1, r3]
 8005b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4e:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <HAL_RCC_ClockConfig+0x1c8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fb fc28 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	40023c00 	.word	0x40023c00
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	08005f64 	.word	0x08005f64
 8005b74:	20000000 	.word	0x20000000
 8005b78:	20000004 	.word	0x20000004

08005b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b80:	b090      	sub	sp, #64	; 0x40
 8005b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
 8005b88:	2300      	movs	r3, #0
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b94:	4b59      	ldr	r3, [pc, #356]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 030c 	and.w	r3, r3, #12
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d00d      	beq.n	8005bbc <HAL_RCC_GetSysClockFreq+0x40>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	f200 80a1 	bhi.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d003      	beq.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bae:	e09b      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb0:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005bb4:	e09b      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bb6:	4b53      	ldr	r3, [pc, #332]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bba:	e098      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bbc:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bc6:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d028      	beq.n	8005c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	2200      	movs	r2, #0
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005be4:	2100      	movs	r1, #0
 8005be6:	4b47      	ldr	r3, [pc, #284]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005be8:	fb03 f201 	mul.w	r2, r3, r1
 8005bec:	2300      	movs	r3, #0
 8005bee:	fb00 f303 	mul.w	r3, r0, r3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	4a43      	ldr	r2, [pc, #268]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8005bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c02:	4413      	add	r3, r2
 8005c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c08:	2200      	movs	r2, #0
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	61fa      	str	r2, [r7, #28]
 8005c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c16:	f7fa fadf 	bl	80001d8 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4613      	mov	r3, r2
 8005c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c22:	e053      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	099b      	lsrs	r3, r3, #6
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	617a      	str	r2, [r7, #20]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c36:	f04f 0b00 	mov.w	fp, #0
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	f04f 0000 	mov.w	r0, #0
 8005c42:	f04f 0100 	mov.w	r1, #0
 8005c46:	0159      	lsls	r1, r3, #5
 8005c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c4c:	0150      	lsls	r0, r2, #5
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	ebb2 080a 	subs.w	r8, r2, sl
 8005c56:	eb63 090b 	sbc.w	r9, r3, fp
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8005c72:	eb63 0509 	sbc.w	r5, r3, r9
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	00eb      	lsls	r3, r5, #3
 8005c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c84:	00e2      	lsls	r2, r4, #3
 8005c86:	4614      	mov	r4, r2
 8005c88:	461d      	mov	r5, r3
 8005c8a:	eb14 030a 	adds.w	r3, r4, sl
 8005c8e:	603b      	str	r3, [r7, #0]
 8005c90:	eb45 030b 	adc.w	r3, r5, fp
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	028b      	lsls	r3, r1, #10
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cac:	4621      	mov	r1, r4
 8005cae:	028a      	lsls	r2, r1, #10
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	60fa      	str	r2, [r7, #12]
 8005cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cc0:	f7fa fa8a 	bl	80001d8 <__aeabi_uldivmod>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4613      	mov	r3, r2
 8005cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ce6:	e002      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3740      	adds	r7, #64	; 0x40
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfa:	bf00      	nop
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	017d7840 	.word	0x017d7840

08005d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000000 	.word	0x20000000

08005d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d24:	f7ff fff0 	bl	8005d08 <HAL_RCC_GetHCLKFreq>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	0a9b      	lsrs	r3, r3, #10
 8005d30:	f003 0307 	and.w	r3, r3, #7
 8005d34:	4903      	ldr	r1, [pc, #12]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d36:	5ccb      	ldrb	r3, [r1, r3]
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40023800 	.word	0x40023800
 8005d44:	08005f74 	.word	0x08005f74

08005d48 <calloc>:
 8005d48:	4b02      	ldr	r3, [pc, #8]	; (8005d54 <calloc+0xc>)
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	f000 b834 	b.w	8005dbc <_calloc_r>
 8005d54:	2000000c 	.word	0x2000000c

08005d58 <__errno>:
 8005d58:	4b01      	ldr	r3, [pc, #4]	; (8005d60 <__errno+0x8>)
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000000c 	.word	0x2000000c

08005d64 <__libc_init_array>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	4d0d      	ldr	r5, [pc, #52]	; (8005d9c <__libc_init_array+0x38>)
 8005d68:	4c0d      	ldr	r4, [pc, #52]	; (8005da0 <__libc_init_array+0x3c>)
 8005d6a:	1b64      	subs	r4, r4, r5
 8005d6c:	10a4      	asrs	r4, r4, #2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	42a6      	cmp	r6, r4
 8005d72:	d109      	bne.n	8005d88 <__libc_init_array+0x24>
 8005d74:	4d0b      	ldr	r5, [pc, #44]	; (8005da4 <__libc_init_array+0x40>)
 8005d76:	4c0c      	ldr	r4, [pc, #48]	; (8005da8 <__libc_init_array+0x44>)
 8005d78:	f000 f8e8 	bl	8005f4c <_init>
 8005d7c:	1b64      	subs	r4, r4, r5
 8005d7e:	10a4      	asrs	r4, r4, #2
 8005d80:	2600      	movs	r6, #0
 8005d82:	42a6      	cmp	r6, r4
 8005d84:	d105      	bne.n	8005d92 <__libc_init_array+0x2e>
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d8c:	4798      	blx	r3
 8005d8e:	3601      	adds	r6, #1
 8005d90:	e7ee      	b.n	8005d70 <__libc_init_array+0xc>
 8005d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d96:	4798      	blx	r3
 8005d98:	3601      	adds	r6, #1
 8005d9a:	e7f2      	b.n	8005d82 <__libc_init_array+0x1e>
 8005d9c:	08005f8c 	.word	0x08005f8c
 8005da0:	08005f8c 	.word	0x08005f8c
 8005da4:	08005f8c 	.word	0x08005f8c
 8005da8:	08005f90 	.word	0x08005f90

08005dac <memset>:
 8005dac:	4402      	add	r2, r0
 8005dae:	4603      	mov	r3, r0
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d100      	bne.n	8005db6 <memset+0xa>
 8005db4:	4770      	bx	lr
 8005db6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dba:	e7f9      	b.n	8005db0 <memset+0x4>

08005dbc <_calloc_r>:
 8005dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dbe:	fba1 2402 	umull	r2, r4, r1, r2
 8005dc2:	b94c      	cbnz	r4, 8005dd8 <_calloc_r+0x1c>
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	9201      	str	r2, [sp, #4]
 8005dc8:	f000 f82e 	bl	8005e28 <_malloc_r>
 8005dcc:	9a01      	ldr	r2, [sp, #4]
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b930      	cbnz	r0, 8005de0 <_calloc_r+0x24>
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bd30      	pop	{r4, r5, pc}
 8005dd8:	220c      	movs	r2, #12
 8005dda:	6002      	str	r2, [r0, #0]
 8005ddc:	2500      	movs	r5, #0
 8005dde:	e7f8      	b.n	8005dd2 <_calloc_r+0x16>
 8005de0:	4621      	mov	r1, r4
 8005de2:	f7ff ffe3 	bl	8005dac <memset>
 8005de6:	e7f4      	b.n	8005dd2 <_calloc_r+0x16>

08005de8 <sbrk_aligned>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4e0e      	ldr	r6, [pc, #56]	; (8005e24 <sbrk_aligned+0x3c>)
 8005dec:	460c      	mov	r4, r1
 8005dee:	6831      	ldr	r1, [r6, #0]
 8005df0:	4605      	mov	r5, r0
 8005df2:	b911      	cbnz	r1, 8005dfa <sbrk_aligned+0x12>
 8005df4:	f000 f88c 	bl	8005f10 <_sbrk_r>
 8005df8:	6030      	str	r0, [r6, #0]
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 f887 	bl	8005f10 <_sbrk_r>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d00a      	beq.n	8005e1c <sbrk_aligned+0x34>
 8005e06:	1cc4      	adds	r4, r0, #3
 8005e08:	f024 0403 	bic.w	r4, r4, #3
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	d007      	beq.n	8005e20 <sbrk_aligned+0x38>
 8005e10:	1a21      	subs	r1, r4, r0
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 f87c 	bl	8005f10 <_sbrk_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d101      	bne.n	8005e20 <sbrk_aligned+0x38>
 8005e1c:	f04f 34ff 	mov.w	r4, #4294967295
 8005e20:	4620      	mov	r0, r4
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	20002254 	.word	0x20002254

08005e28 <_malloc_r>:
 8005e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e2c:	1ccd      	adds	r5, r1, #3
 8005e2e:	f025 0503 	bic.w	r5, r5, #3
 8005e32:	3508      	adds	r5, #8
 8005e34:	2d0c      	cmp	r5, #12
 8005e36:	bf38      	it	cc
 8005e38:	250c      	movcc	r5, #12
 8005e3a:	2d00      	cmp	r5, #0
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	db01      	blt.n	8005e44 <_malloc_r+0x1c>
 8005e40:	42a9      	cmp	r1, r5
 8005e42:	d905      	bls.n	8005e50 <_malloc_r+0x28>
 8005e44:	230c      	movs	r3, #12
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	2600      	movs	r6, #0
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e50:	4e2e      	ldr	r6, [pc, #184]	; (8005f0c <_malloc_r+0xe4>)
 8005e52:	f000 f86d 	bl	8005f30 <__malloc_lock>
 8005e56:	6833      	ldr	r3, [r6, #0]
 8005e58:	461c      	mov	r4, r3
 8005e5a:	bb34      	cbnz	r4, 8005eaa <_malloc_r+0x82>
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f7ff ffc2 	bl	8005de8 <sbrk_aligned>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	4604      	mov	r4, r0
 8005e68:	d14d      	bne.n	8005f06 <_malloc_r+0xde>
 8005e6a:	6834      	ldr	r4, [r6, #0]
 8005e6c:	4626      	mov	r6, r4
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d140      	bne.n	8005ef4 <_malloc_r+0xcc>
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	4631      	mov	r1, r6
 8005e76:	4638      	mov	r0, r7
 8005e78:	eb04 0803 	add.w	r8, r4, r3
 8005e7c:	f000 f848 	bl	8005f10 <_sbrk_r>
 8005e80:	4580      	cmp	r8, r0
 8005e82:	d13a      	bne.n	8005efa <_malloc_r+0xd2>
 8005e84:	6821      	ldr	r1, [r4, #0]
 8005e86:	3503      	adds	r5, #3
 8005e88:	1a6d      	subs	r5, r5, r1
 8005e8a:	f025 0503 	bic.w	r5, r5, #3
 8005e8e:	3508      	adds	r5, #8
 8005e90:	2d0c      	cmp	r5, #12
 8005e92:	bf38      	it	cc
 8005e94:	250c      	movcc	r5, #12
 8005e96:	4629      	mov	r1, r5
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa5 	bl	8005de8 <sbrk_aligned>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d02b      	beq.n	8005efa <_malloc_r+0xd2>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	442b      	add	r3, r5
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	e00e      	b.n	8005ec8 <_malloc_r+0xa0>
 8005eaa:	6822      	ldr	r2, [r4, #0]
 8005eac:	1b52      	subs	r2, r2, r5
 8005eae:	d41e      	bmi.n	8005eee <_malloc_r+0xc6>
 8005eb0:	2a0b      	cmp	r2, #11
 8005eb2:	d916      	bls.n	8005ee2 <_malloc_r+0xba>
 8005eb4:	1961      	adds	r1, r4, r5
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	6025      	str	r5, [r4, #0]
 8005eba:	bf18      	it	ne
 8005ebc:	6059      	strne	r1, [r3, #4]
 8005ebe:	6863      	ldr	r3, [r4, #4]
 8005ec0:	bf08      	it	eq
 8005ec2:	6031      	streq	r1, [r6, #0]
 8005ec4:	5162      	str	r2, [r4, r5]
 8005ec6:	604b      	str	r3, [r1, #4]
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f104 060b 	add.w	r6, r4, #11
 8005ece:	f000 f835 	bl	8005f3c <__malloc_unlock>
 8005ed2:	f026 0607 	bic.w	r6, r6, #7
 8005ed6:	1d23      	adds	r3, r4, #4
 8005ed8:	1af2      	subs	r2, r6, r3
 8005eda:	d0b6      	beq.n	8005e4a <_malloc_r+0x22>
 8005edc:	1b9b      	subs	r3, r3, r6
 8005ede:	50a3      	str	r3, [r4, r2]
 8005ee0:	e7b3      	b.n	8005e4a <_malloc_r+0x22>
 8005ee2:	6862      	ldr	r2, [r4, #4]
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	bf0c      	ite	eq
 8005ee8:	6032      	streq	r2, [r6, #0]
 8005eea:	605a      	strne	r2, [r3, #4]
 8005eec:	e7ec      	b.n	8005ec8 <_malloc_r+0xa0>
 8005eee:	4623      	mov	r3, r4
 8005ef0:	6864      	ldr	r4, [r4, #4]
 8005ef2:	e7b2      	b.n	8005e5a <_malloc_r+0x32>
 8005ef4:	4634      	mov	r4, r6
 8005ef6:	6876      	ldr	r6, [r6, #4]
 8005ef8:	e7b9      	b.n	8005e6e <_malloc_r+0x46>
 8005efa:	230c      	movs	r3, #12
 8005efc:	603b      	str	r3, [r7, #0]
 8005efe:	4638      	mov	r0, r7
 8005f00:	f000 f81c 	bl	8005f3c <__malloc_unlock>
 8005f04:	e7a1      	b.n	8005e4a <_malloc_r+0x22>
 8005f06:	6025      	str	r5, [r4, #0]
 8005f08:	e7de      	b.n	8005ec8 <_malloc_r+0xa0>
 8005f0a:	bf00      	nop
 8005f0c:	20002250 	.word	0x20002250

08005f10 <_sbrk_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4d06      	ldr	r5, [pc, #24]	; (8005f2c <_sbrk_r+0x1c>)
 8005f14:	2300      	movs	r3, #0
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fb f9b2 	bl	8001284 <_sbrk>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_sbrk_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_sbrk_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	20002258 	.word	0x20002258

08005f30 <__malloc_lock>:
 8005f30:	4801      	ldr	r0, [pc, #4]	; (8005f38 <__malloc_lock+0x8>)
 8005f32:	f000 b809 	b.w	8005f48 <__retarget_lock_acquire_recursive>
 8005f36:	bf00      	nop
 8005f38:	2000225c 	.word	0x2000225c

08005f3c <__malloc_unlock>:
 8005f3c:	4801      	ldr	r0, [pc, #4]	; (8005f44 <__malloc_unlock+0x8>)
 8005f3e:	f000 b804 	b.w	8005f4a <__retarget_lock_release_recursive>
 8005f42:	bf00      	nop
 8005f44:	2000225c 	.word	0x2000225c

08005f48 <__retarget_lock_acquire_recursive>:
 8005f48:	4770      	bx	lr

08005f4a <__retarget_lock_release_recursive>:
 8005f4a:	4770      	bx	lr

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
