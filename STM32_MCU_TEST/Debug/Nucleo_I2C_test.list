
Nucleo_I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002130  20000070  08005f44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021a0  08005f44  000221a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b13f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  0002b1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002ce90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001683d  00000000  00000000  0002e150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c790  00000000  00000000  0004498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000903e3  00000000  00000000  0005111d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1500  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  000e1550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005e8c 	.word	0x08005e8c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005e8c 	.word	0x08005e8c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
 80004e0:	2118      	movs	r1, #24
 80004e2:	2001      	movs	r0, #1
 80004e4:	f005 fbd0 	bl	8005c88 <calloc>
 80004e8:	4603      	mov	r3, r0
 80004ea:	4618      	mov	r0, r3
 80004ec:	bd80      	pop	{r7, pc}

080004ee <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b084      	sub	sp, #16
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d102      	bne.n	8000504 <AS5600_init+0x16>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	220a      	movs	r2, #10
 8000502:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7b9b      	ldrb	r3, [r3, #14]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d102      	bne.n	8000512 <AS5600_init+0x24>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2201      	movs	r2, #1
 8000510:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7bdb      	ldrb	r3, [r3, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d102      	bne.n	8000520 <AS5600_init+0x32>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2201      	movs	r2, #1
 800051e:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7c1b      	ldrb	r3, [r3, #16]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d102      	bne.n	800052e <AS5600_init+0x40>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2201      	movs	r2, #1
 800052c:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7c5b      	ldrb	r3, [r3, #17]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d102      	bne.n	800053c <AS5600_init+0x4e>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7c9b      	ldrb	r3, [r3, #18]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <AS5600_init+0x5c>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2201      	movs	r2, #1
 8000548:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	7cdb      	ldrb	r3, [r3, #19]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <AS5600_init+0x6a>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2201      	movs	r2, #1
 8000556:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7d1b      	ldrb	r3, [r3, #20]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <AS5600_init+0x78>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2201      	movs	r2, #1
 8000564:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	7d5b      	ldrb	r3, [r3, #21]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d102      	bne.n	8000574 <AS5600_init+0x86>
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2202      	movs	r2, #2
 8000572:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	7bdb      	ldrb	r3, [r3, #15]
 8000578:	4619      	mov	r1, r3
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f000 f86a 	bl	8000654 <AS5600_set_low_power_mode>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <AS5600_init+0x9c>
 8000586:	2301      	movs	r3, #1
 8000588:	e05f      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	7c1b      	ldrb	r3, [r3, #16]
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f8b3 	bl	80006fc <AS5600_set_hysteresis>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <AS5600_init+0xb2>
 800059c:	2301      	movs	r3, #1
 800059e:	e054      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	7c59      	ldrb	r1, [r3, #17]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7c9b      	ldrb	r3, [r3, #18]
 80005a8:	461a      	mov	r2, r3
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f000 f8fa 	bl	80007a4 <AS5600_set_output_mode>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <AS5600_init+0xcc>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e047      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7cdb      	ldrb	r3, [r3, #19]
 80005be:	4619      	mov	r1, r3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f983 	bl	80008cc <AS5600_set_slow_filter>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <AS5600_init+0xe2>
 80005cc:	2301      	movs	r3, #1
 80005ce:	e03c      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7d1b      	ldrb	r3, [r3, #20]
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f9cc 	bl	8000974 <AS5600_set_fast_filter_threshold>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <AS5600_init+0xf8>
 80005e2:	2301      	movs	r3, #1
 80005e4:	e031      	b.n	800064a <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7d5b      	ldrb	r3, [r3, #21]
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 fa61 	bl	8000ab4 <AS5600_set_watchdog_timer>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <AS5600_init+0x10e>
 80005f8:	2301      	movs	r3, #1
 80005fa:	e026      	b.n	800064a <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 fa80 	bl	8000b02 <AS5600_write_config_register>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <AS5600_init+0x11e>
 8000608:	2301      	movs	r3, #1
 800060a:	e01e      	b.n	800064a <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000610:	f107 030f 	add.w	r3, r7, #15
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 fa8b 	bl	8000b32 <AS5600_get_magnet_status>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <AS5600_init+0x138>
 8000622:	2301      	movs	r3, #1
 8000624:	e011      	b.n	800064a <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	2b00      	cmp	r3, #0
 800062e:	d009      	beq.n	8000644 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d104      	bne.n	8000644 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 800063a:	7bfb      	ldrb	r3, [r7, #15]
 800063c:	f003 0310 	and.w	r3, r3, #16
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <AS5600_init+0x15a>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <AS5600_init+0x15c>
	return HAL_OK;
 8000648:	2300      	movs	r3, #0
}
 800064a:	4618      	mov	r0, r3
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	3b01      	subs	r3, #1
 8000664:	2b03      	cmp	r3, #3
 8000666:	d83f      	bhi.n	80006e8 <AS5600_set_low_power_mode+0x94>
 8000668:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <AS5600_set_low_power_mode+0x1c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000681 	.word	0x08000681
 8000674:	08000693 	.word	0x08000693
 8000678:	080006b5 	.word	0x080006b5
 800067c:	080006d7 	.word	0x080006d7
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7ddb      	ldrb	r3, [r3, #23]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	b2da      	uxtb	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	75da      	strb	r2, [r3, #23]
		break;
 8000690:	e02c      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	7ddb      	ldrb	r3, [r3, #23]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7ddb      	ldrb	r3, [r3, #23]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f023 0302 	bic.w	r3, r3, #2
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	75da      	strb	r2, [r3, #23]
	break;
 80006b2:	e01b      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7ddb      	ldrb	r3, [r3, #23]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f043 0302 	orr.w	r3, r3, #2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7ddb      	ldrb	r3, [r3, #23]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	75da      	strb	r2, [r3, #23]
		break;
 80006d4:	e00a      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7ddb      	ldrb	r3, [r3, #23]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	f043 0303 	orr.w	r3, r3, #3
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	75da      	strb	r2, [r3, #23]
		break;
 80006e6:	e001      	b.n	80006ec <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 80006e8:	2301      	movs	r3, #1
 80006ea:	e000      	b.n	80006ee <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop

080006fc <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	3b01      	subs	r3, #1
 800070c:	2b03      	cmp	r3, #3
 800070e:	d83f      	bhi.n	8000790 <AS5600_set_hysteresis+0x94>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <AS5600_set_hysteresis+0x1c>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000729 	.word	0x08000729
 800071c:	0800073b 	.word	0x0800073b
 8000720:	0800075d 	.word	0x0800075d
 8000724:	0800077f 	.word	0x0800077f
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7ddb      	ldrb	r3, [r3, #23]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f023 030c 	bic.w	r3, r3, #12
 8000732:	b2da      	uxtb	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	75da      	strb	r2, [r3, #23]
		break;
 8000738:	e02c      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7ddb      	ldrb	r3, [r3, #23]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2da      	uxtb	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7ddb      	ldrb	r3, [r3, #23]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f023 0308 	bic.w	r3, r3, #8
 8000754:	b2da      	uxtb	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	75da      	strb	r2, [r3, #23]
		break;
 800075a:	e01b      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7ddb      	ldrb	r3, [r3, #23]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f023 0304 	bic.w	r3, r3, #4
 8000766:	b2da      	uxtb	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7ddb      	ldrb	r3, [r3, #23]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	b2da      	uxtb	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	75da      	strb	r2, [r3, #23]
		break;
 800077c:	e00a      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7ddb      	ldrb	r3, [r3, #23]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	f043 030c 	orr.w	r3, r3, #12
 8000788:	b2da      	uxtb	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	75da      	strb	r2, [r3, #23]
		break;
 800078e:	e001      	b.n	8000794 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000790:	2301      	movs	r3, #1
 8000792:	e000      	b.n	8000796 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	70fb      	strb	r3, [r7, #3]
 80007b0:	4613      	mov	r3, r2
 80007b2:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d020      	beq.n	8000800 <AS5600_set_output_mode+0x5c>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	dc31      	bgt.n	8000826 <AS5600_set_output_mode+0x82>
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d002      	beq.n	80007cc <AS5600_set_output_mode+0x28>
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d009      	beq.n	80007de <AS5600_set_output_mode+0x3a>
 80007ca:	e02c      	b.n	8000826 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7ddb      	ldrb	r3, [r3, #23]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	75da      	strb	r2, [r3, #23]
		break;
 80007dc:	e025      	b.n	800082a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7ddb      	ldrb	r3, [r3, #23]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7ddb      	ldrb	r3, [r3, #23]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f023 0320 	bic.w	r3, r3, #32
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	75da      	strb	r2, [r3, #23]
		break;
 80007fe:	e014      	b.n	800082a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7ddb      	ldrb	r3, [r3, #23]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	b2da      	uxtb	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7ddb      	ldrb	r3, [r3, #23]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f043 0320 	orr.w	r3, r3, #32
 800081a:	b2da      	uxtb	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 8000820:	2301      	movs	r3, #1
 8000822:	73fb      	strb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8000826:	2301      	movs	r3, #1
 8000828:	e04a      	b.n	80008c0 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d045      	beq.n	80008bc <AS5600_set_output_mode+0x118>
		switch (frequency) {
 8000830:	78bb      	ldrb	r3, [r7, #2]
 8000832:	3b01      	subs	r3, #1
 8000834:	2b03      	cmp	r3, #3
 8000836:	d83f      	bhi.n	80008b8 <AS5600_set_output_mode+0x114>
 8000838:	a201      	add	r2, pc, #4	; (adr r2, 8000840 <AS5600_set_output_mode+0x9c>)
 800083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083e:	bf00      	nop
 8000840:	08000851 	.word	0x08000851
 8000844:	08000863 	.word	0x08000863
 8000848:	08000885 	.word	0x08000885
 800084c:	080008a7 	.word	0x080008a7
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	7ddb      	ldrb	r3, [r3, #23]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800085a:	b2da      	uxtb	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	75da      	strb	r2, [r3, #23]
			break;
 8000860:	e02d      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7ddb      	ldrb	r3, [r3, #23]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	b2da      	uxtb	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7ddb      	ldrb	r3, [r3, #23]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087c:	b2da      	uxtb	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	75da      	strb	r2, [r3, #23]
			break;
 8000882:	e01c      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7ddb      	ldrb	r3, [r3, #23]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800088e:	b2da      	uxtb	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7ddb      	ldrb	r3, [r3, #23]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	75da      	strb	r2, [r3, #23]
			break;
 80008a4:	e00b      	b.n	80008be <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7ddb      	ldrb	r3, [r3, #23]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	75da      	strb	r2, [r3, #23]
			break;
 80008b6:	e002      	b.n	80008be <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 80008b8:	2301      	movs	r3, #1
 80008ba:	e001      	b.n	80008c0 <AS5600_set_output_mode+0x11c>
		}
	}
 80008bc:	bf00      	nop
	return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	3b01      	subs	r3, #1
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d83f      	bhi.n	8000960 <AS5600_set_slow_filter+0x94>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <AS5600_set_slow_filter+0x1c>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	0800090b 	.word	0x0800090b
 80008f0:	0800092d 	.word	0x0800092d
 80008f4:	0800094f 	.word	0x0800094f
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7d9b      	ldrb	r3, [r3, #22]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f023 0303 	bic.w	r3, r3, #3
 8000902:	b2da      	uxtb	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	759a      	strb	r2, [r3, #22]
		break;
 8000908:	e02c      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	7d9b      	ldrb	r3, [r3, #22]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	b2da      	uxtb	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7d9b      	ldrb	r3, [r3, #22]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	f023 0302 	bic.w	r3, r3, #2
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	759a      	strb	r2, [r3, #22]
		break;
 800092a:	e01b      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7d9b      	ldrb	r3, [r3, #22]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f023 0301 	bic.w	r3, r3, #1
 8000936:	b2da      	uxtb	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7d9b      	ldrb	r3, [r3, #22]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	f043 0302 	orr.w	r3, r3, #2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	759a      	strb	r2, [r3, #22]
		break;
 800094c:	e00a      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7d9b      	ldrb	r3, [r3, #22]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	f043 0303 	orr.w	r3, r3, #3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	759a      	strb	r2, [r3, #22]
		break;
 800095e:	e001      	b.n	8000964 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	3b01      	subs	r3, #1
 8000984:	2b07      	cmp	r3, #7
 8000986:	f200 808b 	bhi.w	8000aa0 <AS5600_set_fast_filter_threshold+0x12c>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <AS5600_set_fast_filter_threshold+0x1c>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	080009b1 	.word	0x080009b1
 8000994:	080009c3 	.word	0x080009c3
 8000998:	080009e5 	.word	0x080009e5
 800099c:	08000a07 	.word	0x08000a07
 80009a0:	08000a29 	.word	0x08000a29
 80009a4:	08000a4b 	.word	0x08000a4b
 80009a8:	08000a6d 	.word	0x08000a6d
 80009ac:	08000a8f 	.word	0x08000a8f
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7d9b      	ldrb	r3, [r3, #22]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f023 031c 	bic.w	r3, r3, #28
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	759a      	strb	r2, [r3, #22]
		break;
 80009c0:	e070      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7d9b      	ldrb	r3, [r3, #22]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f023 0318 	bic.w	r3, r3, #24
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7d9b      	ldrb	r3, [r3, #22]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	759a      	strb	r2, [r3, #22]
		break;
 80009e2:	e05f      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7d9b      	ldrb	r3, [r3, #22]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	f023 0314 	bic.w	r3, r3, #20
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7d9b      	ldrb	r3, [r3, #22]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f043 0308 	orr.w	r3, r3, #8
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	759a      	strb	r2, [r3, #22]
		break;
 8000a04:	e04e      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7d9b      	ldrb	r3, [r3, #22]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	f023 0310 	bic.w	r3, r3, #16
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7d9b      	ldrb	r3, [r3, #22]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f043 030c 	orr.w	r3, r3, #12
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	759a      	strb	r2, [r3, #22]
		break;
 8000a26:	e03d      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7d9b      	ldrb	r3, [r3, #22]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	f023 030c 	bic.w	r3, r3, #12
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d9b      	ldrb	r3, [r3, #22]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f043 0310 	orr.w	r3, r3, #16
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	759a      	strb	r2, [r3, #22]
		break;
 8000a48:	e02c      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7d9b      	ldrb	r3, [r3, #22]
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	f023 0308 	bic.w	r3, r3, #8
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7d9b      	ldrb	r3, [r3, #22]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	f043 0314 	orr.w	r3, r3, #20
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	759a      	strb	r2, [r3, #22]
		break;
 8000a6a:	e01b      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7d9b      	ldrb	r3, [r3, #22]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f023 0304 	bic.w	r3, r3, #4
 8000a76:	b2da      	uxtb	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	7d9b      	ldrb	r3, [r3, #22]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f043 0318 	orr.w	r3, r3, #24
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	759a      	strb	r2, [r3, #22]
		break;
 8000a8c:	e00a      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	7d9b      	ldrb	r3, [r3, #22]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f043 031c 	orr.w	r3, r3, #28
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	759a      	strb	r2, [r3, #22]
		break;
 8000a9e:	e001      	b.n	8000aa4 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d002      	beq.n	8000acc <AS5600_set_watchdog_timer+0x18>
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d009      	beq.n	8000ade <AS5600_set_watchdog_timer+0x2a>
 8000aca:	e011      	b.n	8000af0 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	7d9b      	ldrb	r3, [r3, #22]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	759a      	strb	r2, [r3, #22]
		break;
 8000adc:	e00a      	b.n	8000af4 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7d9b      	ldrb	r3, [r3, #22]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	759a      	strb	r2, [r3, #22]
		break;
 8000aee:	e001      	b.n	8000af4 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af04      	add	r7, sp, #16
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3316      	adds	r3, #22
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6892      	ldr	r2, [r2, #8]
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	2202      	movs	r2, #2
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2207      	movs	r2, #7
 8000b22:	216c      	movs	r1, #108	; 0x6c
 8000b24:	f002 f916 	bl	8002d54 <HAL_I2C_Mem_Write>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <AS5600_get_magnet_status>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af04      	add	r7, sp, #16
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	2301      	movs	r3, #1
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2301      	movs	r3, #1
 8000b50:	220b      	movs	r2, #11
 8000b52:	216c      	movs	r1, #108	; 0x6c
 8000b54:	f002 f9f8 	bl	8002f48 <HAL_I2C_Mem_Read>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	AS5600_TypeDef* sensor = AS5600_new();
 8000b6a:	f7ff fcb7 	bl	80004dc <AS5600_new>
 8000b6e:	6078      	str	r0, [r7, #4]
	sensor->i2c_handle = &hi2c1;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <main+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <main+0x6c>)
 8000b7a:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b82:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CCW;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2202      	movs	r2, #2
 8000b88:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fb8d 	bl	80012a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f827 	bl	8000be0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f000 f92d 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b96:	f000 f90b 	bl	8000db0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000b9a:	f000 f8db 	bl	8000d54 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000b9e:	f000 f887 	bl	8000cb0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  while (AS5600_init(sensor) != HAL_OK) {
 8000ba2:	e006      	b.n	8000bb2 <main+0x4e>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <main+0x70>)
 8000ba8:	f001 ff75 	bl	8002a96 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000bac:	2032      	movs	r0, #50	; 0x32
 8000bae:	f000 fbed 	bl	800138c <HAL_Delay>
  while (AS5600_init(sensor) != HAL_OK) {
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fc9b 	bl	80004ee <AS5600_init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d1f2      	bne.n	8000ba4 <main+0x40>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)angle_data, ADC_IN_BUFFER_SIZE);
 8000bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc2:	4905      	ldr	r1, [pc, #20]	; (8000bd8 <main+0x74>)
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <main+0x78>)
 8000bc6:	f000 fd59 	bl	800167c <HAL_ADC_Start_DMA>
  while (1)
 8000bca:	e7fe      	b.n	8000bca <main+0x66>
 8000bcc:	20000134 	.word	0x20000134
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	20000188 	.word	0x20000188
 8000bdc:	2000008c 	.word	0x2000008c

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	2230      	movs	r2, #48	; 0x30
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f005 f87c 	bl	8005cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <SystemClock_Config+0xc8>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <SystemClock_Config+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <SystemClock_Config+0xcc>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <SystemClock_Config+0xcc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c50:	2310      	movs	r3, #16
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000c54:	23c0      	movs	r3, #192	; 0xc0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0320 	add.w	r3, r7, #32
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fbcb 	bl	8005400 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c70:	f000 f946 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2103      	movs	r1, #3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fe2d 	bl	80058f0 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c9c:	f000 f930 	bl	8000f00 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3750      	adds	r7, #80	; 0x50
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40007000 	.word	0x40007000

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_ADC1_Init+0x9c>)
 8000cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <MX_ADC1_Init+0xa0>)
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d12:	f000 fb5f 	bl	80013d4 <HAL_ADC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d1c:	f000 f8f0 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0x98>)
 8000d32:	f000 fda7 	bl	8001884 <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d3c:	f000 f8e0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000008c 	.word	0x2000008c
 8000d4c:	40012000 	.word	0x40012000
 8000d50:	0f000001 	.word	0x0f000001

08000d54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C1_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C1_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d92:	f001 fe9b 	bl	8002acc <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d9c:	f000 f8b0 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000134 	.word	0x20000134
 8000da8:	40005400 	.word	0x40005400
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_DMA_Init+0x3c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2038      	movs	r0, #56	; 0x38
 8000dd8:	f001 f8e9 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ddc:	2038      	movs	r0, #56	; 0x38
 8000dde:	f001 f902 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_GPIO_Init+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <MX_GPIO_Init+0xc8>)
 8000e60:	f001 fe00 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AS5600_DIR_GPIO_Port, AS5600_DIR_Pin, GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	4814      	ldr	r0, [pc, #80]	; (8000ebc <MX_GPIO_Init+0xcc>)
 8000e6c:	f001 fdfa 	bl	8002a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000e70:	2320      	movs	r3, #32
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_GPIO_Init+0xc8>)
 8000e88:	f001 fc68 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : AS5600_DIR_Pin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8000e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_GPIO_Init+0xcc>)
 8000ea6:	f001 fc59 	bl	800275c <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3720      	adds	r7, #32
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020800 	.word	0x40020800

08000ec0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/// CALLBACKS <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000ece:	f001 fdc9 	bl	8002a64 <HAL_GPIO_WritePin>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2120      	movs	r1, #32
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000eee:	f001 fdb9 	bl	8002a64 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020000 	.word	0x40020000

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_ADC_MspInit+0x100>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d169      	bne.n	8001052 <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a36      	ldr	r2, [pc, #216]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_ADC_MspInit+0x104>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4826      	ldr	r0, [pc, #152]	; (8001064 <HAL_ADC_MspInit+0x108>)
 8000fca:	f001 fbc7 	bl	800275c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fce:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_ADC_MspInit+0x110>)
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fda:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ff4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8000ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001010:	2204      	movs	r2, #4
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001016:	2203      	movs	r2, #3
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 8001028:	f000 fff8 	bl	800201c <HAL_DMA_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8001032:	f7ff ff65 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_ADC_MspInit+0x10c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2012      	movs	r0, #18
 8001048:	f000 ffb1 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800104c:	2012      	movs	r0, #18
 800104e:	f000 ffca 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40012000 	.word	0x40012000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	200000d4 	.word	0x200000d4
 800106c:	40026410 	.word	0x40026410

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_I2C_MspInit+0xa4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d13c      	bne.n	800110c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <HAL_I2C_MspInit+0xac>)
 80010cc:	f001 fb46 	bl	800275c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010de:	6413      	str	r3, [r2, #64]	; 0x40
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_I2C_MspInit+0xa8>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	201f      	movs	r0, #31
 80010f2:	f000 ff5c 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010f6:	201f      	movs	r0, #31
 80010f8:	f000 ff75 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2020      	movs	r0, #32
 8001102:	f000 ff54 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001106:	2020      	movs	r0, #32
 8001108:	f000 ff6d 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40005400 	.word	0x40005400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8ee 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <ADC_IRQHandler+0x10>)
 800117a:	f000 f96e 	bl	800145a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000008c 	.word	0x2000008c

08001188 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <I2C1_EV_IRQHandler+0x10>)
 800118e:	f002 f901 	bl	8003394 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000134 	.word	0x20000134

0800119c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <I2C1_ER_IRQHandler+0x10>)
 80011a2:	f002 fa68 	bl	8003676 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000134 	.word	0x20000134

080011b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <DMA2_Stream0_IRQHandler+0x10>)
 80011b6:	f001 f859 	bl	800226c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000d4 	.word	0x200000d4

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f004 fd50 	bl	8005c98 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20020000 	.word	0x20020000
 8001224:	00000400 	.word	0x00000400
 8001228:	20002188 	.word	0x20002188
 800122c:	200021a0 	.word	0x200021a0

08001230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	; (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800128c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125a:	490e      	ldr	r1, [pc, #56]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001270:	4c0b      	ldr	r4, [pc, #44]	; (80012a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127e:	f7ff ffd7 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001282:	f004 fd0f 	bl	8005ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001286:	f7ff fc6d 	bl	8000b64 <main>
  bx  lr    
 800128a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800128c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001298:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 800129c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a0:	200021a0 	.word	0x200021a0

080012a4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <DMA1_Stream0_IRQHandler>
	...

080012a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <HAL_Init+0x40>)
 80012b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x40>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x40>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d0:	2003      	movs	r0, #3
 80012d2:	f000 fe61 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d6:	200f      	movs	r0, #15
 80012d8:	f000 f808 	bl	80012ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012dc:	f7ff fe16 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_InitTick+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x58>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 fe79 	bl	8002002 <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00e      	b.n	8001338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d80a      	bhi.n	8001336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 fe41 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_InitTick+0x5c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000000 	.word	0x20000000
 8001344:	20000008 	.word	0x20000008
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	2000218c 	.word	0x2000218c

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	2000218c 	.word	0x2000218c

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e033      	b.n	8001452 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fdb2 	bl	8000f5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d118      	bne.n	8001444 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141a:	f023 0302 	bic.w	r3, r3, #2
 800141e:	f043 0202 	orr.w	r2, r3, #2
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 fb5e 	bl	8001ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
 8001442:	e001      	b.n	8001448 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d049      	beq.n	8001524 <HAL_ADC_IRQHandler+0xca>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d046      	beq.n	8001524 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d12b      	bne.n	8001514 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d127      	bne.n	8001514 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d119      	bne.n	8001514 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0220 	bic.w	r2, r2, #32
 80014ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fce3 	bl	8000ee0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0212 	mvn.w	r2, #18
 8001522:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001532:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d057      	beq.n	80015ea <HAL_ADC_IRQHandler+0x190>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d054      	beq.n	80015ea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d139      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800157e:	2b00      	cmp	r3, #0
 8001580:	d12b      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800158c:	2b00      	cmp	r3, #0
 800158e:	d124      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d11d      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d119      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d105      	bne.n	80015da <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fc02 	bl	8001de4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f06f 020c 	mvn.w	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d017      	beq.n	8001630 <HAL_ADC_IRQHandler+0x1d6>
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d014      	beq.n	8001630 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d10d      	bne.n	8001630 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f91b 	bl	800185c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f06f 0201 	mvn.w	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800163e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_ADC_IRQHandler+0x218>
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d012      	beq.n	8001672 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f06f 0220 	mvn.w	r2, #32
 8001660:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f904 	bl	8001870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0220 	mvn.w	r2, #32
 8001670:	601a      	str	r2, [r3, #0]
  }
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_ADC_Start_DMA+0x1e>
 8001696:	2302      	movs	r3, #2
 8001698:	e0ce      	b.n	8001838 <HAL_ADC_Start_DMA+0x1bc>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d018      	beq.n	80016e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016c0:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_ADC_Start_DMA+0x1c4>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <HAL_ADC_Start_DMA+0x1c8>)
 80016c6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ca:	0c9a      	lsrs	r2, r3, #18
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016d4:	e002      	b.n	80016dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3b01      	subs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f9      	bne.n	80016d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f0:	d107      	bne.n	8001702 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001700:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b01      	cmp	r3, #1
 800170e:	f040 8086 	bne.w	800181e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800173c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001750:	d106      	bne.n	8001760 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f023 0206 	bic.w	r2, r3, #6
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
 800175e:	e002      	b.n	8001766 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_ADC_Start_DMA+0x1cc>)
 8001770:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	4a35      	ldr	r2, [pc, #212]	; (800184c <HAL_ADC_Start_DMA+0x1d0>)
 8001778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	4a34      	ldr	r2, [pc, #208]	; (8001850 <HAL_ADC_Start_DMA+0x1d4>)
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	4a33      	ldr	r2, [pc, #204]	; (8001854 <HAL_ADC_Start_DMA+0x1d8>)
 8001788:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001792:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	334c      	adds	r3, #76	; 0x4c
 80017be:	4619      	mov	r1, r3
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f000 fcd8 	bl	8002178 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d129      	bne.n	8001836 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	e020      	b.n	8001836 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a17      	ldr	r2, [pc, #92]	; (8001858 <HAL_ADC_Start_DMA+0x1dc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d11b      	bne.n	8001836 <HAL_ADC_Start_DMA+0x1ba>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d114      	bne.n	8001836 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	e00b      	b.n	8001836 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f043 0210 	orr.w	r2, r3, #16
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000000 	.word	0x20000000
 8001844:	431bde83 	.word	0x431bde83
 8001848:	40012300 	.word	0x40012300
 800184c:	08001ce1 	.word	0x08001ce1
 8001850:	08001d9b 	.word	0x08001d9b
 8001854:	08001db7 	.word	0x08001db7
 8001858:	40012000 	.word	0x40012000

0800185c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1c>
 800189c:	2302      	movs	r3, #2
 800189e:	e113      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x244>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d925      	bls.n	80018fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	3b1e      	subs	r3, #30
 80018c6:	2207      	movs	r2, #7
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43da      	mvns	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	400a      	ands	r2, r1
 80018d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68d9      	ldr	r1, [r3, #12]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4403      	add	r3, r0
 80018ee:	3b1e      	subs	r3, #30
 80018f0:	409a      	lsls	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	e022      	b.n	8001942 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6919      	ldr	r1, [r3, #16]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b29b      	uxth	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	2207      	movs	r2, #7
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	400a      	ands	r2, r1
 800191e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6919      	ldr	r1, [r3, #16]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	4603      	mov	r3, r0
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4403      	add	r3, r0
 8001938:	409a      	lsls	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b06      	cmp	r3, #6
 8001948:	d824      	bhi.n	8001994 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b05      	subs	r3, #5
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	400a      	ands	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b05      	subs	r3, #5
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34
 8001992:	e04c      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d824      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b23      	subs	r3, #35	; 0x23
 80019ae:	221f      	movs	r2, #31
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43da      	mvns	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b23      	subs	r3, #35	; 0x23
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
 80019e4:	e023      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b41      	subs	r3, #65	; 0x41
 80019f8:	221f      	movs	r2, #31
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	400a      	ands	r2, r1
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b41      	subs	r3, #65	; 0x41
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <HAL_ADC_ConfigChannel+0x250>)
 8001a30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <HAL_ADC_ConfigChannel+0x254>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d10f      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1d8>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b12      	cmp	r3, #18
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_ADC_ConfigChannel+0x254>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12b      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_ADC_ConfigChannel+0x258>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x1f4>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b11      	cmp	r3, #17
 8001a76:	d122      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_ADC_ConfigChannel+0x258>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d111      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_ADC_ConfigChannel+0x25c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_ADC_ConfigChannel+0x260>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9a      	lsrs	r2, r3, #18
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	40012000 	.word	0x40012000
 8001adc:	10000012 	.word	0x10000012
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af0:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <ADC_Init+0x1f0>)
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6859      	ldr	r1, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	021a      	lsls	r2, r3, #8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68da      	ldr	r2, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <ADC_Init+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d022      	beq.n	8001bc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6899      	ldr	r1, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6899      	ldr	r1, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	e00f      	b.n	8001be6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0202 	bic.w	r2, r2, #2
 8001bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6899      	ldr	r1, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e1b      	ldrb	r3, [r3, #24]
 8001c00:	005a      	lsls	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d01b      	beq.n	8001c4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6859      	ldr	r1, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	035a      	lsls	r2, r3, #13
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	e007      	b.n	8001c5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	051a      	lsls	r2, r3, #20
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6899      	ldr	r1, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c9e:	025a      	lsls	r2, r3, #9
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	029a      	lsls	r2, r3, #10
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40012300 	.word	0x40012300
 8001cdc:	0f000001 	.word	0x0f000001

08001ce0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d13c      	bne.n	8001d74 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d12b      	bne.n	8001d6c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d127      	bne.n	8001d6c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d119      	bne.n	8001d6c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0220 	bic.w	r2, r2, #32
 8001d46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff f8b7 	bl	8000ee0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d72:	e00e      	b.n	8001d92 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff fd75 	bl	8001870 <HAL_ADC_ErrorCallback>
}
 8001d86:	e004      	b.n	8001d92 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff f889 	bl	8000ec0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f043 0204 	orr.w	r2, r3, #4
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f7ff fd4a 	bl	8001870 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e14:	4013      	ands	r3, r2
 8001e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2a:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <__NVIC_SetPriorityGrouping+0x44>)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	60d3      	str	r3, [r2, #12]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__NVIC_GetPriorityGrouping+0x18>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 0307 	and.w	r3, r3, #7
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0b      	blt.n	8001e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4907      	ldr	r1, [pc, #28]	; (8001e94 <__NVIC_EnableIRQ+0x38>)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff29 	bl	8001df8 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff3e 	bl	8001e40 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff31 	bl	8001e5c <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff f9a4 	bl	8001374 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e099      	b.n	800216c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002058:	e00f      	b.n	800207a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800205a:	f7ff f98b 	bl	8001374 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b05      	cmp	r3, #5
 8002066:	d908      	bls.n	800207a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2203      	movs	r2, #3
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e078      	b.n	800216c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e8      	bne.n	800205a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_DMA_Init+0x158>)
 8002094:	4013      	ands	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d107      	bne.n	80020e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4313      	orrs	r3, r2
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 0307 	bic.w	r3, r3, #7
 80020fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	2b04      	cmp	r3, #4
 800210c:	d117      	bne.n	800213e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fa9f 	bl	8002664 <DMA_CheckFifoParam>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2240      	movs	r2, #64	; 0x40
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800213a:	2301      	movs	r3, #1
 800213c:	e016      	b.n	800216c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 fa56 	bl	80025f8 <DMA_CalcBaseAndBitshift>
 800214c:	4603      	mov	r3, r0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002154:	223f      	movs	r2, #63	; 0x3f
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	f010803f 	.word	0xf010803f

08002178 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_DMA_Start_IT+0x26>
 800219a:	2302      	movs	r3, #2
 800219c:	e040      	b.n	8002220 <HAL_DMA_Start_IT+0xa8>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d12f      	bne.n	8002212 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f9e8 	bl	800259c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	223f      	movs	r2, #63	; 0x3f
 80021d2:	409a      	lsls	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0216 	orr.w	r2, r2, #22
 80021e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00c      	b.n	8002260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2205      	movs	r2, #5
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002278:	4b8e      	ldr	r3, [pc, #568]	; (80024b4 <HAL_DMA_IRQHandler+0x248>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a8e      	ldr	r2, [pc, #568]	; (80024b8 <HAL_DMA_IRQHandler+0x24c>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002296:	2208      	movs	r2, #8
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01a      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c4:	2208      	movs	r2, #8
 80022c6:	409a      	lsls	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d0:	f043 0201 	orr.w	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	2201      	movs	r2, #1
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f043 0202 	orr.w	r2, r3, #2
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002312:	2204      	movs	r2, #4
 8002314:	409a      	lsls	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4013      	ands	r3, r2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d012      	beq.n	8002344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	2204      	movs	r2, #4
 8002332:	409a      	lsls	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002348:	2210      	movs	r2, #16
 800234a:	409a      	lsls	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d043      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03c      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002366:	2210      	movs	r2, #16
 8002368:	409a      	lsls	r2, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d018      	beq.n	80023ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d108      	bne.n	800239c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d024      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	4798      	blx	r3
 800239a:	e01f      	b.n	80023dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
 80023ac:	e016      	b.n	80023dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0208 	bic.w	r2, r2, #8
 80023ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	2220      	movs	r2, #32
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 808f 	beq.w	800250c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 8087 	beq.w	800250c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2220      	movs	r2, #32
 8002404:	409a      	lsls	r2, r3
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b05      	cmp	r3, #5
 8002414:	d136      	bne.n	8002484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0216 	bic.w	r2, r2, #22
 8002424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d103      	bne.n	8002446 <HAL_DMA_IRQHandler+0x1da>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0208 	bic.w	r2, r2, #8
 8002454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	223f      	movs	r2, #63	; 0x3f
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	2b00      	cmp	r3, #0
 8002478:	d07e      	beq.n	8002578 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
        }
        return;
 8002482:	e079      	b.n	8002578 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d01d      	beq.n	80024ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10d      	bne.n	80024bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d031      	beq.n	800250c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	4798      	blx	r3
 80024b0:	e02c      	b.n	800250c <HAL_DMA_IRQHandler+0x2a0>
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000
 80024b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d023      	beq.n	800250c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e01e      	b.n	800250c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10f      	bne.n	80024fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0210 	bic.w	r2, r2, #16
 80024ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	2b00      	cmp	r3, #0
 8002512:	d032      	beq.n	800257a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d022      	beq.n	8002566 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2205      	movs	r2, #5
 8002524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3301      	adds	r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	d307      	bcc.n	8002554 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f2      	bne.n	8002538 <HAL_DMA_IRQHandler+0x2cc>
 8002552:	e000      	b.n	8002556 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002554:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
 8002576:	e000      	b.n	800257a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002578:	bf00      	nop
    }
  }
}
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258e:	b2db      	uxtb	r3, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d108      	bne.n	80025dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025da:	e007      	b.n	80025ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3b10      	subs	r3, #16
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <DMA_CalcBaseAndBitshift+0x64>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002612:	4a13      	ldr	r2, [pc, #76]	; (8002660 <DMA_CalcBaseAndBitshift+0x68>)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d909      	bls.n	800263a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	659a      	str	r2, [r3, #88]	; 0x58
 8002638:	e007      	b.n	800264a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	aaaaaaab 	.word	0xaaaaaaab
 8002660:	08005ebc 	.word	0x08005ebc

08002664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11f      	bne.n	80026be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d856      	bhi.n	8002732 <DMA_CheckFifoParam+0xce>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <DMA_CheckFifoParam+0x28>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	0800269d 	.word	0x0800269d
 8002690:	080026af 	.word	0x080026af
 8002694:	0800269d 	.word	0x0800269d
 8002698:	08002733 	.word	0x08002733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d046      	beq.n	8002736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ac:	e043      	b.n	8002736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026b6:	d140      	bne.n	800273a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e03d      	b.n	800273a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c6:	d121      	bne.n	800270c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d837      	bhi.n	800273e <DMA_CheckFifoParam+0xda>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <DMA_CheckFifoParam+0x70>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026eb 	.word	0x080026eb
 80026dc:	080026e5 	.word	0x080026e5
 80026e0:	080026fd 	.word	0x080026fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      break;
 80026e8:	e030      	b.n	800274c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d025      	beq.n	8002742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e022      	b.n	8002742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002704:	d11f      	bne.n	8002746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800270a:	e01c      	b.n	8002746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d903      	bls.n	800271a <DMA_CheckFifoParam+0xb6>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d003      	beq.n	8002720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002718:	e018      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      break;
 800271e:	e015      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00e      	beq.n	800274a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e00b      	b.n	800274a <DMA_CheckFifoParam+0xe6>
      break;
 8002732:	bf00      	nop
 8002734:	e00a      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 8002736:	bf00      	nop
 8002738:	e008      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800273a:	bf00      	nop
 800273c:	e006      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800273e:	bf00      	nop
 8002740:	e004      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 8002742:	bf00      	nop
 8002744:	e002      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;   
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
    }
  } 
  
  return status; 
 800274c:	7bfb      	ldrb	r3, [r7, #15]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
 8002776:	e159      	b.n	8002a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002778:	2201      	movs	r2, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	429a      	cmp	r2, r3
 8002792:	f040 8148 	bne.w	8002a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d005      	beq.n	80027ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d130      	bne.n	8002810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 0201 	and.w	r2, r3, #1
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b03      	cmp	r3, #3
 800281a:	d017      	beq.n	800284c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2203      	movs	r2, #3
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d123      	bne.n	80028a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	08da      	lsrs	r2, r3, #3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3208      	adds	r2, #8
 8002860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	08da      	lsrs	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3208      	adds	r2, #8
 800289a:	69b9      	ldr	r1, [r7, #24]
 800289c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	2203      	movs	r2, #3
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0203 	and.w	r2, r3, #3
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a2 	beq.w	8002a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b57      	ldr	r3, [pc, #348]	; (8002a44 <HAL_GPIO_Init+0x2e8>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_GPIO_Init+0x2e8>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b54      	ldr	r3, [pc, #336]	; (8002a44 <HAL_GPIO_Init+0x2e8>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028fe:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_GPIO_Init+0x2ec>)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	089b      	lsrs	r3, r3, #2
 8002904:	3302      	adds	r3, #2
 8002906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <HAL_GPIO_Init+0x2f0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x202>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a48      	ldr	r2, [pc, #288]	; (8002a50 <HAL_GPIO_Init+0x2f4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x1fe>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a47      	ldr	r2, [pc, #284]	; (8002a54 <HAL_GPIO_Init+0x2f8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x1fa>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a46      	ldr	r2, [pc, #280]	; (8002a58 <HAL_GPIO_Init+0x2fc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x1f6>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a45      	ldr	r2, [pc, #276]	; (8002a5c <HAL_GPIO_Init+0x300>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x1f2>
 800294a:	2304      	movs	r3, #4
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x204>
 800294e:	2307      	movs	r3, #7
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x204>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x204>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x204>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x204>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	; (8002a48 <HAL_GPIO_Init+0x2ec>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a2f      	ldr	r2, [pc, #188]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f6:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_GPIO_Init+0x304>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a20:	4a0f      	ldr	r2, [pc, #60]	; (8002a60 <HAL_GPIO_Init+0x304>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f aea2 	bls.w	8002778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40013c00 	.word	0x40013c00

08002a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
 8002a70:	4613      	mov	r3, r2
 8002a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a74:	787b      	ldrb	r3, [r7, #1]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a7a:	887a      	ldrh	r2, [r7, #2]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a80:	e003      	b.n	8002a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a82:	887b      	ldrh	r3, [r7, #2]
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	619a      	str	r2, [r3, #24]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	041a      	lsls	r2, r3, #16
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	400b      	ands	r3, r1
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e12b      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe fabc 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b30:	f003 f896 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a81      	ldr	r2, [pc, #516]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d807      	bhi.n	8002b50 <HAL_I2C_Init+0x84>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a80      	ldr	r2, [pc, #512]	; (8002d44 <HAL_I2C_Init+0x278>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e006      	b.n	8002b5e <HAL_I2C_Init+0x92>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a7d      	ldr	r2, [pc, #500]	; (8002d48 <HAL_I2C_Init+0x27c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0e7      	b.n	8002d36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a78      	ldr	r2, [pc, #480]	; (8002d4c <HAL_I2C_Init+0x280>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	0c9b      	lsrs	r3, r3, #18
 8002b70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d802      	bhi.n	8002ba0 <HAL_I2C_Init+0xd4>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	e009      	b.n	8002bb4 <HAL_I2C_Init+0xe8>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	4a69      	ldr	r2, [pc, #420]	; (8002d50 <HAL_I2C_Init+0x284>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	099b      	lsrs	r3, r3, #6
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	495c      	ldr	r1, [pc, #368]	; (8002d40 <HAL_I2C_Init+0x274>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d819      	bhi.n	8002c08 <HAL_I2C_Init+0x13c>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1e59      	subs	r1, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002be8:	400b      	ands	r3, r1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_I2C_Init+0x138>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	1e59      	subs	r1, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	e051      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c04:	2304      	movs	r3, #4
 8002c06:	e04f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d111      	bne.n	8002c34 <HAL_I2C_Init+0x168>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e58      	subs	r0, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6859      	ldr	r1, [r3, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e012      	b.n	8002c5a <HAL_I2C_Init+0x18e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1e58      	subs	r0, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6859      	ldr	r1, [r3, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x196>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e022      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10e      	bne.n	8002c88 <HAL_I2C_Init+0x1bc>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1e58      	subs	r0, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6859      	ldr	r1, [r3, #4]
 8002c72:	460b      	mov	r3, r1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c86:	e00f      	b.n	8002ca8 <HAL_I2C_Init+0x1dc>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69da      	ldr	r2, [r3, #28]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6911      	ldr	r1, [r2, #16]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68d2      	ldr	r2, [r2, #12]
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0201 	orr.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	000186a0 	.word	0x000186a0
 8002d44:	001e847f 	.word	0x001e847f
 8002d48:	003d08ff 	.word	0x003d08ff
 8002d4c:	431bde83 	.word	0x431bde83
 8002d50:	10624dd3 	.word	0x10624dd3

08002d54 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	4611      	mov	r1, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	817b      	strh	r3, [r7, #10]
 8002d66:	460b      	mov	r3, r1
 8002d68:	813b      	strh	r3, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d6e:	f7fe fb01 	bl	8001374 <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	f040 80d9 	bne.w	8002f34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	496d      	ldr	r1, [pc, #436]	; (8002f40 <HAL_I2C_Mem_Write+0x1ec>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f002 f90d 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e0cc      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Mem_Write+0x56>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e0c5      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d007      	beq.n	8002dd0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2221      	movs	r2, #33	; 0x21
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2240      	movs	r2, #64	; 0x40
 8002dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	; (8002f44 <HAL_I2C_Mem_Write+0x1f0>)
 8002e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e12:	88f8      	ldrh	r0, [r7, #6]
 8002e14:	893a      	ldrh	r2, [r7, #8]
 8002e16:	8979      	ldrh	r1, [r7, #10]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	4603      	mov	r3, r0
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f001 fe9c 	bl	8004b60 <I2C_RequestMemoryWrite>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d052      	beq.n	8002ed4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e081      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f002 f98e 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d107      	bne.n	8002e5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e06b      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	781a      	ldrb	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_I2C_Mem_Write+0x180>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1aa      	bne.n	8002e32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f002 f97a 	bl	80051da <I2C_WaitOnBTFFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00d      	beq.n	8002f08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e016      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3718      	adds	r7, #24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	00100002 	.word	0x00100002
 8002f44:	ffff0000 	.word	0xffff0000

08002f48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	461a      	mov	r2, r3
 8002f56:	4603      	mov	r3, r0
 8002f58:	817b      	strh	r3, [r7, #10]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	813b      	strh	r3, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f62:	f7fe fa07 	bl	8001374 <HAL_GetTick>
 8002f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	f040 8208 	bne.w	8003386 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2319      	movs	r3, #25
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	497b      	ldr	r1, [pc, #492]	; (800316c <HAL_I2C_Mem_Read+0x224>)
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f002 f813 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e1fb      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Mem_Read+0x56>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e1f4      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d007      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2222      	movs	r2, #34	; 0x22
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a5b      	ldr	r2, [pc, #364]	; (8003170 <HAL_I2C_Mem_Read+0x228>)
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003006:	88f8      	ldrh	r0, [r7, #6]
 8003008:	893a      	ldrh	r2, [r7, #8]
 800300a:	8979      	ldrh	r1, [r7, #10]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4603      	mov	r3, r0
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f001 fe38 	bl	8004c8c <I2C_RequestMemoryRead>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e1b0      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	d113      	bne.n	8003056 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	e184      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305a:	2b01      	cmp	r3, #1
 800305c:	d11b      	bne.n	8003096 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800306c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e164      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	2b02      	cmp	r3, #2
 800309c:	d11b      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	61bb      	str	r3, [r7, #24]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	e144      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030ec:	e138      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	f200 80f1 	bhi.w	80032da <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d123      	bne.n	8003148 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f002 f8db 	bl	80052c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e139      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	3b01      	subs	r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003146:	e10b      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314c:	2b02      	cmp	r3, #2
 800314e:	d14e      	bne.n	80031ee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	2200      	movs	r2, #0
 8003158:	4906      	ldr	r1, [pc, #24]	; (8003174 <HAL_I2C_Mem_Read+0x22c>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f001 ff26 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e10e      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
 800316a:	bf00      	nop
 800316c:	00100002 	.word	0x00100002
 8003170:	ffff0000 	.word	0xffff0000
 8003174:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ec:	e0b8      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	2200      	movs	r2, #0
 80031f6:	4966      	ldr	r1, [pc, #408]	; (8003390 <HAL_I2C_Mem_Read+0x448>)
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f001 fed7 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0bf      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	2200      	movs	r2, #0
 8003252:	494f      	ldr	r1, [pc, #316]	; (8003390 <HAL_I2C_Mem_Read+0x448>)
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f001 fea9 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e091      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032d8:	e042      	b.n	8003360 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f001 ffee 	bl	80052c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e04c      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0304 	and.w	r3, r3, #4
 800332a:	2b04      	cmp	r3, #4
 800332c:	d118      	bne.n	8003360 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f aec2 	bne.w	80030ee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	00010004 	.word	0x00010004

08003394 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d003      	beq.n	80033cc <HAL_I2C_EV_IRQHandler+0x38>
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	f040 80c1 	bne.w	800354e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_I2C_EV_IRQHandler+0x6e>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80033ec:	d003      	beq.n	80033f6 <HAL_I2C_EV_IRQHandler+0x62>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_EV_IRQHandler+0x66>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_I2C_EV_IRQHandler+0x68>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f000 8132 	beq.w	8003666 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00c      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x92>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	0a5b      	lsrs	r3, r3, #9
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f001 ffd6 	bl	80053ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fd83 	bl	8003f2a <I2C_Master_SB>
 8003424:	e092      	b.n	800354c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0xb2>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a5b      	lsrs	r3, r3, #9
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fdf9 	bl	8004036 <I2C_Master_ADD10>
 8003444:	e082      	b.n	800354c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0xd2>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	0a5b      	lsrs	r3, r3, #9
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fe13 	bl	800408a <I2C_Master_ADDR>
 8003464:	e072      	b.n	800354c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	089b      	lsrs	r3, r3, #2
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d03b      	beq.n	80034ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800347c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003480:	f000 80f3 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	09db      	lsrs	r3, r3, #7
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00f      	beq.n	80034b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d009      	beq.n	80034b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f9f3 	bl	8003894 <I2C_MasterTransmit_TXE>
 80034ae:	e04d      	b.n	800354c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80d6 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0a5b      	lsrs	r3, r3, #9
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80cf 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80034cc:	7bbb      	ldrb	r3, [r7, #14]
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d103      	bne.n	80034da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa7a 	bl	80039cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d8:	e0c7      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b40      	cmp	r3, #64	; 0x40
 80034de:	f040 80c4 	bne.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fae8 	bl	8003ab8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034e8:	e0bf      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034f8:	f000 80b7 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	099b      	lsrs	r3, r3, #6
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00f      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x194>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	0a9b      	lsrs	r3, r3, #10
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <HAL_I2C_EV_IRQHandler+0x194>
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fb5d 	bl	8003be0 <I2C_MasterReceive_RXNE>
 8003526:	e011      	b.n	800354c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 809a 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	0a5b      	lsrs	r3, r3, #9
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8093 	beq.w	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fc06 	bl	8003d56 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800354a:	e08e      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
 800354c:	e08d      	b.n	800366a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e007      	b.n	8003570 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	0a5b      	lsrs	r3, r3, #9
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00c      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003598:	69b9      	ldr	r1, [r7, #24]
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 ffc4 	bl	8004528 <I2C_Slave_ADDR>
 80035a0:	e066      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d009      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	0a5b      	lsrs	r3, r3, #9
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fffe 	bl	80045bc <I2C_Slave_STOPF>
 80035c0:	e056      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80035c2:	7bbb      	ldrb	r3, [r7, #14]
 80035c4:	2b21      	cmp	r3, #33	; 0x21
 80035c6:	d002      	beq.n	80035ce <HAL_I2C_EV_IRQHandler+0x23a>
 80035c8:	7bbb      	ldrb	r3, [r7, #14]
 80035ca:	2b29      	cmp	r3, #41	; 0x29
 80035cc:	d125      	bne.n	800361a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	09db      	lsrs	r3, r3, #7
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00f      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x266>
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	0a9b      	lsrs	r3, r3, #10
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x266>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 feda 	bl	80043ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035f8:	e039      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d033      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x2da>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d02d      	beq.n	800366e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 ff07 	bl	8004426 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003618:	e029      	b.n	800366e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00f      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	0a9b      	lsrs	r3, r3, #10
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 ff12 	bl	8004468 <I2C_SlaveReceive_RXNE>
 8003644:	e014      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00e      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	0a5b      	lsrs	r3, r3, #9
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff40 	bl	80044e4 <I2C_SlaveReceive_BTF>
 8003664:	e004      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b08a      	sub	sp, #40	; 0x28
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003698:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <HAL_I2C_ER_IRQHandler+0x4e>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036c2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <HAL_I2C_ER_IRQHandler+0x78>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80036ec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	0a9b      	lsrs	r3, r3, #10
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03f      	beq.n	800377a <HAL_I2C_ER_IRQHandler+0x104>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d039      	beq.n	800377a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003706:	7efb      	ldrb	r3, [r7, #27]
 8003708:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003720:	7ebb      	ldrb	r3, [r7, #26]
 8003722:	2b20      	cmp	r3, #32
 8003724:	d112      	bne.n	800374c <HAL_I2C_ER_IRQHandler+0xd6>
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_I2C_ER_IRQHandler+0xd6>
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b21      	cmp	r3, #33	; 0x21
 8003730:	d008      	beq.n	8003744 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b29      	cmp	r3, #41	; 0x29
 8003736:	d005      	beq.n	8003744 <HAL_I2C_ER_IRQHandler+0xce>
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	2b28      	cmp	r3, #40	; 0x28
 800373c:	d106      	bne.n	800374c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2b21      	cmp	r3, #33	; 0x21
 8003742:	d103      	bne.n	800374c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f001 f869 	bl	800481c <I2C_Slave_AF>
 800374a:	e016      	b.n	800377a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003754:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800375e:	7efb      	ldrb	r3, [r7, #27]
 8003760:	2b10      	cmp	r3, #16
 8003762:	d002      	beq.n	800376a <HAL_I2C_ER_IRQHandler+0xf4>
 8003764:	7efb      	ldrb	r3, [r7, #27]
 8003766:	2b40      	cmp	r3, #64	; 0x40
 8003768:	d107      	bne.n	800377a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	0adb      	lsrs	r3, r3, #11
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00e      	beq.n	80037a4 <HAL_I2C_ER_IRQHandler+0x12e>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	f043 0308 	orr.w	r3, r3, #8
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80037a2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f001 f8a0 	bl	80048fc <I2C_ITError>
  }
}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
 8003820:	4613      	mov	r3, r2
 8003822:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d150      	bne.n	800395c <I2C_MasterTransmit_TXE+0xc8>
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b21      	cmp	r3, #33	; 0x21
 80038be:	d14d      	bne.n	800395c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d01d      	beq.n	8003902 <I2C_MasterTransmit_TXE+0x6e>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d01a      	beq.n	8003902 <I2C_MasterTransmit_TXE+0x6e>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d2:	d016      	beq.n	8003902 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2211      	movs	r2, #17
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff62 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003900:	e060      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003910:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d107      	bne.n	800394c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ff7d 	bl	8003844 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800394a:	e03b      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff35 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800395a:	e033      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	2b21      	cmp	r3, #33	; 0x21
 8003960:	d005      	beq.n	800396e <I2C_MasterTransmit_TXE+0xda>
 8003962:	7bbb      	ldrb	r3, [r7, #14]
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d12d      	bne.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b22      	cmp	r3, #34	; 0x22
 800396c:	d12a      	bne.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d108      	bne.n	800398a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003986:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003988:	e01c      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b40      	cmp	r3, #64	; 0x40
 8003994:	d103      	bne.n	800399e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f88e 	bl	8003ab8 <I2C_MemoryTransmit_TXE_BTF>
}
 800399c:	e012      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	781a      	ldrb	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039c2:	e7ff      	b.n	80039c4 <I2C_MasterTransmit_TXE+0x130>
 80039c4:	bf00      	nop
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b21      	cmp	r3, #33	; 0x21
 80039e4:	d164      	bne.n	8003ab0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a14:	e04c      	b.n	8003ab0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d01d      	beq.n	8003a58 <I2C_MasterTransmit_BTF+0x8c>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d01a      	beq.n	8003a58 <I2C_MasterTransmit_BTF+0x8c>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a28:	d016      	beq.n	8003a58 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a38:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2211      	movs	r2, #17
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff feb7 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
}
 8003a56:	e02b      	b.n	8003ab0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a66:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d107      	bne.n	8003aa2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fed2 	bl	8003844 <HAL_I2C_MemTxCpltCallback>
}
 8003aa0:	e006      	b.n	8003ab0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fe8a 	bl	80037c4 <HAL_I2C_MasterTxCpltCallback>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10b      	bne.n	8003af0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae8:	1c9a      	adds	r2, r3, #2
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003aee:	e073      	b.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	121b      	asrs	r3, r3, #8
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b0a:	e065      	b.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10b      	bne.n	8003b2c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b2a:	e055      	b.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d151      	bne.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b22      	cmp	r3, #34	; 0x22
 8003b38:	d10d      	bne.n	8003b56 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b54:	e040      	b.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b21      	cmp	r3, #33	; 0x21
 8003b64:	d112      	bne.n	8003b8c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	781a      	ldrb	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b8a:	e025      	b.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d120      	bne.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b21      	cmp	r3, #33	; 0x21
 8003b9a:	d11d      	bne.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003baa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fe36 	bl	8003844 <HAL_I2C_MemTxCpltCallback>
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b22      	cmp	r3, #34	; 0x22
 8003bf2:	f040 80ac 	bne.w	8003d4e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d921      	bls.n	8003c48 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	f040 808c 	bne.w	8003d4e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c44:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003c46:	e082      	b.n	8003d4e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d075      	beq.n	8003d3c <I2C_MasterReceive_RXNE+0x15c>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d002      	beq.n	8003c5c <I2C_MasterReceive_RXNE+0x7c>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d16f      	bne.n	8003d3c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f001 fafd 	bl	800525c <I2C_WaitOnSTOPRequestThroughIT>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d142      	bne.n	8003cee <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d10a      	bne.n	8003cd8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff fdc1 	bl	8003858 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cd6:	e03a      	b.n	8003d4e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2212      	movs	r2, #18
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fd76 	bl	80037d8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003cec:	e02f      	b.n	8003d4e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cfc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff fd99 	bl	800386c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003d3a:	e008      	b.n	8003d4e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4a:	605a      	str	r2, [r3, #4]
}
 8003d4c:	e7ff      	b.n	8003d4e <I2C_MasterReceive_RXNE+0x16e>
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d11b      	bne.n	8003da6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003da4:	e0bd      	b.n	8003f22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d129      	bne.n	8003e04 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00a      	beq.n	8003ddc <I2C_MasterReceive_BTF+0x86>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d007      	beq.n	8003ddc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e02:	e08e      	b.n	8003f22 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d176      	bne.n	8003efc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <I2C_MasterReceive_BTF+0xc4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b10      	cmp	r3, #16
 8003e18:	d108      	bne.n	8003e2c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	e019      	b.n	8003e60 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d002      	beq.n	8003e38 <I2C_MasterReceive_BTF+0xe2>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d108      	bne.n	8003e4a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00a      	b.n	8003e60 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d007      	beq.n	8003e60 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d10a      	bne.n	8003ee6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff fcba 	bl	8003858 <HAL_I2C_MemRxCpltCallback>
}
 8003ee4:	e01d      	b.n	8003f22 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2212      	movs	r2, #18
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fc6f 	bl	80037d8 <HAL_I2C_MasterRxCpltCallback>
}
 8003efa:	e012      	b.n	8003f22 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d117      	bne.n	8003f6e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f56:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f58:	e067      	b.n	800402a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	611a      	str	r2, [r3, #16]
}
 8003f6c:	e05d      	b.n	800402a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f76:	d133      	bne.n	8003fe0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b21      	cmp	r3, #33	; 0x21
 8003f82:	d109      	bne.n	8003f98 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f94:	611a      	str	r2, [r3, #16]
 8003f96:	e008      	b.n	8003faa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <I2C_Master_SB+0x92>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d032      	beq.n	800402a <I2C_Master_SB+0x100>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02d      	beq.n	800402a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	605a      	str	r2, [r3, #4]
}
 8003fde:	e024      	b.n	800402a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10e      	bne.n	8004006 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	11db      	asrs	r3, r3, #7
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 0306 	and.w	r3, r3, #6
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f063 030f 	orn	r3, r3, #15
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	611a      	str	r2, [r3, #16]
}
 8004004:	e011      	b.n	800402a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400a:	2b01      	cmp	r3, #1
 800400c:	d10d      	bne.n	800402a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	b29b      	uxth	r3, r3
 8004014:	11db      	asrs	r3, r3, #7
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0306 	and.w	r3, r3, #6
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f063 030e 	orn	r3, r3, #14
 8004022:	b2da      	uxtb	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	611a      	str	r2, [r3, #16]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	b2da      	uxtb	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	2b00      	cmp	r3, #0
 8004050:	d004      	beq.n	800405c <I2C_Master_ADD10+0x26>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d108      	bne.n	800406e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <I2C_Master_ADD10+0x48>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407c:	605a      	str	r2, [r3, #4]
  }
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800408a:	b480      	push	{r7}
 800408c:	b091      	sub	sp, #68	; 0x44
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b22      	cmp	r3, #34	; 0x22
 80040b2:	f040 8169 	bne.w	8004388 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10f      	bne.n	80040de <I2C_Master_ADDR+0x54>
 80040be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d10b      	bne.n	80040de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c6:	2300      	movs	r3, #0
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	633b      	str	r3, [r7, #48]	; 0x30
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	e160      	b.n	80043a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <I2C_Master_ADDR+0x98>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040ee:	d118      	bne.n	8004122 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f0:	2300      	movs	r3, #0
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004104:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	651a      	str	r2, [r3, #80]	; 0x50
 8004120:	e13e      	b.n	80043a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d113      	bne.n	8004154 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412c:	2300      	movs	r3, #0
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e115      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	f040 808a 	bne.w	8004274 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004162:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004166:	d137      	bne.n	80041d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004176:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	d113      	bne.n	80041b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004196:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	e0e7      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e0d3      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d02e      	beq.n	800423c <I2C_Master_ADDR+0x1b2>
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d02b      	beq.n	800423c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d102      	bne.n	80041f0 <I2C_Master_ADDR+0x166>
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d125      	bne.n	800423c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00e      	beq.n	8004214 <I2C_Master_ADDR+0x18a>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d00b      	beq.n	8004214 <I2C_Master_ADDR+0x18a>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d008      	beq.n	8004214 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e007      	b.n	8004224 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004222:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	e0a1      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e085      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d14d      	bne.n	800431a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800427e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004280:	2b04      	cmp	r3, #4
 8004282:	d016      	beq.n	80042b2 <I2C_Master_ADDR+0x228>
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	2b02      	cmp	r3, #2
 8004288:	d013      	beq.n	80042b2 <I2C_Master_ADDR+0x228>
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	2b10      	cmp	r3, #16
 800428e:	d010      	beq.n	80042b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e007      	b.n	80042c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d0:	d117      	bne.n	8004302 <I2C_Master_ADDR+0x278>
 80042d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042d8:	d00b      	beq.n	80042f2 <I2C_Master_ADDR+0x268>
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d008      	beq.n	80042f2 <I2C_Master_ADDR+0x268>
 80042e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d005      	beq.n	80042f2 <I2C_Master_ADDR+0x268>
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d002      	beq.n	80042f2 <I2C_Master_ADDR+0x268>
 80042ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d107      	bne.n	8004302 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004300:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	617b      	str	r3, [r7, #20]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	e032      	b.n	8004380 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	d117      	bne.n	800436a <I2C_Master_ADDR+0x2e0>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004340:	d00b      	beq.n	800435a <I2C_Master_ADDR+0x2d0>
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	2b01      	cmp	r3, #1
 8004346:	d008      	beq.n	800435a <I2C_Master_ADDR+0x2d0>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	2b08      	cmp	r3, #8
 800434c:	d005      	beq.n	800435a <I2C_Master_ADDR+0x2d0>
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	2b10      	cmp	r3, #16
 8004352:	d002      	beq.n	800435a <I2C_Master_ADDR+0x2d0>
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b20      	cmp	r3, #32
 8004358:	d107      	bne.n	800436a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004368:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	613b      	str	r3, [r7, #16]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004386:	e00b      	b.n	80043a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	e7ff      	b.n	80043a0 <I2C_Master_ADDR+0x316>
 80043a0:	bf00      	nop
 80043a2:	3744      	adds	r7, #68	; 0x44
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d02b      	beq.n	800441e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	781a      	ldrb	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d114      	bne.n	800441e <I2C_SlaveTransmit_TXE+0x72>
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	2b29      	cmp	r3, #41	; 0x29
 80043f8:	d111      	bne.n	800441e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004408:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2221      	movs	r2, #33	; 0x21
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2228      	movs	r2, #40	; 0x28
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff f9e7 	bl	80037ec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d011      	beq.n	800445c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	781a      	ldrb	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004476:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d02c      	beq.n	80044dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d114      	bne.n	80044dc <I2C_SlaveReceive_RXNE+0x74>
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b2a      	cmp	r3, #42	; 0x2a
 80044b6:	d111      	bne.n	80044dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2222      	movs	r2, #34	; 0x22
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2228      	movs	r2, #40	; 0x28
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff f992 	bl	8003800 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d012      	beq.n	800451c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004542:	2b28      	cmp	r3, #40	; 0x28
 8004544:	d127      	bne.n	8004596 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004562:	2301      	movs	r3, #1
 8004564:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	09db      	lsrs	r3, r3, #7
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	81bb      	strh	r3, [r7, #12]
 8004578:	e002      	b.n	8004580 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004588:	89ba      	ldrh	r2, [r7, #12]
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	4619      	mov	r1, r3
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff f940 	bl	8003814 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004594:	e00e      	b.n	80045b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004596:	2300      	movs	r3, #0
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	60bb      	str	r3, [r7, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045dc:	2300      	movs	r3, #0
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004618:	d172      	bne.n	8004700 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b22      	cmp	r3, #34	; 0x22
 800461e:	d002      	beq.n	8004626 <I2C_Slave_STOPF+0x6a>
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2b2a      	cmp	r3, #42	; 0x2a
 8004624:	d135      	bne.n	8004692 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b29a      	uxth	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004658:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	4618      	mov	r0, r3
 8004660:	f7fd ff8e 	bl	8002580 <HAL_DMA_GetState>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d049      	beq.n	80046fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	4a69      	ldr	r2, [pc, #420]	; (8004814 <I2C_Slave_STOPF+0x258>)
 8004670:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	4618      	mov	r0, r3
 8004678:	f7fd fdd6 	bl	8002228 <HAL_DMA_Abort_IT>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d03d      	beq.n	80046fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800468c:	4610      	mov	r0, r2
 800468e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004690:	e035      	b.n	80046fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0204 	orr.w	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd ff58 	bl	8002580 <HAL_DMA_GetState>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d014      	beq.n	8004700 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <I2C_Slave_STOPF+0x258>)
 80046dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fd fda0 	bl	8002228 <HAL_DMA_Abort_IT>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f8:	4610      	mov	r0, r2
 80046fa:	4798      	blx	r3
 80046fc:	e000      	b.n	8004700 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d03e      	beq.n	8004788 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d112      	bne.n	800473e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	691a      	ldr	r2, [r3, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b40      	cmp	r3, #64	; 0x40
 800474a:	d112      	bne.n	8004772 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691a      	ldr	r2, [r3, #16]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	3b01      	subs	r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f043 0204 	orr.w	r2, r3, #4
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f8b3 	bl	80048fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004796:	e039      	b.n	800480c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b2a      	cmp	r3, #42	; 0x2a
 800479c:	d109      	bne.n	80047b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2228      	movs	r2, #40	; 0x28
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff f827 	bl	8003800 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b28      	cmp	r3, #40	; 0x28
 80047bc:	d111      	bne.n	80047e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a15      	ldr	r2, [pc, #84]	; (8004818 <I2C_Slave_STOPF+0x25c>)
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff f828 	bl	8003830 <HAL_I2C_ListenCpltCallback>
}
 80047e0:	e014      	b.n	800480c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	2b22      	cmp	r3, #34	; 0x22
 80047e8:	d002      	beq.n	80047f0 <I2C_Slave_STOPF+0x234>
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	2b22      	cmp	r3, #34	; 0x22
 80047ee:	d10d      	bne.n	800480c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fe fffa 	bl	8003800 <HAL_I2C_SlaveRxCpltCallback>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	08004e5d 	.word	0x08004e5d
 8004818:	ffff0000 	.word	0xffff0000

0800481c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d002      	beq.n	800483e <I2C_Slave_AF+0x22>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b20      	cmp	r3, #32
 800483c:	d129      	bne.n	8004892 <I2C_Slave_AF+0x76>
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b28      	cmp	r3, #40	; 0x28
 8004842:	d126      	bne.n	8004892 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <I2C_Slave_AF+0xdc>)
 8004848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004858:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004862:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fe ffd0 	bl	8003830 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004890:	e02e      	b.n	80048f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b21      	cmp	r3, #33	; 0x21
 8004896:	d126      	bne.n	80048e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <I2C_Slave_AF+0xdc>)
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7fe ff84 	bl	80037ec <HAL_I2C_SlaveTxCpltCallback>
}
 80048e4:	e004      	b.n	80048f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ee:	615a      	str	r2, [r3, #20]
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	ffff0000 	.word	0xffff0000

080048fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	2b10      	cmp	r3, #16
 8004918:	d002      	beq.n	8004920 <I2C_ITError+0x24>
 800491a:	7bbb      	ldrb	r3, [r7, #14]
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d10a      	bne.n	8004936 <I2C_ITError+0x3a>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b22      	cmp	r3, #34	; 0x22
 8004924:	d107      	bne.n	8004936 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004934:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800493c:	2b28      	cmp	r3, #40	; 0x28
 800493e:	d107      	bne.n	8004950 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2228      	movs	r2, #40	; 0x28
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800494e:	e015      	b.n	800497c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495e:	d00a      	beq.n	8004976 <I2C_ITError+0x7a>
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b60      	cmp	r3, #96	; 0x60
 8004964:	d007      	beq.n	8004976 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d162      	bne.n	8004a52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d020      	beq.n	80049ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <I2C_ITError+0x25c>)
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fc36 	bl	8002228 <HAL_DMA_Abort_IT>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8089 	beq.w	8004ad6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049e6:	4610      	mov	r0, r2
 80049e8:	4798      	blx	r3
 80049ea:	e074      	b.n	8004ad6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4a59      	ldr	r2, [pc, #356]	; (8004b58 <I2C_ITError+0x25c>)
 80049f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fd fc15 	bl	8002228 <HAL_DMA_Abort_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d068      	beq.n	8004ad6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10b      	bne.n	8004a2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
 8004a50:	e041      	b.n	8004ad6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b60      	cmp	r3, #96	; 0x60
 8004a5c:	d125      	bne.n	8004aaa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2220      	movs	r2, #32
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d10b      	bne.n	8004a92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe feec 	bl	8003880 <HAL_I2C_AbortCpltCallback>
 8004aa8:	e015      	b.n	8004ad6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d10b      	bne.n	8004ad0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691a      	ldr	r2, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fe fecb 	bl	800386c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10e      	bne.n	8004b04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d109      	bne.n	8004b04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d104      	bne.n	8004b04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d113      	bne.n	8004b50 <I2C_ITError+0x254>
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
 8004b2a:	2b28      	cmp	r3, #40	; 0x28
 8004b2c:	d110      	bne.n	8004b50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <I2C_ITError+0x260>)
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fe fe70 	bl	8003830 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08004e5d 	.word	0x08004e5d
 8004b5c:	ffff0000 	.word	0xffff0000

08004b60 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	817b      	strh	r3, [r7, #10]
 8004b72:	460b      	mov	r3, r1
 8004b74:	813b      	strh	r3, [r7, #8]
 8004b76:	4613      	mov	r3, r2
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fa08 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb0:	d103      	bne.n	8004bba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e05f      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bbe:	897b      	ldrh	r3, [r7, #10]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	6a3a      	ldr	r2, [r7, #32]
 8004bd2:	492d      	ldr	r1, [pc, #180]	; (8004c88 <I2C_RequestMemoryWrite+0x128>)
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 fa40 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e04c      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 faaa 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d107      	bne.n	8004c22 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02b      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d105      	bne.n	8004c38 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	611a      	str	r2, [r3, #16]
 8004c36:	e021      	b.n	8004c7c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c38:	893b      	ldrh	r3, [r7, #8]
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	6a39      	ldr	r1, [r7, #32]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fa84 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d107      	bne.n	8004c6e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e005      	b.n	8004c7e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c72:	893b      	ldrh	r3, [r7, #8]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	00010002 	.word	0x00010002

08004c8c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cb4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f96a 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cec:	d103      	bne.n	8004cf6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0aa      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfa:	897b      	ldrh	r3, [r7, #10]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	4952      	ldr	r1, [pc, #328]	; (8004e58 <I2C_RequestMemoryRead+0x1cc>)
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f9a2 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e097      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d20:	2300      	movs	r3, #0
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fa0c 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d107      	bne.n	8004d5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e076      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d68:	893b      	ldrh	r3, [r7, #8]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	611a      	str	r2, [r3, #16]
 8004d72:	e021      	b.n	8004db8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d74:	893b      	ldrh	r3, [r7, #8]
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	6a39      	ldr	r1, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f9e6 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00d      	beq.n	8004dae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d107      	bne.n	8004daa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e050      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dae:	893b      	ldrh	r3, [r7, #8]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	6a39      	ldr	r1, [r7, #32]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f9cb 	bl	8005158 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d107      	bne.n	8004de0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e035      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f000 f8d3 	bl	8004fac <I2C_WaitOnFlagUntilTimeout>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e1a:	d103      	bne.n	8004e24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e013      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e28:	897b      	ldrh	r3, [r7, #10]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	6a3a      	ldr	r2, [r7, #32]
 8004e3c:	4906      	ldr	r1, [pc, #24]	; (8004e58 <I2C_RequestMemoryRead+0x1cc>)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f90b 	bl	800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e76:	4b4b      	ldr	r3, [pc, #300]	; (8004fa4 <I2C_DMAAbort+0x148>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	08db      	lsrs	r3, r3, #3
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <I2C_DMAAbort+0x14c>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	0a1a      	lsrs	r2, r3, #8
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	00da      	lsls	r2, r3, #3
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004ea2:	e00a      	b.n	8004eba <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d0ea      	beq.n	8004e90 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	2200      	movs	r2, #0
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d10e      	bne.n	8004f4a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f42:	6978      	ldr	r0, [r7, #20]
 8004f44:	f7fe fc9c 	bl	8003880 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f48:	e027      	b.n	8004f9a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f50:	2b28      	cmp	r3, #40	; 0x28
 8004f52:	d117      	bne.n	8004f84 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2228      	movs	r2, #40	; 0x28
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f82:	e007      	b.n	8004f94 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f94:	6978      	ldr	r0, [r7, #20]
 8004f96:	f7fe fc69 	bl	800386c <HAL_I2C_ErrorCallback>
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000000 	.word	0x20000000
 8004fa8:	14f8b589 	.word	0x14f8b589

08004fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fbc:	e025      	b.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d021      	beq.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fc f9d5 	bl	8001374 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e023      	b.n	8005052 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d10d      	bne.n	8005030 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4013      	ands	r3, r2
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	e00c      	b.n	800504a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	43da      	mvns	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4013      	ands	r3, r2
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	bf0c      	ite	eq
 8005042:	2301      	moveq	r3, #1
 8005044:	2300      	movne	r3, #0
 8005046:	b2db      	uxtb	r3, r3
 8005048:	461a      	mov	r2, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	429a      	cmp	r2, r3
 800504e:	d0b6      	beq.n	8004fbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005068:	e051      	b.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005078:	d123      	bne.n	80050c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005088:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005092:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e046      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d021      	beq.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ca:	f7fc f953 	bl	8001374 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d302      	bcc.n	80050e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d116      	bne.n	800510e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2220      	movs	r2, #32
 80050ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e020      	b.n	8005150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d10c      	bne.n	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e00b      	b.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	43da      	mvns	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	4013      	ands	r3, r2
 800513e:	b29b      	uxth	r3, r3
 8005140:	2b00      	cmp	r3, #0
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d18d      	bne.n	800506a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005164:	e02d      	b.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f900 	bl	800536c <I2C_IsAcknowledgeFailed>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e02d      	b.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d021      	beq.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800517e:	f7fc f8f9 	bl	8001374 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	d302      	bcc.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e007      	b.n	80051d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d1ca      	bne.n	8005166 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051e6:	e02d      	b.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f8bf 	bl	800536c <I2C_IsAcknowledgeFailed>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e02d      	b.n	8005254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d021      	beq.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fc f8b8 	bl	8001374 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f043 0220 	orr.w	r2, r3, #32
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e007      	b.n	8005254 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d1ca      	bne.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005268:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	08db      	lsrs	r3, r3, #3
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	0a1a      	lsrs	r2, r3, #8
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b01      	subs	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e008      	b.n	80052ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a8:	d0e9      	beq.n	800527e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000000 	.word	0x20000000
 80052bc:	14f8b589 	.word	0x14f8b589

080052c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052cc:	e042      	b.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d119      	bne.n	8005310 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0210 	mvn.w	r2, #16
 80052e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e029      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fc f830 	bl	8001374 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e007      	b.n	8005364 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d1b5      	bne.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005382:	d11b      	bne.n	80053bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800538c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f043 0204 	orr.w	r2, r3, #4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b083      	sub	sp, #12
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80053da:	d103      	bne.n	80053e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053e2:	e007      	b.n	80053f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053ec:	d102      	bne.n	80053f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2208      	movs	r2, #8
 80053f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e267      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d075      	beq.n	800550a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800541e:	4b88      	ldr	r3, [pc, #544]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b04      	cmp	r3, #4
 8005428:	d00c      	beq.n	8005444 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800542a:	4b85      	ldr	r3, [pc, #532]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005432:	2b08      	cmp	r3, #8
 8005434:	d112      	bne.n	800545c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005436:	4b82      	ldr	r3, [pc, #520]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005442:	d10b      	bne.n	800545c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005444:	4b7e      	ldr	r3, [pc, #504]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d05b      	beq.n	8005508 <HAL_RCC_OscConfig+0x108>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d157      	bne.n	8005508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e242      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005464:	d106      	bne.n	8005474 <HAL_RCC_OscConfig+0x74>
 8005466:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a75      	ldr	r2, [pc, #468]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e01d      	b.n	80054b0 <HAL_RCC_OscConfig+0xb0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800547c:	d10c      	bne.n	8005498 <HAL_RCC_OscConfig+0x98>
 800547e:	4b70      	ldr	r3, [pc, #448]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a6f      	ldr	r2, [pc, #444]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	4b6d      	ldr	r3, [pc, #436]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a6c      	ldr	r2, [pc, #432]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e00b      	b.n	80054b0 <HAL_RCC_OscConfig+0xb0>
 8005498:	4b69      	ldr	r3, [pc, #420]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a68      	ldr	r2, [pc, #416]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800549e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4b66      	ldr	r3, [pc, #408]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a65      	ldr	r2, [pc, #404]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80054aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d013      	beq.n	80054e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b8:	f7fb ff5c 	bl	8001374 <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c0:	f7fb ff58 	bl	8001374 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	; 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e207      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	4b5b      	ldr	r3, [pc, #364]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0xc0>
 80054de:	e014      	b.n	800550a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e0:	f7fb ff48 	bl	8001374 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fb ff44 	bl	8001374 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	; 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e1f3      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0xe8>
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d063      	beq.n	80055de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005516:	4b4a      	ldr	r3, [pc, #296]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005522:	4b47      	ldr	r3, [pc, #284]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800552a:	2b08      	cmp	r3, #8
 800552c:	d11c      	bne.n	8005568 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800552e:	4b44      	ldr	r3, [pc, #272]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d116      	bne.n	8005568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800553a:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_RCC_OscConfig+0x152>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e1c7      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005552:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4937      	ldr	r1, [pc, #220]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005566:	e03a      	b.n	80055de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005570:	4b34      	ldr	r3, [pc, #208]	; (8005644 <HAL_RCC_OscConfig+0x244>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fb fefd 	bl	8001374 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557e:	f7fb fef9 	bl	8001374 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e1a8      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	4b28      	ldr	r3, [pc, #160]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4925      	ldr	r1, [pc, #148]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
 80055b0:	e015      	b.n	80055de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <HAL_RCC_OscConfig+0x244>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fb fedc 	bl	8001374 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c0:	f7fb fed8 	bl	8001374 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e187      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f2:	4b15      	ldr	r3, [pc, #84]	; (8005648 <HAL_RCC_OscConfig+0x248>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f8:	f7fb febc 	bl	8001374 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005600:	f7fb feb8 	bl	8001374 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e167      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_OscConfig+0x240>)
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x200>
 800561e:	e01b      	b.n	8005658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <HAL_RCC_OscConfig+0x248>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005626:	f7fb fea5 	bl	8001374 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800562c:	e00e      	b.n	800564c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800562e:	f7fb fea1 	bl	8001374 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d907      	bls.n	800564c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e150      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
 8005640:	40023800 	.word	0x40023800
 8005644:	42470000 	.word	0x42470000
 8005648:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800564c:	4b88      	ldr	r3, [pc, #544]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800564e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ea      	bne.n	800562e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8097 	beq.w	8005794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800566a:	4b81      	ldr	r3, [pc, #516]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10f      	bne.n	8005696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	4b7d      	ldr	r3, [pc, #500]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a7c      	ldr	r2, [pc, #496]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
 8005686:	4b7a      	ldr	r3, [pc, #488]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568e:	60bb      	str	r3, [r7, #8]
 8005690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005696:	4b77      	ldr	r3, [pc, #476]	; (8005874 <HAL_RCC_OscConfig+0x474>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d118      	bne.n	80056d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a2:	4b74      	ldr	r3, [pc, #464]	; (8005874 <HAL_RCC_OscConfig+0x474>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a73      	ldr	r2, [pc, #460]	; (8005874 <HAL_RCC_OscConfig+0x474>)
 80056a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ae:	f7fb fe61 	bl	8001374 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b6:	f7fb fe5d 	bl	8001374 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e10c      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	4b6a      	ldr	r3, [pc, #424]	; (8005874 <HAL_RCC_OscConfig+0x474>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d106      	bne.n	80056ea <HAL_RCC_OscConfig+0x2ea>
 80056dc:	4b64      	ldr	r3, [pc, #400]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	4a63      	ldr	r2, [pc, #396]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	6713      	str	r3, [r2, #112]	; 0x70
 80056e8:	e01c      	b.n	8005724 <HAL_RCC_OscConfig+0x324>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0x30c>
 80056f2:	4b5f      	ldr	r3, [pc, #380]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a5e      	ldr	r2, [pc, #376]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	6713      	str	r3, [r2, #112]	; 0x70
 80056fe:	4b5c      	ldr	r3, [pc, #368]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a5b      	ldr	r2, [pc, #364]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
 800570a:	e00b      	b.n	8005724 <HAL_RCC_OscConfig+0x324>
 800570c:	4b58      	ldr	r3, [pc, #352]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	4a57      	ldr	r2, [pc, #348]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	6713      	str	r3, [r2, #112]	; 0x70
 8005718:	4b55      	ldr	r3, [pc, #340]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800571a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571c:	4a54      	ldr	r2, [pc, #336]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800571e:	f023 0304 	bic.w	r3, r3, #4
 8005722:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fb fe22 	bl	8001374 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005732:	e00a      	b.n	800574a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005734:	f7fb fe1e 	bl	8001374 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0cb      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800574a:	4b49      	ldr	r3, [pc, #292]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ee      	beq.n	8005734 <HAL_RCC_OscConfig+0x334>
 8005756:	e014      	b.n	8005782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005758:	f7fb fe0c 	bl	8001374 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575e:	e00a      	b.n	8005776 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005760:	f7fb fe08 	bl	8001374 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f241 3288 	movw	r2, #5000	; 0x1388
 800576e:	4293      	cmp	r3, r2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e0b5      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005776:	4b3e      	ldr	r3, [pc, #248]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ee      	bne.n	8005760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005788:	4b39      	ldr	r3, [pc, #228]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	4a38      	ldr	r2, [pc, #224]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005792:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80a1 	beq.w	80058e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800579e:	4b34      	ldr	r3, [pc, #208]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d05c      	beq.n	8005864 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d141      	bne.n	8005836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCC_OscConfig+0x478>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b8:	f7fb fddc 	bl	8001374 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c0:	f7fb fdd8 	bl	8001374 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e087      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	4b27      	ldr	r3, [pc, #156]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	69da      	ldr	r2, [r3, #28]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	019b      	lsls	r3, r3, #6
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	3b01      	subs	r3, #1
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	491b      	ldr	r1, [pc, #108]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005808:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <HAL_RCC_OscConfig+0x478>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580e:	f7fb fdb1 	bl	8001374 <HAL_GetTick>
 8005812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005814:	e008      	b.n	8005828 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005816:	f7fb fdad 	bl	8001374 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b02      	cmp	r3, #2
 8005822:	d901      	bls.n	8005828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e05c      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0f0      	beq.n	8005816 <HAL_RCC_OscConfig+0x416>
 8005834:	e054      	b.n	80058e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	4b10      	ldr	r3, [pc, #64]	; (8005878 <HAL_RCC_OscConfig+0x478>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7fb fd9a 	bl	8001374 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005844:	f7fb fd96 	bl	8001374 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e045      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <HAL_RCC_OscConfig+0x470>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x444>
 8005862:	e03d      	b.n	80058e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d107      	bne.n	800587c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e038      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
 8005870:	40023800 	.word	0x40023800
 8005874:	40007000 	.word	0x40007000
 8005878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800587c:	4b1b      	ldr	r3, [pc, #108]	; (80058ec <HAL_RCC_OscConfig+0x4ec>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d028      	beq.n	80058dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005894:	429a      	cmp	r2, r3
 8005896:	d121      	bne.n	80058dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d11a      	bne.n	80058dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058ac:	4013      	ands	r3, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d111      	bne.n	80058dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	3b01      	subs	r3, #1
 80058c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d107      	bne.n	80058dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800

080058f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0cc      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005904:	4b68      	ldr	r3, [pc, #416]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d90c      	bls.n	800592c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b65      	ldr	r3, [pc, #404]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b63      	ldr	r3, [pc, #396]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0b8      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d020      	beq.n	800597a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005944:	4b59      	ldr	r3, [pc, #356]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a58      	ldr	r2, [pc, #352]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800594a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800594e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800595c:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4a52      	ldr	r2, [pc, #328]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b50      	ldr	r3, [pc, #320]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	494d      	ldr	r1, [pc, #308]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d044      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d119      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e07f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b3f      	ldr	r3, [pc, #252]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d109      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e06f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059be:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e067      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ce:	4b37      	ldr	r3, [pc, #220]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 0203 	bic.w	r2, r3, #3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4934      	ldr	r1, [pc, #208]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e0:	f7fb fcc8 	bl	8001374 <HAL_GetTick>
 80059e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e6:	e00a      	b.n	80059fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e8:	f7fb fcc4 	bl	8001374 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e04f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 020c 	and.w	r2, r3, #12
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d1eb      	bne.n	80059e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d20c      	bcs.n	8005a38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1e:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a26:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e032      	b.n	8005a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	4916      	ldr	r1, [pc, #88]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0308 	and.w	r3, r3, #8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	490e      	ldr	r1, [pc, #56]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a76:	f000 f821 	bl	8005abc <HAL_RCC_GetSysClockFreq>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	091b      	lsrs	r3, r3, #4
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	490a      	ldr	r1, [pc, #40]	; (8005ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a88:	5ccb      	ldrb	r3, [r1, r3]
 8005a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8e:	4a09      	ldr	r2, [pc, #36]	; (8005ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fb fc28 	bl	80012ec <HAL_InitTick>

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023c00 	.word	0x40023c00
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	08005ea4 	.word	0x08005ea4
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	20000004 	.word	0x20000004

08005abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac0:	b090      	sub	sp, #64	; 0x40
 8005ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac8:	2300      	movs	r3, #0
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005acc:	2300      	movs	r3, #0
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad4:	4b59      	ldr	r3, [pc, #356]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 030c 	and.w	r3, r3, #12
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d00d      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0x40>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	f200 80a1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aee:	e09b      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005af0:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005af4:	e09b      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005af6:	4b53      	ldr	r3, [pc, #332]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005afa:	e098      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005afc:	4b4f      	ldr	r3, [pc, #316]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b06:	4b4d      	ldr	r3, [pc, #308]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d028      	beq.n	8005b64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b12:	4b4a      	ldr	r3, [pc, #296]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	099b      	lsrs	r3, r3, #6
 8005b18:	2200      	movs	r2, #0
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b24:	2100      	movs	r1, #0
 8005b26:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b28:	fb03 f201 	mul.w	r2, r3, r1
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	fb00 f303 	mul.w	r3, r0, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	4a43      	ldr	r2, [pc, #268]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b36:	fba0 1202 	umull	r1, r2, r0, r2
 8005b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b3c:	460a      	mov	r2, r1
 8005b3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b42:	4413      	add	r3, r2
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	2200      	movs	r2, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	61fa      	str	r2, [r7, #28]
 8005b4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b56:	f7fa fb3f 	bl	80001d8 <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4613      	mov	r3, r2
 8005b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b62:	e053      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b64:	4b35      	ldr	r3, [pc, #212]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	099b      	lsrs	r3, r3, #6
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	617a      	str	r2, [r7, #20]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b76:	f04f 0b00 	mov.w	fp, #0
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	465b      	mov	r3, fp
 8005b7e:	f04f 0000 	mov.w	r0, #0
 8005b82:	f04f 0100 	mov.w	r1, #0
 8005b86:	0159      	lsls	r1, r3, #5
 8005b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b8c:	0150      	lsls	r0, r2, #5
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	ebb2 080a 	subs.w	r8, r2, sl
 8005b96:	eb63 090b 	sbc.w	r9, r3, fp
 8005b9a:	f04f 0200 	mov.w	r2, #0
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ba6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005baa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005bae:	ebb2 0408 	subs.w	r4, r2, r8
 8005bb2:	eb63 0509 	sbc.w	r5, r3, r9
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	f04f 0300 	mov.w	r3, #0
 8005bbe:	00eb      	lsls	r3, r5, #3
 8005bc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc4:	00e2      	lsls	r2, r4, #3
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	461d      	mov	r5, r3
 8005bca:	eb14 030a 	adds.w	r3, r4, sl
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	eb45 030b 	adc.w	r3, r5, fp
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	60fa      	str	r2, [r7, #12]
 8005bfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c00:	f7fa faea 	bl	80001d8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3740      	adds	r7, #64	; 0x40
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	017d7840 	.word	0x017d7840

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000000 	.word	0x20000000

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08005eb4 	.word	0x08005eb4

08005c88 <calloc>:
 8005c88:	4b02      	ldr	r3, [pc, #8]	; (8005c94 <calloc+0xc>)
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	4601      	mov	r1, r0
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	f000 b834 	b.w	8005cfc <_calloc_r>
 8005c94:	2000000c 	.word	0x2000000c

08005c98 <__errno>:
 8005c98:	4b01      	ldr	r3, [pc, #4]	; (8005ca0 <__errno+0x8>)
 8005c9a:	6818      	ldr	r0, [r3, #0]
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <__libc_init_array>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4d0d      	ldr	r5, [pc, #52]	; (8005cdc <__libc_init_array+0x38>)
 8005ca8:	4c0d      	ldr	r4, [pc, #52]	; (8005ce0 <__libc_init_array+0x3c>)
 8005caa:	1b64      	subs	r4, r4, r5
 8005cac:	10a4      	asrs	r4, r4, #2
 8005cae:	2600      	movs	r6, #0
 8005cb0:	42a6      	cmp	r6, r4
 8005cb2:	d109      	bne.n	8005cc8 <__libc_init_array+0x24>
 8005cb4:	4d0b      	ldr	r5, [pc, #44]	; (8005ce4 <__libc_init_array+0x40>)
 8005cb6:	4c0c      	ldr	r4, [pc, #48]	; (8005ce8 <__libc_init_array+0x44>)
 8005cb8:	f000 f8e8 	bl	8005e8c <_init>
 8005cbc:	1b64      	subs	r4, r4, r5
 8005cbe:	10a4      	asrs	r4, r4, #2
 8005cc0:	2600      	movs	r6, #0
 8005cc2:	42a6      	cmp	r6, r4
 8005cc4:	d105      	bne.n	8005cd2 <__libc_init_array+0x2e>
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ccc:	4798      	blx	r3
 8005cce:	3601      	adds	r6, #1
 8005cd0:	e7ee      	b.n	8005cb0 <__libc_init_array+0xc>
 8005cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cd6:	4798      	blx	r3
 8005cd8:	3601      	adds	r6, #1
 8005cda:	e7f2      	b.n	8005cc2 <__libc_init_array+0x1e>
 8005cdc:	08005ecc 	.word	0x08005ecc
 8005ce0:	08005ecc 	.word	0x08005ecc
 8005ce4:	08005ecc 	.word	0x08005ecc
 8005ce8:	08005ed0 	.word	0x08005ed0

08005cec <memset>:
 8005cec:	4402      	add	r2, r0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d100      	bne.n	8005cf6 <memset+0xa>
 8005cf4:	4770      	bx	lr
 8005cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfa:	e7f9      	b.n	8005cf0 <memset+0x4>

08005cfc <_calloc_r>:
 8005cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cfe:	fba1 2402 	umull	r2, r4, r1, r2
 8005d02:	b94c      	cbnz	r4, 8005d18 <_calloc_r+0x1c>
 8005d04:	4611      	mov	r1, r2
 8005d06:	9201      	str	r2, [sp, #4]
 8005d08:	f000 f82e 	bl	8005d68 <_malloc_r>
 8005d0c:	9a01      	ldr	r2, [sp, #4]
 8005d0e:	4605      	mov	r5, r0
 8005d10:	b930      	cbnz	r0, 8005d20 <_calloc_r+0x24>
 8005d12:	4628      	mov	r0, r5
 8005d14:	b003      	add	sp, #12
 8005d16:	bd30      	pop	{r4, r5, pc}
 8005d18:	220c      	movs	r2, #12
 8005d1a:	6002      	str	r2, [r0, #0]
 8005d1c:	2500      	movs	r5, #0
 8005d1e:	e7f8      	b.n	8005d12 <_calloc_r+0x16>
 8005d20:	4621      	mov	r1, r4
 8005d22:	f7ff ffe3 	bl	8005cec <memset>
 8005d26:	e7f4      	b.n	8005d12 <_calloc_r+0x16>

08005d28 <sbrk_aligned>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4e0e      	ldr	r6, [pc, #56]	; (8005d64 <sbrk_aligned+0x3c>)
 8005d2c:	460c      	mov	r4, r1
 8005d2e:	6831      	ldr	r1, [r6, #0]
 8005d30:	4605      	mov	r5, r0
 8005d32:	b911      	cbnz	r1, 8005d3a <sbrk_aligned+0x12>
 8005d34:	f000 f88c 	bl	8005e50 <_sbrk_r>
 8005d38:	6030      	str	r0, [r6, #0]
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 f887 	bl	8005e50 <_sbrk_r>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d00a      	beq.n	8005d5c <sbrk_aligned+0x34>
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d007      	beq.n	8005d60 <sbrk_aligned+0x38>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 f87c 	bl	8005e50 <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d101      	bne.n	8005d60 <sbrk_aligned+0x38>
 8005d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d60:	4620      	mov	r0, r4
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	20002194 	.word	0x20002194

08005d68 <_malloc_r>:
 8005d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6c:	1ccd      	adds	r5, r1, #3
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	2d00      	cmp	r5, #0
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	db01      	blt.n	8005d84 <_malloc_r+0x1c>
 8005d80:	42a9      	cmp	r1, r5
 8005d82:	d905      	bls.n	8005d90 <_malloc_r+0x28>
 8005d84:	230c      	movs	r3, #12
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	2600      	movs	r6, #0
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	4e2e      	ldr	r6, [pc, #184]	; (8005e4c <_malloc_r+0xe4>)
 8005d92:	f000 f86d 	bl	8005e70 <__malloc_lock>
 8005d96:	6833      	ldr	r3, [r6, #0]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb34      	cbnz	r4, 8005dea <_malloc_r+0x82>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc2 	bl	8005d28 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d14d      	bne.n	8005e46 <_malloc_r+0xde>
 8005daa:	6834      	ldr	r4, [r6, #0]
 8005dac:	4626      	mov	r6, r4
 8005dae:	2e00      	cmp	r6, #0
 8005db0:	d140      	bne.n	8005e34 <_malloc_r+0xcc>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	4631      	mov	r1, r6
 8005db6:	4638      	mov	r0, r7
 8005db8:	eb04 0803 	add.w	r8, r4, r3
 8005dbc:	f000 f848 	bl	8005e50 <_sbrk_r>
 8005dc0:	4580      	cmp	r8, r0
 8005dc2:	d13a      	bne.n	8005e3a <_malloc_r+0xd2>
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	3503      	adds	r5, #3
 8005dc8:	1a6d      	subs	r5, r5, r1
 8005dca:	f025 0503 	bic.w	r5, r5, #3
 8005dce:	3508      	adds	r5, #8
 8005dd0:	2d0c      	cmp	r5, #12
 8005dd2:	bf38      	it	cc
 8005dd4:	250c      	movcc	r5, #12
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa5 	bl	8005d28 <sbrk_aligned>
 8005dde:	3001      	adds	r0, #1
 8005de0:	d02b      	beq.n	8005e3a <_malloc_r+0xd2>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	442b      	add	r3, r5
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	e00e      	b.n	8005e08 <_malloc_r+0xa0>
 8005dea:	6822      	ldr	r2, [r4, #0]
 8005dec:	1b52      	subs	r2, r2, r5
 8005dee:	d41e      	bmi.n	8005e2e <_malloc_r+0xc6>
 8005df0:	2a0b      	cmp	r2, #11
 8005df2:	d916      	bls.n	8005e22 <_malloc_r+0xba>
 8005df4:	1961      	adds	r1, r4, r5
 8005df6:	42a3      	cmp	r3, r4
 8005df8:	6025      	str	r5, [r4, #0]
 8005dfa:	bf18      	it	ne
 8005dfc:	6059      	strne	r1, [r3, #4]
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	bf08      	it	eq
 8005e02:	6031      	streq	r1, [r6, #0]
 8005e04:	5162      	str	r2, [r4, r5]
 8005e06:	604b      	str	r3, [r1, #4]
 8005e08:	4638      	mov	r0, r7
 8005e0a:	f104 060b 	add.w	r6, r4, #11
 8005e0e:	f000 f835 	bl	8005e7c <__malloc_unlock>
 8005e12:	f026 0607 	bic.w	r6, r6, #7
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	1af2      	subs	r2, r6, r3
 8005e1a:	d0b6      	beq.n	8005d8a <_malloc_r+0x22>
 8005e1c:	1b9b      	subs	r3, r3, r6
 8005e1e:	50a3      	str	r3, [r4, r2]
 8005e20:	e7b3      	b.n	8005d8a <_malloc_r+0x22>
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	bf0c      	ite	eq
 8005e28:	6032      	streq	r2, [r6, #0]
 8005e2a:	605a      	strne	r2, [r3, #4]
 8005e2c:	e7ec      	b.n	8005e08 <_malloc_r+0xa0>
 8005e2e:	4623      	mov	r3, r4
 8005e30:	6864      	ldr	r4, [r4, #4]
 8005e32:	e7b2      	b.n	8005d9a <_malloc_r+0x32>
 8005e34:	4634      	mov	r4, r6
 8005e36:	6876      	ldr	r6, [r6, #4]
 8005e38:	e7b9      	b.n	8005dae <_malloc_r+0x46>
 8005e3a:	230c      	movs	r3, #12
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	f000 f81c 	bl	8005e7c <__malloc_unlock>
 8005e44:	e7a1      	b.n	8005d8a <_malloc_r+0x22>
 8005e46:	6025      	str	r5, [r4, #0]
 8005e48:	e7de      	b.n	8005e08 <_malloc_r+0xa0>
 8005e4a:	bf00      	nop
 8005e4c:	20002190 	.word	0x20002190

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb f9b2 	bl	80011c4 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	20002198 	.word	0x20002198

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_lock+0x8>)
 8005e72:	f000 b809 	b.w	8005e88 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	2000219c 	.word	0x2000219c

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f000 b804 	b.w	8005e8a <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	2000219c 	.word	0x2000219c

08005e88 <__retarget_lock_acquire_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <__retarget_lock_release_recursive>:
 8005e8a:	4770      	bx	lr

08005e8c <_init>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	bf00      	nop
 8005e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e92:	bc08      	pop	{r3}
 8005e94:	469e      	mov	lr, r3
 8005e96:	4770      	bx	lr

08005e98 <_fini>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	bf00      	nop
 8005e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9e:	bc08      	pop	{r3}
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	4770      	bx	lr
