
Nucleo_I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e28  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd8  08003fd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe0  08003fe0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08004058  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08004058  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c93  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ff  00000000  00000000  00028d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002a538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015150  00000000  00000000  0002b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a509  00000000  00000000  000405e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084375  00000000  00000000  0004aaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cee66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002248  00000000  00000000  000ceeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fa8 	.word	0x08003fa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003fa8 	.word	0x08003fa8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <AS5600_New>:

#include "as5600.h"
/**********************    GLOBAL VARIABLES    ***********************/

/*******************    FUNCTION IMPLEMENTATIONS    ********************/
AS5600_TypeDef *AS5600_New(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    AS5600_TypeDef *a = (AS5600_TypeDef *)calloc(1, sizeof(AS5600_TypeDef));
 80004e2:	2118      	movs	r1, #24
 80004e4:	2001      	movs	r0, #1
 80004e6:	f003 fc5d 	bl	8003da4 <calloc>
 80004ea:	4603      	mov	r3, r0
 80004ec:	607b      	str	r3, [r7, #4]
    return a;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <AS5600_Init>:

HAL_StatusTypeDef AS5600_Init(AS5600_TypeDef *a) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73bb      	strb	r3, [r7, #14]
    uint8_t pwm = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_status = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	737b      	strb	r3, [r7, #13]
    /* Set configuration defaults for uninitialized values. */
    if (!(a->PositiveRotationDirection)) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7b9b      	ldrb	r3, [r3, #14]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <AS5600_Init+0x22>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2201      	movs	r2, #1
 8000518:	739a      	strb	r2, [r3, #14]
    }
    if (!(a->LowPowerMode)) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7bdb      	ldrb	r3, [r3, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <AS5600_Init+0x30>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2201      	movs	r2, #1
 8000526:	73da      	strb	r2, [r3, #15]
    }
    if (!(a->Hysteresis)) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7c1b      	ldrb	r3, [r3, #16]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <AS5600_Init+0x3e>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2201      	movs	r2, #1
 8000534:	741a      	strb	r2, [r3, #16]
    }
    if (!(a->OutputMode)) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7c5b      	ldrb	r3, [r3, #17]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d102      	bne.n	8000544 <AS5600_Init+0x4c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2201      	movs	r2, #1
 8000542:	745a      	strb	r2, [r3, #17]
    }
    if (!(a->PWMFrequency)) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7c9b      	ldrb	r3, [r3, #18]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <AS5600_Init+0x5a>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2201      	movs	r2, #1
 8000550:	749a      	strb	r2, [r3, #18]
    }
    if (!(a->SlowFilter)) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7cdb      	ldrb	r3, [r3, #19]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d102      	bne.n	8000560 <AS5600_Init+0x68>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	74da      	strb	r2, [r3, #19]
    }
    if (!(a->FastFilterThreshold)) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7d1b      	ldrb	r3, [r3, #20]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <AS5600_Init+0x76>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	751a      	strb	r2, [r3, #20]
    }
    if (!(a->WatchdogTimer)) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7d5b      	ldrb	r3, [r3, #21]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <AS5600_Init+0x84>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	755a      	strb	r2, [r3, #21]
    }
    /* Write configuration settings.
       Do this in single write instead of using functions below to avoid
       overhead of multiple calls to HAL_I2C_Mem_Write_IT */
    switch (a->LowPowerMode) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7bdb      	ldrb	r3, [r3, #15]
 8000580:	3b01      	subs	r3, #1
 8000582:	2b03      	cmp	r3, #3
 8000584:	d83e      	bhi.n	8000604 <AS5600_Init+0x10c>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <AS5600_Init+0x94>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005af 	.word	0x080005af
 8000594:	080005d1 	.word	0x080005d1
 8000598:	080005f3 	.word	0x080005f3
        case AS5600_POWER_MODE_NOM:
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7ddb      	ldrb	r3, [r3, #23]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f023 0303 	bic.w	r3, r3, #3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	75da      	strb	r2, [r3, #23]
            break;
 80005ac:	e02e      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM1:
            a->confRegister[1] |= (1UL << 0);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7ddb      	ldrb	r3, [r3, #23]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7ddb      	ldrb	r3, [r3, #23]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f023 0302 	bic.w	r3, r3, #2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	75da      	strb	r2, [r3, #23]
            break;
 80005ce:	e01d      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM2:
            a->confRegister[1] |= (1UL << 1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7ddb      	ldrb	r3, [r3, #23]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= (1UL << 0);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7ddb      	ldrb	r3, [r3, #23]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	75da      	strb	r2, [r3, #23]
            break;
 80005f0:	e00c      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM3:
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7ddb      	ldrb	r3, [r3, #23]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f043 0303 	orr.w	r3, r3, #3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	75da      	strb	r2, [r3, #23]
            break;
 8000602:	e003      	b.n	800060c <AS5600_Init+0x114>
        default:
            /* Invalid low power mode specified */
            status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
            return status;
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	e20a      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->Hysteresis) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7c1b      	ldrb	r3, [r3, #16]
 8000610:	3b01      	subs	r3, #1
 8000612:	2b03      	cmp	r3, #3
 8000614:	d83e      	bhi.n	8000694 <AS5600_Init+0x19c>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <AS5600_Init+0x124>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800063f 	.word	0x0800063f
 8000624:	08000661 	.word	0x08000661
 8000628:	08000683 	.word	0x08000683
        case AS5600_HYSTERESIS_OFF:
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7ddb      	ldrb	r3, [r3, #23]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f023 030c 	bic.w	r3, r3, #12
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	75da      	strb	r2, [r3, #23]
            break;
 800063c:	e02e      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_1LSB:
            a->confRegister[1] |= (1UL << 2);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7ddb      	ldrb	r3, [r3, #23]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7ddb      	ldrb	r3, [r3, #23]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f023 0308 	bic.w	r3, r3, #8
 8000658:	b2da      	uxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	75da      	strb	r2, [r3, #23]
            break;
 800065e:	e01d      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_2LSB:
            a->confRegister[1] &= ~(1UL << 2);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7ddb      	ldrb	r3, [r3, #23]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0304 	bic.w	r3, r3, #4
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 3);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7ddb      	ldrb	r3, [r3, #23]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	b2da      	uxtb	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	75da      	strb	r2, [r3, #23]
            break;
 8000680:	e00c      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_3LSB:
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7ddb      	ldrb	r3, [r3, #23]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f043 030c 	orr.w	r3, r3, #12
 800068c:	b2da      	uxtb	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	75da      	strb	r2, [r3, #23]
            break;
 8000692:	e003      	b.n	800069c <AS5600_Init+0x1a4>
        default:
            /* Invalid hysteresis mode specified */
            status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73bb      	strb	r3, [r7, #14]
            return status;
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	e1c2      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->OutputMode) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7c5b      	ldrb	r3, [r3, #17]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d020      	beq.n	80006e6 <AS5600_Init+0x1ee>
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	dc31      	bgt.n	800070c <AS5600_Init+0x214>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d002      	beq.n	80006b2 <AS5600_Init+0x1ba>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d009      	beq.n	80006c4 <AS5600_Init+0x1cc>
 80006b0:	e02c      	b.n	800070c <AS5600_Init+0x214>
        case AS5600_OUTPUT_STAGE_FULL:
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7ddb      	ldrb	r3, [r3, #23]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	75da      	strb	r2, [r3, #23]
            break;
 80006c2:	e027      	b.n	8000714 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_REDUCED:
            a->confRegister[1] |= (1UL << 4);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7ddb      	ldrb	r3, [r3, #23]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 5);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7ddb      	ldrb	r3, [r3, #23]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f023 0320 	bic.w	r3, r3, #32
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	75da      	strb	r2, [r3, #23]
            break;
 80006e4:	e016      	b.n	8000714 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_PWM:
            a->confRegister[1] &= (1UL << 4);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7ddb      	ldrb	r3, [r3, #23]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0310 	and.w	r3, r3, #16
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 5);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7ddb      	ldrb	r3, [r3, #23]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	75da      	strb	r2, [r3, #23]
            pwm = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
            break;
 800070a:	e003      	b.n	8000714 <AS5600_Init+0x21c>
        default:
            /* Invalid output mode specified */
            status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
            return status;
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	e186      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if (pwm) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d048      	beq.n	80007ac <AS5600_Init+0x2b4>
        switch (a->PWMFrequency) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7c9b      	ldrb	r3, [r3, #18]
 800071e:	3b01      	subs	r3, #1
 8000720:	2b03      	cmp	r3, #3
 8000722:	d83f      	bhi.n	80007a4 <AS5600_Init+0x2ac>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <AS5600_Init+0x234>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074f 	.word	0x0800074f
 8000734:	08000771 	.word	0x08000771
 8000738:	08000793 	.word	0x08000793
            case AS5600_PWM_FREQUENCY_115HZ:
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7ddb      	ldrb	r3, [r3, #23]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000746:	b2da      	uxtb	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	75da      	strb	r2, [r3, #23]
                break;
 800074c:	e02f      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_230HZ:
                a->confRegister[1] |= (1UL << 6);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7ddb      	ldrb	r3, [r3, #23]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] &= ~(1UL << 7);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7ddb      	ldrb	r3, [r3, #23]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000768:	b2da      	uxtb	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	75da      	strb	r2, [r3, #23]
                break;
 800076e:	e01e      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_460HZ:
                a->confRegister[1] &= ~(1UL << 6);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7ddb      	ldrb	r3, [r3, #23]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800077a:	b2da      	uxtb	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] |= (1UL << 7);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7ddb      	ldrb	r3, [r3, #23]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	75da      	strb	r2, [r3, #23]
                break;
 8000790:	e00d      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_920HZ:
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7ddb      	ldrb	r3, [r3, #23]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	75da      	strb	r2, [r3, #23]
                break;
 80007a2:	e004      	b.n	80007ae <AS5600_Init+0x2b6>
            default:
                /* Invalid PWM frequency specified. */
                status = HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73bb      	strb	r3, [r7, #14]
                return status;
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	e13a      	b.n	8000a22 <AS5600_Init+0x52a>
        }
    }
 80007ac:	bf00      	nop
    switch (a->SlowFilter) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7cdb      	ldrb	r3, [r3, #19]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d83f      	bhi.n	8000838 <AS5600_Init+0x340>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <AS5600_Init+0x2c8>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d1 	.word	0x080007d1
 80007c4:	080007e3 	.word	0x080007e3
 80007c8:	08000805 	.word	0x08000805
 80007cc:	08000827 	.word	0x08000827
        case AS5600_SLOW_FILTER_16X:
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7d9b      	ldrb	r3, [r3, #22]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	759a      	strb	r2, [r3, #22]
            break;
 80007e0:	e02e      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_8X:
            a->confRegister[0] |= (1UL << 0);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7d9b      	ldrb	r3, [r3, #22]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7d9b      	ldrb	r3, [r3, #22]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f023 0302 	bic.w	r3, r3, #2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	759a      	strb	r2, [r3, #22]
            break;
 8000802:	e01d      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_4X:
            a->confRegister[0] &= ~(1UL << 0);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7d9b      	ldrb	r3, [r3, #22]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f023 0301 	bic.w	r3, r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7d9b      	ldrb	r3, [r3, #22]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	759a      	strb	r2, [r3, #22]
            break;
 8000824:	e00c      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_2X:
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7d9b      	ldrb	r3, [r3, #22]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f043 0303 	orr.w	r3, r3, #3
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	759a      	strb	r2, [r3, #22]
            break;
 8000836:	e003      	b.n	8000840 <AS5600_Init+0x348>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
            return status;
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	e0f0      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->FastFilterThreshold) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7d1b      	ldrb	r3, [r3, #20]
 8000844:	3b01      	subs	r3, #1
 8000846:	2b07      	cmp	r3, #7
 8000848:	f200 808c 	bhi.w	8000964 <AS5600_Init+0x46c>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <AS5600_Init+0x35c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000875 	.word	0x08000875
 8000858:	08000887 	.word	0x08000887
 800085c:	080008a9 	.word	0x080008a9
 8000860:	080008cb 	.word	0x080008cb
 8000864:	080008ed 	.word	0x080008ed
 8000868:	0800090f 	.word	0x0800090f
 800086c:	08000931 	.word	0x08000931
 8000870:	08000953 	.word	0x08000953
        case AS5600_FAST_FILTER_SLOW_ONLY:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7d9b      	ldrb	r3, [r3, #22]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f023 031c 	bic.w	r3, r3, #28
 800087e:	b2da      	uxtb	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	759a      	strb	r2, [r3, #22]
            break;
 8000884:	e072      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_6LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7d9b      	ldrb	r3, [r3, #22]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f023 0318 	bic.w	r3, r3, #24
 8000890:	b2da      	uxtb	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 2);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7d9b      	ldrb	r3, [r3, #22]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	759a      	strb	r2, [r3, #22]
            break;
 80008a6:	e061      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_7LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7d9b      	ldrb	r3, [r3, #22]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f023 0314 	bic.w	r3, r3, #20
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 3);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7d9b      	ldrb	r3, [r3, #22]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	759a      	strb	r2, [r3, #22]
            break;
 80008c8:	e050      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_9LSB:
            a->confRegister[0] &= ~(1UL << 4);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7d9b      	ldrb	r3, [r3, #22]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f023 0310 	bic.w	r3, r3, #16
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7d9b      	ldrb	r3, [r3, #22]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f043 030c 	orr.w	r3, r3, #12
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	759a      	strb	r2, [r3, #22]
            break;
 80008ea:	e03f      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_18LSB:
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7d9b      	ldrb	r3, [r3, #22]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f023 030c 	bic.w	r3, r3, #12
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 4);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7d9b      	ldrb	r3, [r3, #22]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	759a      	strb	r2, [r3, #22]
            break;
 800090c:	e02e      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_21LSB:
            a->confRegister[0] &= ~(1UL << 3);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7d9b      	ldrb	r3, [r3, #22]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f023 0308 	bic.w	r3, r3, #8
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7d9b      	ldrb	r3, [r3, #22]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f043 0314 	orr.w	r3, r3, #20
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	759a      	strb	r2, [r3, #22]
            break;
 800092e:	e01d      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_24LSB:
            a->confRegister[0] &= ~(1UL << 2);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7d9b      	ldrb	r3, [r3, #22]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f023 0304 	bic.w	r3, r3, #4
 800093a:	b2da      	uxtb	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7d9b      	ldrb	r3, [r3, #22]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f043 0318 	orr.w	r3, r3, #24
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	759a      	strb	r2, [r3, #22]
            break;
 8000950:	e00c      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_10LSB:
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7d9b      	ldrb	r3, [r3, #22]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f043 031c 	orr.w	r3, r3, #28
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	759a      	strb	r2, [r3, #22]
            break;
 8000962:	e003      	b.n	800096c <AS5600_Init+0x474>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73bb      	strb	r3, [r7, #14]
            return status;
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	e05a      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->WatchdogTimer) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7d5b      	ldrb	r3, [r3, #21]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d002      	beq.n	800097a <AS5600_Init+0x482>
 8000974:	2b02      	cmp	r3, #2
 8000976:	d009      	beq.n	800098c <AS5600_Init+0x494>
 8000978:	e011      	b.n	800099e <AS5600_Init+0x4a6>
        case AS5600_WATCHDOG_OFF:
            a->confRegister[0] &= ~(1UL << 6);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7d9b      	ldrb	r3, [r3, #22]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000984:	b2da      	uxtb	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	759a      	strb	r2, [r3, #22]
            break;
 800098a:	e00c      	b.n	80009a6 <AS5600_Init+0x4ae>
        case AS5600_WATCHDOG_ON:
            a->confRegister[0] |= (1UL << 6);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7d9b      	ldrb	r3, [r3, #22]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000996:	b2da      	uxtb	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	759a      	strb	r2, [r3, #22]
            break;
 800099c:	e003      	b.n	80009a6 <AS5600_Init+0x4ae>
        default:
            /* Invalid watchdog state specified */
            status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73bb      	strb	r3, [r7, #14]
            return status;
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	e03d      	b.n	8000a22 <AS5600_Init+0x52a>
    }

    if (HAL_I2C_Mem_Write_IT(a->i2cHandle, a->i2cAddr,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
                             AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT,
                             a->confRegister, 2) != HAL_OK) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3316      	adds	r3, #22
    if (HAL_I2C_Mem_Write_IT(a->i2cHandle, a->i2cAddr,
 80009b4:	2202      	movs	r2, #2
 80009b6:	9201      	str	r2, [sp, #4]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	2207      	movs	r2, #7
 80009be:	f000 ff61 	bl	8001884 <HAL_I2C_Mem_Write_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <AS5600_Init+0x4d8>
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73bb      	strb	r3, [r7, #14]
        return status;
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	e028      	b.n	8000a22 <AS5600_Init+0x52a>
    }

    /* Check magnet status */
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80009d0:	f107 030d 	add.w	r3, r7, #13
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f828 	bl	8000a2c <AS5600_GetMagnetStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <AS5600_Init+0x4f2>
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73bb      	strb	r3, [r7, #14]
        return status;
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	e01b      	b.n	8000a22 <AS5600_Init+0x52a>
    }

    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <AS5600_Init+0x504>
        /* Magnet not detected */
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
        return status;
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	e012      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <AS5600_Init+0x516>
        /* B-field is too strong */
        status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
        return status;
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	e009      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <AS5600_Init+0x528>
        /* B-field is too weak */
        status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73bb      	strb	r3, [r7, #14]
        return status;
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	e000      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    /* Write */

    return status;
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <AS5600_GetMagnetStatus>:

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a,
                                         uint8_t *const stat) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read_IT(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	b299      	uxth	r1, r3
 8000a44:	2301      	movs	r3, #1
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	220b      	movs	r2, #11
 8000a50:	f000 ffca 	bl	80019e8 <HAL_I2C_Mem_Read_IT>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <AS5600_GetMagnetStatus+0x32>
                            I2C_MEMADD_SIZE_8BIT, stat, 1) != HAL_OK) {
        status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	AS5600_TypeDef* sensor = AS5600_New();
 8000a6e:	f7ff fd35 	bl	80004dc <AS5600_New>
 8000a72:	6078      	str	r0, [r7, #4]
	sensor->i2cHandle = &hi2c1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a15      	ldr	r2, [pc, #84]	; (8000acc <main+0x64>)
 8000a78:	601a      	str	r2, [r3, #0]
	sensor->i2cAddr = 0x36 << 1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	226c      	movs	r2, #108	; 0x6c
 8000a7e:	711a      	strb	r2, [r3, #4]
	sensor->DirPort = LED_GPIO_Port;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a13      	ldr	r2, [pc, #76]	; (8000ad0 <main+0x68>)
 8000a84:	609a      	str	r2, [r3, #8]
	sensor->DirPin = LED_Pin;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2220      	movs	r2, #32
 8000a8a:	819a      	strh	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fa26 	bl	8000edc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f820 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f8aa 	bl	8000bec <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a98:	f000 f87a 	bl	8000b90 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	while (AS5600_Init(sensor) != HAL_OK) {
 8000a9c:	e006      	b.n	8000aac <main+0x44>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <main+0x68>)
 8000aa2:	f000 fd90 	bl	80015c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000aa6:	2032      	movs	r0, #50	; 0x32
 8000aa8:	f000 fa8a 	bl	8000fc0 <HAL_Delay>
	while (AS5600_Init(sensor) != HAL_OK) {
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fd23 	bl	80004f8 <AS5600_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f2      	bne.n	8000a9e <main+0x36>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ab8:	2120      	movs	r1, #32
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <main+0x68>)
 8000abc:	f000 fd83 	bl	80015c6 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 fa7c 	bl	8000fc0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000ac8:	e7f6      	b.n	8000ab8 <main+0x50>
 8000aca:	bf00      	nop
 8000acc:	2000008c 	.word	0x2000008c
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b094      	sub	sp, #80	; 0x50
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	2230      	movs	r2, #48	; 0x30
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 f990 	bl	8003e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <SystemClock_Config+0xb4>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <SystemClock_Config+0xb4>)
 8000b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <SystemClock_Config+0xb4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <SystemClock_Config+0xb8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b34:	2301      	movs	r3, #1
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b40:	f107 0320 	add.w	r3, r7, #32
 8000b44:	4618      	mov	r0, r3
 8000b46:	f002 fce9 	bl	800351c <HAL_RCC_OscConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b50:	f000 f88e 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b54:	230f      	movs	r3, #15
 8000b56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 ff4c 	bl	8003a0c <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b7a:	f000 f879 	bl	8000c70 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3750      	adds	r7, #80	; 0x50
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000b96:	4a13      	ldr	r2, [pc, #76]	; (8000be4 <MX_I2C1_Init+0x54>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <MX_I2C1_Init+0x58>)
 8000b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_I2C1_Init+0x50>)
 8000bce:	f000 fd15 	bl	80015fc <HAL_I2C_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd8:	f000 f84a 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	40005400 	.word	0x40005400
 8000be8:	000186a0 	.word	0x000186a0

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 030c 	add.w	r3, r7, #12
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_GPIO_Init+0x7c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <MX_GPIO_Init+0x80>)
 8000c40:	f000 fca8 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c44:	2320      	movs	r3, #32
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_GPIO_Init+0x80>)
 8000c5c:	f000 fb16 	bl	800128c <HAL_GPIO_Init>

}
 8000c60:	bf00      	nop
 8000c62:	3720      	adds	r7, #32
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <HAL_I2C_MspInit+0xa4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d13c      	bne.n	8000d68 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b20      	ldr	r3, [pc, #128]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d10:	2312      	movs	r3, #18
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <HAL_I2C_MspInit+0xac>)
 8000d28:	f000 fab0 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3c:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_I2C_MspInit+0xa8>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	201f      	movs	r0, #31
 8000d4e:	f000 fa36 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d52:	201f      	movs	r0, #31
 8000d54:	f000 fa4f 	bl	80011f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2020      	movs	r0, #32
 8000d5e:	f000 fa2e 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d62:	2020      	movs	r0, #32
 8000d64:	f000 fa47 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40005400 	.word	0x40005400
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020400 	.word	0x40020400

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f8da 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <I2C1_EV_IRQHandler+0x10>)
 8000dd6:	f000 fec5 	bl	8001b64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000008c 	.word	0x2000008c

08000de4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <I2C1_ER_IRQHandler+0x10>)
 8000dea:	f001 f82c 	bl	8001e46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000008c 	.word	0x2000008c

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 ffc4 	bl	8003db4 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20020000 	.word	0x20020000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	200000e0 	.word	0x200000e0
 8000e60:	200000f8 	.word	0x200000f8

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffd7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 ff83 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fdd5 	bl	8000a68 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ecc:	08003fe8 	.word	0x08003fe8
  ldr r2, =_sbss
 8000ed0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed4:	200000f8 	.word	0x200000f8

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f94f 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff feb4 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f967 	bl	8001212 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f92f 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000004 	.word	0x20000004

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	200000e4 	.word	0x200000e4

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	200000e4 	.word	0x200000e4

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	b2db      	uxtb	r3, r3
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e159      	b.n	800155c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 8148 	bne.w	8001556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a2 	beq.w	8001556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a56      	ldr	r2, [pc, #344]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b54      	ldr	r3, [pc, #336]	; (8001574 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a49      	ldr	r2, [pc, #292]	; (800157c <HAL_GPIO_Init+0x2f0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d019      	beq.n	800148e <HAL_GPIO_Init+0x202>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <HAL_GPIO_Init+0x2f4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0x1fe>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a47      	ldr	r2, [pc, #284]	; (8001584 <HAL_GPIO_Init+0x2f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d00d      	beq.n	8001486 <HAL_GPIO_Init+0x1fa>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a46      	ldr	r2, [pc, #280]	; (8001588 <HAL_GPIO_Init+0x2fc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d007      	beq.n	8001482 <HAL_GPIO_Init+0x1f6>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a45      	ldr	r2, [pc, #276]	; (800158c <HAL_GPIO_Init+0x300>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d101      	bne.n	800147e <HAL_GPIO_Init+0x1f2>
 800147a:	2304      	movs	r3, #4
 800147c:	e008      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800147e:	2307      	movs	r3, #7
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_Init+0x204>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_Init+0x204>
 800148e:	2300      	movs	r3, #0
 8001490:	69fa      	ldr	r2, [r7, #28]
 8001492:	f002 0203 	and.w	r2, r2, #3
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a0:	4935      	ldr	r1, [pc, #212]	; (8001578 <HAL_GPIO_Init+0x2ec>)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_GPIO_Init+0x304>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_GPIO_Init+0x304>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001550:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_GPIO_Init+0x304>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3301      	adds	r3, #1
 800155a:	61fb      	str	r3, [r7, #28]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b0f      	cmp	r3, #15
 8001560:	f67f aea2 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40013800 	.word	0x40013800
 800157c:	40020000 	.word	0x40020000
 8001580:	40020400 	.word	0x40020400
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b085      	sub	sp, #20
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d8:	887a      	ldrh	r2, [r7, #2]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	041a      	lsls	r2, r3, #16
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	400b      	ands	r3, r1
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e12b      	b.n	8001866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fb52 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2224      	movs	r2, #36	; 0x24
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001660:	f002 fb8c 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8001664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a81      	ldr	r2, [pc, #516]	; (8001870 <HAL_I2C_Init+0x274>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d807      	bhi.n	8001680 <HAL_I2C_Init+0x84>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4a80      	ldr	r2, [pc, #512]	; (8001874 <HAL_I2C_Init+0x278>)
 8001674:	4293      	cmp	r3, r2
 8001676:	bf94      	ite	ls
 8001678:	2301      	movls	r3, #1
 800167a:	2300      	movhi	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e006      	b.n	800168e <HAL_I2C_Init+0x92>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a7d      	ldr	r2, [pc, #500]	; (8001878 <HAL_I2C_Init+0x27c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0e7      	b.n	8001866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a78      	ldr	r2, [pc, #480]	; (800187c <HAL_I2C_Init+0x280>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9b      	lsrs	r3, r3, #18
 80016a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a6a      	ldr	r2, [pc, #424]	; (8001870 <HAL_I2C_Init+0x274>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d802      	bhi.n	80016d0 <HAL_I2C_Init+0xd4>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	e009      	b.n	80016e4 <HAL_I2C_Init+0xe8>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_I2C_Init+0x284>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	495c      	ldr	r1, [pc, #368]	; (8001870 <HAL_I2C_Init+0x274>)
 8001700:	428b      	cmp	r3, r1
 8001702:	d819      	bhi.n	8001738 <HAL_I2C_Init+0x13c>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e59      	subs	r1, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001712:	1c59      	adds	r1, r3, #1
 8001714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001718:	400b      	ands	r3, r1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00a      	beq.n	8001734 <HAL_I2C_Init+0x138>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e59      	subs	r1, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fbb1 f3f3 	udiv	r3, r1, r3
 800172c:	3301      	adds	r3, #1
 800172e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001732:	e051      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001734:	2304      	movs	r3, #4
 8001736:	e04f      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d111      	bne.n	8001764 <HAL_I2C_Init+0x168>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e58      	subs	r0, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e012      	b.n	800178a <HAL_I2C_Init+0x18e>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Init+0x196>
 800178e:	2301      	movs	r3, #1
 8001790:	e022      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10e      	bne.n	80017b8 <HAL_I2C_Init+0x1bc>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e58      	subs	r0, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6859      	ldr	r1, [r3, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	440b      	add	r3, r1
 80017a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b6:	e00f      	b.n	80017d8 <HAL_I2C_Init+0x1dc>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	6809      	ldr	r1, [r1, #0]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6911      	ldr	r1, [r2, #16]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68d2      	ldr	r2, [r2, #12]
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2220      	movs	r2, #32
 8001852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	000186a0 	.word	0x000186a0
 8001874:	001e847f 	.word	0x001e847f
 8001878:	003d08ff 	.word	0x003d08ff
 800187c:	431bde83 	.word	0x431bde83
 8001880:	10624dd3 	.word	0x10624dd3

08001884 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4603      	mov	r3, r0
 8001894:	817b      	strh	r3, [r7, #10]
 8001896:	460b      	mov	r3, r1
 8001898:	813b      	strh	r3, [r7, #8]
 800189a:	4613      	mov	r3, r2
 800189c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	f040 808e 	bne.w	80019cc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_I2C_Mem_Write_IT+0x158>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <HAL_I2C_Mem_Write_IT+0x15c>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0a1a      	lsrs	r2, r3, #8
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	009a      	lsls	r2, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2220      	movs	r2, #32
 80018e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0220 	orr.w	r2, r3, #32
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e064      	b.n	80019ce <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d0db      	beq.n	80018ca <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Mem_Write_IT+0x9c>
 800191c:	2302      	movs	r3, #2
 800191e:	e056      	b.n	80019ce <HAL_I2C_Mem_Write_IT+0x14a>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d007      	beq.n	8001946 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
 8001944:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2221      	movs	r2, #33	; 0x21
 800195a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2240      	movs	r2, #64	; 0x40
 8001962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6a3a      	ldr	r2, [r7, #32]
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <HAL_I2C_Mem_Write_IT+0x160>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001988:	897a      	ldrh	r2, [r7, #10]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800198e:	893a      	ldrh	r2, [r7, #8]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80019c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e000      	b.n	80019ce <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80019cc:	2302      	movs	r3, #2
  }
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000000 	.word	0x20000000
 80019e0:	14f8b589 	.word	0x14f8b589
 80019e4:	ffff0000 	.word	0xffff0000

080019e8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	817b      	strh	r3, [r7, #10]
 80019fa:	460b      	mov	r3, r1
 80019fc:	813b      	strh	r3, [r7, #8]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b20      	cmp	r3, #32
 8001a10:	f040 809a 	bne.w	8001b48 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a14:	4b50      	ldr	r3, [pc, #320]	; (8001b58 <HAL_I2C_Mem_Read_IT+0x170>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_I2C_Mem_Read_IT+0x174>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0a1a      	lsrs	r2, r3, #8
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	009a      	lsls	r2, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e070      	b.n	8001b4a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d0db      	beq.n	8001a2e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_I2C_Mem_Read_IT+0x9c>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e062      	b.n	8001b4a <HAL_I2C_Mem_Read_IT+0x162>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d007      	beq.n	8001aaa <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0201 	orr.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2222      	movs	r2, #34	; 0x22
 8001abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_I2C_Mem_Read_IT+0x178>)
 8001aea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001aec:	897a      	ldrh	r2, [r7, #10]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001af2:	893a      	ldrh	r2, [r7, #8]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b12:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b22:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001b42:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	e000      	b.n	8001b4a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001b48:	2302      	movs	r3, #2
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	14f8b589 	.word	0x14f8b589
 8001b60:	ffff0000 	.word	0xffff0000

08001b64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d003      	beq.n	8001b9c <HAL_I2C_EV_IRQHandler+0x38>
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	f040 80c1 	bne.w	8001d1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001bbc:	d003      	beq.n	8001bc6 <HAL_I2C_EV_IRQHandler+0x62>
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_EV_IRQHandler+0x66>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_I2C_EV_IRQHandler+0x68>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	f000 8132 	beq.w	8001e36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_I2C_EV_IRQHandler+0x92>
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	0a5b      	lsrs	r3, r3, #9
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f001 fc7b 	bl	80034e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fd83 	bl	80026fa <I2C_Master_SB>
 8001bf4:	e092      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0xb2>
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	0a5b      	lsrs	r3, r3, #9
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 fdf9 	bl	8002806 <I2C_Master_ADD10>
 8001c14:	e082      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	085b      	lsrs	r3, r3, #1
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_I2C_EV_IRQHandler+0xd2>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	0a5b      	lsrs	r3, r3, #9
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fe13 	bl	800285a <I2C_Master_ADDR>
 8001c34:	e072      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d03b      	beq.n	8001cba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c50:	f000 80f3 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	09db      	lsrs	r3, r3, #7
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00f      	beq.n	8001c80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_I2C_EV_IRQHandler+0x11c>
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f9f3 	bl	8002064 <I2C_MasterTransmit_TXE>
 8001c7e:	e04d      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80d6 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	0a5b      	lsrs	r3, r3, #9
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80cf 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001c9c:	7bbb      	ldrb	r3, [r7, #14]
 8001c9e:	2b21      	cmp	r3, #33	; 0x21
 8001ca0:	d103      	bne.n	8001caa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fa7a 	bl	800219c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ca8:	e0c7      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2b40      	cmp	r3, #64	; 0x40
 8001cae:	f040 80c4 	bne.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fae8 	bl	8002288 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb8:	e0bf      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc8:	f000 80b7 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00f      	beq.n	8001cf8 <HAL_I2C_EV_IRQHandler+0x194>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	0a9b      	lsrs	r3, r3, #10
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <HAL_I2C_EV_IRQHandler+0x194>
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fb5d 	bl	80023b0 <I2C_MasterReceive_RXNE>
 8001cf6:	e011      	b.n	8001d1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 809a 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	0a5b      	lsrs	r3, r3, #9
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 8093 	beq.w	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fc06 	bl	8002526 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d1a:	e08e      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d1c:	e08d      	b.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d004      	beq.n	8001d30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e007      	b.n	8001d40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x20e>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	0a5b      	lsrs	r3, r3, #9
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00c      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 ffc4 	bl	8002cf8 <I2C_Slave_ADDR>
 8001d70:	e066      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x22e>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	0a5b      	lsrs	r3, r3, #9
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fffe 	bl	8002d8c <I2C_Slave_STOPF>
 8001d90:	e056      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	2b21      	cmp	r3, #33	; 0x21
 8001d96:	d002      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x23a>
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	2b29      	cmp	r3, #41	; 0x29
 8001d9c:	d125      	bne.n	8001dea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	09db      	lsrs	r3, r3, #7
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00f      	beq.n	8001dca <HAL_I2C_EV_IRQHandler+0x266>
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	0a9b      	lsrs	r3, r3, #10
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_I2C_EV_IRQHandler+0x266>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d103      	bne.n	8001dca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 feda 	bl	8002b7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dc8:	e039      	b.n	8001e3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d033      	beq.n	8001e3e <HAL_I2C_EV_IRQHandler+0x2da>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	0a5b      	lsrs	r3, r3, #9
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02d      	beq.n	8001e3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 ff07 	bl	8002bf6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001de8:	e029      	b.n	8001e3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00f      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	0a9b      	lsrs	r3, r3, #10
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 ff12 	bl	8002c38 <I2C_SlaveReceive_RXNE>
 8001e14:	e014      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00e      	beq.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0a5b      	lsrs	r3, r3, #9
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 ff40 	bl	8002cb4 <I2C_SlaveReceive_BTF>
 8001e34:	e004      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e36:	bf00      	nop
 8001e38:	e002      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3a:	bf00      	nop
 8001e3c:	e000      	b.n	8001e40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e40:	3720      	adds	r7, #32
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b08a      	sub	sp, #40	; 0x28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e6a:	6a3b      	ldr	r3, [r7, #32]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00e      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x4e>
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	0a5b      	lsrs	r3, r3, #9
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00e      	beq.n	8001ebe <HAL_I2C_ER_IRQHandler+0x78>
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ebc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	0a9b      	lsrs	r3, r3, #10
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d03f      	beq.n	8001f4a <HAL_I2C_ER_IRQHandler+0x104>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d039      	beq.n	8001f4a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ed6:	7efb      	ldrb	r3, [r7, #27]
 8001ed8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001ef0:	7ebb      	ldrb	r3, [r7, #26]
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d112      	bne.n	8001f1c <HAL_I2C_ER_IRQHandler+0xd6>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10f      	bne.n	8001f1c <HAL_I2C_ER_IRQHandler+0xd6>
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	2b21      	cmp	r3, #33	; 0x21
 8001f00:	d008      	beq.n	8001f14 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b29      	cmp	r3, #41	; 0x29
 8001f06:	d005      	beq.n	8001f14 <HAL_I2C_ER_IRQHandler+0xce>
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b28      	cmp	r3, #40	; 0x28
 8001f0c:	d106      	bne.n	8001f1c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b21      	cmp	r3, #33	; 0x21
 8001f12:	d103      	bne.n	8001f1c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f001 f869 	bl	8002fec <I2C_Slave_AF>
 8001f1a:	e016      	b.n	8001f4a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d002      	beq.n	8001f3a <HAL_I2C_ER_IRQHandler+0xf4>
 8001f34:	7efb      	ldrb	r3, [r7, #27]
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d107      	bne.n	8001f4a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	0adb      	lsrs	r3, r3, #11
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00e      	beq.n	8001f74 <HAL_I2C_ER_IRQHandler+0x12e>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d008      	beq.n	8001f74 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	f043 0308 	orr.w	r3, r3, #8
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f001 f8a0 	bl	80030cc <I2C_ITError>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	; 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800207a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	d150      	bne.n	800212c <I2C_MasterTransmit_TXE+0xc8>
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b21      	cmp	r3, #33	; 0x21
 800208e:	d14d      	bne.n	800212c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b08      	cmp	r3, #8
 8002094:	d01d      	beq.n	80020d2 <I2C_MasterTransmit_TXE+0x6e>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b20      	cmp	r3, #32
 800209a:	d01a      	beq.n	80020d2 <I2C_MasterTransmit_TXE+0x6e>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020a2:	d016      	beq.n	80020d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2211      	movs	r2, #17
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff62 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020d0:	e060      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b40      	cmp	r3, #64	; 0x40
 800210a:	d107      	bne.n	800211c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ff7d 	bl	8002014 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800211a:	e03b      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff35 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800212a:	e033      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b21      	cmp	r3, #33	; 0x21
 8002130:	d005      	beq.n	800213e <I2C_MasterTransmit_TXE+0xda>
 8002132:	7bbb      	ldrb	r3, [r7, #14]
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d12d      	bne.n	8002194 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b22      	cmp	r3, #34	; 0x22
 800213c:	d12a      	bne.n	8002194 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d108      	bne.n	800215a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002156:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002158:	e01c      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d103      	bne.n	800216e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f88e 	bl	8002288 <I2C_MemoryTransmit_TXE_BTF>
}
 800216c:	e012      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002192:	e7ff      	b.n	8002194 <I2C_MasterTransmit_TXE+0x130>
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b21      	cmp	r3, #33	; 0x21
 80021b4:	d164      	bne.n	8002280 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021e4:	e04c      	b.n	8002280 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d01d      	beq.n	8002228 <I2C_MasterTransmit_BTF+0x8c>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d01a      	beq.n	8002228 <I2C_MasterTransmit_BTF+0x8c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021f8:	d016      	beq.n	8002228 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002208:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2211      	movs	r2, #17
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff feb7 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
}
 8002226:	e02b      	b.n	8002280 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002236:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002246:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2220      	movs	r2, #32
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b40      	cmp	r3, #64	; 0x40
 8002260:	d107      	bne.n	8002272 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff fed2 	bl	8002014 <HAL_I2C_MemTxCpltCallback>
}
 8002270:	e006      	b.n	8002280 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe8a 	bl	8001f94 <HAL_I2C_MasterTxCpltCallback>
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002296:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229c:	2b00      	cmp	r3, #0
 800229e:	d11d      	bne.n	80022dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10b      	bne.n	80022c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022be:	e073      	b.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	121b      	asrs	r3, r3, #8
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022da:	e065      	b.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d10b      	bne.n	80022fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022fa:	e055      	b.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	2b02      	cmp	r3, #2
 8002302:	d151      	bne.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b22      	cmp	r3, #34	; 0x22
 8002308:	d10d      	bne.n	8002326 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002318:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002324:	e040      	b.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d015      	beq.n	800235c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b21      	cmp	r3, #33	; 0x21
 8002334:	d112      	bne.n	800235c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	781a      	ldrb	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800235a:	e025      	b.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d120      	bne.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b21      	cmp	r3, #33	; 0x21
 800236a:	d11d      	bne.n	80023a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800237a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff fe36 	bl	8002014 <HAL_I2C_MemTxCpltCallback>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b22      	cmp	r3, #34	; 0x22
 80023c2:	f040 80ac 	bne.w	800251e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d921      	bls.n	8002418 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b03      	cmp	r3, #3
 8002402:	f040 808c 	bne.w	800251e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002416:	e082      	b.n	800251e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	2b02      	cmp	r3, #2
 800241e:	d075      	beq.n	800250c <I2C_MasterReceive_RXNE+0x15c>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <I2C_MasterReceive_RXNE+0x7c>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d16f      	bne.n	800250c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f001 f827 	bl	8003480 <I2C_WaitOnSTOPRequestThroughIT>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d142      	bne.n	80024be <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002456:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d10a      	bne.n	80024a8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fdc1 	bl	8002028 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024a6:	e03a      	b.n	800251e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2212      	movs	r2, #18
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fd76 	bl	8001fa8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024bc:	e02f      	b.n	800251e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff fd99 	bl	800203c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800250a:	e008      	b.n	800251e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	605a      	str	r2, [r3, #4]
}
 800251c:	e7ff      	b.n	800251e <I2C_MasterReceive_RXNE+0x16e>
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b04      	cmp	r3, #4
 800253c:	d11b      	bne.n	8002576 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800254c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002574:	e0bd      	b.n	80026f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d129      	bne.n	80025d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d00a      	beq.n	80025ac <I2C_MasterReceive_BTF+0x86>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d007      	beq.n	80025ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025d2:	e08e      	b.n	80026f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d176      	bne.n	80026cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d002      	beq.n	80025ea <I2C_MasterReceive_BTF+0xc4>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d108      	bne.n	80025fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e019      	b.n	8002630 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d002      	beq.n	8002608 <I2C_MasterReceive_BTF+0xe2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d108      	bne.n	800261a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e00a      	b.n	8002630 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b10      	cmp	r3, #16
 800261e:	d007      	beq.n	8002630 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800268a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d10a      	bne.n	80026b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fcba 	bl	8002028 <HAL_I2C_MemRxCpltCallback>
}
 80026b4:	e01d      	b.n	80026f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2212      	movs	r2, #18
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff fc6f 	bl	8001fa8 <HAL_I2C_MasterRxCpltCallback>
}
 80026ca:	e012      	b.n	80026f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d117      	bne.n	800273e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002726:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002728:	e067      	b.n	80027fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	611a      	str	r2, [r3, #16]
}
 800273c:	e05d      	b.n	80027fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002746:	d133      	bne.n	80027b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b21      	cmp	r3, #33	; 0x21
 8002752:	d109      	bne.n	8002768 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e008      	b.n	800277a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <I2C_Master_SB+0x92>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002790:	2b00      	cmp	r3, #0
 8002792:	d032      	beq.n	80027fa <I2C_Master_SB+0x100>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02d      	beq.n	80027fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ac:	605a      	str	r2, [r3, #4]
}
 80027ae:	e024      	b.n	80027fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10e      	bne.n	80027d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	b29b      	uxth	r3, r3
 80027be:	11db      	asrs	r3, r3, #7
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0306 	and.w	r3, r3, #6
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f063 030f 	orn	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]
}
 80027d4:	e011      	b.n	80027fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10d      	bne.n	80027fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	11db      	asrs	r3, r3, #7
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f003 0306 	and.w	r3, r3, #6
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f063 030e 	orn	r3, r3, #14
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	b2da      	uxtb	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <I2C_Master_ADD10+0x26>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <I2C_Master_ADD10+0x48>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800284c:	605a      	str	r2, [r3, #4]
  }
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800285a:	b480      	push	{r7}
 800285c:	b091      	sub	sp, #68	; 0x44
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b22      	cmp	r3, #34	; 0x22
 8002882:	f040 8169 	bne.w	8002b58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <I2C_Master_ADDR+0x54>
 800288e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002892:	2b40      	cmp	r3, #64	; 0x40
 8002894:	d10b      	bne.n	80028ae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002896:	2300      	movs	r3, #0
 8002898:	633b      	str	r3, [r7, #48]	; 0x30
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ac:	e160      	b.n	8002b70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d11d      	bne.n	80028f2 <I2C_Master_ADDR+0x98>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028be:	d118      	bne.n	80028f2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	651a      	str	r2, [r3, #80]	; 0x50
 80028f0:	e13e      	b.n	8002b70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d113      	bne.n	8002924 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e115      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002928:	b29b      	uxth	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 808a 	bne.w	8002a44 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002932:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002936:	d137      	bne.n	80029a8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002946:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002956:	d113      	bne.n	8002980 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	e0e7      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e0d3      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d02e      	beq.n	8002a0c <I2C_Master_ADDR+0x1b2>
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d02b      	beq.n	8002a0c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d102      	bne.n	80029c0 <I2C_Master_ADDR+0x166>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d125      	bne.n	8002a0c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d00e      	beq.n	80029e4 <I2C_Master_ADDR+0x18a>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d00b      	beq.n	80029e4 <I2C_Master_ADDR+0x18a>
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d008      	beq.n	80029e4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e007      	b.n	80029f4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	e0a1      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	61bb      	str	r3, [r7, #24]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e085      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d14d      	bne.n	8002aea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d016      	beq.n	8002a82 <I2C_Master_ADDR+0x228>
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d013      	beq.n	8002a82 <I2C_Master_ADDR+0x228>
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d010      	beq.n	8002a82 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a90:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa0:	d117      	bne.n	8002ad2 <I2C_Master_ADDR+0x278>
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aa8:	d00b      	beq.n	8002ac2 <I2C_Master_ADDR+0x268>
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d008      	beq.n	8002ac2 <I2C_Master_ADDR+0x268>
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d005      	beq.n	8002ac2 <I2C_Master_ADDR+0x268>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d002      	beq.n	8002ac2 <I2C_Master_ADDR+0x268>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d107      	bne.n	8002ad2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ad0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	e032      	b.n	8002b50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002af8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b08:	d117      	bne.n	8002b3a <I2C_Master_ADDR+0x2e0>
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b10:	d00b      	beq.n	8002b2a <I2C_Master_ADDR+0x2d0>
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d008      	beq.n	8002b2a <I2C_Master_ADDR+0x2d0>
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d005      	beq.n	8002b2a <I2C_Master_ADDR+0x2d0>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2b10      	cmp	r3, #16
 8002b22:	d002      	beq.n	8002b2a <I2C_Master_ADDR+0x2d0>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d107      	bne.n	8002b3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b56:	e00b      	b.n	8002b70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
}
 8002b6e:	e7ff      	b.n	8002b70 <I2C_Master_ADDR+0x316>
 8002b70:	bf00      	nop
 8002b72:	3744      	adds	r7, #68	; 0x44
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02b      	beq.n	8002bee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d114      	bne.n	8002bee <I2C_SlaveTransmit_TXE+0x72>
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b29      	cmp	r3, #41	; 0x29
 8002bc8:	d111      	bne.n	8002bee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2228      	movs	r2, #40	; 0x28
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff f9e7 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d011      	beq.n	8002c2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d02c      	beq.n	8002cac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d114      	bne.n	8002cac <I2C_SlaveReceive_RXNE+0x74>
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b2a      	cmp	r3, #42	; 0x2a
 8002c86:	d111      	bne.n	8002cac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2222      	movs	r2, #34	; 0x22
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2228      	movs	r2, #40	; 0x28
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff f992 	bl	8001fd0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d12:	2b28      	cmp	r3, #40	; 0x28
 8002d14:	d127      	bne.n	8002d66 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d24:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	09db      	lsrs	r3, r3, #7
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	81bb      	strh	r3, [r7, #12]
 8002d48:	e002      	b.n	8002d50 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d58:	89ba      	ldrh	r2, [r7, #12]
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff f940 	bl	8001fe4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d64:	e00e      	b.n	8002d84 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002daa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de8:	d172      	bne.n	8002ed0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	2b22      	cmp	r3, #34	; 0x22
 8002dee:	d002      	beq.n	8002df6 <I2C_Slave_STOPF+0x6a>
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b2a      	cmp	r3, #42	; 0x2a
 8002df4:	d135      	bne.n	8002e62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fa1d 	bl	800126e <HAL_DMA_GetState>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d049      	beq.n	8002ece <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <I2C_Slave_STOPF+0x258>)
 8002e40:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f9ef 	bl	800122a <HAL_DMA_Abort_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d03d      	beq.n	8002ece <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e60:	e035      	b.n	8002ece <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fe f9e7 	bl	800126e <HAL_DMA_GetState>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d014      	beq.n	8002ed0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <I2C_Slave_STOPF+0x258>)
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f9b9 	bl	800122a <HAL_DMA_Abort_IT>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d008      	beq.n	8002ed0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec8:	4610      	mov	r0, r2
 8002eca:	4798      	blx	r3
 8002ecc:	e000      	b.n	8002ed0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ece:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03e      	beq.n	8002f58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d112      	bne.n	8002f0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691a      	ldr	r2, [r3, #16]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b40      	cmp	r3, #64	; 0x40
 8002f1a:	d112      	bne.n	8002f42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691a      	ldr	r2, [r3, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0204 	orr.w	r2, r3, #4
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f8b3 	bl	80030cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f66:	e039      	b.n	8002fdc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f6c:	d109      	bne.n	8002f82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2228      	movs	r2, #40	; 0x28
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff f827 	bl	8001fd0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b28      	cmp	r3, #40	; 0x28
 8002f8c:	d111      	bne.n	8002fb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <I2C_Slave_STOPF+0x25c>)
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff f828 	bl	8002000 <HAL_I2C_ListenCpltCallback>
}
 8002fb0:	e014      	b.n	8002fdc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	2b22      	cmp	r3, #34	; 0x22
 8002fb8:	d002      	beq.n	8002fc0 <I2C_Slave_STOPF+0x234>
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b22      	cmp	r3, #34	; 0x22
 8002fbe:	d10d      	bne.n	8002fdc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fffa 	bl	8001fd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	08003331 	.word	0x08003331
 8002fe8:	ffff0000 	.word	0xffff0000

08002fec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d002      	beq.n	800300e <I2C_Slave_AF+0x22>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b20      	cmp	r3, #32
 800300c:	d129      	bne.n	8003062 <I2C_Slave_AF+0x76>
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b28      	cmp	r3, #40	; 0x28
 8003012:	d126      	bne.n	8003062 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a2c      	ldr	r2, [pc, #176]	; (80030c8 <I2C_Slave_AF+0xdc>)
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003028:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003032:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fe ffd0 	bl	8002000 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003060:	e02e      	b.n	80030c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b21      	cmp	r3, #33	; 0x21
 8003066:	d126      	bne.n	80030b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <I2C_Slave_AF+0xdc>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003092:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe ff84 	bl	8001fbc <HAL_I2C_SlaveTxCpltCallback>
}
 80030b4:	e004      	b.n	80030c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030be:	615a      	str	r2, [r3, #20]
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	ffff0000 	.word	0xffff0000

080030cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d002      	beq.n	80030f0 <I2C_ITError+0x24>
 80030ea:	7bbb      	ldrb	r3, [r7, #14]
 80030ec:	2b40      	cmp	r3, #64	; 0x40
 80030ee:	d10a      	bne.n	8003106 <I2C_ITError+0x3a>
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	2b22      	cmp	r3, #34	; 0x22
 80030f4:	d107      	bne.n	8003106 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003104:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800310c:	2b28      	cmp	r3, #40	; 0x28
 800310e:	d107      	bne.n	8003120 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2228      	movs	r2, #40	; 0x28
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800311e:	e015      	b.n	800314c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d00a      	beq.n	8003146 <I2C_ITError+0x7a>
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b60      	cmp	r3, #96	; 0x60
 8003134:	d007      	beq.n	8003146 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315a:	d162      	bne.n	8003222 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b01      	cmp	r3, #1
 8003178:	d020      	beq.n	80031bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317e:	4a6a      	ldr	r2, [pc, #424]	; (8003328 <I2C_ITError+0x25c>)
 8003180:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f84f 	bl	800122a <HAL_DMA_Abort_IT>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8089 	beq.w	80032a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031b6:	4610      	mov	r0, r2
 80031b8:	4798      	blx	r3
 80031ba:	e074      	b.n	80032a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	4a59      	ldr	r2, [pc, #356]	; (8003328 <I2C_ITError+0x25c>)
 80031c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe f82e 	bl	800122a <HAL_DMA_Abort_IT>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d068      	beq.n	80032a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d10b      	bne.n	80031fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
 8003220:	e041      	b.n	80032a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b60      	cmp	r3, #96	; 0x60
 800322c:	d125      	bne.n	800327a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d10b      	bne.n	8003262 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe feec 	bl	8002050 <HAL_I2C_AbortCpltCallback>
 8003278:	e015      	b.n	80032a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b40      	cmp	r3, #64	; 0x40
 8003286:	d10b      	bne.n	80032a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe fecb 	bl	800203c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10e      	bne.n	80032d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d109      	bne.n	80032d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d113      	bne.n	8003320 <I2C_ITError+0x254>
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b28      	cmp	r3, #40	; 0x28
 80032fc:	d110      	bne.n	8003320 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <I2C_ITError+0x260>)
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe fe70 	bl	8002000 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	08003331 	.word	0x08003331
 800332c:	ffff0000 	.word	0xffff0000

08003330 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800334a:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <I2C_DMAAbort+0x148>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	08db      	lsrs	r3, r3, #3
 8003350:	4a4a      	ldr	r2, [pc, #296]	; (800347c <I2C_DMAAbort+0x14c>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	0a1a      	lsrs	r2, r3, #8
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00da      	lsls	r2, r3, #3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003376:	e00a      	b.n	800338e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800338c:	d0ea      	beq.n	8003364 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	2200      	movs	r2, #0
 800339c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	2200      	movs	r2, #0
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	2200      	movs	r2, #0
 80033d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	2200      	movs	r2, #0
 80033e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0201 	bic.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b60      	cmp	r3, #96	; 0x60
 80033fe:	d10e      	bne.n	800341e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7fe fe1a 	bl	8002050 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800341c:	e027      	b.n	800346e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800341e:	7cfb      	ldrb	r3, [r7, #19]
 8003420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003424:	2b28      	cmp	r3, #40	; 0x28
 8003426:	d117      	bne.n	8003458 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003446:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2228      	movs	r2, #40	; 0x28
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003456:	e007      	b.n	8003468 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003468:	6978      	ldr	r0, [r7, #20]
 800346a:	f7fe fde7 	bl	800203c <HAL_I2C_ErrorCallback>
}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000
 800347c:	14f8b589 	.word	0x14f8b589

08003480 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	08db      	lsrs	r3, r3, #3
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	0a1a      	lsrs	r2, r3, #8
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e008      	b.n	80034d0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034cc:	d0e9      	beq.n	80034a2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000000 	.word	0x20000000
 80034e0:	14f8b589 	.word	0x14f8b589

080034e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80034f4:	d103      	bne.n	80034fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80034fc:	e007      	b.n	800350e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003506:	d102      	bne.n	800350e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2208      	movs	r2, #8
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e267      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d075      	beq.n	8003626 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x240>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b04      	cmp	r3, #4
 8003544:	d00c      	beq.n	8003560 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003546:	4b85      	ldr	r3, [pc, #532]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800354e:	2b08      	cmp	r3, #8
 8003550:	d112      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003552:	4b82      	ldr	r3, [pc, #520]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800355a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800355e:	d10b      	bne.n	8003578 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05b      	beq.n	8003624 <HAL_RCC_OscConfig+0x108>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d157      	bne.n	8003624 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e242      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d106      	bne.n	8003590 <HAL_RCC_OscConfig+0x74>
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a75      	ldr	r2, [pc, #468]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e01d      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003598:	d10c      	bne.n	80035b4 <HAL_RCC_OscConfig+0x98>
 800359a:	4b70      	ldr	r3, [pc, #448]	; (800375c <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a6f      	ldr	r2, [pc, #444]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6c      	ldr	r2, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e00b      	b.n	80035cc <HAL_RCC_OscConfig+0xb0>
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a68      	ldr	r2, [pc, #416]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a65      	ldr	r2, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d013      	beq.n	80035fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd fce8 	bl	8000fa8 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fd fce4 	bl	8000fa8 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e207      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b5b      	ldr	r3, [pc, #364]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0xc0>
 80035fa:	e014      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fcd4 	bl	8000fa8 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd fcd0 	bl	8000fa8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1f3      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003616:	4b51      	ldr	r3, [pc, #324]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0xe8>
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d063      	beq.n	80036fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003646:	2b08      	cmp	r3, #8
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364a:	4b44      	ldr	r3, [pc, #272]	; (800375c <HAL_RCC_OscConfig+0x240>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d116      	bne.n	8003684 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d001      	beq.n	800366e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e1c7      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCC_OscConfig+0x240>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	e03a      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d020      	beq.n	80036ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	4b34      	ldr	r3, [pc, #208]	; (8003760 <HAL_RCC_OscConfig+0x244>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003692:	f7fd fc89 	bl	8000fa8 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369a:	f7fd fc85 	bl	8000fa8 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e1a8      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4925      	ldr	r1, [pc, #148]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	600b      	str	r3, [r1, #0]
 80036cc:	e015      	b.n	80036fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_OscConfig+0x244>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d4:	f7fd fc68 	bl	8000fa8 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036dc:	f7fd fc64 	bl	8000fa8 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e187      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d036      	beq.n	8003774 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <HAL_RCC_OscConfig+0x248>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fd fc48 	bl	8000fa8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371c:	f7fd fc44 	bl	8000fa8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e167      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x240>)
 8003730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x200>
 800373a:	e01b      	b.n	8003774 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373c:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x248>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003742:	f7fd fc31 	bl	8000fa8 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00e      	b.n	8003768 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fd fc2d 	bl	8000fa8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d907      	bls.n	8003768 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e150      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003768:	4b88      	ldr	r3, [pc, #544]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1ea      	bne.n	800374a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8097 	beq.w	80038b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003786:	4b81      	ldr	r3, [pc, #516]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4b7d      	ldr	r3, [pc, #500]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a7c      	ldr	r2, [pc, #496]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800379c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b7a      	ldr	r3, [pc, #488]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b77      	ldr	r3, [pc, #476]	; (8003990 <HAL_RCC_OscConfig+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d118      	bne.n	80037f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037be:	4b74      	ldr	r3, [pc, #464]	; (8003990 <HAL_RCC_OscConfig+0x474>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a73      	ldr	r2, [pc, #460]	; (8003990 <HAL_RCC_OscConfig+0x474>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ca:	f7fd fbed 	bl	8000fa8 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d2:	f7fd fbe9 	bl	8000fa8 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e10c      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e4:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <HAL_RCC_OscConfig+0x474>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d106      	bne.n	8003806 <HAL_RCC_OscConfig+0x2ea>
 80037f8:	4b64      	ldr	r3, [pc, #400]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a63      	ldr	r2, [pc, #396]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x324>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b05      	cmp	r3, #5
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x30c>
 800380e:	4b5f      	ldr	r3, [pc, #380]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	4a5e      	ldr	r2, [pc, #376]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	6713      	str	r3, [r2, #112]	; 0x70
 800381a:	4b5c      	ldr	r3, [pc, #368]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5b      	ldr	r2, [pc, #364]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0x324>
 8003828:	4b58      	ldr	r3, [pc, #352]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	4a57      	ldr	r2, [pc, #348]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800382e:	f023 0301 	bic.w	r3, r3, #1
 8003832:	6713      	str	r3, [r2, #112]	; 0x70
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a54      	ldr	r2, [pc, #336]	; (800398c <HAL_RCC_OscConfig+0x470>)
 800383a:	f023 0304 	bic.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7fd fbae 	bl	8000fa8 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fbaa 	bl	8000fa8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0cb      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	4b49      	ldr	r3, [pc, #292]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0ee      	beq.n	8003850 <HAL_RCC_OscConfig+0x334>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003874:	f7fd fb98 	bl	8000fa8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fd fb94 	bl	8000fa8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0b5      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	4b3e      	ldr	r3, [pc, #248]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b39      	ldr	r3, [pc, #228]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a38      	ldr	r2, [pc, #224]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a1 	beq.w	80039fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ba:	4b34      	ldr	r3, [pc, #208]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d05c      	beq.n	8003980 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d141      	bne.n	8003952 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ce:	4b31      	ldr	r3, [pc, #196]	; (8003994 <HAL_RCC_OscConfig+0x478>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7fd fb68 	bl	8000fa8 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fd fb64 	bl	8000fa8 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e087      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x470>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003910:	085b      	lsrs	r3, r3, #1
 8003912:	3b01      	subs	r3, #1
 8003914:	041b      	lsls	r3, r3, #16
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	491b      	ldr	r1, [pc, #108]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003924:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x478>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd fb3d 	bl	8000fa8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd fb39 	bl	8000fa8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e05c      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x416>
 8003950:	e054      	b.n	80039fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b10      	ldr	r3, [pc, #64]	; (8003994 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fb26 	bl	8000fa8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fb22 	bl	8000fa8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e045      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b06      	ldr	r3, [pc, #24]	; (800398c <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x444>
 800397e:	e03d      	b.n	80039fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e038      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003998:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCC_OscConfig+0x4ec>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d028      	beq.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d121      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11a      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c8:	4013      	ands	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d111      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023800 	.word	0x40023800

08003a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0cc      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d90c      	bls.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2e:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0b8      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d020      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a60:	4b59      	ldr	r3, [pc, #356]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	4a58      	ldr	r2, [pc, #352]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a78:	4b53      	ldr	r3, [pc, #332]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a52      	ldr	r2, [pc, #328]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b50      	ldr	r3, [pc, #320]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	494d      	ldr	r1, [pc, #308]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d044      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d119      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e07f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d003      	beq.n	8003aca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d107      	bne.n	8003ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ada:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e067      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aea:	4b37      	ldr	r3, [pc, #220]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 0203 	bic.w	r2, r3, #3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003afc:	f7fd fa54 	bl	8000fa8 <HAL_GetTick>
 8003b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b04:	f7fd fa50 	bl	8000fa8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e04f      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 020c 	and.w	r2, r3, #12
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d1eb      	bne.n	8003b04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b2c:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d20c      	bcs.n	8003b54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3a:	4b22      	ldr	r3, [pc, #136]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e032      	b.n	8003bba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b60:	4b19      	ldr	r3, [pc, #100]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4916      	ldr	r1, [pc, #88]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d009      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b92:	f000 f821 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	490a      	ldr	r1, [pc, #40]	; (8003bcc <HAL_RCC_ClockConfig+0x1c0>)
 8003ba4:	5ccb      	ldrb	r3, [r1, r3]
 8003ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8003baa:	4a09      	ldr	r2, [pc, #36]	; (8003bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd f9b4 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40023c00 	.word	0x40023c00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08003fc0 	.word	0x08003fc0
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	20000004 	.word	0x20000004

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bdc:	b090      	sub	sp, #64	; 0x40
 8003bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	637b      	str	r3, [r7, #52]	; 0x34
 8003be4:	2300      	movs	r3, #0
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003be8:	2300      	movs	r3, #0
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf0:	4b59      	ldr	r3, [pc, #356]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 030c 	and.w	r3, r3, #12
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d00d      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x40>
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	f200 80a1 	bhi.w	8003d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0x34>
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0a:	e09b      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c10:	e09b      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c12:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c16:	e098      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c18:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c22:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2e:	4b4a      	ldr	r3, [pc, #296]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	2200      	movs	r2, #0
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	627a      	str	r2, [r7, #36]	; 0x24
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c40:	2100      	movs	r1, #0
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c44:	fb03 f201 	mul.w	r2, r3, r1
 8003c48:	2300      	movs	r3, #0
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a43      	ldr	r2, [pc, #268]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c52:	fba0 1202 	umull	r1, r2, r0, r2
 8003c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c58:	460a      	mov	r2, r1
 8003c5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5e:	4413      	add	r3, r2
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	2200      	movs	r2, #0
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	61fa      	str	r2, [r7, #28]
 8003c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c72:	f7fc fab1 	bl	80001d8 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c7e:	e053      	b.n	8003d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b35      	ldr	r3, [pc, #212]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	617a      	str	r2, [r7, #20]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c92:	f04f 0b00 	mov.w	fp, #0
 8003c96:	4652      	mov	r2, sl
 8003c98:	465b      	mov	r3, fp
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	0159      	lsls	r1, r3, #5
 8003ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca8:	0150      	lsls	r0, r2, #5
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	ebb2 080a 	subs.w	r8, r2, sl
 8003cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cca:	ebb2 0408 	subs.w	r4, r2, r8
 8003cce:	eb63 0509 	sbc.w	r5, r3, r9
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	00eb      	lsls	r3, r5, #3
 8003cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce0:	00e2      	lsls	r2, r4, #3
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	461d      	mov	r5, r3
 8003ce6:	eb14 030a 	adds.w	r3, r4, sl
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	eb45 030b 	adc.w	r3, r5, fp
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	f04f 0300 	mov.w	r3, #0
 8003cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cfe:	4629      	mov	r1, r5
 8003d00:	028b      	lsls	r3, r1, #10
 8003d02:	4621      	mov	r1, r4
 8003d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d08:	4621      	mov	r1, r4
 8003d0a:	028a      	lsls	r2, r1, #10
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	2200      	movs	r2, #0
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	60fa      	str	r2, [r7, #12]
 8003d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d1c:	f7fc fa5c 	bl	80001d8 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	3301      	adds	r3, #1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d42:	e002      	b.n	8003d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3740      	adds	r7, #64	; 0x40
 8003d50:	46bd      	mov	sp, r7
 8003d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d56:	bf00      	nop
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	017d7840 	.word	0x017d7840

08003d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000000 	.word	0x20000000

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4602      	mov	r2, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4903      	ldr	r1, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5ccb      	ldrb	r3, [r1, r3]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08003fd0 	.word	0x08003fd0

08003da4 <calloc>:
 8003da4:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <calloc+0xc>)
 8003da6:	460a      	mov	r2, r1
 8003da8:	4601      	mov	r1, r0
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f000 b834 	b.w	8003e18 <_calloc_r>
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <__errno>:
 8003db4:	4b01      	ldr	r3, [pc, #4]	; (8003dbc <__errno+0x8>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	4d0d      	ldr	r5, [pc, #52]	; (8003df8 <__libc_init_array+0x38>)
 8003dc4:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc6:	1b64      	subs	r4, r4, r5
 8003dc8:	10a4      	asrs	r4, r4, #2
 8003dca:	2600      	movs	r6, #0
 8003dcc:	42a6      	cmp	r6, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	4d0b      	ldr	r5, [pc, #44]	; (8003e00 <__libc_init_array+0x40>)
 8003dd2:	4c0c      	ldr	r4, [pc, #48]	; (8003e04 <__libc_init_array+0x44>)
 8003dd4:	f000 f8e8 	bl	8003fa8 <_init>
 8003dd8:	1b64      	subs	r4, r4, r5
 8003dda:	10a4      	asrs	r4, r4, #2
 8003ddc:	2600      	movs	r6, #0
 8003dde:	42a6      	cmp	r6, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de8:	4798      	blx	r3
 8003dea:	3601      	adds	r6, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df2:	4798      	blx	r3
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	08003fe0 	.word	0x08003fe0
 8003dfc:	08003fe0 	.word	0x08003fe0
 8003e00:	08003fe0 	.word	0x08003fe0
 8003e04:	08003fe4 	.word	0x08003fe4

08003e08 <memset>:
 8003e08:	4402      	add	r2, r0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d100      	bne.n	8003e12 <memset+0xa>
 8003e10:	4770      	bx	lr
 8003e12:	f803 1b01 	strb.w	r1, [r3], #1
 8003e16:	e7f9      	b.n	8003e0c <memset+0x4>

08003e18 <_calloc_r>:
 8003e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e1a:	fba1 2402 	umull	r2, r4, r1, r2
 8003e1e:	b94c      	cbnz	r4, 8003e34 <_calloc_r+0x1c>
 8003e20:	4611      	mov	r1, r2
 8003e22:	9201      	str	r2, [sp, #4]
 8003e24:	f000 f82e 	bl	8003e84 <_malloc_r>
 8003e28:	9a01      	ldr	r2, [sp, #4]
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	b930      	cbnz	r0, 8003e3c <_calloc_r+0x24>
 8003e2e:	4628      	mov	r0, r5
 8003e30:	b003      	add	sp, #12
 8003e32:	bd30      	pop	{r4, r5, pc}
 8003e34:	220c      	movs	r2, #12
 8003e36:	6002      	str	r2, [r0, #0]
 8003e38:	2500      	movs	r5, #0
 8003e3a:	e7f8      	b.n	8003e2e <_calloc_r+0x16>
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	f7ff ffe3 	bl	8003e08 <memset>
 8003e42:	e7f4      	b.n	8003e2e <_calloc_r+0x16>

08003e44 <sbrk_aligned>:
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	4e0e      	ldr	r6, [pc, #56]	; (8003e80 <sbrk_aligned+0x3c>)
 8003e48:	460c      	mov	r4, r1
 8003e4a:	6831      	ldr	r1, [r6, #0]
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	b911      	cbnz	r1, 8003e56 <sbrk_aligned+0x12>
 8003e50:	f000 f88c 	bl	8003f6c <_sbrk_r>
 8003e54:	6030      	str	r0, [r6, #0]
 8003e56:	4621      	mov	r1, r4
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f887 	bl	8003f6c <_sbrk_r>
 8003e5e:	1c43      	adds	r3, r0, #1
 8003e60:	d00a      	beq.n	8003e78 <sbrk_aligned+0x34>
 8003e62:	1cc4      	adds	r4, r0, #3
 8003e64:	f024 0403 	bic.w	r4, r4, #3
 8003e68:	42a0      	cmp	r0, r4
 8003e6a:	d007      	beq.n	8003e7c <sbrk_aligned+0x38>
 8003e6c:	1a21      	subs	r1, r4, r0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f87c 	bl	8003f6c <_sbrk_r>
 8003e74:	3001      	adds	r0, #1
 8003e76:	d101      	bne.n	8003e7c <sbrk_aligned+0x38>
 8003e78:	f04f 34ff 	mov.w	r4, #4294967295
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	200000ec 	.word	0x200000ec

08003e84 <_malloc_r>:
 8003e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e88:	1ccd      	adds	r5, r1, #3
 8003e8a:	f025 0503 	bic.w	r5, r5, #3
 8003e8e:	3508      	adds	r5, #8
 8003e90:	2d0c      	cmp	r5, #12
 8003e92:	bf38      	it	cc
 8003e94:	250c      	movcc	r5, #12
 8003e96:	2d00      	cmp	r5, #0
 8003e98:	4607      	mov	r7, r0
 8003e9a:	db01      	blt.n	8003ea0 <_malloc_r+0x1c>
 8003e9c:	42a9      	cmp	r1, r5
 8003e9e:	d905      	bls.n	8003eac <_malloc_r+0x28>
 8003ea0:	230c      	movs	r3, #12
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	2600      	movs	r6, #0
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eac:	4e2e      	ldr	r6, [pc, #184]	; (8003f68 <_malloc_r+0xe4>)
 8003eae:	f000 f86d 	bl	8003f8c <__malloc_lock>
 8003eb2:	6833      	ldr	r3, [r6, #0]
 8003eb4:	461c      	mov	r4, r3
 8003eb6:	bb34      	cbnz	r4, 8003f06 <_malloc_r+0x82>
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f7ff ffc2 	bl	8003e44 <sbrk_aligned>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	d14d      	bne.n	8003f62 <_malloc_r+0xde>
 8003ec6:	6834      	ldr	r4, [r6, #0]
 8003ec8:	4626      	mov	r6, r4
 8003eca:	2e00      	cmp	r6, #0
 8003ecc:	d140      	bne.n	8003f50 <_malloc_r+0xcc>
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	4631      	mov	r1, r6
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	eb04 0803 	add.w	r8, r4, r3
 8003ed8:	f000 f848 	bl	8003f6c <_sbrk_r>
 8003edc:	4580      	cmp	r8, r0
 8003ede:	d13a      	bne.n	8003f56 <_malloc_r+0xd2>
 8003ee0:	6821      	ldr	r1, [r4, #0]
 8003ee2:	3503      	adds	r5, #3
 8003ee4:	1a6d      	subs	r5, r5, r1
 8003ee6:	f025 0503 	bic.w	r5, r5, #3
 8003eea:	3508      	adds	r5, #8
 8003eec:	2d0c      	cmp	r5, #12
 8003eee:	bf38      	it	cc
 8003ef0:	250c      	movcc	r5, #12
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7ff ffa5 	bl	8003e44 <sbrk_aligned>
 8003efa:	3001      	adds	r0, #1
 8003efc:	d02b      	beq.n	8003f56 <_malloc_r+0xd2>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	442b      	add	r3, r5
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	e00e      	b.n	8003f24 <_malloc_r+0xa0>
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	1b52      	subs	r2, r2, r5
 8003f0a:	d41e      	bmi.n	8003f4a <_malloc_r+0xc6>
 8003f0c:	2a0b      	cmp	r2, #11
 8003f0e:	d916      	bls.n	8003f3e <_malloc_r+0xba>
 8003f10:	1961      	adds	r1, r4, r5
 8003f12:	42a3      	cmp	r3, r4
 8003f14:	6025      	str	r5, [r4, #0]
 8003f16:	bf18      	it	ne
 8003f18:	6059      	strne	r1, [r3, #4]
 8003f1a:	6863      	ldr	r3, [r4, #4]
 8003f1c:	bf08      	it	eq
 8003f1e:	6031      	streq	r1, [r6, #0]
 8003f20:	5162      	str	r2, [r4, r5]
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	4638      	mov	r0, r7
 8003f26:	f104 060b 	add.w	r6, r4, #11
 8003f2a:	f000 f835 	bl	8003f98 <__malloc_unlock>
 8003f2e:	f026 0607 	bic.w	r6, r6, #7
 8003f32:	1d23      	adds	r3, r4, #4
 8003f34:	1af2      	subs	r2, r6, r3
 8003f36:	d0b6      	beq.n	8003ea6 <_malloc_r+0x22>
 8003f38:	1b9b      	subs	r3, r3, r6
 8003f3a:	50a3      	str	r3, [r4, r2]
 8003f3c:	e7b3      	b.n	8003ea6 <_malloc_r+0x22>
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	42a3      	cmp	r3, r4
 8003f42:	bf0c      	ite	eq
 8003f44:	6032      	streq	r2, [r6, #0]
 8003f46:	605a      	strne	r2, [r3, #4]
 8003f48:	e7ec      	b.n	8003f24 <_malloc_r+0xa0>
 8003f4a:	4623      	mov	r3, r4
 8003f4c:	6864      	ldr	r4, [r4, #4]
 8003f4e:	e7b2      	b.n	8003eb6 <_malloc_r+0x32>
 8003f50:	4634      	mov	r4, r6
 8003f52:	6876      	ldr	r6, [r6, #4]
 8003f54:	e7b9      	b.n	8003eca <_malloc_r+0x46>
 8003f56:	230c      	movs	r3, #12
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	f000 f81c 	bl	8003f98 <__malloc_unlock>
 8003f60:	e7a1      	b.n	8003ea6 <_malloc_r+0x22>
 8003f62:	6025      	str	r5, [r4, #0]
 8003f64:	e7de      	b.n	8003f24 <_malloc_r+0xa0>
 8003f66:	bf00      	nop
 8003f68:	200000e8 	.word	0x200000e8

08003f6c <_sbrk_r>:
 8003f6c:	b538      	push	{r3, r4, r5, lr}
 8003f6e:	4d06      	ldr	r5, [pc, #24]	; (8003f88 <_sbrk_r+0x1c>)
 8003f70:	2300      	movs	r3, #0
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	f7fc ff3e 	bl	8000df8 <_sbrk>
 8003f7c:	1c43      	adds	r3, r0, #1
 8003f7e:	d102      	bne.n	8003f86 <_sbrk_r+0x1a>
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	b103      	cbz	r3, 8003f86 <_sbrk_r+0x1a>
 8003f84:	6023      	str	r3, [r4, #0]
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	200000f0 	.word	0x200000f0

08003f8c <__malloc_lock>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	; (8003f94 <__malloc_lock+0x8>)
 8003f8e:	f000 b809 	b.w	8003fa4 <__retarget_lock_acquire_recursive>
 8003f92:	bf00      	nop
 8003f94:	200000f4 	.word	0x200000f4

08003f98 <__malloc_unlock>:
 8003f98:	4801      	ldr	r0, [pc, #4]	; (8003fa0 <__malloc_unlock+0x8>)
 8003f9a:	f000 b804 	b.w	8003fa6 <__retarget_lock_release_recursive>
 8003f9e:	bf00      	nop
 8003fa0:	200000f4 	.word	0x200000f4

08003fa4 <__retarget_lock_acquire_recursive>:
 8003fa4:	4770      	bx	lr

08003fa6 <__retarget_lock_release_recursive>:
 8003fa6:	4770      	bx	lr

08003fa8 <_init>:
 8003fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003faa:	bf00      	nop
 8003fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fae:	bc08      	pop	{r3}
 8003fb0:	469e      	mov	lr, r3
 8003fb2:	4770      	bx	lr

08003fb4 <_fini>:
 8003fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb6:	bf00      	nop
 8003fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fba:	bc08      	pop	{r3}
 8003fbc:	469e      	mov	lr, r3
 8003fbe:	4770      	bx	lr
