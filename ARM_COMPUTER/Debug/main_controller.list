
main_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc8  08003bc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bd0  08003bd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd4  08003bd4  00013bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  2000000c  08003be4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08003be4  000204a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b82e  00000000  00000000  0002006f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002152  00000000  00000000  0002b89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000793  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000155c3  00000000  00000000  0002eb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a327  00000000  00000000  000440e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084126  00000000  00000000  0004e40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000233c  00000000  00000000  000d2534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000132  00000000  00000000  000d4870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000b9a  00000000  00000000  000d49a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f003 fb7e 	bl	80038b8 <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <deregister_tm_clones>:
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <deregister_tm_clones+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <deregister_tm_clones+0x14>)
 80001d0:	4283      	cmp	r3, r0
 80001d2:	d002      	beq.n	80001da <deregister_tm_clones+0xe>
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <deregister_tm_clones+0x18>)
 80001d6:	b103      	cbz	r3, 80001da <deregister_tm_clones+0xe>
 80001d8:	4718      	bx	r3
 80001da:	4770      	bx	lr
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000

080001e8 <register_tm_clones>:
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <register_tm_clones+0x18>)
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <register_tm_clones+0x1c>)
 80001ec:	1a1b      	subs	r3, r3, r0
 80001ee:	0fd9      	lsrs	r1, r3, #31
 80001f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001f4:	1049      	asrs	r1, r1, #1
 80001f6:	d002      	beq.n	80001fe <register_tm_clones+0x16>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <register_tm_clones+0x20>)
 80001fa:	b103      	cbz	r3, 80001fe <register_tm_clones+0x16>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	2000000c 	.word	0x2000000c
 8000204:	2000000c 	.word	0x2000000c
 8000208:	00000000 	.word	0x00000000

0800020c <__do_global_dtors_aux>:
 800020c:	b510      	push	{r4, lr}
 800020e:	4c06      	ldr	r4, [pc, #24]	; (8000228 <__do_global_dtors_aux+0x1c>)
 8000210:	7823      	ldrb	r3, [r4, #0]
 8000212:	b943      	cbnz	r3, 8000226 <__do_global_dtors_aux+0x1a>
 8000214:	f7ff ffda 	bl	80001cc <deregister_tm_clones>
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__do_global_dtors_aux+0x20>)
 800021a:	b113      	cbz	r3, 8000222 <__do_global_dtors_aux+0x16>
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x24>)
 800021e:	f3af 8000 	nop.w
 8000222:	2301      	movs	r3, #1
 8000224:	7023      	strb	r3, [r4, #0]
 8000226:	bd10      	pop	{r4, pc}
 8000228:	2000000c 	.word	0x2000000c
 800022c:	00000000 	.word	0x00000000
 8000230:	08003b80 	.word	0x08003b80

08000234 <frame_dummy>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <frame_dummy+0x18>)
 8000238:	b11b      	cbz	r3, 8000242 <frame_dummy+0xe>
 800023a:	4905      	ldr	r1, [pc, #20]	; (8000250 <frame_dummy+0x1c>)
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <frame_dummy+0x20>)
 800023e:	f3af 8000 	nop.w
 8000242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000246:	f7ff bfcf 	b.w	80001e8 <register_tm_clones>
 800024a:	bf00      	nop
 800024c:	00000000 	.word	0x00000000
 8000250:	20000010 	.word	0x20000010
 8000254:	08003b80 	.word	0x08003b80

08000258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_DMA_Init+0x3c>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <MX_DMA_Init+0x3c>)
 8000268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_DMA_Init+0x3c>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	2010      	movs	r0, #16
 8000280:	f000 fc75 	bl	8000b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000284:	2010      	movs	r0, #16
 8000286:	f000 fc8e 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800

08000298 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	4b19      	ldr	r3, [pc, #100]	; (8000318 <MX_GPIO_Init+0x80>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <MX_GPIO_Init+0x80>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_GPIO_Init+0x80>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_GPIO_Init+0x80>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <MX_GPIO_Init+0x80>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_GPIO_Init+0x80>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_0_Pin|CS_1_Pin|CS_2_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <MX_GPIO_Init+0x84>)
 80002ee:	f001 f9fb 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin|CS_2_Pin;
 80002f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4619      	mov	r1, r3
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_GPIO_Init+0x84>)
 800030c:	f001 f868 	bl	80013e0 <HAL_GPIO_Init>

}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	40020400 	.word	0x40020400

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fab1 	bl	800088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032a:	f000 f859 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032e:	f7ff ffb3 	bl	8000298 <MX_GPIO_Init>
  MX_DMA_Init();
 8000332:	f7ff ff91 	bl	8000258 <MX_DMA_Init>
  MX_SPI1_Init();
 8000336:	f000 f8c1 	bl	80004bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800033a:	f000 f9c7 	bl	80006cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  {  // anonymous scope so that temporary variables are cleaned up
	uint32_t baud = 9600;  // default baud
 800033e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000342:	61fb      	str	r3, [r7, #28]
	// motor_count starts counting from 0
	uint8_t motor_count = 0;  // TODO: make code to find motor count OUTSIDE anon scope
 8000344:	2300      	movs	r3, #0
 8000346:	76fb      	strb	r3, [r7, #27]
	handshake init;
	memset(&init, 0, 6);  // set to 0
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2206      	movs	r2, #6
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f003 faaa 	bl	80038a8 <memset>

	HANDSHAKE:  // jmp to label in the case baud is changed (redo handshake)

	// THIS WORKS!!!
	while (init.crc != 0xffff) {  // handshake
 8000354:	e006      	b.n	8000364 <main+0x44>
		// block cpu until 4 bytes are received
		HAL_UART_Receive(&huart2, (uint8_t*)&init, 6, HAL_MAX_DELAY);
 8000356:	1d39      	adds	r1, r7, #4
 8000358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800035c:	2206      	movs	r2, #6
 800035e:	481d      	ldr	r0, [pc, #116]	; (80003d4 <main+0xb4>)
 8000360:	f002 f8af 	bl	80024c2 <HAL_UART_Receive>
	while (init.crc != 0xffff) {  // handshake
 8000364:	893b      	ldrh	r3, [r7, #8]
 8000366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036a:	4293      	cmp	r3, r2
 800036c:	d1f3      	bne.n	8000356 <main+0x36>
	}  // TODO: crc check before exit and send

	init.motor_count = motor_count;
 800036e:	7efb      	ldrb	r3, [r7, #27]
 8000370:	f003 031f 	and.w	r3, r3, #31
 8000374:	b2da      	uxtb	r2, r3
 8000376:	793b      	ldrb	r3, [r7, #4]
 8000378:	f362 0304 	bfi	r3, r2, #0, #5
 800037c:	713b      	strb	r3, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&init, 6, 10);
 800037e:	1d39      	adds	r1, r7, #4
 8000380:	230a      	movs	r3, #10
 8000382:	2206      	movs	r2, #6
 8000384:	4813      	ldr	r0, [pc, #76]	; (80003d4 <main+0xb4>)
 8000386:	f002 f80a 	bl	800239e <HAL_UART_Transmit>

	if (init.init_0) {} // TODO: move all motors to their 0 pos
	if (init.baud != baud) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f3c3 1399 	ubfx	r3, r3, #6, #26
 8000390:	461a      	mov	r2, r3
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	4293      	cmp	r3, r2
 8000396:	d004      	beq.n	80003a2 <main+0x82>
		// TODO: set new baud and go back to handshake
		baud = init.baud;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f3c3 1399 	ubfx	r3, r3, #6, #26
 800039e:	61fb      	str	r3, [r7, #28]
		goto HANDSHAKE;
 80003a0:	e7d8      	b.n	8000354 <main+0x34>
  }  // TODO: try improving handshake process by using DMA from the start
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_DMA(&huart2, RX_data, 896);
 80003a2:	f44f 7260 	mov.w	r2, #896	; 0x380
 80003a6:	490c      	ldr	r1, [pc, #48]	; (80003d8 <main+0xb8>)
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <main+0xb4>)
 80003aa:	f002 f92c 	bl	8002606 <HAL_UART_Receive_DMA>

  char msgBuf[] = "wdawdadawdw\r\n";
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <main+0xbc>)
 80003b0:	f107 040c 	add.w	r4, r7, #12
 80003b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003b6:	c407      	stmia	r4!, {r0, r1, r2}
 80003b8:	8023      	strh	r3, [r4, #0]
  while (1) {
	  // UART NEVER COMPLETES FIRST TRANSMIT!!!!
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgBuf, 13, 10);
 80003ba:	f107 010c 	add.w	r1, r7, #12
 80003be:	230a      	movs	r3, #10
 80003c0:	220d      	movs	r2, #13
 80003c2:	4804      	ldr	r0, [pc, #16]	; (80003d4 <main+0xb4>)
 80003c4:	f001 ffeb 	bl	800239e <HAL_UART_Transmit>
	  // TODO: GETTING FATAL ERROR
	  HAL_Delay(1000);
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003cc:	f000 fad0 	bl	8000970 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msgBuf, 13, 10);
 80003d0:	e7f3      	b.n	80003ba <main+0x9a>
 80003d2:	bf00      	nop
 80003d4:	20000400 	.word	0x20000400
 80003d8:	20000028 	.word	0x20000028
 80003dc:	08003b98 	.word	0x08003b98

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b094      	sub	sp, #80	; 0x50
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0320 	add.w	r3, r7, #32
 80003ea:	2230      	movs	r2, #48	; 0x30
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 fa5a 	bl	80038a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	4b27      	ldr	r3, [pc, #156]	; (80004a8 <SystemClock_Config+0xc8>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040c:	4a26      	ldr	r2, [pc, #152]	; (80004a8 <SystemClock_Config+0xc8>)
 800040e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000412:	6413      	str	r3, [r2, #64]	; 0x40
 8000414:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <SystemClock_Config+0xc8>)
 8000416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <SystemClock_Config+0xcc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a20      	ldr	r2, [pc, #128]	; (80004ac <SystemClock_Config+0xcc>)
 800042a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <SystemClock_Config+0xcc>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	2302      	movs	r3, #2
 800043e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000444:	2310      	movs	r3, #16
 8000446:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000448:	2302      	movs	r3, #2
 800044a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800044c:	2300      	movs	r3, #0
 800044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000450:	2308      	movs	r3, #8
 8000452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000454:	2364      	movs	r3, #100	; 0x64
 8000456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800045c:	2304      	movs	r3, #4
 800045e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0320 	add.w	r3, r7, #32
 8000464:	4618      	mov	r0, r3
 8000466:	f001 f959 	bl	800171c <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000470:	f000 f81e 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	2103      	movs	r1, #3
 8000490:	4618      	mov	r0, r3
 8000492:	f001 fbbb 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800049c:	f000 f808 	bl	80004b0 <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3750      	adds	r7, #80	; 0x50
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40007000 	.word	0x40007000

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <MX_SPI1_Init+0x64>)
 80004c2:	4a18      	ldr	r2, [pc, #96]	; (8000524 <MX_SPI1_Init+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <MX_SPI1_Init+0x64>)
 80004c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <MX_SPI1_Init+0x64>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <MX_SPI1_Init+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_SPI1_Init+0x64>)
 80004dc:	2200      	movs	r2, #0
 80004de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_SPI1_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_SPI1_Init+0x64>)
 80004e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004ee:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_SPI1_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <MX_SPI1_Init+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_SPI1_Init+0x64>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <MX_SPI1_Init+0x64>)
 8000502:	2200      	movs	r2, #0
 8000504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_SPI1_Init+0x64>)
 8000508:	220a      	movs	r2, #10
 800050a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <MX_SPI1_Init+0x64>)
 800050e:	f001 fd5d 	bl	8001fcc <HAL_SPI_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000518:	f7ff ffca 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200003a8 	.word	0x200003a8
 8000524:	40013000 	.word	0x40013000

08000528 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08a      	sub	sp, #40	; 0x28
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <HAL_SPI_MspInit+0x94>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d133      	bne.n	80005b2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 8000550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000552:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 8000554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000558:	6453      	str	r3, [r2, #68]	; 0x44
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 800055c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_SPI_MspInit+0x98>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000582:	23e0      	movs	r3, #224	; 0xe0
 8000584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000586:	2302      	movs	r3, #2
 8000588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800058e:	2303      	movs	r3, #3
 8000590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000592:	2305      	movs	r3, #5
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4619      	mov	r1, r3
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <HAL_SPI_MspInit+0x9c>)
 800059e:	f000 ff1f 	bl	80013e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	2023      	movs	r0, #35	; 0x23
 80005a8:	f000 fae1 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005ac:	2023      	movs	r0, #35	; 0x23
 80005ae:	f000 fafa 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005b2:	bf00      	nop
 80005b4:	3728      	adds	r7, #40	; 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40013000 	.word	0x40013000
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40020000 	.word	0x40020000

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <HAL_MspInit+0x4c>)
 80005d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <HAL_MspInit+0x4c>)
 80005d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005dc:	6453      	str	r3, [r2, #68]	; 0x44
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_MspInit+0x4c>)
 80005e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_MspInit+0x4c>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <HAL_MspInit+0x4c>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_MspInit+0x4c>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 f964 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <DMA1_Stream5_IRQHandler+0x10>)
 8000672:	f000 fc4b 	bl	8000f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000444 	.word	0x20000444

08000680 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <SPI1_IRQHandler+0x10>)
 8000686:	f001 fd2b 	bl	80020e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200003a8 	.word	0x200003a8

08000694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <USART2_IRQHandler+0x10>)
 800069a:	f001 ffe5 	bl	8002668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000400 	.word	0x20000400

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 fdfe 	bl	8002304 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f7ff fecf 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000400 	.word	0x20000400
 800071c:	40004400 	.word	0x40004400

08000720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a39      	ldr	r2, [pc, #228]	; (8000824 <HAL_UART_MspInit+0x104>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d16b      	bne.n	800081a <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <HAL_UART_MspInit+0x108>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a37      	ldr	r2, [pc, #220]	; (8000828 <HAL_UART_MspInit+0x108>)
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <HAL_UART_MspInit+0x108>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <HAL_UART_MspInit+0x108>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a30      	ldr	r2, [pc, #192]	; (8000828 <HAL_UART_MspInit+0x108>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b2e      	ldr	r3, [pc, #184]	; (8000828 <HAL_UART_MspInit+0x108>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077a:	230c      	movs	r3, #12
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800078a:	2307      	movs	r3, #7
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4825      	ldr	r0, [pc, #148]	; (800082c <HAL_UART_MspInit+0x10c>)
 8000796:	f000 fe23 	bl	80013e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <HAL_UART_MspInit+0x110>)
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <HAL_UART_MspInit+0x114>)
 800079e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007d8:	2204      	movs	r2, #4
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007de:	2203      	movs	r2, #3
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80007ee:	4810      	ldr	r0, [pc, #64]	; (8000830 <HAL_UART_MspInit+0x110>)
 80007f0:	f000 f9f4 	bl	8000bdc <HAL_DMA_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80007fa:	f7ff fe59 	bl	80004b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_UART_MspInit+0x110>)
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <HAL_UART_MspInit+0x110>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2026      	movs	r0, #38	; 0x26
 8000810:	f000 f9ad 	bl	8000b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000814:	2026      	movs	r0, #38	; 0x26
 8000816:	f000 f9c6 	bl	8000ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000
 8000830:	20000444 	.word	0x20000444
 8000834:	40026088 	.word	0x40026088

08000838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000854:	4c0b      	ldr	r4, [pc, #44]	; (8000884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000862:	f7ff ff21 	bl	80006a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000866:	f002 fffb 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800086a:	f7ff fd59 	bl	8000320 <main>
  bx  lr    
 800086e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800087c:	08003bd8 	.word	0x08003bd8
  ldr r2, =_sbss
 8000880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000884:	200004a8 	.word	0x200004a8

08000888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>
	...

0800088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_Init+0x40>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0d      	ldr	r2, [pc, #52]	; (80008cc <HAL_Init+0x40>)
 8000896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800089a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <HAL_Init+0x40>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <HAL_Init+0x40>)
 80008a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x40>)
 80008ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f94f 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fe82 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023c00 	.word	0x40023c00

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f967 	bl	8000bc2 <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090c:	f000 f92f 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	200004a4 	.word	0x200004a4

08000958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	200004a4 	.word	0x200004a4

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff ffee 	bl	8000958 <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_Delay+0x44>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffde 	bl	8000958 <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000008 	.word	0x20000008

080009b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d4:	4013      	ands	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <__NVIC_SetPriorityGrouping+0x44>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <__NVIC_GetPriorityGrouping+0x18>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	0a1b      	lsrs	r3, r3, #8
 8000a0a:	f003 0307 	and.w	r3, r3, #7
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	db0b      	blt.n	8000a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	f003 021f 	and.w	r2, r3, #31
 8000a34:	4907      	ldr	r1, [pc, #28]	; (8000a54 <__NVIC_EnableIRQ+0x38>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff29 	bl	80009b8 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff3e 	bl	8000a00 <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff31 	bl	8000a1c <__NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ffa2 	bl	8000b14 <SysTick_Config>
 8000bd0:	4603      	mov	r3, r0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff feb6 	bl	8000958 <HAL_GetTick>
 8000bec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e099      	b.n	8000d2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f022 0201 	bic.w	r2, r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c18:	e00f      	b.n	8000c3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c1a:	f7ff fe9d 	bl	8000958 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b05      	cmp	r3, #5
 8000c26:	d908      	bls.n	8000c3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2220      	movs	r2, #32
 8000c2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e078      	b.n	8000d2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d1e8      	bne.n	8000c1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4b38      	ldr	r3, [pc, #224]	; (8000d34 <HAL_DMA_Init+0x158>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d107      	bne.n	8000ca4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f023 0307 	bic.w	r3, r3, #7
 8000cba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d117      	bne.n	8000cfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00e      	beq.n	8000cfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 fb01 	bl	80012e8 <DMA_CheckFifoParam>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d008      	beq.n	8000cfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2240      	movs	r2, #64	; 0x40
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e016      	b.n	8000d2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fab8 	bl	800127c <DMA_CalcBaseAndBitshift>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d14:	223f      	movs	r2, #63	; 0x3f
 8000d16:	409a      	lsls	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	f010803f 	.word	0xf010803f

08000d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
 8000d44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d101      	bne.n	8000d5e <HAL_DMA_Start_IT+0x26>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e040      	b.n	8000de0 <HAL_DMA_Start_IT+0xa8>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d12f      	bne.n	8000dd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2202      	movs	r2, #2
 8000d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f000 fa4a 	bl	8001220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d90:	223f      	movs	r2, #63	; 0x3f
 8000d92:	409a      	lsls	r2, r3
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0216 	orr.w	r2, r2, #22
 8000da6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0208 	orr.w	r2, r2, #8
 8000dbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e005      	b.n	8000dde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000df6:	f7ff fdaf 	bl	8000958 <HAL_GetTick>
 8000dfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d008      	beq.n	8000e1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e052      	b.n	8000ec0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f022 0216 	bic.w	r2, r2, #22
 8000e28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	695a      	ldr	r2, [r3, #20]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d103      	bne.n	8000e4a <HAL_DMA_Abort+0x62>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d007      	beq.n	8000e5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0208 	bic.w	r2, r2, #8
 8000e58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f022 0201 	bic.w	r2, r2, #1
 8000e68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e6a:	e013      	b.n	8000e94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e6c:	f7ff fd74 	bl	8000958 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d90c      	bls.n	8000e94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2220      	movs	r2, #32
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2203      	movs	r2, #3
 8000e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e015      	b.n	8000ec0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1e4      	bne.n	8000e6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea6:	223f      	movs	r2, #63	; 0x3f
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d004      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00c      	b.n	8000f00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2205      	movs	r2, #5
 8000eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f18:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <HAL_DMA_IRQHandler+0x248>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a8e      	ldr	r2, [pc, #568]	; (8001158 <HAL_DMA_IRQHandler+0x24c>)
 8000f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f22:	0a9b      	lsrs	r3, r3, #10
 8000f24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f36:	2208      	movs	r2, #8
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d01a      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d013      	beq.n	8000f78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0204 	bic.w	r2, r2, #4
 8000f5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f64:	2208      	movs	r2, #8
 8000f66:	409a      	lsls	r2, r3
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	f043 0201 	orr.w	r2, r3, #1
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d012      	beq.n	8000fae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00b      	beq.n	8000fae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	f043 0202 	orr.w	r2, r3, #2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d012      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	409a      	lsls	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fdc:	f043 0204 	orr.w	r2, r3, #4
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe8:	2210      	movs	r2, #16
 8000fea:	409a      	lsls	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d043      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d03c      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001006:	2210      	movs	r2, #16
 8001008:	409a      	lsls	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d018      	beq.n	800104e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	2b00      	cmp	r3, #0
 8001030:	d024      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	4798      	blx	r3
 800103a:	e01f      	b.n	800107c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01b      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
 800104c:	e016      	b.n	800107c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0208 	bic.w	r2, r2, #8
 800106a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001080:	2220      	movs	r2, #32
 8001082:	409a      	lsls	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 808f 	beq.w	80011ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8087 	beq.w	80011ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a2:	2220      	movs	r2, #32
 80010a4:	409a      	lsls	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	d136      	bne.n	8001124 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0216 	bic.w	r2, r2, #22
 80010c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d103      	bne.n	80010e6 <HAL_DMA_IRQHandler+0x1da>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d007      	beq.n	80010f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0208 	bic.w	r2, r2, #8
 80010f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010fa:	223f      	movs	r2, #63	; 0x3f
 80010fc:	409a      	lsls	r2, r3
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001116:	2b00      	cmp	r3, #0
 8001118:	d07e      	beq.n	8001218 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
        }
        return;
 8001122:	e079      	b.n	8001218 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d01d      	beq.n	800116e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10d      	bne.n	800115c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001144:	2b00      	cmp	r3, #0
 8001146:	d031      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	4798      	blx	r3
 8001150:	e02c      	b.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d023      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	4798      	blx	r3
 800116c:	e01e      	b.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10f      	bne.n	800119c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0210 	bic.w	r2, r2, #16
 800118a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d032      	beq.n	800121a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d022      	beq.n	8001206 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	3301      	adds	r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d307      	bcc.n	80011f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f2      	bne.n	80011d8 <HAL_DMA_IRQHandler+0x2cc>
 80011f2:	e000      	b.n	80011f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	4798      	blx	r3
 8001216:	e000      	b.n	800121a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001218:	bf00      	nop
    }
  }
}
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800123c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b40      	cmp	r3, #64	; 0x40
 800124c:	d108      	bne.n	8001260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800125e:	e007      	b.n	8001270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	60da      	str	r2, [r3, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3b10      	subs	r3, #16
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <DMA_CalcBaseAndBitshift+0x64>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b03      	cmp	r3, #3
 80012a8:	d909      	bls.n	80012be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012b2:	f023 0303 	bic.w	r3, r3, #3
 80012b6:	1d1a      	adds	r2, r3, #4
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	659a      	str	r2, [r3, #88]	; 0x58
 80012bc:	e007      	b.n	80012ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012c6:	f023 0303 	bic.w	r3, r3, #3
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	aaaaaaab 	.word	0xaaaaaaab
 80012e4:	08003bc0 	.word	0x08003bc0

080012e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f0:	2300      	movs	r3, #0
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d11f      	bne.n	8001342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d856      	bhi.n	80013b6 <DMA_CheckFifoParam+0xce>
 8001308:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <DMA_CheckFifoParam+0x28>)
 800130a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130e:	bf00      	nop
 8001310:	08001321 	.word	0x08001321
 8001314:	08001333 	.word	0x08001333
 8001318:	08001321 	.word	0x08001321
 800131c:	080013b7 	.word	0x080013b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d046      	beq.n	80013ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001330:	e043      	b.n	80013ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800133a:	d140      	bne.n	80013be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001340:	e03d      	b.n	80013be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800134a:	d121      	bne.n	8001390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d837      	bhi.n	80013c2 <DMA_CheckFifoParam+0xda>
 8001352:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <DMA_CheckFifoParam+0x70>)
 8001354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001358:	08001369 	.word	0x08001369
 800135c:	0800136f 	.word	0x0800136f
 8001360:	08001369 	.word	0x08001369
 8001364:	08001381 	.word	0x08001381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
      break;
 800136c:	e030      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d025      	beq.n	80013c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800137e:	e022      	b.n	80013c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001388:	d11f      	bne.n	80013ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800138e:	e01c      	b.n	80013ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d903      	bls.n	800139e <DMA_CheckFifoParam+0xb6>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b03      	cmp	r3, #3
 800139a:	d003      	beq.n	80013a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800139c:	e018      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
      break;
 80013a2:	e015      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00e      	beq.n	80013ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
      break;
 80013b4:	e00b      	b.n	80013ce <DMA_CheckFifoParam+0xe6>
      break;
 80013b6:	bf00      	nop
 80013b8:	e00a      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ba:	bf00      	nop
 80013bc:	e008      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;
 80013be:	bf00      	nop
 80013c0:	e006      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;
 80013c2:	bf00      	nop
 80013c4:	e004      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;
 80013c6:	bf00      	nop
 80013c8:	e002      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80013ca:	bf00      	nop
 80013cc:	e000      	b.n	80013d0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ce:	bf00      	nop
    }
  } 
  
  return status; 
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e159      	b.n	80016b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013fc:	2201      	movs	r2, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8148 	bne.w	80016aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d005      	beq.n	8001432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	2b02      	cmp	r3, #2
 8001430:	d130      	bne.n	8001494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001468:	2201      	movs	r2, #1
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	091b      	lsrs	r3, r3, #4
 800147e:	f003 0201 	and.w	r2, r3, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b03      	cmp	r3, #3
 800149e:	d017      	beq.n	80014d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d123      	bne.n	8001524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	08da      	lsrs	r2, r3, #3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3208      	adds	r2, #8
 80014e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	08da      	lsrs	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3208      	adds	r2, #8
 800151e:	69b9      	ldr	r1, [r7, #24]
 8001520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a2 	beq.w	80016aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a56      	ldr	r2, [pc, #344]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b54      	ldr	r3, [pc, #336]	; (80016c8 <HAL_GPIO_Init+0x2e8>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a52      	ldr	r2, [pc, #328]	; (80016cc <HAL_GPIO_Init+0x2ec>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a49      	ldr	r2, [pc, #292]	; (80016d0 <HAL_GPIO_Init+0x2f0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d019      	beq.n	80015e2 <HAL_GPIO_Init+0x202>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a48      	ldr	r2, [pc, #288]	; (80016d4 <HAL_GPIO_Init+0x2f4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d013      	beq.n	80015de <HAL_GPIO_Init+0x1fe>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a47      	ldr	r2, [pc, #284]	; (80016d8 <HAL_GPIO_Init+0x2f8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d00d      	beq.n	80015da <HAL_GPIO_Init+0x1fa>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a46      	ldr	r2, [pc, #280]	; (80016dc <HAL_GPIO_Init+0x2fc>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d007      	beq.n	80015d6 <HAL_GPIO_Init+0x1f6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a45      	ldr	r2, [pc, #276]	; (80016e0 <HAL_GPIO_Init+0x300>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_GPIO_Init+0x1f2>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e008      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015d2:	2307      	movs	r3, #7
 80015d4:	e006      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015d6:	2303      	movs	r3, #3
 80015d8:	e004      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015da:	2302      	movs	r3, #2
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_GPIO_Init+0x204>
 80015e2:	2300      	movs	r3, #0
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	f002 0203 	and.w	r2, r2, #3
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	4093      	lsls	r3, r2
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f4:	4935      	ldr	r1, [pc, #212]	; (80016cc <HAL_GPIO_Init+0x2ec>)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001602:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001626:	4a2f      	ldr	r2, [pc, #188]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_GPIO_Init+0x304>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	43db      	mvns	r3, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4013      	ands	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167a:	4a1a      	ldr	r2, [pc, #104]	; (80016e4 <HAL_GPIO_Init+0x304>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_GPIO_Init+0x304>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_GPIO_Init+0x304>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3301      	adds	r3, #1
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	f67f aea2 	bls.w	80013fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40013800 	.word	0x40013800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020c00 	.word	0x40020c00
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40013c00 	.word	0x40013c00

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e267      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d075      	beq.n	8001826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173a:	4b88      	ldr	r3, [pc, #544]	; (800195c <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d00c      	beq.n	8001760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4b85      	ldr	r3, [pc, #532]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174e:	2b08      	cmp	r3, #8
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b82      	ldr	r3, [pc, #520]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b7e      	ldr	r3, [pc, #504]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05b      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d157      	bne.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e242      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x74>
 8001782:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6f      	ldr	r2, [pc, #444]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6c      	ldr	r2, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 80017b4:	4b69      	ldr	r3, [pc, #420]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a68      	ldr	r2, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f8c0 	bl	8000958 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f8bc 	bl	8000958 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e207      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5b      	ldr	r3, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f8ac 	bl	8000958 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff f8a8 	bl	8000958 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1f3      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b51      	ldr	r3, [pc, #324]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001832:	4b4a      	ldr	r3, [pc, #296]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b47      	ldr	r3, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b44      	ldr	r3, [pc, #272]	; (800195c <HAL_RCC_OscConfig+0x240>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b41      	ldr	r3, [pc, #260]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c7      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4937      	ldr	r1, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x240>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_RCC_OscConfig+0x244>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff f861 	bl	8000958 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff f85d 	bl	8000958 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a8      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4925      	ldr	r1, [pc, #148]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_RCC_OscConfig+0x244>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f840 	bl	8000958 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff f83c 	bl	8000958 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e187      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x248>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff f820 	bl	8000958 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff f81c 	bl	8000958 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e167      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x240>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x200>
 800193a:	e01b      	b.n	8001974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_OscConfig+0x248>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff f809 	bl	8000958 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00e      	b.n	8001968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff f805 	bl	8000958 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d907      	bls.n	8001968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e150      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 800195c:	40023800 	.word	0x40023800
 8001960:	42470000 	.word	0x42470000
 8001964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ea      	bne.n	800194a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8097 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a7c      	ldr	r2, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b74      	ldr	r3, [pc, #464]	; (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a73      	ldr	r2, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7fe ffc5 	bl	8000958 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7fe ffc1 	bl	8000958 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e10c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2ea>
 80019f8:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a63      	ldr	r2, [pc, #396]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x30c>
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a5e      	ldr	r2, [pc, #376]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a5b      	ldr	r2, [pc, #364]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a28:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2c:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	; 0x70
 8001a34:	4b55      	ldr	r3, [pc, #340]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 0304 	bic.w	r3, r3, #4
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d015      	beq.n	8001a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7fe ff86 	bl	8000958 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7fe ff82 	bl	8000958 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0cb      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0ee      	beq.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7fe ff70 	bl	8000958 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7fe ff6c 	bl	8000958 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0b5      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ee      	bne.n	8001a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b39      	ldr	r3, [pc, #228]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a1 	beq.w	8001bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d05c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d141      	bne.n	8001b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b31      	ldr	r3, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe ff40 	bl	8000958 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe ff3c 	bl	8000958 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e087      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	491b      	ldr	r1, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7fe ff15 	bl	8000958 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b32:	f7fe ff11 	bl	8000958 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e05c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x416>
 8001b50:	e054      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7fe fefe 	bl	8000958 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fefa 	bl	8000958 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e045      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e038      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
 8001b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4ec>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d121      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7fe fe2c 	bl	8000958 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7fe fe28 	bl	8000958 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fd8c 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08003ba8 	.word	0x08003ba8
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b090      	sub	sp, #64	; 0x40
 8001dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4b59      	ldr	r3, [pc, #356]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	f200 80a1 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e09b      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b53      	ldr	r3, [pc, #332]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e10:	e09b      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b53      	ldr	r3, [pc, #332]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e16:	e098      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	4b4d      	ldr	r3, [pc, #308]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d028      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	627a      	str	r2, [r7, #36]	; 0x24
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e40:	2100      	movs	r1, #0
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e44:	fb03 f201 	mul.w	r2, r3, r1
 8001e48:	2300      	movs	r3, #0
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a43      	ldr	r2, [pc, #268]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e52:	fba0 1202 	umull	r1, r2, r0, r2
 8001e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e58:	460a      	mov	r2, r1
 8001e5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5e:	4413      	add	r3, r2
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	2200      	movs	r2, #0
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	61fa      	str	r2, [r7, #28]
 8001e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e72:	f7fe f991 	bl	8000198 <__aeabi_uldivmod>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e7e:	e053      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	2200      	movs	r2, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	617a      	str	r2, [r7, #20]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e92:	f04f 0b00 	mov.w	fp, #0
 8001e96:	4652      	mov	r2, sl
 8001e98:	465b      	mov	r3, fp
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ebb2 080a 	subs.w	r8, r2, sl
 8001eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eca:	ebb2 0408 	subs.w	r4, r2, r8
 8001ece:	eb63 0509 	sbc.w	r5, r3, r9
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	00eb      	lsls	r3, r5, #3
 8001edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	eb14 030a 	adds.w	r3, r4, sl
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	eb45 030b 	adc.w	r3, r5, fp
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efe:	4629      	mov	r1, r5
 8001f00:	028b      	lsls	r3, r1, #10
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f08:	4621      	mov	r1, r4
 8001f0a:	028a      	lsls	r2, r1, #10
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	2200      	movs	r2, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1c:	f7fe f93c 	bl	8000198 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3740      	adds	r7, #64	; 0x40
 8001f50:	46bd      	mov	sp, r7
 8001f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	017d7840 	.word	0x017d7840

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	; (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08003bb8 	.word	0x08003bb8

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa8:	f7ff ffdc 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08003bb8 	.word	0x08003bb8

08001fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e07b      	b.n	80020d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fee:	d009      	beq.n	8002004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	e005      	b.n	8002004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fa82 	bl	8000528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002056:	431a      	orrs	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0104 	and.w	r1, r3, #4
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f003 0210 	and.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
    return;
 800211e:	e0ce      	b.n	80022be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_SPI_IRQHandler+0x5e>
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
    return;
 800213c:	e0bf      	b.n	80022be <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10a      	bne.n	800215e <HAL_SPI_IRQHandler+0x7e>
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80b0 	beq.w	80022be <HAL_SPI_IRQHandler+0x1de>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f003 0320 	and.w	r3, r3, #32
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80aa 	beq.w	80022be <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b00      	cmp	r3, #0
 8002172:	d023      	beq.n	80021bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b03      	cmp	r3, #3
 800217e:	d011      	beq.n	80021a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	e00b      	b.n	80021bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
        return;
 80021ba:	e080      	b.n	80022be <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d014      	beq.n	80021f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0208 	orr.w	r2, r3, #8
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002218:	2b00      	cmp	r3, #0
 800221a:	d04f      	beq.n	80022bc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800222a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d104      	bne.n	8002248 <HAL_SPI_IRQHandler+0x168>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d034      	beq.n	80022b2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0203 	bic.w	r2, r2, #3
 8002256:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	4a17      	ldr	r2, [pc, #92]	; (80022c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002266:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fe2b 	bl	8000ec8 <HAL_DMA_Abort_IT>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800227c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	2b00      	cmp	r3, #0
 800228a:	d016      	beq.n	80022ba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002290:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_SPI_IRQHandler+0x1e4>)
 8002292:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fe15 	bl	8000ec8 <HAL_DMA_Abort_IT>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80022b0:	e003      	b.n	80022ba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f808 	bl	80022c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80022b8:	e000      	b.n	80022bc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80022ba:	bf00      	nop
    return;
 80022bc:	bf00      	nop
  }
}
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	080022dd 	.word	0x080022dd

080022c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff ffe6 	bl	80022c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e03f      	b.n	8002396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe f9f8 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f001 f815 	bl	8003378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800235c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800236c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800237c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b08a      	sub	sp, #40	; 0x28
 80023a2:	af02      	add	r7, sp, #8
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d17c      	bne.n	80024b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_UART_Transmit+0x2c>
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e075      	b.n	80024ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Transmit+0x3e>
 80023d8:	2302      	movs	r3, #2
 80023da:	e06e      	b.n	80024ba <HAL_UART_Transmit+0x11c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2221      	movs	r2, #33	; 0x21
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023f2:	f7fe fab1 	bl	8000958 <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d108      	bne.n	8002420 <HAL_UART_Transmit+0x82>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e003      	b.n	8002428 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002430:	e02a      	b.n	8002488 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fccd 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e036      	b.n	80024ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3302      	adds	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e007      	b.n	800247a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3301      	adds	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1cf      	bne.n	8002432 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fc9d 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e006      	b.n	80024ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b08a      	sub	sp, #40	; 0x28
 80024c6:	af02      	add	r7, sp, #8
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 808c 	bne.w	80025fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_UART_Receive+0x2e>
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e084      	b.n	80025fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_UART_Receive+0x40>
 80024fe:	2302      	movs	r3, #2
 8002500:	e07d      	b.n	80025fe <HAL_UART_Receive+0x13c>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2222      	movs	r2, #34	; 0x22
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800251e:	f7fe fa1b 	bl	8000958 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88fa      	ldrh	r2, [r7, #6]
 800252e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002538:	d108      	bne.n	800254c <HAL_UART_Receive+0x8a>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d104      	bne.n	800254c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	e003      	b.n	8002554 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800255c:	e043      	b.n	80025e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	2120      	movs	r1, #32
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fc37 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e042      	b.n	80025fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10c      	bne.n	8002598 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	b29b      	uxth	r3, r3
 8002586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258a:	b29a      	uxth	r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	3302      	adds	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e01f      	b.n	80025d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a0:	d007      	beq.n	80025b2 <HAL_UART_Receive+0xf0>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_UART_Receive+0xfe>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	701a      	strb	r2, [r3, #0]
 80025be:	e008      	b.n	80025d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1b6      	bne.n	800255e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4613      	mov	r3, r2
 8002612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d11d      	bne.n	800265c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Receive_DMA+0x26>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e016      	b.n	800265e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_UART_Receive_DMA+0x38>
 800263a:	2302      	movs	r3, #2
 800263c:	e00f      	b.n	800265e <HAL_UART_Receive_DMA+0x58>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	461a      	mov	r2, r3
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fc30 	bl	8002eb8 <UART_Start_Receive_DMA>
 8002658:	4603      	mov	r3, r0
 800265a:	e000      	b.n	800265e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b0ba      	sub	sp, #232	; 0xe8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_UART_IRQHandler+0x66>
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fd9b 	bl	8003202 <UART_Receive_IT>
      return;
 80026cc:	e256      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80de 	beq.w	8002894 <HAL_UART_IRQHandler+0x22c>
 80026d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80d1 	beq.w	8002894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_UART_IRQHandler+0xae>
 80026fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_UART_IRQHandler+0xd2>
 8002722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_UART_IRQHandler+0xf6>
 8002746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <HAL_UART_IRQHandler+0x126>
 800276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0208 	orr.w	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 81ed 	beq.w	8002b72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x14e>
 80027a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fd26 	bl	8003202 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_UART_IRQHandler+0x17a>
 80027da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04f      	beq.n	8002882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fc2e 	bl	8003044 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d141      	bne.n	800287a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800280c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800282e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800283a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1d9      	bne.n	80027f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	4a7d      	ldr	r2, [pc, #500]	; (8002a44 <HAL_UART_IRQHandler+0x3dc>)
 8002850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fb36 	bl	8000ec8 <HAL_DMA_Abort_IT>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	e00e      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f9a4 	bl	8002bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	e00a      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f9a0 	bl	8002bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e006      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f99c 	bl	8002bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800288e:	e170      	b.n	8002b72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	bf00      	nop
    return;
 8002892:	e16e      	b.n	8002b72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 814a 	bne.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8143 	beq.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 813c 	beq.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	f040 80b4 	bne.w	8002a48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8140 	beq.w	8002b76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028fe:	429a      	cmp	r2, r3
 8002900:	f080 8139 	bcs.w	8002b76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	f000 8088 	beq.w	8002a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800294a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800295e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1d9      	bne.n	800291a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800298a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800298e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800299c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e1      	bne.n	8002966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e3      	bne.n	80029a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fa:	f023 0310 	bic.w	r3, r3, #16
 80029fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e3      	bne.n	80029e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f9df 	bl	8000de8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8ca 	bl	8002bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a40:	e099      	b.n	8002b76 <HAL_UART_IRQHandler+0x50e>
 8002a42:	bf00      	nop
 8002a44:	0800310b 	.word	0x0800310b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 808b 	beq.w	8002b7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8086 	beq.w	8002b7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a92:	647a      	str	r2, [r7, #68]	; 0x44
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e3      	bne.n	8002a6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aca:	633a      	str	r2, [r7, #48]	; 0x30
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e3      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b10:	61fa      	str	r2, [r7, #28]
 8002b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e3      	bne.n	8002aec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f852 	bl	8002bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b30:	e023      	b.n	8002b7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_UART_IRQHandler+0x4ea>
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 faf1 	bl	8003132 <UART_Transmit_IT>
    return;
 8002b50:	e014      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <HAL_UART_IRQHandler+0x514>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fb31 	bl	80031d2 <UART_EndTransmit_IT>
    return;
 8002b70:	e004      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
    return;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
      return;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
      return;
 8002b7a:	bf00      	nop
  }
}
 8002b7c:	37e8      	adds	r7, #232	; 0xe8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b09c      	sub	sp, #112	; 0x70
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d172      	bne.n	8002cee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	e853 3f00 	ldrex	r3, [r3]
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002c2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1e5      	bne.n	8002c0e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3314      	adds	r3, #20
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	667b      	str	r3, [r7, #100]	; 0x64
 8002c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3314      	adds	r3, #20
 8002c60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c62:	647a      	str	r2, [r7, #68]	; 0x44
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3314      	adds	r3, #20
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	623b      	str	r3, [r7, #32]
   return(result);
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3314      	adds	r3, #20
 8002c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c96:	633a      	str	r2, [r7, #48]	; 0x30
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d119      	bne.n	8002cee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f023 0310 	bic.w	r3, r3, #16
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002cda:	61fa      	str	r2, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e5      	bne.n	8002cba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d106      	bne.n	8002d04 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002cfe:	f7ff ff69 	bl	8002bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d02:	e002      	b.n	8002d0a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002d04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002d06:	f7ff ff47 	bl	8002b98 <HAL_UART_RxCpltCallback>
}
 8002d0a:	bf00      	nop
 8002d0c:	3770      	adds	r7, #112	; 0x70
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d2c:	085b      	lsrs	r3, r3, #1
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f7ff ff4e 	bl	8002bd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d38:	e002      	b.n	8002d40 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ff36 	bl	8002bac <HAL_UART_RxHalfCpltCallback>
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d64:	2b80      	cmp	r3, #128	; 0x80
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b21      	cmp	r3, #33	; 0x21
 8002d7a:	d108      	bne.n	8002d8e <UART_DMAError+0x46>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	f000 f933 	bl	8002ff4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b40      	cmp	r3, #64	; 0x40
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b22      	cmp	r3, #34	; 0x22
 8002dae:	d108      	bne.n	8002dc2 <UART_DMAError+0x7a>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2200      	movs	r2, #0
 8002dba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002dbc:	68b8      	ldr	r0, [r7, #8]
 8002dbe:	f000 f941 	bl	8003044 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dce:	68b8      	ldr	r0, [r7, #8]
 8002dd0:	f7ff fef6 	bl	8002bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b090      	sub	sp, #64	; 0x40
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	e050      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df4:	d04c      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfc:	f7fd fdac 	bl	8000958 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d241      	bcs.n	8002e90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	330c      	adds	r3, #12
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e2c:	637a      	str	r2, [r7, #52]	; 0x34
 8002e2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e5      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3314      	adds	r3, #20
 8002e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3314      	adds	r3, #20
 8002e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e60:	623a      	str	r2, [r7, #32]
 8002e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00f      	b.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d09f      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3740      	adds	r7, #64	; 0x40
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b098      	sub	sp, #96	; 0x60
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2222      	movs	r2, #34	; 0x22
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <UART_Start_Receive_DMA+0x130>)
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4a3f      	ldr	r2, [pc, #252]	; (8002fec <UART_Start_Receive_DMA+0x134>)
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	4a3e      	ldr	r2, [pc, #248]	; (8002ff0 <UART_Start_Receive_DMA+0x138>)
 8002ef6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	2200      	movs	r2, #0
 8002efe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3304      	adds	r3, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	f7fd ff0e 	bl	8000d38 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d019      	beq.n	8002f76 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	330c      	adds	r3, #12
 8002f48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002f70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f96:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3314      	adds	r3, #20
 8002fb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3314      	adds	r3, #20
 8002fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fca:	627a      	str	r2, [r7, #36]	; 0x24
 8002fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6a39      	ldr	r1, [r7, #32]
 8002fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e5      	bne.n	8002faa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3760      	adds	r7, #96	; 0x60
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08002bed 	.word	0x08002bed
 8002fec:	08002d13 	.word	0x08002d13
 8002ff0:	08002d49 	.word	0x08002d49

08002ff4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	60bb      	str	r3, [r7, #8]
   return(result);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	61ba      	str	r2, [r7, #24]
 800301e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6979      	ldr	r1, [r7, #20]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	613b      	str	r3, [r7, #16]
   return(result);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003038:	bf00      	nop
 800303a:	3724      	adds	r7, #36	; 0x24
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003044:	b480      	push	{r7}
 8003046:	b095      	sub	sp, #84	; 0x54
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800306c:	643a      	str	r2, [r7, #64]	; 0x40
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3314      	adds	r3, #20
 8003086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3314      	adds	r3, #20
 800309e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a8:	e841 2300 	strex	r3, r2, [r1]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1e5      	bne.n	8003080 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d119      	bne.n	80030f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f023 0310 	bic.w	r3, r3, #16
 80030d2:	647b      	str	r3, [r7, #68]	; 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030dc:	61ba      	str	r2, [r7, #24]
 80030de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	613b      	str	r3, [r7, #16]
   return(result);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e5      	bne.n	80030bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030fe:	bf00      	nop
 8003100:	3754      	adds	r7, #84	; 0x54
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fd4b 	bl	8002bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b21      	cmp	r3, #33	; 0x21
 8003144:	d13e      	bne.n	80031c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d114      	bne.n	800317a <UART_Transmit_IT+0x48>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d110      	bne.n	800317a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	1c9a      	adds	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	621a      	str	r2, [r3, #32]
 8003178:	e008      	b.n	800318c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	1c59      	adds	r1, r3, #1
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6211      	str	r1, [r2, #32]
 8003184:	781a      	ldrb	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4619      	mov	r1, r3
 800319a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fcc6 	bl	8002b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b08c      	sub	sp, #48	; 0x30
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b22      	cmp	r3, #34	; 0x22
 8003214:	f040 80ab 	bne.w	800336e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003220:	d117      	bne.n	8003252 <UART_Receive_IT+0x50>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d113      	bne.n	8003252 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003240:	b29a      	uxth	r2, r3
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	629a      	str	r2, [r3, #40]	; 0x28
 8003250:	e026      	b.n	80032a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003258:	2300      	movs	r3, #0
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d007      	beq.n	8003276 <UART_Receive_IT+0x74>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10a      	bne.n	8003284 <UART_Receive_IT+0x82>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e008      	b.n	8003296 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003290:	b2da      	uxtb	r2, r3
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4619      	mov	r1, r3
 80032ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d15a      	bne.n	800336a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0220 	bic.w	r2, r2, #32
 80032c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d135      	bne.n	8003360 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	613b      	str	r3, [r7, #16]
   return(result);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f023 0310 	bic.w	r3, r3, #16
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	330c      	adds	r3, #12
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	623a      	str	r2, [r7, #32]
 800331c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331e:	69f9      	ldr	r1, [r7, #28]
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	e841 2300 	strex	r3, r2, [r1]
 8003326:	61bb      	str	r3, [r7, #24]
   return(result);
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1e5      	bne.n	80032fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b10      	cmp	r3, #16
 800333a:	d10a      	bne.n	8003352 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fc3b 	bl	8002bd4 <HAL_UARTEx_RxEventCallback>
 800335e:	e002      	b.n	8003366 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff fc19 	bl	8002b98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e002      	b.n	8003370 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800336e:	2302      	movs	r3, #2
  }
}
 8003370:	4618      	mov	r0, r3
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337c:	b0c0      	sub	sp, #256	; 0x100
 800337e:	af00      	add	r7, sp, #0
 8003380:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	68d9      	ldr	r1, [r3, #12]
 8003396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	ea40 0301 	orr.w	r3, r0, r1
 80033a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d0:	f021 010c 	bic.w	r1, r1, #12
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033de:	430b      	orrs	r3, r1
 80033e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f2:	6999      	ldr	r1, [r3, #24]
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	ea40 0301 	orr.w	r3, r0, r1
 80033fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b8f      	ldr	r3, [pc, #572]	; (8003644 <UART_SetConfig+0x2cc>)
 8003408:	429a      	cmp	r2, r3
 800340a:	d005      	beq.n	8003418 <UART_SetConfig+0xa0>
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4b8d      	ldr	r3, [pc, #564]	; (8003648 <UART_SetConfig+0x2d0>)
 8003414:	429a      	cmp	r2, r3
 8003416:	d104      	bne.n	8003422 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003418:	f7fe fdc4 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 800341c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003420:	e003      	b.n	800342a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003422:	f7fe fdab 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 8003426:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	f040 810c 	bne.w	8003650 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343c:	2200      	movs	r2, #0
 800343e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003442:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003446:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800344a:	4622      	mov	r2, r4
 800344c:	462b      	mov	r3, r5
 800344e:	1891      	adds	r1, r2, r2
 8003450:	65b9      	str	r1, [r7, #88]	; 0x58
 8003452:	415b      	adcs	r3, r3
 8003454:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003456:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800345a:	4621      	mov	r1, r4
 800345c:	eb12 0801 	adds.w	r8, r2, r1
 8003460:	4629      	mov	r1, r5
 8003462:	eb43 0901 	adc.w	r9, r3, r1
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003472:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003476:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347a:	4690      	mov	r8, r2
 800347c:	4699      	mov	r9, r3
 800347e:	4623      	mov	r3, r4
 8003480:	eb18 0303 	adds.w	r3, r8, r3
 8003484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003488:	462b      	mov	r3, r5
 800348a:	eb49 0303 	adc.w	r3, r9, r3
 800348e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800349e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034a6:	460b      	mov	r3, r1
 80034a8:	18db      	adds	r3, r3, r3
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
 80034ac:	4613      	mov	r3, r2
 80034ae:	eb42 0303 	adc.w	r3, r2, r3
 80034b2:	657b      	str	r3, [r7, #84]	; 0x54
 80034b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034bc:	f7fc fe6c 	bl	8000198 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4b61      	ldr	r3, [pc, #388]	; (800364c <UART_SetConfig+0x2d4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	011c      	lsls	r4, r3, #4
 80034ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034e0:	4642      	mov	r2, r8
 80034e2:	464b      	mov	r3, r9
 80034e4:	1891      	adds	r1, r2, r2
 80034e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034e8:	415b      	adcs	r3, r3
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034f0:	4641      	mov	r1, r8
 80034f2:	eb12 0a01 	adds.w	sl, r2, r1
 80034f6:	4649      	mov	r1, r9
 80034f8:	eb43 0b01 	adc.w	fp, r3, r1
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003508:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800350c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003510:	4692      	mov	sl, r2
 8003512:	469b      	mov	fp, r3
 8003514:	4643      	mov	r3, r8
 8003516:	eb1a 0303 	adds.w	r3, sl, r3
 800351a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800351e:	464b      	mov	r3, r9
 8003520:	eb4b 0303 	adc.w	r3, fp, r3
 8003524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003534:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003538:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800353c:	460b      	mov	r3, r1
 800353e:	18db      	adds	r3, r3, r3
 8003540:	643b      	str	r3, [r7, #64]	; 0x40
 8003542:	4613      	mov	r3, r2
 8003544:	eb42 0303 	adc.w	r3, r2, r3
 8003548:	647b      	str	r3, [r7, #68]	; 0x44
 800354a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800354e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003552:	f7fc fe21 	bl	8000198 <__aeabi_uldivmod>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4611      	mov	r1, r2
 800355c:	4b3b      	ldr	r3, [pc, #236]	; (800364c <UART_SetConfig+0x2d4>)
 800355e:	fba3 2301 	umull	r2, r3, r3, r1
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	2264      	movs	r2, #100	; 0x64
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	1acb      	subs	r3, r1, r3
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003572:	4b36      	ldr	r3, [pc, #216]	; (800364c <UART_SetConfig+0x2d4>)
 8003574:	fba3 2302 	umull	r2, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003580:	441c      	add	r4, r3
 8003582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800358c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003590:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	1891      	adds	r1, r2, r2
 800359a:	63b9      	str	r1, [r7, #56]	; 0x38
 800359c:	415b      	adcs	r3, r3
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a4:	4641      	mov	r1, r8
 80035a6:	1851      	adds	r1, r2, r1
 80035a8:	6339      	str	r1, [r7, #48]	; 0x30
 80035aa:	4649      	mov	r1, r9
 80035ac:	414b      	adcs	r3, r1
 80035ae:	637b      	str	r3, [r7, #52]	; 0x34
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035bc:	4659      	mov	r1, fp
 80035be:	00cb      	lsls	r3, r1, #3
 80035c0:	4651      	mov	r1, sl
 80035c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035c6:	4651      	mov	r1, sl
 80035c8:	00ca      	lsls	r2, r1, #3
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	4603      	mov	r3, r0
 80035d0:	4642      	mov	r2, r8
 80035d2:	189b      	adds	r3, r3, r2
 80035d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035d8:	464b      	mov	r3, r9
 80035da:	460a      	mov	r2, r1
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800360a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800360e:	f7fc fdc3 	bl	8000198 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4b0d      	ldr	r3, [pc, #52]	; (800364c <UART_SetConfig+0x2d4>)
 8003618:	fba3 1302 	umull	r1, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2164      	movs	r1, #100	; 0x64
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	3332      	adds	r3, #50	; 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	; (800364c <UART_SetConfig+0x2d4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 0207 	and.w	r2, r3, #7
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4422      	add	r2, r4
 800363e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003640:	e106      	b.n	8003850 <UART_SetConfig+0x4d8>
 8003642:	bf00      	nop
 8003644:	40011000 	.word	0x40011000
 8003648:	40011400 	.word	0x40011400
 800364c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003654:	2200      	movs	r2, #0
 8003656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800365a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800365e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003662:	4642      	mov	r2, r8
 8003664:	464b      	mov	r3, r9
 8003666:	1891      	adds	r1, r2, r2
 8003668:	6239      	str	r1, [r7, #32]
 800366a:	415b      	adcs	r3, r3
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
 800366e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003672:	4641      	mov	r1, r8
 8003674:	1854      	adds	r4, r2, r1
 8003676:	4649      	mov	r1, r9
 8003678:	eb43 0501 	adc.w	r5, r3, r1
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	00eb      	lsls	r3, r5, #3
 8003686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800368a:	00e2      	lsls	r2, r4, #3
 800368c:	4614      	mov	r4, r2
 800368e:	461d      	mov	r5, r3
 8003690:	4643      	mov	r3, r8
 8003692:	18e3      	adds	r3, r4, r3
 8003694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003698:	464b      	mov	r3, r9
 800369a:	eb45 0303 	adc.w	r3, r5, r3
 800369e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036be:	4629      	mov	r1, r5
 80036c0:	008b      	lsls	r3, r1, #2
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036c8:	4621      	mov	r1, r4
 80036ca:	008a      	lsls	r2, r1, #2
 80036cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036d0:	f7fc fd62 	bl	8000198 <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4b60      	ldr	r3, [pc, #384]	; (800385c <UART_SetConfig+0x4e4>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011c      	lsls	r4, r3, #4
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	61b9      	str	r1, [r7, #24]
 80036fc:	415b      	adcs	r3, r3
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6139      	str	r1, [r7, #16]
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003738:	464b      	mov	r3, r9
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	67bb      	str	r3, [r7, #120]	; 0x78
 800374e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800375c:	4649      	mov	r1, r9
 800375e:	008b      	lsls	r3, r1, #2
 8003760:	4641      	mov	r1, r8
 8003762:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003766:	4641      	mov	r1, r8
 8003768:	008a      	lsls	r2, r1, #2
 800376a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800376e:	f7fc fd13 	bl	8000198 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4611      	mov	r1, r2
 8003778:	4b38      	ldr	r3, [pc, #224]	; (800385c <UART_SetConfig+0x4e4>)
 800377a:	fba3 2301 	umull	r2, r3, r3, r1
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	2264      	movs	r2, #100	; 0x64
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	1acb      	subs	r3, r1, r3
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	3332      	adds	r3, #50	; 0x32
 800378c:	4a33      	ldr	r2, [pc, #204]	; (800385c <UART_SetConfig+0x4e4>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003798:	441c      	add	r4, r3
 800379a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379e:	2200      	movs	r2, #0
 80037a0:	673b      	str	r3, [r7, #112]	; 0x70
 80037a2:	677a      	str	r2, [r7, #116]	; 0x74
 80037a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037a8:	4642      	mov	r2, r8
 80037aa:	464b      	mov	r3, r9
 80037ac:	1891      	adds	r1, r2, r2
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	415b      	adcs	r3, r3
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037b8:	4641      	mov	r1, r8
 80037ba:	1851      	adds	r1, r2, r1
 80037bc:	6039      	str	r1, [r7, #0]
 80037be:	4649      	mov	r1, r9
 80037c0:	414b      	adcs	r3, r1
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037d0:	4659      	mov	r1, fp
 80037d2:	00cb      	lsls	r3, r1, #3
 80037d4:	4651      	mov	r1, sl
 80037d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037da:	4651      	mov	r1, sl
 80037dc:	00ca      	lsls	r2, r1, #3
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	4642      	mov	r2, r8
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037ea:	464b      	mov	r3, r9
 80037ec:	460a      	mov	r2, r1
 80037ee:	eb42 0303 	adc.w	r3, r2, r3
 80037f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	663b      	str	r3, [r7, #96]	; 0x60
 80037fe:	667a      	str	r2, [r7, #100]	; 0x64
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800380c:	4649      	mov	r1, r9
 800380e:	008b      	lsls	r3, r1, #2
 8003810:	4641      	mov	r1, r8
 8003812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003816:	4641      	mov	r1, r8
 8003818:	008a      	lsls	r2, r1, #2
 800381a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800381e:	f7fc fcbb 	bl	8000198 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <UART_SetConfig+0x4e4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a08      	ldr	r2, [pc, #32]	; (800385c <UART_SetConfig+0x4e4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 020f 	and.w	r2, r3, #15
 8003846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4422      	add	r2, r4
 800384e:	609a      	str	r2, [r3, #8]
}
 8003850:	bf00      	nop
 8003852:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003856:	46bd      	mov	sp, r7
 8003858:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4d0d      	ldr	r5, [pc, #52]	; (8003898 <__libc_init_array+0x38>)
 8003864:	4c0d      	ldr	r4, [pc, #52]	; (800389c <__libc_init_array+0x3c>)
 8003866:	1b64      	subs	r4, r4, r5
 8003868:	10a4      	asrs	r4, r4, #2
 800386a:	2600      	movs	r6, #0
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	4d0b      	ldr	r5, [pc, #44]	; (80038a0 <__libc_init_array+0x40>)
 8003872:	4c0c      	ldr	r4, [pc, #48]	; (80038a4 <__libc_init_array+0x44>)
 8003874:	f000 f984 	bl	8003b80 <_init>
 8003878:	1b64      	subs	r4, r4, r5
 800387a:	10a4      	asrs	r4, r4, #2
 800387c:	2600      	movs	r6, #0
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	f855 3b04 	ldr.w	r3, [r5], #4
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	08003bd0 	.word	0x08003bd0
 800389c:	08003bd0 	.word	0x08003bd0
 80038a0:	08003bd0 	.word	0x08003bd0
 80038a4:	08003bd4 	.word	0x08003bd4

080038a8 <memset>:
 80038a8:	4402      	add	r2, r0
 80038aa:	4603      	mov	r3, r0
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d100      	bne.n	80038b2 <memset+0xa>
 80038b0:	4770      	bx	lr
 80038b2:	f803 1b01 	strb.w	r1, [r3], #1
 80038b6:	e7f9      	b.n	80038ac <memset+0x4>

080038b8 <__udivmoddi4>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	9e08      	ldr	r6, [sp, #32]
 80038be:	460d      	mov	r5, r1
 80038c0:	4604      	mov	r4, r0
 80038c2:	460f      	mov	r7, r1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d14a      	bne.n	800395e <__udivmoddi4+0xa6>
 80038c8:	428a      	cmp	r2, r1
 80038ca:	4694      	mov	ip, r2
 80038cc:	d965      	bls.n	800399a <__udivmoddi4+0xe2>
 80038ce:	fab2 f382 	clz	r3, r2
 80038d2:	b143      	cbz	r3, 80038e6 <__udivmoddi4+0x2e>
 80038d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80038d8:	f1c3 0220 	rsb	r2, r3, #32
 80038dc:	409f      	lsls	r7, r3
 80038de:	fa20 f202 	lsr.w	r2, r0, r2
 80038e2:	4317      	orrs	r7, r2
 80038e4:	409c      	lsls	r4, r3
 80038e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80038ea:	fa1f f58c 	uxth.w	r5, ip
 80038ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80038f2:	0c22      	lsrs	r2, r4, #16
 80038f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80038f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80038fc:	fb01 f005 	mul.w	r0, r1, r5
 8003900:	4290      	cmp	r0, r2
 8003902:	d90a      	bls.n	800391a <__udivmoddi4+0x62>
 8003904:	eb1c 0202 	adds.w	r2, ip, r2
 8003908:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800390c:	f080 811c 	bcs.w	8003b48 <__udivmoddi4+0x290>
 8003910:	4290      	cmp	r0, r2
 8003912:	f240 8119 	bls.w	8003b48 <__udivmoddi4+0x290>
 8003916:	3902      	subs	r1, #2
 8003918:	4462      	add	r2, ip
 800391a:	1a12      	subs	r2, r2, r0
 800391c:	b2a4      	uxth	r4, r4
 800391e:	fbb2 f0fe 	udiv	r0, r2, lr
 8003922:	fb0e 2210 	mls	r2, lr, r0, r2
 8003926:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800392a:	fb00 f505 	mul.w	r5, r0, r5
 800392e:	42a5      	cmp	r5, r4
 8003930:	d90a      	bls.n	8003948 <__udivmoddi4+0x90>
 8003932:	eb1c 0404 	adds.w	r4, ip, r4
 8003936:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800393a:	f080 8107 	bcs.w	8003b4c <__udivmoddi4+0x294>
 800393e:	42a5      	cmp	r5, r4
 8003940:	f240 8104 	bls.w	8003b4c <__udivmoddi4+0x294>
 8003944:	4464      	add	r4, ip
 8003946:	3802      	subs	r0, #2
 8003948:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	2100      	movs	r1, #0
 8003950:	b11e      	cbz	r6, 800395a <__udivmoddi4+0xa2>
 8003952:	40dc      	lsrs	r4, r3
 8003954:	2300      	movs	r3, #0
 8003956:	e9c6 4300 	strd	r4, r3, [r6]
 800395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395e:	428b      	cmp	r3, r1
 8003960:	d908      	bls.n	8003974 <__udivmoddi4+0xbc>
 8003962:	2e00      	cmp	r6, #0
 8003964:	f000 80ed 	beq.w	8003b42 <__udivmoddi4+0x28a>
 8003968:	2100      	movs	r1, #0
 800396a:	e9c6 0500 	strd	r0, r5, [r6]
 800396e:	4608      	mov	r0, r1
 8003970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003974:	fab3 f183 	clz	r1, r3
 8003978:	2900      	cmp	r1, #0
 800397a:	d149      	bne.n	8003a10 <__udivmoddi4+0x158>
 800397c:	42ab      	cmp	r3, r5
 800397e:	d302      	bcc.n	8003986 <__udivmoddi4+0xce>
 8003980:	4282      	cmp	r2, r0
 8003982:	f200 80f8 	bhi.w	8003b76 <__udivmoddi4+0x2be>
 8003986:	1a84      	subs	r4, r0, r2
 8003988:	eb65 0203 	sbc.w	r2, r5, r3
 800398c:	2001      	movs	r0, #1
 800398e:	4617      	mov	r7, r2
 8003990:	2e00      	cmp	r6, #0
 8003992:	d0e2      	beq.n	800395a <__udivmoddi4+0xa2>
 8003994:	e9c6 4700 	strd	r4, r7, [r6]
 8003998:	e7df      	b.n	800395a <__udivmoddi4+0xa2>
 800399a:	b902      	cbnz	r2, 800399e <__udivmoddi4+0xe6>
 800399c:	deff      	udf	#255	; 0xff
 800399e:	fab2 f382 	clz	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 8090 	bne.w	8003ac8 <__udivmoddi4+0x210>
 80039a8:	1a8a      	subs	r2, r1, r2
 80039aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80039ae:	fa1f fe8c 	uxth.w	lr, ip
 80039b2:	2101      	movs	r1, #1
 80039b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80039b8:	fb07 2015 	mls	r0, r7, r5, r2
 80039bc:	0c22      	lsrs	r2, r4, #16
 80039be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80039c2:	fb0e f005 	mul.w	r0, lr, r5
 80039c6:	4290      	cmp	r0, r2
 80039c8:	d908      	bls.n	80039dc <__udivmoddi4+0x124>
 80039ca:	eb1c 0202 	adds.w	r2, ip, r2
 80039ce:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80039d2:	d202      	bcs.n	80039da <__udivmoddi4+0x122>
 80039d4:	4290      	cmp	r0, r2
 80039d6:	f200 80cb 	bhi.w	8003b70 <__udivmoddi4+0x2b8>
 80039da:	4645      	mov	r5, r8
 80039dc:	1a12      	subs	r2, r2, r0
 80039de:	b2a4      	uxth	r4, r4
 80039e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80039e4:	fb07 2210 	mls	r2, r7, r0, r2
 80039e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80039ec:	fb0e fe00 	mul.w	lr, lr, r0
 80039f0:	45a6      	cmp	lr, r4
 80039f2:	d908      	bls.n	8003a06 <__udivmoddi4+0x14e>
 80039f4:	eb1c 0404 	adds.w	r4, ip, r4
 80039f8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80039fc:	d202      	bcs.n	8003a04 <__udivmoddi4+0x14c>
 80039fe:	45a6      	cmp	lr, r4
 8003a00:	f200 80bb 	bhi.w	8003b7a <__udivmoddi4+0x2c2>
 8003a04:	4610      	mov	r0, r2
 8003a06:	eba4 040e 	sub.w	r4, r4, lr
 8003a0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003a0e:	e79f      	b.n	8003950 <__udivmoddi4+0x98>
 8003a10:	f1c1 0720 	rsb	r7, r1, #32
 8003a14:	408b      	lsls	r3, r1
 8003a16:	fa22 fc07 	lsr.w	ip, r2, r7
 8003a1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8003a1e:	fa05 f401 	lsl.w	r4, r5, r1
 8003a22:	fa20 f307 	lsr.w	r3, r0, r7
 8003a26:	40fd      	lsrs	r5, r7
 8003a28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003a2c:	4323      	orrs	r3, r4
 8003a2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8003a32:	fa1f fe8c 	uxth.w	lr, ip
 8003a36:	fb09 5518 	mls	r5, r9, r8, r5
 8003a3a:	0c1c      	lsrs	r4, r3, #16
 8003a3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003a40:	fb08 f50e 	mul.w	r5, r8, lr
 8003a44:	42a5      	cmp	r5, r4
 8003a46:	fa02 f201 	lsl.w	r2, r2, r1
 8003a4a:	fa00 f001 	lsl.w	r0, r0, r1
 8003a4e:	d90b      	bls.n	8003a68 <__udivmoddi4+0x1b0>
 8003a50:	eb1c 0404 	adds.w	r4, ip, r4
 8003a54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8003a58:	f080 8088 	bcs.w	8003b6c <__udivmoddi4+0x2b4>
 8003a5c:	42a5      	cmp	r5, r4
 8003a5e:	f240 8085 	bls.w	8003b6c <__udivmoddi4+0x2b4>
 8003a62:	f1a8 0802 	sub.w	r8, r8, #2
 8003a66:	4464      	add	r4, ip
 8003a68:	1b64      	subs	r4, r4, r5
 8003a6a:	b29d      	uxth	r5, r3
 8003a6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8003a70:	fb09 4413 	mls	r4, r9, r3, r4
 8003a74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003a78:	fb03 fe0e 	mul.w	lr, r3, lr
 8003a7c:	45a6      	cmp	lr, r4
 8003a7e:	d908      	bls.n	8003a92 <__udivmoddi4+0x1da>
 8003a80:	eb1c 0404 	adds.w	r4, ip, r4
 8003a84:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8003a88:	d26c      	bcs.n	8003b64 <__udivmoddi4+0x2ac>
 8003a8a:	45a6      	cmp	lr, r4
 8003a8c:	d96a      	bls.n	8003b64 <__udivmoddi4+0x2ac>
 8003a8e:	3b02      	subs	r3, #2
 8003a90:	4464      	add	r4, ip
 8003a92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003a96:	fba3 9502 	umull	r9, r5, r3, r2
 8003a9a:	eba4 040e 	sub.w	r4, r4, lr
 8003a9e:	42ac      	cmp	r4, r5
 8003aa0:	46c8      	mov	r8, r9
 8003aa2:	46ae      	mov	lr, r5
 8003aa4:	d356      	bcc.n	8003b54 <__udivmoddi4+0x29c>
 8003aa6:	d053      	beq.n	8003b50 <__udivmoddi4+0x298>
 8003aa8:	b156      	cbz	r6, 8003ac0 <__udivmoddi4+0x208>
 8003aaa:	ebb0 0208 	subs.w	r2, r0, r8
 8003aae:	eb64 040e 	sbc.w	r4, r4, lr
 8003ab2:	fa04 f707 	lsl.w	r7, r4, r7
 8003ab6:	40ca      	lsrs	r2, r1
 8003ab8:	40cc      	lsrs	r4, r1
 8003aba:	4317      	orrs	r7, r2
 8003abc:	e9c6 7400 	strd	r7, r4, [r6]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac8:	f1c3 0120 	rsb	r1, r3, #32
 8003acc:	fa02 fc03 	lsl.w	ip, r2, r3
 8003ad0:	fa20 f201 	lsr.w	r2, r0, r1
 8003ad4:	fa25 f101 	lsr.w	r1, r5, r1
 8003ad8:	409d      	lsls	r5, r3
 8003ada:	432a      	orrs	r2, r5
 8003adc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003ae0:	fa1f fe8c 	uxth.w	lr, ip
 8003ae4:	fbb1 f0f7 	udiv	r0, r1, r7
 8003ae8:	fb07 1510 	mls	r5, r7, r0, r1
 8003aec:	0c11      	lsrs	r1, r2, #16
 8003aee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003af2:	fb00 f50e 	mul.w	r5, r0, lr
 8003af6:	428d      	cmp	r5, r1
 8003af8:	fa04 f403 	lsl.w	r4, r4, r3
 8003afc:	d908      	bls.n	8003b10 <__udivmoddi4+0x258>
 8003afe:	eb1c 0101 	adds.w	r1, ip, r1
 8003b02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8003b06:	d22f      	bcs.n	8003b68 <__udivmoddi4+0x2b0>
 8003b08:	428d      	cmp	r5, r1
 8003b0a:	d92d      	bls.n	8003b68 <__udivmoddi4+0x2b0>
 8003b0c:	3802      	subs	r0, #2
 8003b0e:	4461      	add	r1, ip
 8003b10:	1b49      	subs	r1, r1, r5
 8003b12:	b292      	uxth	r2, r2
 8003b14:	fbb1 f5f7 	udiv	r5, r1, r7
 8003b18:	fb07 1115 	mls	r1, r7, r5, r1
 8003b1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b20:	fb05 f10e 	mul.w	r1, r5, lr
 8003b24:	4291      	cmp	r1, r2
 8003b26:	d908      	bls.n	8003b3a <__udivmoddi4+0x282>
 8003b28:	eb1c 0202 	adds.w	r2, ip, r2
 8003b2c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8003b30:	d216      	bcs.n	8003b60 <__udivmoddi4+0x2a8>
 8003b32:	4291      	cmp	r1, r2
 8003b34:	d914      	bls.n	8003b60 <__udivmoddi4+0x2a8>
 8003b36:	3d02      	subs	r5, #2
 8003b38:	4462      	add	r2, ip
 8003b3a:	1a52      	subs	r2, r2, r1
 8003b3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8003b40:	e738      	b.n	80039b4 <__udivmoddi4+0xfc>
 8003b42:	4631      	mov	r1, r6
 8003b44:	4630      	mov	r0, r6
 8003b46:	e708      	b.n	800395a <__udivmoddi4+0xa2>
 8003b48:	4639      	mov	r1, r7
 8003b4a:	e6e6      	b.n	800391a <__udivmoddi4+0x62>
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	e6fb      	b.n	8003948 <__udivmoddi4+0x90>
 8003b50:	4548      	cmp	r0, r9
 8003b52:	d2a9      	bcs.n	8003aa8 <__udivmoddi4+0x1f0>
 8003b54:	ebb9 0802 	subs.w	r8, r9, r2
 8003b58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	e7a3      	b.n	8003aa8 <__udivmoddi4+0x1f0>
 8003b60:	4645      	mov	r5, r8
 8003b62:	e7ea      	b.n	8003b3a <__udivmoddi4+0x282>
 8003b64:	462b      	mov	r3, r5
 8003b66:	e794      	b.n	8003a92 <__udivmoddi4+0x1da>
 8003b68:	4640      	mov	r0, r8
 8003b6a:	e7d1      	b.n	8003b10 <__udivmoddi4+0x258>
 8003b6c:	46d0      	mov	r8, sl
 8003b6e:	e77b      	b.n	8003a68 <__udivmoddi4+0x1b0>
 8003b70:	3d02      	subs	r5, #2
 8003b72:	4462      	add	r2, ip
 8003b74:	e732      	b.n	80039dc <__udivmoddi4+0x124>
 8003b76:	4608      	mov	r0, r1
 8003b78:	e70a      	b.n	8003990 <__udivmoddi4+0xd8>
 8003b7a:	4464      	add	r4, ip
 8003b7c:	3802      	subs	r0, #2
 8003b7e:	e742      	b.n	8003a06 <__udivmoddi4+0x14e>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
