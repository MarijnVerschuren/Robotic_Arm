
main_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000070  08004af8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08004af8  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb64  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002143  00000000  00000000  0002cc04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002ed48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168ae  00000000  00000000  0002ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cef7  00000000  00000000  0004682e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ef1  00000000  00000000  00053725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002760  00000000  00000000  000da668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004840 	.word	0x08004840

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004840 	.word	0x08004840

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <crc16_dnp>:
};



// crc16_dnp was the most error resilient for messages under 130 bytes with a hamming distance of 7!!
uint16_t crc16_dnp(const void* buffer, uint64_t size) {
 80004dc:	b4b0      	push	{r4, r5, r7}
 80004de:	b089      	sub	sp, #36	; 0x24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t crc = 0x0000;
 80004e8:	2300      	movs	r3, #0
 80004ea:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80004f8:	e01a      	b.n	8000530 <crc16_dnp+0x54>
		crc = ((crc << 8) & 0xff00) ^ crc16_dnp_table[((crc >> 8) ^ ((const uint8_t*)buffer)[i]) & 0xff];
 80004fa:	8bfb      	ldrh	r3, [r7, #30]
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b21a      	sxth	r2, r3
 8000500:	8bfb      	ldrh	r3, [r7, #30]
 8000502:	0a1b      	lsrs	r3, r3, #8
 8000504:	b29b      	uxth	r3, r3
 8000506:	4618      	mov	r0, r3
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	68f9      	ldr	r1, [r7, #12]
 800050c:	440b      	add	r3, r1
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4043      	eors	r3, r0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	490e      	ldr	r1, [pc, #56]	; (8000550 <crc16_dnp+0x74>)
 8000516:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800051a:	b21b      	sxth	r3, r3
 800051c:	4053      	eors	r3, r2
 800051e:	b21b      	sxth	r3, r3
 8000520:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8000522:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000526:	1c54      	adds	r4, r2, #1
 8000528:	f143 0500 	adc.w	r5, r3, #0
 800052c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8000530:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000538:	4290      	cmp	r0, r2
 800053a:	eb71 0303 	sbcs.w	r3, r1, r3
 800053e:	d3dc      	bcc.n	80004fa <crc16_dnp+0x1e>
	}; return crc ^ 0xffff;
 8000540:	8bfb      	ldrh	r3, [r7, #30]
 8000542:	43db      	mvns	r3, r3
 8000544:	b29b      	uxth	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	3724      	adds	r7, #36	; 0x24
 800054a:	46bd      	mov	sp, r7
 800054c:	bcb0      	pop	{r4, r5, r7}
 800054e:	4770      	bx	lr
 8000550:	08004858 	.word	0x08004858

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_DMA_Init+0x3c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <MX_DMA_Init+0x3c>)
 8000564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_DMA_Init+0x3c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000576:	2200      	movs	r2, #0
 8000578:	2100      	movs	r1, #0
 800057a:	2010      	movs	r0, #16
 800057c:	f000 ff51 	bl	8001422 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000580:	2010      	movs	r0, #16
 8000582:	f000 ff6a 	bl	800145a <HAL_NVIC_EnableIRQ>

}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	4b49      	ldr	r3, [pc, #292]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a48      	ldr	r2, [pc, #288]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b46      	ldr	r3, [pc, #280]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a41      	ldr	r2, [pc, #260]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <MX_GPIO_Init+0x140>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C_INT_Pin|CS_0_Pin|CS_1_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 8000604:	4834      	ldr	r0, [pc, #208]	; (80006d8 <MX_GPIO_Init+0x144>)
 8000606:	f001 fce1 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_2_Pin|CS_3_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <MX_GPIO_Init+0x148>)
 8000612:	f001 fcdb 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_4_Pin|CS_5_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800061c:	4830      	ldr	r0, [pc, #192]	; (80006e0 <MX_GPIO_Init+0x14c>)
 800061e:	f001 fcd5 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = C_INT_Pin|CS_0_Pin|CS_1_Pin;
 8000622:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4827      	ldr	r0, [pc, #156]	; (80006d8 <MX_GPIO_Init+0x144>)
 800063c:	f001 fb2a 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CF_0_Pin;
 8000640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CF_0_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	4619      	mov	r1, r3
 8000654:	4820      	ldr	r0, [pc, #128]	; (80006d8 <MX_GPIO_Init+0x144>)
 8000656:	f001 fb1d 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CF_1_Pin|CF_2_Pin;
 800065a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <MX_GPIO_Init+0x148>)
 8000670:	f001 fb10 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CS_2_Pin|CS_3_Pin;
 8000674:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <MX_GPIO_Init+0x148>)
 800068e:	f001 fb01 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CF_3_Pin|CF_4_Pin|CF_5_Pin;
 8000692:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	4619      	mov	r1, r3
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x14c>)
 80006a8:	f001 faf4 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_4_Pin|CS_5_Pin;
 80006ac:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4619      	mov	r1, r3
 80006c4:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_GPIO_Init+0x14c>)
 80006c6:	f001 fae5 	bl	8001c94 <HAL_GPIO_Init>

}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020000 	.word	0x40020000

080006e4 <validate_handshake>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint8_t validate_handshake(void* data) {
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	return ((CTRL_Handshake*)data)->crc == crc16_dnp(data, offsetof(CTRL_Handshake, crc));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	88dc      	ldrh	r4, [r3, #6]
 80006f0:	f04f 0206 	mov.w	r2, #6
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff feef 	bl	80004dc <crc16_dnp>
 80006fe:	4603      	mov	r3, r0
 8000700:	429c      	cmp	r4, r3
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bd90      	pop	{r4, r7, pc}

08000712 <validate_MCU_Instruction>:

uint8_t validate_MCU_Instruction(void* data) {
 8000712:	b590      	push	{r4, r7, lr}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	return ((MCU_Instruction*)data)->crc == crc16_dnp(data, offsetof(MCU_Instruction, crc));
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	8bdc      	ldrh	r4, [r3, #30]
 800071e:	f04f 021e 	mov.w	r2, #30
 8000722:	f04f 0300 	mov.w	r3, #0
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff fed8 	bl	80004dc <crc16_dnp>
 800072c:	4603      	mov	r3, r0
 800072e:	429c      	cmp	r4, r3
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bd90      	pop	{r4, r7, pc}

08000740 <correct_status>:
void correct_status(MCU_State* state) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if (((state->status & 0x1)			^ \
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7f9b      	ldrb	r3, [r3, #30]
 800074c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
		((state->status >> 1) & 0x1)	^ \
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7f9b      	ldrb	r3, [r3, #30]
 8000758:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	105b      	asrs	r3, r3, #1
	if (((state->status & 0x1)			^ \
 8000760:	405a      	eors	r2, r3
		((state->status >> 2) & 0x1)	^ \
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7f9b      	ldrb	r3, [r3, #30]
 8000766:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	109b      	asrs	r3, r3, #2
		((state->status >> 1) & 0x1)	^ \
 800076e:	405a      	eors	r2, r3
		((state->status >> 3) & 0x1))	^ \
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7f9b      	ldrb	r3, [r3, #30]
 8000774:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000778:	b2db      	uxtb	r3, r3
 800077a:	10db      	asrs	r3, r3, #3
		((state->status >> 2) & 0x1)	^ \
 800077c:	4053      	eors	r3, r2
 800077e:	f003 0301 	and.w	r3, r3, #1
		state->status_parity) {
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7fd2      	ldrb	r2, [r2, #31]
 8000786:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800078a:	b2d2      	uxtb	r2, r2
	if (((state->status & 0x1)			^ \
 800078c:	4293      	cmp	r3, r2
 800078e:	d017      	beq.n	80007c0 <correct_status+0x80>
		state->status ^= (state->status & state->n_status);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f9b      	ldrb	r3, [r3, #30]
 8000794:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000798:	b2db      	uxtb	r3, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	b2db      	uxtb	r3, r3
 800079e:	b25a      	sxtb	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7f9b      	ldrb	r3, [r3, #30]
 80007a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	b25b      	sxtb	r3, r3
 80007ac:	4013      	ands	r3, r2
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	7f93      	ldrb	r3, [r2, #30]
 80007ba:	f361 0303 	bfi	r3, r1, #0, #4
 80007be:	7793      	strb	r3, [r2, #30]
	}
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fcb5 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f8eb 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f7ff fedb 	bl	8000594 <MX_GPIO_Init>
  MX_DMA_Init();
 80007de:	f7ff feb9 	bl	8000554 <MX_DMA_Init>
  MX_SPI1_Init();
 80007e2:	f000 f953 	bl	8000a8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fbcb 	bl	8000f80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  RX_buffer = new_ibuf(&huart2, 1024);  // starts receiving
 80007ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ee:	4868      	ldr	r0, [pc, #416]	; (8000990 <main+0x1c4>)
 80007f0:	f000 fa8a 	bl	8000d08 <new_ibuf>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a67      	ldr	r2, [pc, #412]	; (8000994 <main+0x1c8>)
 80007f8:	6013      	str	r3, [r2, #0]
	// motor_count starts counting from 0
  	  uint8_t motor_count = 0;  // TODO: make code to find motor count
 80007fa:	2300      	movs	r3, #0
 80007fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	{  // anonymous scope so that temporary variables are cleaned up
		uint32_t baud = 11520;  // default baud
 8000800:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
		CTRL_Handshake init;  // TODO: remove the baud rate compontent. <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

		HANDSHAKE:  // jmp to label in the case baud is changed (redo handshake)

		while (ibuf_get_struct(
 8000806:	bf00      	nop
 8000808:	4b62      	ldr	r3, [pc, #392]	; (8000994 <main+0x1c8>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	1d39      	adds	r1, r7, #4
 800080e:	4b62      	ldr	r3, [pc, #392]	; (8000998 <main+0x1cc>)
 8000810:	2208      	movs	r2, #8
 8000812:	f000 fb55 	bl	8000ec0 <ibuf_get_struct>
 8000816:	4603      	mov	r3, r0
					RX_buffer,
					&init,
					sizeof(CTRL_Handshake),
					&validate_handshake
				) & (RETURN_OUT_OF_DATA | RETURN_STRUCT_INVALID)
 8000818:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while (ibuf_get_struct(
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f3      	bne.n	8000808 <main+0x3c>
			) {}

		init.motor_count = motor_count;  // set motor count and send message back
 8000820:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000828:	b2da      	uxtb	r2, r3
 800082a:	7a3b      	ldrb	r3, [r7, #8]
 800082c:	f362 0306 	bfi	r3, r2, #0, #7
 8000830:	723b      	strb	r3, [r7, #8]
		init.crc = crc16_dnp(&init, offsetof(CTRL_Handshake, crc));
 8000832:	1d39      	adds	r1, r7, #4
 8000834:	f04f 0206 	mov.w	r2, #6
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	4608      	mov	r0, r1
 800083e:	f7ff fe4d 	bl	80004dc <crc16_dnp>
 8000842:	4603      	mov	r3, r0
 8000844:	817b      	strh	r3, [r7, #10]
		HAL_UART_Transmit(&huart2, (uint8_t*)&init, sizeof(CTRL_Handshake), 10);
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	230a      	movs	r3, #10
 800084a:	2208      	movs	r2, #8
 800084c:	4850      	ldr	r0, [pc, #320]	; (8000990 <main+0x1c4>)
 800084e:	f002 fc90 	bl	8003172 <HAL_UART_Transmit>

		if (init.init_0) {}  // TODO: move all motors to their 0 position
		if (init.baud != baud) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000856:	429a      	cmp	r2, r3
 8000858:	d002      	beq.n	8000860 <main+0x94>
			// TODO: set new baud and go back to handshake
			baud = init.baud;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	65fb      	str	r3, [r7, #92]	; 0x5c
			goto HANDSHAKE;
 800085e:	e7d2      	b.n	8000806 <main+0x3a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// HAL_UART_Transmit(&huart2, (uint8_t*)&instruction, 28, 100);  // 10ms timeout is too little!!!!
	ibuf_reset(RX_buffer);
 8000860:	4b4c      	ldr	r3, [pc, #304]	; (8000994 <main+0x1c8>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fa85 	bl	8000d74 <ibuf_reset>
	MCU_Instruction instruction;
	MCU_State state;
	uint8_t return_code;

	instruction.target = 2000;
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <main+0x1d0>)
 8000870:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	instruction.max_vel = 1;
 8000874:	f04f 0200 	mov.w	r2, #0
 8000878:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <main+0x1d4>)
 800087a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	instruction.max_acc = 1;
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b47      	ldr	r3, [pc, #284]	; (80009a0 <main+0x1d4>)
 8000884:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	instruction.micro_step = 3;
 8000888:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800088c:	f043 0303 	orr.w	r3, r3, #3
 8000890:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.srd_mode = 0;
 8000894:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000898:	f36f 0382 	bfc	r3, #2, #1
 800089c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.action = 0xf;  // all
 80008a0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80008a4:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80008a8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.id = 0;
 80008ac:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80008b0:	f36f 0347 	bfc	r3, #1, #7
 80008b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	instruction.instrution_id = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	instruction.crc = crc16_dnp(&instruction, 30);
 80008be:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008c2:	f04f 021e 	mov.w	r2, #30
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	4608      	mov	r0, r1
 80008cc:	f7ff fe06 	bl	80004dc <crc16_dnp>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	uint8_t code = RETURN_STRUCT_INVALID;
 80008d6:	2320      	movs	r3, #32
 80008d8:	73fb      	strb	r3, [r7, #15]
	while (1) { LOOP:
		while (code & (RETURN_OUT_OF_DATA | RETURN_STRUCT_INVALID)) {
 80008da:	e009      	b.n	80008f0 <main+0x124>
			code = ibuf_get_struct(
 80008dc:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <main+0x1c8>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80008e4:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <main+0x1d8>)
 80008e6:	2220      	movs	r2, #32
 80008e8:	f000 faea 	bl	8000ec0 <ibuf_get_struct>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]
		while (code & (RETURN_OUT_OF_DATA | RETURN_STRUCT_INVALID)) {
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f0      	bne.n	80008dc <main+0x110>
				&instruction,
				sizeof(MCU_Instruction),
				&validate_MCU_Instruction
			);
		}
		HAL_UART_Transmit(&huart2, &code, 1, 10);
 80008fa:	f107 010f 	add.w	r1, r7, #15
 80008fe:	230a      	movs	r3, #10
 8000900:	2201      	movs	r2, #1
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <main+0x1c4>)
 8000904:	f002 fc35 	bl	8003172 <HAL_UART_Transmit>

		uint32_t tickstart = HAL_GetTick();
 8000908:	f000 fc80 	bl	800120c <HAL_GetTick>
 800090c:	6578      	str	r0, [r7, #84]	; 0x54
		do {
			HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	4824      	ldr	r0, [pc, #144]	; (80009a8 <main+0x1dc>)
 8000916:	f001 fb59 	bl	8001fcc <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&instruction, (uint8_t*)&state, 32, 100);
 800091a:	f107 0210 	add.w	r2, r7, #16
 800091e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000922:	2364      	movs	r3, #100	; 0x64
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2320      	movs	r3, #32
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <main+0x1e0>)
 800092a:	f002 f84a 	bl	80029c2 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	481c      	ldr	r0, [pc, #112]	; (80009a8 <main+0x1dc>)
 8000936:	f001 fb49 	bl	8001fcc <HAL_GPIO_WritePin>
			HAL_Delay(50);  // give mcu time to react
 800093a:	2032      	movs	r0, #50	; 0x32
 800093c:	f000 fc72 	bl	8001224 <HAL_Delay>
			if (HAL_GetTick() - tickstart > 5000) { goto LOOP; }
 8000940:	f000 fc64 	bl	800120c <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	f241 3288 	movw	r2, #5000	; 0x1388
 800094e:	4293      	cmp	r3, r2
 8000950:	d900      	bls.n	8000954 <main+0x188>
 8000952:	e7c2      	b.n	80008da <main+0x10e>
		} while (HAL_GPIO_ReadPin(CF_0_GPIO_Port, CF_0_Pin));
 8000954:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <main+0x1dc>)
 800095a:	f001 fb1f 	bl	8001f9c <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1d4      	bne.n	800090e <main+0x142>
		HAL_GPIO_WritePin(C_INT_GPIO_Port, C_INT_Pin, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	480f      	ldr	r0, [pc, #60]	; (80009a8 <main+0x1dc>)
 800096c:	f001 fb2e 	bl	8001fcc <HAL_GPIO_WritePin>
		HAL_Delay(100);  // give mcu time to react
 8000970:	2064      	movs	r0, #100	; 0x64
 8000972:	f000 fc57 	bl	8001224 <HAL_Delay>
		HAL_GPIO_WritePin(C_INT_GPIO_Port, C_INT_Pin, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800097c:	480a      	ldr	r0, [pc, #40]	; (80009a8 <main+0x1dc>)
 800097e:	f001 fb25 	bl	8001fcc <HAL_GPIO_WritePin>
		correct_status(&state);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff feda 	bl	8000740 <correct_status>
	while (1) { LOOP:
 800098c:	e7a5      	b.n	80008da <main+0x10e>
 800098e:	bf00      	nop
 8000990:	200000ec 	.word	0x200000ec
 8000994:	2000008c 	.word	0x2000008c
 8000998:	080006e5 	.word	0x080006e5
 800099c:	409f4000 	.word	0x409f4000
 80009a0:	3ff00000 	.word	0x3ff00000
 80009a4:	08000713 	.word	0x08000713
 80009a8:	40020400 	.word	0x40020400
 80009ac:	20000090 	.word	0x20000090

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b094      	sub	sp, #80	; 0x50
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	2230      	movs	r2, #48	; 0x30
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f003 fe6e 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <SystemClock_Config+0xc8>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <SystemClock_Config+0xc8>)
 80009de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <SystemClock_Config+0xc8>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <SystemClock_Config+0xcc>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <SystemClock_Config+0xcc>)
 80009fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <SystemClock_Config+0xcc>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a14:	2310      	movs	r3, #16
 8000a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a20:	2308      	movs	r3, #8
 8000a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 fae3 	bl	8002000 <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a40:	f000 f81e 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a44:	230f      	movs	r3, #15
 8000a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2103      	movs	r1, #3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 fd45 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a6c:	f000 f808 	bl	8000a80 <Error_Handler>
  }
}
 8000a70:	bf00      	nop
 8000a72:	3750      	adds	r7, #80	; 0x50
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40007000 	.word	0x40007000

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <MX_SPI1_Init+0x68>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000a98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ad8:	220a      	movs	r2, #10
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <MX_SPI1_Init+0x64>)
 8000ade:	f001 fee7 	bl	80028b0 <HAL_SPI_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae8:	f7ff ffca 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000090 	.word	0x20000090
 8000af4:	40013000 	.word	0x40013000

08000af8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <HAL_SPI_MspInit+0x94>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d133      	bne.n	8000b82 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_SPI_MspInit+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b52:	23e0      	movs	r3, #224	; 0xe0
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b62:	2305      	movs	r3, #5
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_SPI_MspInit+0x9c>)
 8000b6e:	f001 f891 	bl	8001c94 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2100      	movs	r1, #0
 8000b76:	2023      	movs	r0, #35	; 0x23
 8000b78:	f000 fc53 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b7c:	2023      	movs	r0, #35	; 0x23
 8000b7e:	f000 fc6c 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c34:	f000 fad6 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <DMA1_Stream5_IRQHandler+0x10>)
 8000c42:	f000 fdbd 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000130 	.word	0x20000130

08000c50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <SPI1_IRQHandler+0x10>)
 8000c56:	f002 f857 	bl	8002d08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000090 	.word	0x20000090

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f002 fbc3 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000ec 	.word	0x200000ec

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f003 fca8 	bl	80045fc <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200000e8 	.word	0x200000e8
 8000ce0:	200001a8 	.word	0x200001a8

08000ce4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <new_ibuf>:
#include <string.h>
#include "uart_buffer.h"



ibuf_TypeDef* new_ibuf(UART_HandleTypeDef* uart_handle, uint32_t size) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	ibuf_TypeDef* handle = calloc(1, sizeof(ibuf_TypeDef));
 8000d12:	2118      	movs	r1, #24
 8000d14:	2001      	movs	r0, #1
 8000d16:	f003 fc69 	bl	80045ec <calloc>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60fb      	str	r3, [r7, #12]
	handle->buffer = calloc(size, 1);  // array of size len initialized to 0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	6838      	ldr	r0, [r7, #0]
 8000d22:	f003 fc63 	bl	80045ec <calloc>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	601a      	str	r2, [r3, #0]
	handle->buffer_end = handle->buffer + size;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	441a      	add	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	605a      	str	r2, [r3, #4]
	handle->uart_handle = uart_handle;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
	handle->write = &uart_handle->hdmarx->Instance->NDTR;  // dma index variable (indexes from end of buffer)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1d1a      	adds	r2, r3, #4
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	60da      	str	r2, [r3, #12]
	handle->read = 0;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	611a      	str	r2, [r3, #16]
	handle->size = size;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	615a      	str	r2, [r3, #20]
	HAL_UART_Receive_DMA(handle->uart_handle, handle->buffer, size);  // start receiving data
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6898      	ldr	r0, [r3, #8]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	b292      	uxth	r2, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	f002 fa96 	bl	8003296 <HAL_UART_Receive_DMA>
	return handle;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <ibuf_reset>:

void ibuf_reset(ibuf_TypeDef* handle) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(handle->uart_handle);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f002 fab8 	bl	80032f6 <HAL_UART_DMAStop>
	memset(handle->buffer, 0, handle->size);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f003 fc85 	bl	80046a0 <memset>
	HAL_UART_Receive_DMA(handle->uart_handle, handle->buffer, handle->size);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6898      	ldr	r0, [r3, #8]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	461a      	mov	r2, r3
 8000da6:	f002 fa76 	bl	8003296 <HAL_UART_Receive_DMA>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <ibuf_buffered>:

uint8_t ibuf_buffered(ibuf_TypeDef* handle, uint32_t* size) {
 8000db2:	b480      	push	{r7}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
	uint32_t write = (handle->size - (*handle->write));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	695a      	ldr	r2, [r3, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	60fb      	str	r3, [r7, #12]
	if (write < handle->read) {
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d20a      	bcs.n	8000dea <ibuf_buffered+0x38>
		(*size) = (handle->size - handle->read) + write;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	695a      	ldr	r2, [r3, #20]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	1ad2      	subs	r2, r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	441a      	add	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	601a      	str	r2, [r3, #0]
		return RETURN_BUFFER_FRACTURE;
 8000de6:	2302      	movs	r3, #2
 8000de8:	e006      	b.n	8000df8 <ibuf_buffered+0x46>
	}
	(*size) = write - handle->read;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	1ad2      	subs	r2, r2, r3
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	601a      	str	r2, [r3, #0]
	return RETURN_OK;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <ibuf_get>:

uint8_t ibuf_get(ibuf_TypeDef* handle, void* data, uint32_t size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	uint32_t buffered;
	uint8_t code = ibuf_buffered(handle, &buffered);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff ffcb 	bl	8000db2 <ibuf_buffered>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	77fb      	strb	r3, [r7, #31]
	if (buffered < size) { return code | RETURN_OUT_OF_DATA; }
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d904      	bls.n	8000e32 <ibuf_get+0x2e>
 8000e28:	7ffb      	ldrb	r3, [r7, #31]
 8000e2a:	f043 0310 	orr.w	r3, r3, #16
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	e042      	b.n	8000eb8 <ibuf_get+0xb4>
	uint32_t part_size = (handle->size - handle->read);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	61bb      	str	r3, [r7, #24]
	if ((code | RETURN_BUFFER_FRACTURE) && part_size < size) {
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d224      	bcs.n	8000e90 <ibuf_get+0x8c>
		memcpy(data, handle->buffer + handle->read, part_size);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	4413      	add	r3, r2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4619      	mov	r1, r3
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f003 fbfb 	bl	8004650 <memcpy>
		data += part_size;
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60bb      	str	r3, [r7, #8]
		part_size = size - part_size;
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	61bb      	str	r3, [r7, #24]
		memcpy(data, handle->buffer, part_size);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4619      	mov	r1, r3
 8000e72:	68b8      	ldr	r0, [r7, #8]
 8000e74:	f003 fbec 	bl	8004650 <memcpy>
		handle->read = handle->buffer + part_size;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	4413      	add	r3, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	611a      	str	r2, [r3, #16]
		return code | RETURN_OK;
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e013      	b.n	8000eb8 <ibuf_get+0xb4>
	}
	memcpy(data, handle->buffer + handle->read, size);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4413      	add	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68b8      	ldr	r0, [r7, #8]
 8000ea0:	f003 fbd6 	bl	8004650 <memcpy>
	handle->read += size;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	441a      	add	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	611a      	str	r2, [r3, #16]
	return code | RETURN_OK;
 8000eb0:	7ffb      	ldrb	r3, [r7, #31]
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <ibuf_get_struct>:
uint8_t ibuf_get_struct(ibuf_TypeDef* handle, void* data, uint32_t size, validator_fn_TypeDef validator_fn) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
	uint8_t code = ibuf_get(handle, data, size);
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f7ff ff96 	bl	8000e04 <ibuf_get>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	75bb      	strb	r3, [r7, #22]
	if (code & RETURN_OUT_OF_DATA) { return code; }
 8000edc:	7dbb      	ldrb	r3, [r7, #22]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <ibuf_get_struct+0x2a>
 8000ee6:	7dbb      	ldrb	r3, [r7, #22]
 8000ee8:	e046      	b.n	8000f78 <ibuf_get_struct+0xb8>
	uint32_t overhead;
	code |= ibuf_buffered(handle, &overhead);
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	4619      	mov	r1, r3
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ff5e 	bl	8000db2 <ibuf_buffered>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	7dbb      	ldrb	r3, [r7, #22]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	75bb      	strb	r3, [r7, #22]
	uint8_t valid = validator_fn(data);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68b8      	ldr	r0, [r7, #8]
 8000f04:	4798      	blx	r3
 8000f06:	4603      	mov	r3, r0
 8000f08:	75fb      	strb	r3, [r7, #23]
	while (!valid) {
 8000f0a:	e02e      	b.n	8000f6a <ibuf_get_struct+0xaa>
		if (!overhead) { return code | RETURN_STRUCT_INVALID; }
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d104      	bne.n	8000f1c <ibuf_get_struct+0x5c>
 8000f12:	7dbb      	ldrb	r3, [r7, #22]
 8000f14:	f043 0320 	orr.w	r3, r3, #32
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	e02d      	b.n	8000f78 <ibuf_get_struct+0xb8>
		memmove(data, data + 1, size - 1);
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	1c59      	adds	r1, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	461a      	mov	r2, r3
 8000f26:	68b8      	ldr	r0, [r7, #8]
 8000f28:	f003 fba0 	bl	800466c <memmove>
		((uint8_t*)data)[size - 1] = *(handle->buffer + handle->read);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	441a      	add	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	68b9      	ldr	r1, [r7, #8]
 8000f3c:	440b      	add	r3, r1
 8000f3e:	7812      	ldrb	r2, [r2, #0]
 8000f40:	701a      	strb	r2, [r3, #0]
		valid = validator_fn(data);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68b8      	ldr	r0, [r7, #8]
 8000f46:	4798      	blx	r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	75fb      	strb	r3, [r7, #23]
		handle->read = (handle->read + 1) % handle->size;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	3301      	adds	r3, #1
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	6952      	ldr	r2, [r2, #20]
 8000f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f5a:	fb01 f202 	mul.w	r2, r1, r2
 8000f5e:	1a9a      	subs	r2, r3, r2
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	611a      	str	r2, [r3, #16]
		overhead--;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
	while (!valid) {
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d0cd      	beq.n	8000f0c <ibuf_get_struct+0x4c>
	} return code | RETURN_OK | RETURN_STRUCT_VALID;
 8000f70:	7dbb      	ldrb	r3, [r7, #22]
 8000f72:	f043 0305 	orr.w	r3, r3, #5
 8000f76:	b2db      	uxtb	r3, r3
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_USART2_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 11520;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f44f 5234 	mov.w	r2, #11520	; 0x2d00
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f002 f88e 	bl	80030d8 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f7ff fd5d 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200000ec 	.word	0x200000ec
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_UART_MspInit+0x104>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d16b      	bne.n	80010ce <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b38      	ldr	r3, [pc, #224]	; (80010dc <HAL_UART_MspInit+0x108>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a37      	ldr	r2, [pc, #220]	; (80010dc <HAL_UART_MspInit+0x108>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b35      	ldr	r3, [pc, #212]	; (80010dc <HAL_UART_MspInit+0x108>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <HAL_UART_MspInit+0x108>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a30      	ldr	r2, [pc, #192]	; (80010dc <HAL_UART_MspInit+0x108>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_UART_MspInit+0x108>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800102e:	230c      	movs	r3, #12
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800103e:	2307      	movs	r3, #7
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4825      	ldr	r0, [pc, #148]	; (80010e0 <HAL_UART_MspInit+0x10c>)
 800104a:	f000 fe23 	bl	8001c94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001050:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <HAL_UART_MspInit+0x114>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <HAL_UART_MspInit+0x110>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0x110>)
 800106a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_UART_MspInit+0x110>)
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001086:	2200      	movs	r2, #0
 8001088:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_UART_MspInit+0x110>)
 800108c:	2204      	movs	r2, #4
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001092:	2203      	movs	r2, #3
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <HAL_UART_MspInit+0x110>)
 8001098:	2200      	movs	r2, #0
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_MspInit+0x110>)
 800109e:	2200      	movs	r2, #0
 80010a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <HAL_UART_MspInit+0x110>)
 80010a4:	f000 f9f4 	bl	8001490 <HAL_DMA_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80010ae:	f7ff fce7 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_UART_MspInit+0x110>)
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
 80010b8:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <HAL_UART_MspInit+0x110>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2026      	movs	r0, #38	; 0x26
 80010c4:	f000 f9ad 	bl	8001422 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010c8:	2026      	movs	r0, #38	; 0x26
 80010ca:	f000 f9c6 	bl	800145a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004400 	.word	0x40004400
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	20000130 	.word	0x20000130
 80010e8:	40026088 	.word	0x40026088

080010ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010f2:	490e      	ldr	r1, [pc, #56]	; (800112c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001108:	4c0b      	ldr	r4, [pc, #44]	; (8001138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001116:	f7ff fde5 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800111a:	f003 fa75 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fb55 	bl	80007cc <main>
  bx  lr    
 8001122:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001130:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 8001134:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001138:	200001a4 	.word	0x200001a4

0800113c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC_IRQHandler>
	...

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_Init+0x40>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <HAL_Init+0x40>)
 800114a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800114e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_Init+0x40>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_Init+0x40>)
 8001162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f94f 	bl	800140c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116e:	200f      	movs	r0, #15
 8001170:	f000 f808 	bl	8001184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001174:	f7ff fd10 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023c00 	.word	0x40023c00

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <HAL_InitTick+0x54>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_InitTick+0x58>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4619      	mov	r1, r3
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	fbb3 f3f1 	udiv	r3, r3, r1
 800119e:	fbb2 f3f3 	udiv	r3, r2, r3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f967 	bl	8001476 <HAL_SYSTICK_Config>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00e      	b.n	80011d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b0f      	cmp	r3, #15
 80011b6:	d80a      	bhi.n	80011ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b8:	2200      	movs	r2, #0
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	f000 f92f 	bl	8001422 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4a06      	ldr	r2, [pc, #24]	; (80011e0 <HAL_InitTick+0x5c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_IncTick+0x20>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x24>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_IncTick+0x24>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	20000190 	.word	0x20000190

0800120c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return uwTick;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetTick+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000190 	.word	0x20000190

08001224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff ffee 	bl	800120c <HAL_GetTick>
 8001230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800123c:	d005      	beq.n	800124a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_Delay+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124a:	bf00      	nop
 800124c:	f7ff ffde 	bl	800120c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	429a      	cmp	r2, r3
 800125a:	d8f7      	bhi.n	800124c <HAL_Delay+0x28>
  {
  }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	; (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b480      	push	{r7}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f1c3 0307 	rsb	r3, r3, #7
 800137a:	2b04      	cmp	r3, #4
 800137c:	bf28      	it	cs
 800137e:	2304      	movcs	r3, #4
 8001380:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3304      	adds	r3, #4
 8001386:	2b06      	cmp	r3, #6
 8001388:	d902      	bls.n	8001390 <NVIC_EncodePriority+0x30>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3b03      	subs	r3, #3
 800138e:	e000      	b.n	8001392 <NVIC_EncodePriority+0x32>
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	401a      	ands	r2, r3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	43d9      	mvns	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	4313      	orrs	r3, r2
         );
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3724      	adds	r7, #36	; 0x24
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d8:	d301      	bcc.n	80013de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013da:	2301      	movs	r3, #1
 80013dc:	e00f      	b.n	80013fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013de:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <SysTick_Config+0x40>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e6:	210f      	movs	r1, #15
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	f7ff ff8e 	bl	800130c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Config+0x40>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SysTick_Config+0x40>)
 80013f8:	2207      	movs	r2, #7
 80013fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	e000e010 	.word	0xe000e010

0800140c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff29 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001422:	b580      	push	{r7, lr}
 8001424:	b086      	sub	sp, #24
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff3e 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff8e 	bl	8001360 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5d 	bl	800130c <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff31 	bl	80012d0 <__NVIC_EnableIRQ>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ffa2 	bl	80013c8 <SysTick_Config>
 8001484:	4603      	mov	r3, r0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff feb6 	bl	800120c <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e099      	b.n	80015e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2202      	movs	r2, #2
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0201 	bic.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014cc:	e00f      	b.n	80014ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ce:	f7ff fe9d 	bl	800120c <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d908      	bls.n	80014ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2220      	movs	r2, #32
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e078      	b.n	80015e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e8      	bne.n	80014ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <HAL_DMA_Init+0x158>)
 8001508:	4013      	ands	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800151a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	2b04      	cmp	r3, #4
 8001546:	d107      	bne.n	8001558 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	4313      	orrs	r3, r2
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4313      	orrs	r3, r2
 8001556:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f023 0307 	bic.w	r3, r3, #7
 800156e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4313      	orrs	r3, r2
 8001578:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	2b04      	cmp	r3, #4
 8001580:	d117      	bne.n	80015b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 fb01 	bl	8001b9c <DMA_CheckFifoParam>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80015ae:	2301      	movs	r3, #1
 80015b0:	e016      	b.n	80015e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fab8 	bl	8001b30 <DMA_CalcBaseAndBitshift>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	223f      	movs	r2, #63	; 0x3f
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015de:	2300      	movs	r3, #0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	f010803f 	.word	0xf010803f

080015ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800160a:	2b01      	cmp	r3, #1
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Start_IT+0x26>
 800160e:	2302      	movs	r3, #2
 8001610:	e040      	b.n	8001694 <HAL_DMA_Start_IT+0xa8>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b01      	cmp	r3, #1
 8001624:	d12f      	bne.n	8001686 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fa4a 	bl	8001ad4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	223f      	movs	r2, #63	; 0x3f
 8001646:	409a      	lsls	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0216 	orr.w	r2, r2, #22
 800165a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d007      	beq.n	8001674 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0208 	orr.w	r2, r2, #8
 8001672:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e005      	b.n	8001692 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800168e:	2302      	movs	r3, #2
 8001690:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001692:	7dfb      	ldrb	r3, [r7, #23]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016aa:	f7ff fdaf 	bl	800120c <HAL_GetTick>
 80016ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d008      	beq.n	80016ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e052      	b.n	8001774 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0216 	bic.w	r2, r2, #22
 80016dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695a      	ldr	r2, [r3, #20]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d103      	bne.n	80016fe <HAL_DMA_Abort+0x62>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0208 	bic.w	r2, r2, #8
 800170c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800171e:	e013      	b.n	8001748 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001720:	f7ff fd74 	bl	800120c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b05      	cmp	r3, #5
 800172c:	d90c      	bls.n	8001748 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2203      	movs	r2, #3
 8001738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e015      	b.n	8001774 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1e4      	bne.n	8001720 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175a:	223f      	movs	r2, #63	; 0x3f
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00c      	b.n	80017b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017cc:	4b8e      	ldr	r3, [pc, #568]	; (8001a08 <HAL_DMA_IRQHandler+0x248>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a8e      	ldr	r2, [pc, #568]	; (8001a0c <HAL_DMA_IRQHandler+0x24c>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2208      	movs	r2, #8
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01a      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2204      	movs	r2, #4
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2204      	movs	r2, #4
 8001886:	409a      	lsls	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0204 	orr.w	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2210      	movs	r2, #16
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d043      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03c      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2210      	movs	r2, #16
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d018      	beq.n	8001902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d024      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
 80018ee:	e01f      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e016      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0208 	bic.w	r2, r2, #8
 800191e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	2220      	movs	r2, #32
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 808f 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8087 	beq.w	8001a60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2220      	movs	r2, #32
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b05      	cmp	r3, #5
 8001968:	d136      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0216 	bic.w	r2, r2, #22
 8001978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_DMA_IRQHandler+0x1da>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0208 	bic.w	r2, r2, #8
 80019a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d07e      	beq.n	8001acc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
        }
        return;
 80019d6:	e079      	b.n	8001acc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01d      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10d      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d031      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
 8001a04:	e02c      	b.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
 8001a20:	e01e      	b.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0210 	bic.w	r2, r2, #16
 8001a3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d032      	beq.n	8001ace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d022      	beq.n	8001aba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2205      	movs	r2, #5
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d307      	bcc.n	8001aa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f2      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x2cc>
 8001aa6:	e000      	b.n	8001aaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001aa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
 8001aca:	e000      	b.n	8001ace <HAL_DMA_IRQHandler+0x30e>
        return;
 8001acc:	bf00      	nop
    }
  }
}
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
 8001ae0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001af0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b40      	cmp	r3, #64	; 0x40
 8001b00:	d108      	bne.n	8001b14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b12:	e007      	b.n	8001b24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3b10      	subs	r3, #16
 8001b40:	4a14      	ldr	r2, [pc, #80]	; (8001b94 <DMA_CalcBaseAndBitshift+0x64>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b4a:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <DMA_CalcBaseAndBitshift+0x68>)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d909      	bls.n	8001b72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	1d1a      	adds	r2, r3, #4
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b70:	e007      	b.n	8001b82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	aaaaaaab 	.word	0xaaaaaaab
 8001b98:	08004a70 	.word	0x08004a70

08001b9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d11f      	bne.n	8001bf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d856      	bhi.n	8001c6a <DMA_CheckFifoParam+0xce>
 8001bbc:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <DMA_CheckFifoParam+0x28>)
 8001bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc2:	bf00      	nop
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001be7 	.word	0x08001be7
 8001bcc:	08001bd5 	.word	0x08001bd5
 8001bd0:	08001c6b 	.word	0x08001c6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d046      	beq.n	8001c6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be4:	e043      	b.n	8001c6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bee:	d140      	bne.n	8001c72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bf4:	e03d      	b.n	8001c72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfe:	d121      	bne.n	8001c44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d837      	bhi.n	8001c76 <DMA_CheckFifoParam+0xda>
 8001c06:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <DMA_CheckFifoParam+0x70>)
 8001c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c23 	.word	0x08001c23
 8001c14:	08001c1d 	.word	0x08001c1d
 8001c18:	08001c35 	.word	0x08001c35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001c20:	e030      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d025      	beq.n	8001c7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c32:	e022      	b.n	8001c7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c3c:	d11f      	bne.n	8001c7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c42:	e01c      	b.n	8001c7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d903      	bls.n	8001c52 <DMA_CheckFifoParam+0xb6>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d003      	beq.n	8001c58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c50:	e018      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
      break;
 8001c56:	e015      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00e      	beq.n	8001c82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      break;
 8001c68:	e00b      	b.n	8001c82 <DMA_CheckFifoParam+0xe6>
      break;
 8001c6a:	bf00      	nop
 8001c6c:	e00a      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;
 8001c6e:	bf00      	nop
 8001c70:	e008      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;
 8001c72:	bf00      	nop
 8001c74:	e006      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;
 8001c76:	bf00      	nop
 8001c78:	e004      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;
 8001c7a:	bf00      	nop
 8001c7c:	e002      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c7e:	bf00      	nop
 8001c80:	e000      	b.n	8001c84 <DMA_CheckFifoParam+0xe8>
      break;
 8001c82:	bf00      	nop
    }
  } 
  
  return status; 
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e159      	b.n	8001f64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8148 	bne.w	8001f5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d005      	beq.n	8001ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d017      	beq.n	8001d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a2 	beq.w	8001f5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b57      	ldr	r3, [pc, #348]	; (8001f7c <HAL_GPIO_Init+0x2e8>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a56      	ldr	r2, [pc, #344]	; (8001f7c <HAL_GPIO_Init+0x2e8>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <HAL_GPIO_Init+0x2e8>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a52      	ldr	r2, [pc, #328]	; (8001f80 <HAL_GPIO_Init+0x2ec>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	; (8001f84 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x202>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a48      	ldr	r2, [pc, #288]	; (8001f88 <HAL_GPIO_Init+0x2f4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x1fe>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a47      	ldr	r2, [pc, #284]	; (8001f8c <HAL_GPIO_Init+0x2f8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x1fa>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a46      	ldr	r2, [pc, #280]	; (8001f90 <HAL_GPIO_Init+0x2fc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x1f6>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a45      	ldr	r2, [pc, #276]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x1f2>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e86:	2307      	movs	r3, #7
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x204>
 8001e96:	2300      	movs	r3, #0
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	f002 0203 	and.w	r2, r2, #3
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	; (8001f80 <HAL_GPIO_Init+0x2ec>)
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eda:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f04:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f58:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b0f      	cmp	r3, #15
 8001f68:	f67f aea2 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3724      	adds	r7, #36	; 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40013800 	.word	0x40013800
 8001f84:	40020000 	.word	0x40020000
 8001f88:	40020400 	.word	0x40020400
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fe8:	e003      	b.n	8001ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	041a      	lsls	r2, r3, #16
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	619a      	str	r2, [r3, #24]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e267      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800201e:	4b88      	ldr	r3, [pc, #544]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d00c      	beq.n	8002044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800202a:	4b85      	ldr	r3, [pc, #532]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002032:	2b08      	cmp	r3, #8
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002036:	4b82      	ldr	r3, [pc, #520]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002042:	d10b      	bne.n	800205c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05b      	beq.n	8002108 <HAL_RCC_OscConfig+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d157      	bne.n	8002108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e242      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002064:	d106      	bne.n	8002074 <HAL_RCC_OscConfig+0x74>
 8002066:	4b76      	ldr	r3, [pc, #472]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e01d      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x98>
 800207e:	4b70      	ldr	r3, [pc, #448]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a6f      	ldr	r2, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6c      	ldr	r2, [pc, #432]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e00b      	b.n	80020b0 <HAL_RCC_OscConfig+0xb0>
 8002098:	4b69      	ldr	r3, [pc, #420]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a68      	ldr	r2, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800209e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d013      	beq.n	80020e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff f8a8 	bl	800120c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c0:	f7ff f8a4 	bl	800120c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e207      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0xc0>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff f894 	bl	800120c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff f890 	bl	800120c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1f3      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe8>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d063      	beq.n	80021de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212a:	2b08      	cmp	r3, #8
 800212c:	d11c      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d116      	bne.n	8002168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1c7      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b3b      	ldr	r3, [pc, #236]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	e03a      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 8002172:	2201      	movs	r2, #1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7ff f849 	bl	800120c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7ff f845 	bl	800120c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e1a8      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219c:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4925      	ldr	r1, [pc, #148]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	600b      	str	r3, [r1, #0]
 80021b0:	e015      	b.n	80021de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_OscConfig+0x244>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f828 	bl	800120c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff f824 	bl	800120c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e187      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d036      	beq.n	8002258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d016      	beq.n	8002220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f8:	f7ff f808 	bl	800120c <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002200:	f7ff f804 	bl	800120c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e167      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x240>)
 8002214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x200>
 800221e:	e01b      	b.n	8002258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_RCC_OscConfig+0x248>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fff1 	bl	800120c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00e      	b.n	800224c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe ffed 	bl	800120c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d907      	bls.n	800224c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e150      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002240:	40023800 	.word	0x40023800
 8002244:	42470000 	.word	0x42470000
 8002248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800224e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ea      	bne.n	800222e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8097 	beq.w	8002394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b81      	ldr	r3, [pc, #516]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	4b7d      	ldr	r3, [pc, #500]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a7c      	ldr	r2, [pc, #496]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b7a      	ldr	r3, [pc, #488]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002292:	2301      	movs	r3, #1
 8002294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b77      	ldr	r3, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d118      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a2:	4b74      	ldr	r3, [pc, #464]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a73      	ldr	r2, [pc, #460]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ae:	f7fe ffad 	bl	800120c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b6:	f7fe ffa9 	bl	800120c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e10c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x474>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x2ea>
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a63      	ldr	r2, [pc, #396]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	e01c      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b05      	cmp	r3, #5
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x30c>
 80022f2:	4b5f      	ldr	r3, [pc, #380]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f6:	4a5e      	ldr	r2, [pc, #376]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	; 0x70
 80022fe:	4b5c      	ldr	r3, [pc, #368]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0x324>
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	; 0x70
 8002318:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a54      	ldr	r2, [pc, #336]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d015      	beq.n	8002358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe ff6e 	bl	800120c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe ff6a 	bl	800120c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e0cb      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0ee      	beq.n	8002334 <HAL_RCC_OscConfig+0x334>
 8002356:	e014      	b.n	8002382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe ff58 	bl	800120c <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe ff54 	bl	800120c <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0b5      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ee      	bne.n	8002360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a38      	ldr	r2, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80a1 	beq.w	80024e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d05c      	beq.n	8002464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d141      	bne.n	8002436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b31      	ldr	r3, [pc, #196]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff28 	bl	800120c <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe ff24 	bl	800120c <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e087      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	69da      	ldr	r2, [r3, #28]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	019b      	lsls	r3, r3, #6
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	3b01      	subs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	061b      	lsls	r3, r3, #24
 8002402:	491b      	ldr	r1, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002404:	4313      	orrs	r3, r2
 8002406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240e:	f7fe fefd 	bl	800120c <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fef9 	bl	800120c <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e05c      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x416>
 8002434:	e054      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002436:	4b10      	ldr	r3, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x478>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7fe fee6 	bl	800120c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fee2 	bl	800120c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e045      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_RCC_OscConfig+0x470>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x444>
 8002462:	e03d      	b.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d107      	bne.n	800247c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e038      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	40007000 	.word	0x40007000
 8002478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x4ec>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d028      	beq.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d121      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11a      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d111      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0cc      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b68      	ldr	r3, [pc, #416]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d90c      	bls.n	800252c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0b8      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d020      	beq.n	800257a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002544:	4b59      	ldr	r3, [pc, #356]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800255c:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a52      	ldr	r2, [pc, #328]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	494d      	ldr	r1, [pc, #308]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d044      	beq.n	8002610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d119      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e07f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ae:	4b3f      	ldr	r3, [pc, #252]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e06f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d101      	bne.n	80025ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e067      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ce:	4b37      	ldr	r3, [pc, #220]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f023 0203 	bic.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4934      	ldr	r1, [pc, #208]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fe14 	bl	800120c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fe10 	bl	800120c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e04f      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 020c 	and.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	429a      	cmp	r2, r3
 800260e:	d1eb      	bne.n	80025e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002610:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d20c      	bcs.n	8002638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e032      	b.n	800269e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4916      	ldr	r1, [pc, #88]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	490e      	ldr	r1, [pc, #56]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002676:	f000 f821 	bl	80026bc <HAL_RCC_GetSysClockFreq>
 800267a:	4602      	mov	r2, r0
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	490a      	ldr	r1, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	5ccb      	ldrb	r3, [r1, r3]
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fd74 	bl	8001184 <HAL_InitTick>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023c00 	.word	0x40023c00
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08004a58 	.word	0x08004a58
 80026b4:	20000000 	.word	0x20000000
 80026b8:	20000004 	.word	0x20000004

080026bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b090      	sub	sp, #64	; 0x40
 80026c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
 80026c8:	2300      	movs	r3, #0
 80026ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026cc:	2300      	movs	r3, #0
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d00d      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x40>
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	f200 80a1 	bhi.w	8002828 <HAL_RCC_GetSysClockFreq+0x16c>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x34>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ee:	e09b      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b53      	ldr	r3, [pc, #332]	; (8002840 <HAL_RCC_GetSysClockFreq+0x184>)
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80026f4:	e09b      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026fa:	e098      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	627a      	str	r2, [r7, #36]	; 0x24
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002724:	2100      	movs	r1, #0
 8002726:	4b47      	ldr	r3, [pc, #284]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 8002728:	fb03 f201 	mul.w	r2, r3, r1
 800272c:	2300      	movs	r3, #0
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	4413      	add	r3, r2
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_RCC_GetSysClockFreq+0x188>)
 8002736:	fba0 1202 	umull	r1, r2, r0, r2
 800273a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800273c:	460a      	mov	r2, r1
 800273e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	4413      	add	r3, r2
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002748:	2200      	movs	r2, #0
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	61fa      	str	r2, [r7, #28]
 800274e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002756:	f7fd fd3f 	bl	80001d8 <__aeabi_uldivmod>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4613      	mov	r3, r2
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002762:	e053      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	099b      	lsrs	r3, r3, #6
 800276a:	2200      	movs	r2, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	617a      	str	r2, [r7, #20]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002776:	f04f 0b00 	mov.w	fp, #0
 800277a:	4652      	mov	r2, sl
 800277c:	465b      	mov	r3, fp
 800277e:	f04f 0000 	mov.w	r0, #0
 8002782:	f04f 0100 	mov.w	r1, #0
 8002786:	0159      	lsls	r1, r3, #5
 8002788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800278c:	0150      	lsls	r0, r2, #5
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	ebb2 080a 	subs.w	r8, r2, sl
 8002796:	eb63 090b 	sbc.w	r9, r3, fp
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027ae:	ebb2 0408 	subs.w	r4, r2, r8
 80027b2:	eb63 0509 	sbc.w	r5, r3, r9
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	00eb      	lsls	r3, r5, #3
 80027c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c4:	00e2      	lsls	r2, r4, #3
 80027c6:	4614      	mov	r4, r2
 80027c8:	461d      	mov	r5, r3
 80027ca:	eb14 030a 	adds.w	r3, r4, sl
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	eb45 030b 	adc.w	r3, r5, fp
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027e2:	4629      	mov	r1, r5
 80027e4:	028b      	lsls	r3, r1, #10
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ec:	4621      	mov	r1, r4
 80027ee:	028a      	lsls	r2, r1, #10
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f6:	2200      	movs	r2, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002800:	f7fd fcea 	bl	80001d8 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_GetSysClockFreq+0x180>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800281c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002826:	e002      	b.n	800282e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b05      	ldr	r3, [pc, #20]	; (8002840 <HAL_RCC_GetSysClockFreq+0x184>)
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800282c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002830:	4618      	mov	r0, r3
 8002832:	3740      	adds	r7, #64	; 0x40
 8002834:	46bd      	mov	sp, r7
 8002836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	00f42400 	.word	0x00f42400
 8002844:	017d7840 	.word	0x017d7840

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	; (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08004a68 	.word	0x08004a68

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffdc 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0b5b      	lsrs	r3, r3, #13
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08004a68 	.word	0x08004a68

080028b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e07b      	b.n	80029ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d108      	bne.n	80028dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028d2:	d009      	beq.n	80028e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
 80028da:	e005      	b.n	80028e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f8f8 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800291e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	ea42 0103 	orr.w	r1, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	f003 0104 	and.w	r1, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	f003 0210 	and.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69da      	ldr	r2, [r3, #28]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08c      	sub	sp, #48	; 0x30
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x26>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e18a      	b.n	8002cfe <HAL_SPI_TransmitReceive+0x33c>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f0:	f7fe fc0c 	bl	800120c <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a06:	887b      	ldrh	r3, [r7, #2]
 8002a08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00f      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x70>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a18:	d107      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x68>
 8002a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d003      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a30:	e15b      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x82>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x82>
 8002a3e:	887b      	ldrh	r3, [r7, #2]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d103      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a4a:	e14e      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d003      	beq.n	8002a60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d007      	beq.n	8002ab4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abc:	d178      	bne.n	8002bb0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_SPI_TransmitReceive+0x10a>
 8002ac6:	8b7b      	ldrh	r3, [r7, #26]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d166      	bne.n	8002b9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af0:	e053      	b.n	8002b9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d11b      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x176>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d016      	beq.n	8002b38 <HAL_SPI_TransmitReceive+0x176>
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d113      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	881a      	ldrh	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	1c9a      	adds	r2, r3, #2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d119      	bne.n	8002b7a <HAL_SPI_TransmitReceive+0x1b8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d014      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	1c9a      	adds	r2, r3, #2
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b76:	2301      	movs	r3, #1
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b7a:	f7fe fb47 	bl	800120c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d807      	bhi.n	8002b9a <HAL_SPI_TransmitReceive+0x1d8>
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b90:	d003      	beq.n	8002b9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b98:	e0a7      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1a6      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x130>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1a1      	bne.n	8002af2 <HAL_SPI_TransmitReceive+0x130>
 8002bae:	e07c      	b.n	8002caa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_SPI_TransmitReceive+0x1fc>
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d16b      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	330c      	adds	r3, #12
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be4:	e057      	b.n	8002c96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d11c      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x26c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d017      	beq.n	8002c2e <HAL_SPI_TransmitReceive+0x26c>
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d114      	bne.n	8002c2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	7812      	ldrb	r2, [r2, #0]
 8002c10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d119      	bne.n	8002c70 <HAL_SPI_TransmitReceive+0x2ae>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d014      	beq.n	8002c70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c70:	f7fe facc 	bl	800120c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d803      	bhi.n	8002c88 <HAL_SPI_TransmitReceive+0x2c6>
 8002c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c86:	d102      	bne.n	8002c8e <HAL_SPI_TransmitReceive+0x2cc>
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c94:	e029      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1a2      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x224>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d19d      	bne.n	8002be6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f9d0 	bl	8003054 <SPI_EndRxTxTransaction>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cc6:	e010      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10b      	bne.n	8002ce8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	e000      	b.n	8002cea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ce8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3730      	adds	r7, #48	; 0x30
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	099b      	lsrs	r3, r3, #6
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    return;
 8002d4a:	e0d7      	b.n	8002efc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_SPI_IRQHandler+0x66>
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	09db      	lsrs	r3, r3, #7
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
    return;
 8002d6c:	e0c6      	b.n	8002efc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_SPI_IRQHandler+0x8c>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80b4 	beq.w	8002efc <HAL_SPI_IRQHandler+0x1f4>
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80ad 	beq.w	8002efc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d023      	beq.n	8002df6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d011      	beq.n	8002dde <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbe:	f043 0204 	orr.w	r2, r3, #4
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	e00b      	b.n	8002df6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]
        return;
 8002df4:	e082      	b.n	8002efc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	095b      	lsrs	r3, r3, #5
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d014      	beq.n	8002e2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	0a1b      	lsrs	r3, r3, #8
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00c      	beq.n	8002e52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3c:	f043 0208 	orr.w	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d04f      	beq.n	8002efa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d104      	bne.n	8002e86 <HAL_SPI_IRQHandler+0x17e>
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d034      	beq.n	8002ef0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0203 	bic.w	r2, r2, #3
 8002e94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d011      	beq.n	8002ec2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_SPI_IRQHandler+0x1fc>)
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fc66 	bl	800177c <HAL_DMA_Abort_IT>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d016      	beq.n	8002ef8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ece:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <HAL_SPI_IRQHandler+0x1fc>)
 8002ed0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fc50 	bl	800177c <HAL_DMA_Abort_IT>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002eee:	e003      	b.n	8002ef8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f809 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ef6:	e000      	b.n	8002efa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002ef8:	bf00      	nop
    return;
 8002efa:	bf00      	nop
  }
}
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	08002f1d 	.word	0x08002f1d

08002f08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ffe6 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	603b      	str	r3, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f54:	f7fe f95a 	bl	800120c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	4413      	add	r3, r2
 8002f62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f64:	f7fe f952 	bl	800120c <HAL_GetTick>
 8002f68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f6a:	4b39      	ldr	r3, [pc, #228]	; (8003050 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	0d1b      	lsrs	r3, r3, #20
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	fb02 f303 	mul.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f7a:	e054      	b.n	8003026 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f82:	d050      	beq.n	8003026 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f84:	f7fe f942 	bl	800120c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d902      	bls.n	8002f9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d13d      	bne.n	8003016 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fb2:	d111      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fbc:	d004      	beq.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d107      	bne.n	8002fd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe0:	d10f      	bne.n	8003002 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e017      	b.n	8003046 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3b01      	subs	r3, #1
 8003024:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	bf0c      	ite	eq
 8003036:	2301      	moveq	r3, #1
 8003038:	2300      	movne	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	429a      	cmp	r2, r3
 8003042:	d19b      	bne.n	8002f7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <SPI_EndRxTxTransaction+0x7c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <SPI_EndRxTxTransaction+0x80>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0d5b      	lsrs	r3, r3, #21
 800306c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307e:	d112      	bne.n	80030a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2200      	movs	r2, #0
 8003088:	2180      	movs	r1, #128	; 0x80
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff5a 	bl	8002f44 <SPI_WaitFlagStateUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309a:	f043 0220 	orr.w	r2, r3, #32
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e00f      	b.n	80030c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d0f2      	beq.n	80030a6 <SPI_EndRxTxTransaction+0x52>
 80030c0:	e000      	b.n	80030c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80030c2:	bf00      	nop
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000
 80030d4:	165e9f81 	.word	0x165e9f81

080030d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e03f      	b.n	800316a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd ff68 	bl	8000fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800311a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fff1 	bl	8004104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	; 0x28
 8003176:	af02      	add	r7, sp, #8
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d17c      	bne.n	800328c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_UART_Transmit+0x2c>
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e075      	b.n	800328e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_UART_Transmit+0x3e>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e06e      	b.n	800328e <HAL_UART_Transmit+0x11c>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031c6:	f7fe f821 	bl	800120c <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e0:	d108      	bne.n	80031f4 <HAL_UART_Transmit+0x82>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d104      	bne.n	80031f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	e003      	b.n	80031fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003204:	e02a      	b.n	800325c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	2180      	movs	r1, #128	; 0x80
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 fca9 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e036      	b.n	800328e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003234:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3302      	adds	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
 800323c:	e007      	b.n	800324e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3301      	adds	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1cf      	bne.n	8003206 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2140      	movs	r1, #64	; 0x40
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fc79 	bl	8003b68 <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e006      	b.n	800328e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	4618      	mov	r0, r3
 8003290:	3720      	adds	r7, #32
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	4613      	mov	r3, r2
 80032a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d11d      	bne.n	80032ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Receive_DMA+0x26>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e016      	b.n	80032ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Receive_DMA+0x38>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e00f      	b.n	80032ee <HAL_UART_Receive_DMA+0x58>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	461a      	mov	r2, r3
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fcae 	bl	8003c44 <UART_Start_Receive_DMA>
 80032e8:	4603      	mov	r3, r0
 80032ea:	e000      	b.n	80032ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b090      	sub	sp, #64	; 0x40
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b80      	cmp	r3, #128	; 0x80
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b21      	cmp	r3, #33	; 0x21
 8003322:	d128      	bne.n	8003376 <HAL_UART_DMAStop+0x80>
 8003324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d025      	beq.n	8003376 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	623b      	str	r3, [r7, #32]
   return(result);
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800334a:	633a      	str	r2, [r7, #48]	; 0x30
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003352:	e841 2300 	strex	r3, r2, [r1]
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe f996 	bl	800169c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fd05 	bl	8003d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b22      	cmp	r3, #34	; 0x22
 8003396:	d128      	bne.n	80033ea <HAL_UART_DMAStop+0xf4>
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d025      	beq.n	80033ea <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033b4:	637b      	str	r3, [r7, #52]	; 0x34
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3314      	adds	r3, #20
 80033bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033be:	61fa      	str	r2, [r7, #28]
 80033c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	617b      	str	r3, [r7, #20]
   return(result);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e5      	bne.n	800339e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fe f95c 	bl	800169c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fcf3 	bl	8003dd0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3740      	adds	r7, #64	; 0x40
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0ba      	sub	sp, #232	; 0xe8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fd9b 	bl	8003f8e <UART_Receive_IT>
      return;
 8003458:	e256      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800345a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80de 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
 8003464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80d1 	beq.w	8003620 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00b      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f043 0201 	orr.w	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
 80034ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
 80034d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d011      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
 80034f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f043 0208 	orr.w	r2, r3, #8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 81ed 	beq.w	80038fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
 8003530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fd26 	bl	8003f8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b40      	cmp	r3, #64	; 0x40
 800354e:	bf0c      	ite	eq
 8003550:	2301      	moveq	r3, #1
 8003552:	2300      	movne	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_UART_IRQHandler+0x17a>
 8003566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d04f      	beq.n	800360e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fc2e 	bl	8003dd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d141      	bne.n	8003606 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3314      	adds	r3, #20
 8003588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800359c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3314      	adds	r3, #20
 80035aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d9      	bne.n	8003582 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	4a7d      	ldr	r2, [pc, #500]	; (80037d0 <HAL_UART_IRQHandler+0x3dc>)
 80035dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fe f8ca 	bl	800177c <HAL_DMA_Abort_IT>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d016      	beq.n	800361c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f8:	4610      	mov	r0, r2
 80035fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035fc:	e00e      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f9a4 	bl	800394c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	e00a      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f9a0 	bl	800394c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800360c:	e006      	b.n	800361c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f99c 	bl	800394c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800361a:	e170      	b.n	80038fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800361c:	bf00      	nop
    return;
 800361e:	e16e      	b.n	80038fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 814a 	bne.w	80038be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8143 	beq.w	80038be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 813c 	beq.w	80038be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	60bb      	str	r3, [r7, #8]
 800365a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	f040 80b4 	bne.w	80037d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003678:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 8140 	beq.w	8003902 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800368a:	429a      	cmp	r2, r3
 800368c:	f080 8139 	bcs.w	8003902 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003696:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	f000 8088 	beq.w	80037b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	330c      	adds	r3, #12
 80036ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1d9      	bne.n	80036a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003716:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800371a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800371e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e1      	bne.n	80036f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3314      	adds	r3, #20
 8003734:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800373e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3314      	adds	r3, #20
 800374e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003752:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003756:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003758:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800375a:	e841 2300 	strex	r3, r2, [r1]
 800375e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1e3      	bne.n	800372e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003786:	f023 0310 	bic.w	r3, r3, #16
 800378a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003798:	65ba      	str	r2, [r7, #88]	; 0x58
 800379a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800379e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd ff73 	bl	800169c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8ca 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037cc:	e099      	b.n	8003902 <HAL_UART_IRQHandler+0x50e>
 80037ce:	bf00      	nop
 80037d0:	08003e97 	.word	0x08003e97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037dc:	b29b      	uxth	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 808b 	beq.w	8003906 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8086 	beq.w	8003906 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	330c      	adds	r3, #12
 8003800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800380a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800381e:	647a      	str	r2, [r7, #68]	; 0x44
 8003820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003824:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800382c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e3      	bne.n	80037fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	623b      	str	r3, [r7, #32]
   return(result);
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3314      	adds	r3, #20
 8003852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003856:	633a      	str	r2, [r7, #48]	; 0x30
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800385c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385e:	e841 2300 	strex	r3, r2, [r1]
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e3      	bne.n	8003832 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	330c      	adds	r3, #12
 800387e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	60fb      	str	r3, [r7, #12]
   return(result);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0310 	bic.w	r3, r3, #16
 800388e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800389c:	61fa      	str	r2, [r7, #28]
 800389e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	69b9      	ldr	r1, [r7, #24]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	617b      	str	r3, [r7, #20]
   return(result);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e3      	bne.n	8003878 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f852 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038bc:	e023      	b.n	8003906 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_UART_IRQHandler+0x4ea>
 80038ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 faf1 	bl	8003ebe <UART_Transmit_IT>
    return;
 80038dc:	e014      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00e      	beq.n	8003908 <HAL_UART_IRQHandler+0x514>
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fb31 	bl	8003f5e <UART_EndTransmit_IT>
    return;
 80038fc:	e004      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
    return;
 80038fe:	bf00      	nop
 8003900:	e002      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
      return;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_UART_IRQHandler+0x514>
      return;
 8003906:	bf00      	nop
  }
}
 8003908:	37e8      	adds	r7, #232	; 0xe8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop

08003910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b09c      	sub	sp, #112	; 0x70
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d172      	bne.n	8003a7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003996:	2200      	movs	r2, #0
 8003998:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	330c      	adds	r3, #12
 80039a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80039bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	667b      	str	r3, [r7, #100]	; 0x64
 80039e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039ee:	647a      	str	r2, [r7, #68]	; 0x44
 80039f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	623b      	str	r3, [r7, #32]
   return(result);
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a18:	663b      	str	r3, [r7, #96]	; 0x60
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a22:	633a      	str	r2, [r7, #48]	; 0x30
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d119      	bne.n	8003a7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a66:	61fa      	str	r2, [r7, #28]
 8003a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69b9      	ldr	r1, [r7, #24]
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	617b      	str	r3, [r7, #20]
   return(result);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d106      	bne.n	8003a90 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a86:	4619      	mov	r1, r3
 8003a88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a8a:	f7ff ff69 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8e:	e002      	b.n	8003a96 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a92:	f7ff ff47 	bl	8003924 <HAL_UART_RxCpltCallback>
}
 8003a96:	bf00      	nop
 8003a98:	3770      	adds	r7, #112	; 0x70
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d108      	bne.n	8003ac6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4619      	mov	r1, r3
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f7ff ff4e 	bl	8003960 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ac4:	e002      	b.n	8003acc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff ff36 	bl	8003938 <HAL_UART_RxHalfCpltCallback>
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b21      	cmp	r3, #33	; 0x21
 8003b06:	d108      	bne.n	8003b1a <UART_DMAError+0x46>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003b14:	68b8      	ldr	r0, [r7, #8]
 8003b16:	f000 f933 	bl	8003d80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	bf0c      	ite	eq
 8003b28:	2301      	moveq	r3, #1
 8003b2a:	2300      	movne	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b22      	cmp	r3, #34	; 0x22
 8003b3a:	d108      	bne.n	8003b4e <UART_DMAError+0x7a>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b48:	68b8      	ldr	r0, [r7, #8]
 8003b4a:	f000 f941 	bl	8003dd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5a:	68b8      	ldr	r0, [r7, #8]
 8003b5c:	f7ff fef6 	bl	800394c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b090      	sub	sp, #64	; 0x40
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	e050      	b.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b80:	d04c      	beq.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b88:	f7fd fb40 	bl	800120c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d241      	bcs.n	8003c1c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	e853 3f00 	ldrex	r3, [r3]
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8003bba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc0:	e841 2300 	strex	r3, r2, [r1]
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	613b      	str	r3, [r7, #16]
   return(result);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3314      	adds	r3, #20
 8003bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bec:	623a      	str	r2, [r7, #32]
 8003bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	69f9      	ldr	r1, [r7, #28]
 8003bf2:	6a3a      	ldr	r2, [r7, #32]
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e5      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e00f      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4013      	ands	r3, r2
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	bf0c      	ite	eq
 8003c2c:	2301      	moveq	r3, #1
 8003c2e:	2300      	movne	r3, #0
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d09f      	beq.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3740      	adds	r7, #64	; 0x40
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b098      	sub	sp, #96	; 0x60
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2222      	movs	r2, #34	; 0x22
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	4a40      	ldr	r2, [pc, #256]	; (8003d74 <UART_Start_Receive_DMA+0x130>)
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	4a3f      	ldr	r2, [pc, #252]	; (8003d78 <UART_Start_Receive_DMA+0x134>)
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	4a3e      	ldr	r2, [pc, #248]	; (8003d7c <UART_Start_Receive_DMA+0x138>)
 8003c82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c8c:	f107 0308 	add.w	r3, r7, #8
 8003c90:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	f7fd fca2 	bl	80015ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d019      	beq.n	8003d02 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cee:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf6:	e841 2300 	strex	r3, r2, [r1]
 8003cfa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1e5      	bne.n	8003cce <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3314      	adds	r3, #20
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	e853 3f00 	ldrex	r3, [r3]
 8003d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	657b      	str	r3, [r7, #84]	; 0x54
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3314      	adds	r3, #20
 8003d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d22:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d2a:	e841 2300 	strex	r3, r2, [r1]
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e5      	bne.n	8003d02 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3314      	adds	r3, #20
 8003d3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	617b      	str	r3, [r7, #20]
   return(result);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d56:	627a      	str	r2, [r7, #36]	; 0x24
 8003d58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6a39      	ldr	r1, [r7, #32]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3760      	adds	r7, #96	; 0x60
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	08003979 	.word	0x08003979
 8003d78:	08003a9f 	.word	0x08003a9f
 8003d7c:	08003ad5 	.word	0x08003ad5

08003d80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	; 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	61ba      	str	r2, [r7, #24]
 8003daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6979      	ldr	r1, [r7, #20]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	613b      	str	r3, [r7, #16]
   return(result);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e5      	bne.n	8003d88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003dc4:	bf00      	nop
 8003dc6:	3724      	adds	r7, #36	; 0x24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b095      	sub	sp, #84	; 0x54
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330c      	adds	r3, #12
 8003df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003df8:	643a      	str	r2, [r7, #64]	; 0x40
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e5      	bne.n	8003dd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f023 0301 	bic.w	r3, r3, #1
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3314      	adds	r3, #20
 8003e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d119      	bne.n	8003e7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	330c      	adds	r3, #12
 8003e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e68:	61ba      	str	r2, [r7, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6979      	ldr	r1, [r7, #20]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	613b      	str	r3, [r7, #16]
   return(result);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e5      	bne.n	8003e48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e8a:	bf00      	nop
 8003e8c:	3754      	adds	r7, #84	; 0x54
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff fd4b 	bl	800394c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b21      	cmp	r3, #33	; 0x21
 8003ed0:	d13e      	bne.n	8003f50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eda:	d114      	bne.n	8003f06 <UART_Transmit_IT+0x48>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	1c9a      	adds	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]
 8003f04:	e008      	b.n	8003f18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6211      	str	r1, [r2, #32]
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10f      	bne.n	8003f4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e000      	b.n	8003f52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fcc6 	bl	8003910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08c      	sub	sp, #48	; 0x30
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b22      	cmp	r3, #34	; 0x22
 8003fa0:	f040 80ab 	bne.w	80040fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d117      	bne.n	8003fde <UART_Receive_IT+0x50>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d113      	bne.n	8003fde <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
 8003fdc:	e026      	b.n	800402c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d007      	beq.n	8004002 <UART_Receive_IT+0x74>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10a      	bne.n	8004010 <UART_Receive_IT+0x82>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e008      	b.n	8004022 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401c:	b2da      	uxtb	r2, r3
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29b      	uxth	r3, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4619      	mov	r1, r3
 800403a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800403c:	2b00      	cmp	r3, #0
 800403e:	d15a      	bne.n	80040f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0220 	bic.w	r2, r2, #32
 800404e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800405e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407c:	2b01      	cmp	r3, #1
 800407e:	d135      	bne.n	80040ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	330c      	adds	r3, #12
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	613b      	str	r3, [r7, #16]
   return(result);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f023 0310 	bic.w	r3, r3, #16
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	623a      	str	r2, [r7, #32]
 80040a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	69f9      	ldr	r1, [r7, #28]
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d10a      	bne.n	80040de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff fc3b 	bl	8003960 <HAL_UARTEx_RxEventCallback>
 80040ea:	e002      	b.n	80040f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fc19 	bl	8003924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e002      	b.n	80040fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3730      	adds	r7, #48	; 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004108:	b0c0      	sub	sp, #256	; 0x100
 800410a:	af00      	add	r7, sp, #0
 800410c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004120:	68d9      	ldr	r1, [r3, #12]
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	ea40 0301 	orr.w	r3, r0, r1
 800412c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	431a      	orrs	r2, r3
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	431a      	orrs	r2, r3
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800415c:	f021 010c 	bic.w	r1, r1, #12
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800416a:	430b      	orrs	r3, r1
 800416c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	6999      	ldr	r1, [r3, #24]
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	ea40 0301 	orr.w	r3, r0, r1
 800418a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b8f      	ldr	r3, [pc, #572]	; (80043d0 <UART_SetConfig+0x2cc>)
 8004194:	429a      	cmp	r2, r3
 8004196:	d005      	beq.n	80041a4 <UART_SetConfig+0xa0>
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <UART_SetConfig+0x2d0>)
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d104      	bne.n	80041ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fb70 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80041a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041ac:	e003      	b.n	80041b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ae:	f7fe fb57 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 80041b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	f040 810c 	bne.w	80043dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c8:	2200      	movs	r2, #0
 80041ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	1891      	adds	r1, r2, r2
 80041dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80041de:	415b      	adcs	r3, r3
 80041e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041e6:	4621      	mov	r1, r4
 80041e8:	eb12 0801 	adds.w	r8, r2, r1
 80041ec:	4629      	mov	r1, r5
 80041ee:	eb43 0901 	adc.w	r9, r3, r1
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004206:	4690      	mov	r8, r2
 8004208:	4699      	mov	r9, r3
 800420a:	4623      	mov	r3, r4
 800420c:	eb18 0303 	adds.w	r3, r8, r3
 8004210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004214:	462b      	mov	r3, r5
 8004216:	eb49 0303 	adc.w	r3, r9, r3
 800421a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800422a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800422e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004232:	460b      	mov	r3, r1
 8004234:	18db      	adds	r3, r3, r3
 8004236:	653b      	str	r3, [r7, #80]	; 0x50
 8004238:	4613      	mov	r3, r2
 800423a:	eb42 0303 	adc.w	r3, r2, r3
 800423e:	657b      	str	r3, [r7, #84]	; 0x54
 8004240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004248:	f7fb ffc6 	bl	80001d8 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4b61      	ldr	r3, [pc, #388]	; (80043d8 <UART_SetConfig+0x2d4>)
 8004252:	fba3 2302 	umull	r2, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	011c      	lsls	r4, r3, #4
 800425a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	64b9      	str	r1, [r7, #72]	; 0x48
 8004274:	415b      	adcs	r3, r3
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800427c:	4641      	mov	r1, r8
 800427e:	eb12 0a01 	adds.w	sl, r2, r1
 8004282:	4649      	mov	r1, r9
 8004284:	eb43 0b01 	adc.w	fp, r3, r1
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429c:	4692      	mov	sl, r2
 800429e:	469b      	mov	fp, r3
 80042a0:	4643      	mov	r3, r8
 80042a2:	eb1a 0303 	adds.w	r3, sl, r3
 80042a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042aa:	464b      	mov	r3, r9
 80042ac:	eb4b 0303 	adc.w	r3, fp, r3
 80042b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042c8:	460b      	mov	r3, r1
 80042ca:	18db      	adds	r3, r3, r3
 80042cc:	643b      	str	r3, [r7, #64]	; 0x40
 80042ce:	4613      	mov	r3, r2
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
 80042d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042de:	f7fb ff7b 	bl	80001d8 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <UART_SetConfig+0x2d4>)
 80042ea:	fba3 2301 	umull	r2, r3, r3, r1
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2264      	movs	r2, #100	; 0x64
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	1acb      	subs	r3, r1, r3
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <UART_SetConfig+0x2d4>)
 8004300:	fba3 2302 	umull	r2, r3, r3, r2
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430c:	441c      	add	r4, r3
 800430e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800431c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	1891      	adds	r1, r2, r2
 8004326:	63b9      	str	r1, [r7, #56]	; 0x38
 8004328:	415b      	adcs	r3, r3
 800432a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004330:	4641      	mov	r1, r8
 8004332:	1851      	adds	r1, r2, r1
 8004334:	6339      	str	r1, [r7, #48]	; 0x30
 8004336:	4649      	mov	r1, r9
 8004338:	414b      	adcs	r3, r1
 800433a:	637b      	str	r3, [r7, #52]	; 0x34
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004348:	4659      	mov	r1, fp
 800434a:	00cb      	lsls	r3, r1, #3
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004352:	4651      	mov	r1, sl
 8004354:	00ca      	lsls	r2, r1, #3
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	4603      	mov	r3, r0
 800435c:	4642      	mov	r2, r8
 800435e:	189b      	adds	r3, r3, r2
 8004360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004364:	464b      	mov	r3, r9
 8004366:	460a      	mov	r2, r1
 8004368:	eb42 0303 	adc.w	r3, r2, r3
 800436c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800437c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004384:	460b      	mov	r3, r1
 8004386:	18db      	adds	r3, r3, r3
 8004388:	62bb      	str	r3, [r7, #40]	; 0x28
 800438a:	4613      	mov	r3, r2
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800439a:	f7fb ff1d 	bl	80001d8 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <UART_SetConfig+0x2d4>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	; 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	3332      	adds	r3, #50	; 0x32
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <UART_SetConfig+0x2d4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 0207 	and.w	r2, r3, #7
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4422      	add	r2, r4
 80043ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043cc:	e105      	b.n	80045da <UART_SetConfig+0x4d6>
 80043ce:	bf00      	nop
 80043d0:	40011000 	.word	0x40011000
 80043d4:	40011400 	.word	0x40011400
 80043d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043ee:	4642      	mov	r2, r8
 80043f0:	464b      	mov	r3, r9
 80043f2:	1891      	adds	r1, r2, r2
 80043f4:	6239      	str	r1, [r7, #32]
 80043f6:	415b      	adcs	r3, r3
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043fe:	4641      	mov	r1, r8
 8004400:	1854      	adds	r4, r2, r1
 8004402:	4649      	mov	r1, r9
 8004404:	eb43 0501 	adc.w	r5, r3, r1
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	00eb      	lsls	r3, r5, #3
 8004412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004416:	00e2      	lsls	r2, r4, #3
 8004418:	4614      	mov	r4, r2
 800441a:	461d      	mov	r5, r3
 800441c:	4643      	mov	r3, r8
 800441e:	18e3      	adds	r3, r4, r3
 8004420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004424:	464b      	mov	r3, r9
 8004426:	eb45 0303 	adc.w	r3, r5, r3
 800442a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800443a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800444a:	4629      	mov	r1, r5
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004454:	4621      	mov	r1, r4
 8004456:	008a      	lsls	r2, r1, #2
 8004458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800445c:	f7fb febc 	bl	80001d8 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4b60      	ldr	r3, [pc, #384]	; (80045e8 <UART_SetConfig+0x4e4>)
 8004466:	fba3 2302 	umull	r2, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	011c      	lsls	r4, r3, #4
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800447c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	61b9      	str	r1, [r7, #24]
 8004488:	415b      	adcs	r3, r3
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004490:	4641      	mov	r1, r8
 8004492:	1851      	adds	r1, r2, r1
 8004494:	6139      	str	r1, [r7, #16]
 8004496:	4649      	mov	r1, r9
 8004498:	414b      	adcs	r3, r1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a8:	4659      	mov	r1, fp
 80044aa:	00cb      	lsls	r3, r1, #3
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b2:	4651      	mov	r1, sl
 80044b4:	00ca      	lsls	r2, r1, #3
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	4642      	mov	r2, r8
 80044be:	189b      	adds	r3, r3, r2
 80044c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044c4:	464b      	mov	r3, r9
 80044c6:	460a      	mov	r2, r1
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044e8:	4649      	mov	r1, r9
 80044ea:	008b      	lsls	r3, r1, #2
 80044ec:	4641      	mov	r1, r8
 80044ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f2:	4641      	mov	r1, r8
 80044f4:	008a      	lsls	r2, r1, #2
 80044f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044fa:	f7fb fe6d 	bl	80001d8 <__aeabi_uldivmod>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4b39      	ldr	r3, [pc, #228]	; (80045e8 <UART_SetConfig+0x4e4>)
 8004504:	fba3 1302 	umull	r1, r3, r3, r2
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	2164      	movs	r1, #100	; 0x64
 800450c:	fb01 f303 	mul.w	r3, r1, r3
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	3332      	adds	r3, #50	; 0x32
 8004516:	4a34      	ldr	r2, [pc, #208]	; (80045e8 <UART_SetConfig+0x4e4>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004522:	441c      	add	r4, r3
 8004524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004528:	2200      	movs	r2, #0
 800452a:	673b      	str	r3, [r7, #112]	; 0x70
 800452c:	677a      	str	r2, [r7, #116]	; 0x74
 800452e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	1891      	adds	r1, r2, r2
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	415b      	adcs	r3, r3
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004542:	4641      	mov	r1, r8
 8004544:	1851      	adds	r1, r2, r1
 8004546:	6039      	str	r1, [r7, #0]
 8004548:	4649      	mov	r1, r9
 800454a:	414b      	adcs	r3, r1
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800455a:	4659      	mov	r1, fp
 800455c:	00cb      	lsls	r3, r1, #3
 800455e:	4651      	mov	r1, sl
 8004560:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004564:	4651      	mov	r1, sl
 8004566:	00ca      	lsls	r2, r1, #3
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	4603      	mov	r3, r0
 800456e:	4642      	mov	r2, r8
 8004570:	189b      	adds	r3, r3, r2
 8004572:	66bb      	str	r3, [r7, #104]	; 0x68
 8004574:	464b      	mov	r3, r9
 8004576:	460a      	mov	r2, r1
 8004578:	eb42 0303 	adc.w	r3, r2, r3
 800457c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	663b      	str	r3, [r7, #96]	; 0x60
 8004588:	667a      	str	r2, [r7, #100]	; 0x64
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004596:	4649      	mov	r1, r9
 8004598:	008b      	lsls	r3, r1, #2
 800459a:	4641      	mov	r1, r8
 800459c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a0:	4641      	mov	r1, r8
 80045a2:	008a      	lsls	r2, r1, #2
 80045a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045a8:	f7fb fe16 	bl	80001d8 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <UART_SetConfig+0x4e4>)
 80045b2:	fba3 1302 	umull	r1, r3, r3, r2
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2164      	movs	r1, #100	; 0x64
 80045ba:	fb01 f303 	mul.w	r3, r1, r3
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	; 0x32
 80045c4:	4a08      	ldr	r2, [pc, #32]	; (80045e8 <UART_SetConfig+0x4e4>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4422      	add	r2, r4
 80045d8:	609a      	str	r2, [r3, #8]
}
 80045da:	bf00      	nop
 80045dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e6:	bf00      	nop
 80045e8:	51eb851f 	.word	0x51eb851f

080045ec <calloc>:
 80045ec:	4b02      	ldr	r3, [pc, #8]	; (80045f8 <calloc+0xc>)
 80045ee:	460a      	mov	r2, r1
 80045f0:	4601      	mov	r1, r0
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	f000 b85c 	b.w	80046b0 <_calloc_r>
 80045f8:	2000000c 	.word	0x2000000c

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	; (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000000c 	.word	0x2000000c

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4d0d      	ldr	r5, [pc, #52]	; (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2600      	movs	r6, #0
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4d0b      	ldr	r5, [pc, #44]	; (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	; (800464c <__libc_init_array+0x44>)
 800461c:	f000 f910 	bl	8004840 <_init>
 8004620:	1b64      	subs	r4, r4, r5
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2600      	movs	r6, #0
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08004a80 	.word	0x08004a80
 8004644:	08004a80 	.word	0x08004a80
 8004648:	08004a80 	.word	0x08004a80
 800464c:	08004a84 	.word	0x08004a84

08004650 <memcpy>:
 8004650:	440a      	add	r2, r1
 8004652:	4291      	cmp	r1, r2
 8004654:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004658:	d100      	bne.n	800465c <memcpy+0xc>
 800465a:	4770      	bx	lr
 800465c:	b510      	push	{r4, lr}
 800465e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004666:	4291      	cmp	r1, r2
 8004668:	d1f9      	bne.n	800465e <memcpy+0xe>
 800466a:	bd10      	pop	{r4, pc}

0800466c <memmove>:
 800466c:	4288      	cmp	r0, r1
 800466e:	b510      	push	{r4, lr}
 8004670:	eb01 0402 	add.w	r4, r1, r2
 8004674:	d902      	bls.n	800467c <memmove+0x10>
 8004676:	4284      	cmp	r4, r0
 8004678:	4623      	mov	r3, r4
 800467a:	d807      	bhi.n	800468c <memmove+0x20>
 800467c:	1e43      	subs	r3, r0, #1
 800467e:	42a1      	cmp	r1, r4
 8004680:	d008      	beq.n	8004694 <memmove+0x28>
 8004682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800468a:	e7f8      	b.n	800467e <memmove+0x12>
 800468c:	4402      	add	r2, r0
 800468e:	4601      	mov	r1, r0
 8004690:	428a      	cmp	r2, r1
 8004692:	d100      	bne.n	8004696 <memmove+0x2a>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800469a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800469e:	e7f7      	b.n	8004690 <memmove+0x24>

080046a0 <memset>:
 80046a0:	4402      	add	r2, r0
 80046a2:	4603      	mov	r3, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <_calloc_r>:
 80046b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046b2:	fba1 2402 	umull	r2, r4, r1, r2
 80046b6:	b94c      	cbnz	r4, 80046cc <_calloc_r+0x1c>
 80046b8:	4611      	mov	r1, r2
 80046ba:	9201      	str	r2, [sp, #4]
 80046bc:	f000 f82e 	bl	800471c <_malloc_r>
 80046c0:	9a01      	ldr	r2, [sp, #4]
 80046c2:	4605      	mov	r5, r0
 80046c4:	b930      	cbnz	r0, 80046d4 <_calloc_r+0x24>
 80046c6:	4628      	mov	r0, r5
 80046c8:	b003      	add	sp, #12
 80046ca:	bd30      	pop	{r4, r5, pc}
 80046cc:	220c      	movs	r2, #12
 80046ce:	6002      	str	r2, [r0, #0]
 80046d0:	2500      	movs	r5, #0
 80046d2:	e7f8      	b.n	80046c6 <_calloc_r+0x16>
 80046d4:	4621      	mov	r1, r4
 80046d6:	f7ff ffe3 	bl	80046a0 <memset>
 80046da:	e7f4      	b.n	80046c6 <_calloc_r+0x16>

080046dc <sbrk_aligned>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	4e0e      	ldr	r6, [pc, #56]	; (8004718 <sbrk_aligned+0x3c>)
 80046e0:	460c      	mov	r4, r1
 80046e2:	6831      	ldr	r1, [r6, #0]
 80046e4:	4605      	mov	r5, r0
 80046e6:	b911      	cbnz	r1, 80046ee <sbrk_aligned+0x12>
 80046e8:	f000 f88c 	bl	8004804 <_sbrk_r>
 80046ec:	6030      	str	r0, [r6, #0]
 80046ee:	4621      	mov	r1, r4
 80046f0:	4628      	mov	r0, r5
 80046f2:	f000 f887 	bl	8004804 <_sbrk_r>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d00a      	beq.n	8004710 <sbrk_aligned+0x34>
 80046fa:	1cc4      	adds	r4, r0, #3
 80046fc:	f024 0403 	bic.w	r4, r4, #3
 8004700:	42a0      	cmp	r0, r4
 8004702:	d007      	beq.n	8004714 <sbrk_aligned+0x38>
 8004704:	1a21      	subs	r1, r4, r0
 8004706:	4628      	mov	r0, r5
 8004708:	f000 f87c 	bl	8004804 <_sbrk_r>
 800470c:	3001      	adds	r0, #1
 800470e:	d101      	bne.n	8004714 <sbrk_aligned+0x38>
 8004710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004714:	4620      	mov	r0, r4
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	20000198 	.word	0x20000198

0800471c <_malloc_r>:
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004720:	1ccd      	adds	r5, r1, #3
 8004722:	f025 0503 	bic.w	r5, r5, #3
 8004726:	3508      	adds	r5, #8
 8004728:	2d0c      	cmp	r5, #12
 800472a:	bf38      	it	cc
 800472c:	250c      	movcc	r5, #12
 800472e:	2d00      	cmp	r5, #0
 8004730:	4607      	mov	r7, r0
 8004732:	db01      	blt.n	8004738 <_malloc_r+0x1c>
 8004734:	42a9      	cmp	r1, r5
 8004736:	d905      	bls.n	8004744 <_malloc_r+0x28>
 8004738:	230c      	movs	r3, #12
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	2600      	movs	r6, #0
 800473e:	4630      	mov	r0, r6
 8004740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004744:	4e2e      	ldr	r6, [pc, #184]	; (8004800 <_malloc_r+0xe4>)
 8004746:	f000 f86d 	bl	8004824 <__malloc_lock>
 800474a:	6833      	ldr	r3, [r6, #0]
 800474c:	461c      	mov	r4, r3
 800474e:	bb34      	cbnz	r4, 800479e <_malloc_r+0x82>
 8004750:	4629      	mov	r1, r5
 8004752:	4638      	mov	r0, r7
 8004754:	f7ff ffc2 	bl	80046dc <sbrk_aligned>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	4604      	mov	r4, r0
 800475c:	d14d      	bne.n	80047fa <_malloc_r+0xde>
 800475e:	6834      	ldr	r4, [r6, #0]
 8004760:	4626      	mov	r6, r4
 8004762:	2e00      	cmp	r6, #0
 8004764:	d140      	bne.n	80047e8 <_malloc_r+0xcc>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	4631      	mov	r1, r6
 800476a:	4638      	mov	r0, r7
 800476c:	eb04 0803 	add.w	r8, r4, r3
 8004770:	f000 f848 	bl	8004804 <_sbrk_r>
 8004774:	4580      	cmp	r8, r0
 8004776:	d13a      	bne.n	80047ee <_malloc_r+0xd2>
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	3503      	adds	r5, #3
 800477c:	1a6d      	subs	r5, r5, r1
 800477e:	f025 0503 	bic.w	r5, r5, #3
 8004782:	3508      	adds	r5, #8
 8004784:	2d0c      	cmp	r5, #12
 8004786:	bf38      	it	cc
 8004788:	250c      	movcc	r5, #12
 800478a:	4629      	mov	r1, r5
 800478c:	4638      	mov	r0, r7
 800478e:	f7ff ffa5 	bl	80046dc <sbrk_aligned>
 8004792:	3001      	adds	r0, #1
 8004794:	d02b      	beq.n	80047ee <_malloc_r+0xd2>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	442b      	add	r3, r5
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	e00e      	b.n	80047bc <_malloc_r+0xa0>
 800479e:	6822      	ldr	r2, [r4, #0]
 80047a0:	1b52      	subs	r2, r2, r5
 80047a2:	d41e      	bmi.n	80047e2 <_malloc_r+0xc6>
 80047a4:	2a0b      	cmp	r2, #11
 80047a6:	d916      	bls.n	80047d6 <_malloc_r+0xba>
 80047a8:	1961      	adds	r1, r4, r5
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	6025      	str	r5, [r4, #0]
 80047ae:	bf18      	it	ne
 80047b0:	6059      	strne	r1, [r3, #4]
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	bf08      	it	eq
 80047b6:	6031      	streq	r1, [r6, #0]
 80047b8:	5162      	str	r2, [r4, r5]
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	4638      	mov	r0, r7
 80047be:	f104 060b 	add.w	r6, r4, #11
 80047c2:	f000 f835 	bl	8004830 <__malloc_unlock>
 80047c6:	f026 0607 	bic.w	r6, r6, #7
 80047ca:	1d23      	adds	r3, r4, #4
 80047cc:	1af2      	subs	r2, r6, r3
 80047ce:	d0b6      	beq.n	800473e <_malloc_r+0x22>
 80047d0:	1b9b      	subs	r3, r3, r6
 80047d2:	50a3      	str	r3, [r4, r2]
 80047d4:	e7b3      	b.n	800473e <_malloc_r+0x22>
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	42a3      	cmp	r3, r4
 80047da:	bf0c      	ite	eq
 80047dc:	6032      	streq	r2, [r6, #0]
 80047de:	605a      	strne	r2, [r3, #4]
 80047e0:	e7ec      	b.n	80047bc <_malloc_r+0xa0>
 80047e2:	4623      	mov	r3, r4
 80047e4:	6864      	ldr	r4, [r4, #4]
 80047e6:	e7b2      	b.n	800474e <_malloc_r+0x32>
 80047e8:	4634      	mov	r4, r6
 80047ea:	6876      	ldr	r6, [r6, #4]
 80047ec:	e7b9      	b.n	8004762 <_malloc_r+0x46>
 80047ee:	230c      	movs	r3, #12
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	4638      	mov	r0, r7
 80047f4:	f000 f81c 	bl	8004830 <__malloc_unlock>
 80047f8:	e7a1      	b.n	800473e <_malloc_r+0x22>
 80047fa:	6025      	str	r5, [r4, #0]
 80047fc:	e7de      	b.n	80047bc <_malloc_r+0xa0>
 80047fe:	bf00      	nop
 8004800:	20000194 	.word	0x20000194

08004804 <_sbrk_r>:
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4d06      	ldr	r5, [pc, #24]	; (8004820 <_sbrk_r+0x1c>)
 8004808:	2300      	movs	r3, #0
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	602b      	str	r3, [r5, #0]
 8004810:	f7fc fa32 	bl	8000c78 <_sbrk>
 8004814:	1c43      	adds	r3, r0, #1
 8004816:	d102      	bne.n	800481e <_sbrk_r+0x1a>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	b103      	cbz	r3, 800481e <_sbrk_r+0x1a>
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	bd38      	pop	{r3, r4, r5, pc}
 8004820:	2000019c 	.word	0x2000019c

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f000 b809 	b.w	800483c <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	200001a0 	.word	0x200001a0

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f000 b804 	b.w	800483e <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	200001a0 	.word	0x200001a0

0800483c <__retarget_lock_acquire_recursive>:
 800483c:	4770      	bx	lr

0800483e <__retarget_lock_release_recursive>:
 800483e:	4770      	bx	lr

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
