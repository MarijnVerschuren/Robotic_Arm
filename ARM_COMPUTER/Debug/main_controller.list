
main_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004768  08004768  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004768  08004768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004770  08004770  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  080047d4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080047d4  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119bf  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038aa  00000000  00000000  00031a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00035328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000940  00000000  00000000  00035f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168e1  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc57  00000000  00000000  0004d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088518  00000000  00000000  00059d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027d4  00000000  00000000  000e22a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000132  00000000  00000000  000e4a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000012b0  00000000  00000000  000e4ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f004 f856 	bl	8004268 <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <deregister_tm_clones>:
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <deregister_tm_clones+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <deregister_tm_clones+0x14>)
 80001d0:	4283      	cmp	r3, r0
 80001d2:	d002      	beq.n	80001da <deregister_tm_clones+0xe>
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <deregister_tm_clones+0x18>)
 80001d6:	b103      	cbz	r3, 80001da <deregister_tm_clones+0xe>
 80001d8:	4718      	bx	r3
 80001da:	4770      	bx	lr
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000

080001e8 <register_tm_clones>:
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <register_tm_clones+0x18>)
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <register_tm_clones+0x1c>)
 80001ec:	1a1b      	subs	r3, r3, r0
 80001ee:	0fd9      	lsrs	r1, r3, #31
 80001f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001f4:	1049      	asrs	r1, r1, #1
 80001f6:	d002      	beq.n	80001fe <register_tm_clones+0x16>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <register_tm_clones+0x20>)
 80001fa:	b103      	cbz	r3, 80001fe <register_tm_clones+0x16>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	2000005c 	.word	0x2000005c
 8000204:	2000005c 	.word	0x2000005c
 8000208:	00000000 	.word	0x00000000

0800020c <__do_global_dtors_aux>:
 800020c:	b510      	push	{r4, lr}
 800020e:	4c06      	ldr	r4, [pc, #24]	; (8000228 <__do_global_dtors_aux+0x1c>)
 8000210:	7823      	ldrb	r3, [r4, #0]
 8000212:	b943      	cbnz	r3, 8000226 <__do_global_dtors_aux+0x1a>
 8000214:	f7ff ffda 	bl	80001cc <deregister_tm_clones>
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__do_global_dtors_aux+0x20>)
 800021a:	b113      	cbz	r3, 8000222 <__do_global_dtors_aux+0x16>
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x24>)
 800021e:	f3af 8000 	nop.w
 8000222:	2301      	movs	r3, #1
 8000224:	7023      	strb	r3, [r4, #0]
 8000226:	bd10      	pop	{r4, pc}
 8000228:	2000005c 	.word	0x2000005c
 800022c:	00000000 	.word	0x00000000
 8000230:	08004530 	.word	0x08004530

08000234 <frame_dummy>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <frame_dummy+0x18>)
 8000238:	b11b      	cbz	r3, 8000242 <frame_dummy+0xe>
 800023a:	4905      	ldr	r1, [pc, #20]	; (8000250 <frame_dummy+0x1c>)
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <frame_dummy+0x20>)
 800023e:	f3af 8000 	nop.w
 8000242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000246:	f7ff bfcf 	b.w	80001e8 <register_tm_clones>
 800024a:	bf00      	nop
 800024c:	00000000 	.word	0x00000000
 8000250:	20000060 	.word	0x20000060
 8000254:	08004530 	.word	0x08004530

08000258 <crc16_dnp>:
};



// crc16_dnp was the most error resilient for messages under 130 bytes with a hamming distance of 7!!
uint16_t crc16_dnp(const void* buffer, uint64_t size) {
 8000258:	b4b0      	push	{r4, r5, r7}
 800025a:	b089      	sub	sp, #36	; 0x24
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t crc = 0x0000;
 8000264:	2300      	movs	r3, #0
 8000266:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8000268:	f04f 0200 	mov.w	r2, #0
 800026c:	f04f 0300 	mov.w	r3, #0
 8000270:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000274:	e01a      	b.n	80002ac <crc16_dnp+0x54>
		crc = ((crc << 8) & 0xff00) ^ crc16_dnp_table[((crc >> 8) ^ ((const uint8_t*)buffer)[i]) & 0xff];
 8000276:	8bfb      	ldrh	r3, [r7, #30]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	b21a      	sxth	r2, r3
 800027c:	8bfb      	ldrh	r3, [r7, #30]
 800027e:	0a1b      	lsrs	r3, r3, #8
 8000280:	b29b      	uxth	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	693b      	ldr	r3, [r7, #16]
 8000286:	68f9      	ldr	r1, [r7, #12]
 8000288:	440b      	add	r3, r1
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	4043      	eors	r3, r0
 800028e:	b2db      	uxtb	r3, r3
 8000290:	490e      	ldr	r1, [pc, #56]	; (80002cc <crc16_dnp+0x74>)
 8000292:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000296:	b21b      	sxth	r3, r3
 8000298:	4053      	eors	r3, r2
 800029a:	b21b      	sxth	r3, r3
 800029c:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 800029e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80002a2:	1c54      	adds	r4, r2, #1
 80002a4:	f143 0500 	adc.w	r5, r3, #0
 80002a8:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80002ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80002b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80002b4:	4290      	cmp	r0, r2
 80002b6:	eb71 0303 	sbcs.w	r3, r1, r3
 80002ba:	d3dc      	bcc.n	8000276 <crc16_dnp+0x1e>
	}; return crc ^ 0xffff;
 80002bc:	8bfb      	ldrh	r3, [r7, #30]
 80002be:	43db      	mvns	r3, r3
 80002c0:	b29b      	uxth	r3, r3
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	3724      	adds	r7, #36	; 0x24
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bcb0      	pop	{r4, r5, r7}
 80002ca:	4770      	bx	lr
 80002cc:	08004548 	.word	0x08004548

080002d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002d6:	2300      	movs	r3, #0
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	4b0c      	ldr	r3, [pc, #48]	; (800030c <MX_DMA_Init+0x3c>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <MX_DMA_Init+0x3c>)
 80002e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
 80002e6:	4b09      	ldr	r3, [pc, #36]	; (800030c <MX_DMA_Init+0x3c>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	2010      	movs	r0, #16
 80002f8:	f000 fe61 	bl	8000fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80002fc:	2010      	movs	r0, #16
 80002fe:	f000 fe7a 	bl	8000ff6 <HAL_NVIC_EnableIRQ>

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800

08000310 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
 8000324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	4b19      	ldr	r3, [pc, #100]	; (8000390 <MX_GPIO_Init+0x80>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a18      	ldr	r2, [pc, #96]	; (8000390 <MX_GPIO_Init+0x80>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <MX_GPIO_Init+0x80>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000342:	2300      	movs	r3, #0
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <MX_GPIO_Init+0x80>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a11      	ldr	r2, [pc, #68]	; (8000390 <MX_GPIO_Init+0x80>)
 800034c:	f043 0302 	orr.w	r3, r3, #2
 8000350:	6313      	str	r3, [r2, #48]	; 0x30
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <MX_GPIO_Init+0x80>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_0_Pin|CS_1_Pin|CS_2_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <MX_GPIO_Init+0x84>)
 8000366:	f001 fbe7 	bl	8001b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin|CS_2_Pin;
 800036a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800036e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	2301      	movs	r3, #1
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	4619      	mov	r1, r3
 8000382:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_GPIO_Init+0x84>)
 8000384:	f001 fa54 	bl	8001830 <HAL_GPIO_Init>

}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40023800 	.word	0x40023800
 8000394:	40020400 	.word	0x40020400

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b099      	sub	sp, #100	; 0x64
 800039c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 fcc1 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 f92d 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f7ff ffb3 	bl	8000310 <MX_GPIO_Init>
  MX_DMA_Init();
 80003aa:	f7ff ff91 	bl	80002d0 <MX_DMA_Init>
  MX_SPI1_Init();
 80003ae:	f000 f995 	bl	80006dc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80003b2:	f000 fbd7 	bl	8000b64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	RX_data = new_uart_ibuf(&huart2, 1024);  // starts receiving
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	488b      	ldr	r0, [pc, #556]	; (80005e8 <main+0x250>)
 80003bc:	f000 facc 	bl	8000958 <new_uart_ibuf>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a8a      	ldr	r2, [pc, #552]	; (80005ec <main+0x254>)
 80003c4:	6013      	str	r3, [r2, #0]

	// motor_count starts counting from 0
	uint8_t motor_count = 0;  // TODO: make code to find motor count
 80003c6:	2300      	movs	r3, #0
 80003c8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	{  // anonymous scope so that temporary variables are cleaned up
		uint32_t baud = 9600;  // default baud
 80003cc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80003d0:	657b      	str	r3, [r7, #84]	; 0x54
		CTRL_Handshake init;

		HANDSHAKE:  // jmp to label in the case baud is changed (redo handshake)

		memset((void*)&init, 0, 6);  // set to 0
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2206      	movs	r2, #6
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f003 fe89 	bl	80040f0 <memset>
		uint16_t crc = 0xffff;
 80003de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

		while (init.crc != crc) {  // handshake
 80003e6:	e01f      	b.n	8000428 <main+0x90>
			if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 80003e8:	4b80      	ldr	r3, [pc, #512]	; (80005ec <main+0x254>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	215c      	movs	r1, #92	; 0x5c
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fb23 	bl	8000a3a <uart_ibuf_align>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d000      	beq.n	80003fc <main+0x64>
 80003fa:	e015      	b.n	8000428 <main+0x90>
			if (uart_ibuf_read(RX_data, &init, 6)) { continue; }
 80003fc:	4b7b      	ldr	r3, [pc, #492]	; (80005ec <main+0x254>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	1d39      	adds	r1, r7, #4
 8000402:	2206      	movs	r2, #6
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fb3f 	bl	8000a88 <uart_ibuf_read>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d000      	beq.n	8000412 <main+0x7a>
 8000410:	e00a      	b.n	8000428 <main+0x90>
			crc = crc16_dnp(&init, 4);
 8000412:	1d39      	adds	r1, r7, #4
 8000414:	f04f 0204 	mov.w	r2, #4
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	4608      	mov	r0, r1
 800041e:	f7ff ff1b 	bl	8000258 <crc16_dnp>
 8000422:	4603      	mov	r3, r0
 8000424:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		while (init.crc != crc) {  // handshake
 8000428:	893b      	ldrh	r3, [r7, #8]
 800042a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800042e:	429a      	cmp	r2, r3
 8000430:	d1da      	bne.n	80003e8 <main+0x50>
		}  // TODO: add CRC error correction

		init.motor_count = motor_count;  // set motor count and send message back
 8000432:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000436:	f003 031f 	and.w	r3, r3, #31
 800043a:	b2da      	uxtb	r2, r3
 800043c:	793b      	ldrb	r3, [r7, #4]
 800043e:	f362 0304 	bfi	r3, r2, #0, #5
 8000442:	713b      	strb	r3, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)&init, 6, 10);
 8000444:	1d39      	adds	r1, r7, #4
 8000446:	230a      	movs	r3, #10
 8000448:	2206      	movs	r2, #6
 800044a:	4867      	ldr	r0, [pc, #412]	; (80005e8 <main+0x250>)
 800044c:	f002 fc3b 	bl	8002cc6 <HAL_UART_Transmit>

		if (init.init_0) {}  // TODO: move all motors to their 0 position
		if (init.baud != baud) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f3c3 1399 	ubfx	r3, r3, #6, #26
 8000456:	461a      	mov	r2, r3
 8000458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800045a:	4293      	cmp	r3, r2
 800045c:	d004      	beq.n	8000468 <main+0xd0>
			// TODO: set new baud and go back to handshake
			baud = init.baud;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f3c3 1399 	ubfx	r3, r3, #6, #26
 8000464:	657b      	str	r3, [r7, #84]	; 0x54
			goto HANDSHAKE;
 8000466:	e7b4      	b.n	80003d2 <main+0x3a>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	// HAL_UART_Transmit(&huart2, (uint8_t*)&instruction, 28, 100);  // 10ms timeout is too little!!!!
	uart_ibuf_reset(RX_data);
 8000468:	4b60      	ldr	r3, [pc, #384]	; (80005ec <main+0x254>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 faa2 	bl	80009b6 <uart_ibuf_reset>
	MCU_Instruction instruction;
	MCU_State state;
	uint8_t return_code;

	instruction.target = 2000;
 8000472:	f04f 0200 	mov.w	r2, #0
 8000476:	4b5e      	ldr	r3, [pc, #376]	; (80005f0 <main+0x258>)
 8000478:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	instruction.max_vel = 1;
 800047c:	f04f 0200 	mov.w	r2, #0
 8000480:	4b5c      	ldr	r3, [pc, #368]	; (80005f4 <main+0x25c>)
 8000482:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	instruction.max_acc = 1;
 8000486:	f04f 0200 	mov.w	r2, #0
 800048a:	4b5a      	ldr	r3, [pc, #360]	; (80005f4 <main+0x25c>)
 800048c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	instruction.micro_step = 3;
 8000490:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000494:	f043 0303 	orr.w	r3, r3, #3
 8000498:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.srd_mode = 0;
 800049c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80004a0:	f36f 0382 	bfc	r3, #2, #1
 80004a4:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.action = 0xf;  // all
 80004a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80004ac:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80004b0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	instruction.dir = 0;  // fastest
 80004b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80004b8:	f36f 13c8 	bfc	r3, #7, #2
 80004bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	instruction.id = 0;
 80004c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80004c4:	f36f 0347 	bfc	r3, #1, #7
 80004c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	instruction.instrution_id = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	instruction.crc = crc16_dnp(&instruction, 30);
 80004d2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80004d6:	f04f 021e 	mov.w	r2, #30
 80004da:	f04f 0300 	mov.w	r3, #0
 80004de:	4608      	mov	r0, r1
 80004e0:	f7ff feba 	bl	8000258 <crc16_dnp>
 80004e4:	4603      	mov	r3, r0
 80004e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	while (1) {
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 80004ea:	4b40      	ldr	r3, [pc, #256]	; (80005ec <main+0x254>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	215c      	movs	r1, #92	; 0x5c
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 faa2 	bl	8000a3a <uart_ibuf_align>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d170      	bne.n	80005de <main+0x246>
		if (uart_ibuf_read(RX_data, &instruction, 32)) { continue; }
 80004fc:	4b3b      	ldr	r3, [pc, #236]	; (80005ec <main+0x254>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000504:	2220      	movs	r2, #32
 8000506:	4618      	mov	r0, r3
 8000508:	f000 fabe 	bl	8000a88 <uart_ibuf_read>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d167      	bne.n	80005e2 <main+0x24a>

		return_code = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]
		if (instruction.crc != crc16_dnp(&instruction, 30)) {
 8000516:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
 800051a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800051e:	f04f 021e 	mov.w	r2, #30
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	4608      	mov	r0, r1
 8000528:	f7ff fe96 	bl	8000258 <crc16_dnp>
 800052c:	4603      	mov	r3, r0
 800052e:	429c      	cmp	r4, r3
 8000530:	d00c      	beq.n	800054c <main+0x1b4>
			// TODO: error correction
			// if not fix-able \/
			return_code |= RETURN_CRC_ERROR;
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	b2db      	uxtb	r3, r3
 800053a:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart2, (uint8_t*)&return_code, 1, 10);
 800053c:	f107 010f 	add.w	r1, r7, #15
 8000540:	230a      	movs	r3, #10
 8000542:	2201      	movs	r2, #1
 8000544:	4828      	ldr	r0, [pc, #160]	; (80005e8 <main+0x250>)
 8000546:	f002 fbbe 	bl	8002cc6 <HAL_UART_Transmit>
			continue;  // do not execute instruction
 800054a:	e04b      	b.n	80005e4 <main+0x24c>
		// HAL_UART_Transmit(&huart2, (uint8_t*)&return_code, 1, 10);
		// continue;
		// if not valid ^
		// if fixed \/
		// return_code |= RETURN_ERROR_FIXED;
		return_code |= RETURN_OK;
 800054c:	7bfb      	ldrb	r3, [r7, #15]
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	b2db      	uxtb	r3, r3
 8000554:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit(&huart2, (uint8_t*)&return_code, 1, 10);
 8000556:	f107 010f 	add.w	r1, r7, #15
 800055a:	230a      	movs	r3, #10
 800055c:	2201      	movs	r2, #1
 800055e:	4822      	ldr	r0, [pc, #136]	; (80005e8 <main+0x250>)
 8000560:	f002 fbb1 	bl	8002cc6 <HAL_UART_Transmit>

		// TODO: test this
		// TODO: make messages more flexible for other motor drivers
		for (uint8_t i = 0; i < 32; i++) {  // fill queue
 8000564:	2300      	movs	r3, #0
 8000566:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800056a:	e01a      	b.n	80005a2 <main+0x20a>
			HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000572:	4821      	ldr	r0, [pc, #132]	; (80005f8 <main+0x260>)
 8000574:	f001 fae0 	bl	8001b38 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&instruction, (uint8_t*)&state, 32, 100);
 8000578:	f107 0210 	add.w	r2, r7, #16
 800057c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2320      	movs	r3, #32
 8000586:	481d      	ldr	r0, [pc, #116]	; (80005fc <main+0x264>)
 8000588:	f001 ffd1 	bl	800252e <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0x260>)
 8000594:	f001 fad0 	bl	8001b38 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 32; i++) {  // fill queue
 8000598:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800059c:	3301      	adds	r3, #1
 800059e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80005a2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80005a6:	2b1f      	cmp	r3, #31
 80005a8:	d9e0      	bls.n	800056c <main+0x1d4>
		}

		if (instruction.action & POLL) {
 80005aa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80005ae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f003 0308 	and.w	r3, r3, #8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d096      	beq.n	80004ea <main+0x152>
			return_code = SYNC_BYTE;
 80005bc:	235c      	movs	r3, #92	; 0x5c
 80005be:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Transmit(&huart2, (uint8_t*)&return_code, 1, 10);
 80005c0:	f107 010f 	add.w	r1, r7, #15
 80005c4:	230a      	movs	r3, #10
 80005c6:	2201      	movs	r2, #1
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <main+0x250>)
 80005ca:	f002 fb7c 	bl	8002cc6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*)&state, 32, 100);
 80005ce:	f107 0110 	add.w	r1, r7, #16
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	2220      	movs	r2, #32
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <main+0x250>)
 80005d8:	f002 fb75 	bl	8002cc6 <HAL_UART_Transmit>
 80005dc:	e785      	b.n	80004ea <main+0x152>
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 80005de:	bf00      	nop
 80005e0:	e783      	b.n	80004ea <main+0x152>
		if (uart_ibuf_read(RX_data, &instruction, 32)) { continue; }
 80005e2:	bf00      	nop
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 80005e4:	e781      	b.n	80004ea <main+0x152>
 80005e6:	bf00      	nop
 80005e8:	200000d8 	.word	0x200000d8
 80005ec:	20000078 	.word	0x20000078
 80005f0:	409f4000 	.word	0x409f4000
 80005f4:	3ff00000 	.word	0x3ff00000
 80005f8:	40020400 	.word	0x40020400
 80005fc:	2000007c 	.word	0x2000007c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fd6e 	bl	80040f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000674:	2364      	movs	r3, #100	; 0x64
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fa71 	bl	8001b6c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f81e 	bl	80006d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2103      	movs	r1, #3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fcd3 	bl	800205c <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 f808 	bl	80006d0 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <MX_SPI1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_SPI1_Init+0x64>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_SPI1_Init+0x64>)
 800072e:	f001 fe75 	bl	800241c <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000738:	f7ff ffca 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000007c 	.word	0x2000007c
 8000744:	40013000 	.word	0x40013000

08000748 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_SPI_MspInit+0x94>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d133      	bne.n	80007d2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 8000774:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <HAL_SPI_MspInit+0x98>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	23e0      	movs	r3, #224	; 0xe0
 80007a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b2:	2305      	movs	r3, #5
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <HAL_SPI_MspInit+0x9c>)
 80007be:	f001 f837 	bl	8001830 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2023      	movs	r0, #35	; 0x23
 80007c8:	f000 fbf9 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80007cc:	2023      	movs	r0, #35	; 0x23
 80007ce:	f000 fc12 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40013000 	.word	0x40013000
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 faa0 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <DMA1_Stream5_IRQHandler+0x10>)
 8000892:	f000 fd63 	bl	800135c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	2000011c 	.word	0x2000011c

080008a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <SPI1_IRQHandler+0x10>)
 80008a6:	f001 ffe5 	bl	8002874 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000007c 	.word	0x2000007c

080008b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USART2_IRQHandler+0x10>)
 80008ba:	f002 fac7 	bl	8002e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000d8 	.word	0x200000d8

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f003 fbf4 	bl	80040e4 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20020000 	.word	0x20020000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000d4 	.word	0x200000d4
 8000930:	200002c8 	.word	0x200002c8

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <new_uart_ibuf>:
#include <string.h>
#include "uart_buffer.h"



uart_ibuf* new_uart_ibuf(UART_HandleTypeDef* uart_handle, uint32_t size) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	uart_ibuf* handle = (uart_ibuf*)calloc(1, sizeof(uart_ibuf));
 8000962:	2114      	movs	r1, #20
 8000964:	2001      	movs	r0, #1
 8000966:	f003 fb9f 	bl	80040a8 <calloc>
 800096a:	4603      	mov	r3, r0
 800096c:	60fb      	str	r3, [r7, #12]
	handle->buffer = calloc(size, 1);  // array of size len initialized to 0
 800096e:	2101      	movs	r1, #1
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	f003 fb99 	bl	80040a8 <calloc>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	601a      	str	r2, [r3, #0]
	handle->uart_handle = uart_handle;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	605a      	str	r2, [r3, #4]
	handle->size = size;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	60da      	str	r2, [r3, #12]
	handle->read = size;  // dma starts writing from end
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	611a      	str	r2, [r3, #16]
	handle->end = &uart_handle->hdmarx->Instance->NDTR;  // dma index variable
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	1d1a      	adds	r2, r3, #4
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	609a      	str	r2, [r3, #8]
	HAL_UART_Receive_DMA(uart_handle, handle->buffer, size);  // start receiving data
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	b292      	uxth	r2, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f002 fa1f 	bl	8002dea <HAL_UART_Receive_DMA>
	return handle;
 80009ac:	68fb      	ldr	r3, [r7, #12]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <uart_ibuf_reset>:

void uart_ibuf_reset(uart_ibuf* handle) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	*handle->end = 1024;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c6:	601a      	str	r2, [r3, #0]
	handle->read = 1024;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ce:	611a      	str	r2, [r3, #16]
	memset(handle->buffer, 0, handle->size);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	461a      	mov	r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	f003 fb88 	bl	80040f0 <memset>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <uart_ibuf_increment>:

uint8_t uart_ibuf_increment(uart_ibuf* handle) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	691a      	ldr	r2, [r3, #16]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d904      	bls.n	8000a06 <uart_ibuf_increment+0x1e>
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ffda 	bl	80009b6 <uart_ibuf_reset>
 8000a02:	2301      	movs	r3, #1
 8000a04:	e015      	b.n	8000a32 <uart_ibuf_increment+0x4a>
	if (handle->read == (*handle->end)) { return 1; }  // error align byte not found
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	691a      	ldr	r2, [r3, #16]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d101      	bne.n	8000a18 <uart_ibuf_increment+0x30>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e00c      	b.n	8000a32 <uart_ibuf_increment+0x4a>
	handle->read = handle->read ? (handle->read - 1) : handle->size;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <uart_ibuf_increment+0x40>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	e001      	b.n	8000a2c <uart_ibuf_increment+0x44>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	6113      	str	r3, [r2, #16]
	return 0;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <uart_ibuf_align>:

uint8_t uart_ibuf_align(uart_ibuf* handle, uint8_t byte) {
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	70fb      	strb	r3, [r7, #3]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d90c      	bls.n	8000a6c <uart_ibuf_align+0x32>
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffaf 	bl	80009b6 <uart_ibuf_reset>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e011      	b.n	8000a80 <uart_ibuf_align+0x46>
	while (*(handle->buffer + handle->read) != byte) {
		if (uart_ibuf_increment(handle)) { return 1; }
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ffc3 	bl	80009e8 <uart_ibuf_increment>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <uart_ibuf_align+0x32>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e009      	b.n	8000a80 <uart_ibuf_align+0x46>
	while (*(handle->buffer + handle->read) != byte) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	78fa      	ldrb	r2, [r7, #3]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d1ee      	bne.n	8000a5c <uart_ibuf_align+0x22>
	};
	return 0;
 8000a7e:	2300      	movs	r3, #0
	//return uart_ibuf_increment(handle);  // this should return 0 because the last byte was 0xff
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <uart_ibuf_read>:

uint8_t uart_ibuf_read(uart_ibuf* handle, void* output, uint32_t size) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	691a      	ldr	r2, [r3, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d904      	bls.n	8000aaa <uart_ibuf_read+0x22>
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ff88 	bl	80009b6 <uart_ibuf_reset>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e058      	b.n	8000b5c <uart_ibuf_read+0xd4>
	if ((*handle->end) > handle->read && handle->read < size) {  // data is broken along the buffer limits
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d935      	bls.n	8000b24 <uart_ibuf_read+0x9c>
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d930      	bls.n	8000b24 <uart_ibuf_read+0x9c>
		if ((1024 - (*handle->end)) + handle->read < size) { return 1; }  // not enough data
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d901      	bls.n	8000adc <uart_ibuf_read+0x54>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e03f      	b.n	8000b5c <uart_ibuf_read+0xd4>
		uint32_t split_size = size - handle->read;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	617b      	str	r3, [r7, #20]
		if (handle->read) { memcpy(output + split_size, handle->buffer, handle->read); }  // only try memcpy if handle->read is a non zero value
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d009      	beq.n	8000b02 <uart_ibuf_read+0x7a>
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	18d0      	adds	r0, r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6819      	ldr	r1, [r3, #0]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	461a      	mov	r2, r3
 8000afe:	f003 fac5 	bl	800408c <memcpy>
		handle->read = (1024 - split_size);
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
		memcpy(output, handle->buffer + handle->read, split_size);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	4413      	add	r3, r2
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68b8      	ldr	r0, [r7, #8]
 8000b1c:	f003 fab6 	bl	800408c <memcpy>
		return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e01b      	b.n	8000b5c <uart_ibuf_read+0xd4>
	}
	if (handle->read - (*handle->end) < size) { return 1; }  // not enough data
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d901      	bls.n	8000b3a <uart_ibuf_read+0xb2>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e010      	b.n	8000b5c <uart_ibuf_read+0xd4>
	handle->read -= size;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	691a      	ldr	r2, [r3, #16]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	611a      	str	r2, [r3, #16]
	memcpy(output, handle->buffer + handle->read, size);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	691b      	ldr	r3, [r3, #16]
 8000b4e:	4413      	add	r3, r2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4619      	mov	r1, r3
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	f003 fa99 	bl	800408c <memcpy>
	return 0;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_USART2_UART_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f002 f846 	bl	8002c2c <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f7ff fd93 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	40004400 	.word	0x40004400

08000bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a39      	ldr	r2, [pc, #228]	; (8000cbc <HAL_UART_MspInit+0x104>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d16b      	bne.n	8000cb2 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a37      	ldr	r2, [pc, #220]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b35      	ldr	r3, [pc, #212]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a30      	ldr	r2, [pc, #192]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <HAL_UART_MspInit+0x108>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4825      	ldr	r0, [pc, #148]	; (8000cc4 <HAL_UART_MspInit+0x10c>)
 8000c2e:	f000 fdff 	bl	8001830 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c34:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_UART_MspInit+0x114>)
 8000c36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c40:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c68:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c76:	2203      	movs	r2, #3
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c86:	4810      	ldr	r0, [pc, #64]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c88:	f000 f9d0 	bl	800102c <HAL_DMA_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000c92:	f7ff fd1d 	bl	80006d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_UART_MspInit+0x110>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2026      	movs	r0, #38	; 0x26
 8000ca8:	f000 f989 	bl	8000fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cac:	2026      	movs	r0, #38	; 0x26
 8000cae:	f000 f9a2 	bl	8000ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	40026088 	.word	0x40026088

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff fe1b 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f003 f9a1 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fb49 	bl	8000398 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d14:	08004778 	.word	0x08004778
  ldr r2, =_sbss
 8000d18:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d1c:	200002c8 	.word	0x200002c8

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f92b 	bl	8000fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fd46 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f943 	bl	8001012 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da4:	f000 f90b 	bl	8000fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	2000017c 	.word	0x2000017c

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000017c 	.word	0x2000017c

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	db0b      	blt.n	8000e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 021f 	and.w	r2, r3, #31
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <__NVIC_EnableIRQ+0x38>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	095b      	lsrs	r3, r3, #5
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f74:	d301      	bcc.n	8000f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00f      	b.n	8000f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <SysTick_Config+0x40>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f82:	210f      	movs	r1, #15
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f88:	f7ff ff8e 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <SysTick_Config+0x40>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SysTick_Config+0x40>)
 8000f94:	2207      	movs	r2, #7
 8000f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	e000e010 	.word	0xe000e010

08000fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff29 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b086      	sub	sp, #24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd0:	f7ff ff3e 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68b9      	ldr	r1, [r7, #8]
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	f7ff ff8e 	bl	8000efc <NVIC_EncodePriority>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff5d 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff31 	bl	8000e6c <__NVIC_EnableIRQ>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ffa2 	bl	8000f64 <SysTick_Config>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff feda 	bl	8000df0 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e099      	b.n	800117c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001068:	e00f      	b.n	800108a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106a:	f7ff fec1 	bl	8000df0 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b05      	cmp	r3, #5
 8001076:	d908      	bls.n	800108a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2220      	movs	r2, #32
 800107c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e078      	b.n	800117c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e8      	bne.n	800106a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <HAL_DMA_Init+0x158>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4313      	orrs	r3, r2
 80010da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d107      	bne.n	80010f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4313      	orrs	r3, r2
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f023 0307 	bic.w	r3, r3, #7
 800110a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	4313      	orrs	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	2b04      	cmp	r3, #4
 800111c:	d117      	bne.n	800114e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4313      	orrs	r3, r2
 8001126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00e      	beq.n	800114e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fb01 	bl	8001738 <DMA_CheckFifoParam>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2240      	movs	r2, #64	; 0x40
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800114a:	2301      	movs	r3, #1
 800114c:	e016      	b.n	800117c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 fab8 	bl	80016cc <DMA_CalcBaseAndBitshift>
 800115c:	4603      	mov	r3, r0
 800115e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	223f      	movs	r2, #63	; 0x3f
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f010803f 	.word	0xf010803f

08001188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d101      	bne.n	80011ae <HAL_DMA_Start_IT+0x26>
 80011aa:	2302      	movs	r3, #2
 80011ac:	e040      	b.n	8001230 <HAL_DMA_Start_IT+0xa8>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d12f      	bne.n	8001222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2202      	movs	r2, #2
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 fa4a 	bl	8001670 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0216 	orr.w	r2, r2, #22
 80011f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0208 	orr.w	r2, r2, #8
 800120e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0201 	orr.w	r2, r2, #1
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e005      	b.n	800122e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800122a:	2302      	movs	r3, #2
 800122c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800122e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001246:	f7ff fdd3 	bl	8000df0 <HAL_GetTick>
 800124a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d008      	beq.n	800126a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e052      	b.n	8001310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0216 	bic.w	r2, r2, #22
 8001278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <HAL_DMA_Abort+0x62>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001296:	2b00      	cmp	r3, #0
 8001298:	d007      	beq.n	80012aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0208 	bic.w	r2, r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0201 	bic.w	r2, r2, #1
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ba:	e013      	b.n	80012e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012bc:	f7ff fd98 	bl	8000df0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d90c      	bls.n	80012e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e015      	b.n	8001310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1e4      	bne.n	80012bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	223f      	movs	r2, #63	; 0x3f
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d004      	beq.n	8001336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00c      	b.n	8001350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2205      	movs	r2, #5
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001368:	4b8e      	ldr	r3, [pc, #568]	; (80015a4 <HAL_DMA_IRQHandler+0x248>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a8e      	ldr	r2, [pc, #568]	; (80015a8 <HAL_DMA_IRQHandler+0x24c>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0a9b      	lsrs	r3, r3, #10
 8001374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	2208      	movs	r2, #8
 8001388:	409a      	lsls	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01a      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0304 	and.w	r3, r3, #4
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0204 	bic.w	r2, r2, #4
 80013ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2208      	movs	r2, #8
 80013b6:	409a      	lsls	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c0:	f043 0201 	orr.w	r2, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2201      	movs	r2, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d012      	beq.n	80013fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f043 0202 	orr.w	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	2204      	movs	r2, #4
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d012      	beq.n	8001434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001420:	2204      	movs	r2, #4
 8001422:	409a      	lsls	r2, r3
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142c:	f043 0204 	orr.w	r2, r3, #4
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	2210      	movs	r2, #16
 800143a:	409a      	lsls	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d043      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d03c      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2210      	movs	r2, #16
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d018      	beq.n	800149e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d108      	bne.n	800148c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d024      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	4798      	blx	r3
 800148a:	e01f      	b.n	80014cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001490:	2b00      	cmp	r3, #0
 8001492:	d01b      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
 800149c:	e016      	b.n	80014cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0208 	bic.w	r2, r2, #8
 80014ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d0:	2220      	movs	r2, #32
 80014d2:	409a      	lsls	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 808f 	beq.w	80015fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8087 	beq.w	80015fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f2:	2220      	movs	r2, #32
 80014f4:	409a      	lsls	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b05      	cmp	r3, #5
 8001504:	d136      	bne.n	8001574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0216 	bic.w	r2, r2, #22
 8001514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b00      	cmp	r3, #0
 800152c:	d103      	bne.n	8001536 <HAL_DMA_IRQHandler+0x1da>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0208 	bic.w	r2, r2, #8
 8001544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154a:	223f      	movs	r2, #63	; 0x3f
 800154c:	409a      	lsls	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001566:	2b00      	cmp	r3, #0
 8001568:	d07e      	beq.n	8001668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	4798      	blx	r3
        }
        return;
 8001572:	e079      	b.n	8001668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01d      	beq.n	80015be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10d      	bne.n	80015ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	2b00      	cmp	r3, #0
 8001596:	d031      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4798      	blx	r3
 80015a0:	e02c      	b.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d023      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
 80015bc:	e01e      	b.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0210 	bic.w	r2, r2, #16
 80015da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	2b00      	cmp	r3, #0
 8001602:	d032      	beq.n	800166a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d022      	beq.n	8001656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2205      	movs	r2, #5
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3301      	adds	r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	429a      	cmp	r2, r3
 8001632:	d307      	bcc.n	8001644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f2      	bne.n	8001628 <HAL_DMA_IRQHandler+0x2cc>
 8001642:	e000      	b.n	8001646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
 8001666:	e000      	b.n	800166a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001668:	bf00      	nop
    }
  }
}
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800168c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b40      	cmp	r3, #64	; 0x40
 800169c:	d108      	bne.n	80016b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016ae:	e007      	b.n	80016c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3b10      	subs	r3, #16
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <DMA_CalcBaseAndBitshift+0x64>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <DMA_CalcBaseAndBitshift+0x68>)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d909      	bls.n	800170e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	1d1a      	adds	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	; 0x58
 800170c:	e007      	b.n	800171e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	aaaaaaab 	.word	0xaaaaaaab
 8001734:	08004760 	.word	0x08004760

08001738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d11f      	bne.n	8001792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d856      	bhi.n	8001806 <DMA_CheckFifoParam+0xce>
 8001758:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <DMA_CheckFifoParam+0x28>)
 800175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175e:	bf00      	nop
 8001760:	08001771 	.word	0x08001771
 8001764:	08001783 	.word	0x08001783
 8001768:	08001771 	.word	0x08001771
 800176c:	08001807 	.word	0x08001807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d046      	beq.n	800180a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001780:	e043      	b.n	800180a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800178a:	d140      	bne.n	800180e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001790:	e03d      	b.n	800180e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179a:	d121      	bne.n	80017e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d837      	bhi.n	8001812 <DMA_CheckFifoParam+0xda>
 80017a2:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <DMA_CheckFifoParam+0x70>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017bf 	.word	0x080017bf
 80017b0:	080017b9 	.word	0x080017b9
 80017b4:	080017d1 	.word	0x080017d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
      break;
 80017bc:	e030      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d025      	beq.n	8001816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ce:	e022      	b.n	8001816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017d8:	d11f      	bne.n	800181a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017de:	e01c      	b.n	800181a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d903      	bls.n	80017ee <DMA_CheckFifoParam+0xb6>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d003      	beq.n	80017f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017ec:	e018      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
      break;
 80017f2:	e015      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00e      	beq.n	800181e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      break;
 8001804:	e00b      	b.n	800181e <DMA_CheckFifoParam+0xe6>
      break;
 8001806:	bf00      	nop
 8001808:	e00a      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800180a:	bf00      	nop
 800180c:	e008      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800180e:	bf00      	nop
 8001810:	e006      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e004      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 8001816:	bf00      	nop
 8001818:	e002      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;   
 800181a:	bf00      	nop
 800181c:	e000      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800181e:	bf00      	nop
    }
  } 
  
  return status; 
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e159      	b.n	8001b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8148 	bne.w	8001afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d005      	beq.n	8001882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	2b02      	cmp	r3, #2
 8001880:	d130      	bne.n	80018e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80a2 	beq.w	8001afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a56      	ldr	r2, [pc, #344]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <HAL_GPIO_Init+0x2e8>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2f0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x202>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a48      	ldr	r2, [pc, #288]	; (8001b24 <HAL_GPIO_Init+0x2f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x1fe>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <HAL_GPIO_Init+0x2f8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x1fa>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a46      	ldr	r2, [pc, #280]	; (8001b2c <HAL_GPIO_Init+0x2fc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x1f6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a45      	ldr	r2, [pc, #276]	; (8001b30 <HAL_GPIO_Init+0x300>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x1f2>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e008      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e006      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a26:	2303      	movs	r3, #3
 8001a28:	e004      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <HAL_GPIO_Init+0x204>
 8001a32:	2300      	movs	r3, #0
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f002 0203 	and.w	r2, r2, #3
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	4093      	lsls	r3, r2
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a44:	4935      	ldr	r1, [pc, #212]	; (8001b1c <HAL_GPIO_Init+0x2ec>)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa0:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aca:	4a1a      	ldr	r2, [pc, #104]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d003      	beq.n	8001af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_GPIO_Init+0x304>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3301      	adds	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	f67f aea2 	bls.w	800184c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3724      	adds	r7, #36	; 0x24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40013800 	.word	0x40013800
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40013c00 	.word	0x40013c00

08001b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
 8001b44:	4613      	mov	r3, r2
 8001b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	887a      	ldrh	r2, [r7, #2]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b54:	e003      	b.n	8001b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	041a      	lsls	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e267      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b8a:	4b88      	ldr	r3, [pc, #544]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d00c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b96:	4b85      	ldr	r3, [pc, #532]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d112      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4b82      	ldr	r3, [pc, #520]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bae:	d10b      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	4b7e      	ldr	r3, [pc, #504]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d05b      	beq.n	8001c74 <HAL_RCC_OscConfig+0x108>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d157      	bne.n	8001c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e242      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x74>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e01d      	b.n	8001c1c <HAL_RCC_OscConfig+0xb0>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x98>
 8001bea:	4b70      	ldr	r3, [pc, #448]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6f      	ldr	r2, [pc, #444]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6c      	ldr	r2, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0xb0>
 8001c04:	4b69      	ldr	r3, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a68      	ldr	r2, [pc, #416]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b66      	ldr	r3, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff f8e4 	bl	8000df0 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff f8e0 	bl	8000df0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e207      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f0      	beq.n	8001c2c <HAL_RCC_OscConfig+0xc0>
 8001c4a:	e014      	b.n	8001c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f8d0 	bl	8000df0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff f8cc 	bl	8000df0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	; 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1f3      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	4b51      	ldr	r3, [pc, #324]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0xe8>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c82:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8e:	4b47      	ldr	r3, [pc, #284]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d11c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d116      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_RCC_OscConfig+0x152>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e1c7      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4937      	ldr	r1, [pc, #220]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd2:	e03a      	b.n	8001d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cdc:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x244>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f885 	bl	8000df0 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cea:	f7ff f881 	bl	8000df0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1a8      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4925      	ldr	r1, [pc, #148]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
 8001d1c:	e015      	b.n	8001d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_OscConfig+0x244>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f864 	bl	8000df0 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f860 	bl	8000df0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e187      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d036      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x248>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff f844 	bl	8000df0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff f840 	bl	8000df0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e167      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_OscConfig+0x240>)
 8001d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x200>
 8001d8a:	e01b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x248>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f82d 	bl	8000df0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	e00e      	b.n	8001db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d9a:	f7ff f829 	bl	8000df0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d907      	bls.n	8001db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e150      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
 8001dac:	40023800 	.word	0x40023800
 8001db0:	42470000 	.word	0x42470000
 8001db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b88      	ldr	r3, [pc, #544]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ea      	bne.n	8001d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8097 	beq.w	8001f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a7c      	ldr	r2, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b7a      	ldr	r3, [pc, #488]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b77      	ldr	r3, [pc, #476]	; (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0e:	4b74      	ldr	r3, [pc, #464]	; (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a73      	ldr	r2, [pc, #460]	; (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7fe ffe9 	bl	8000df0 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7fe ffe5 	bl	8000df0 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e10c      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b6a      	ldr	r3, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x474>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d106      	bne.n	8001e56 <HAL_RCC_OscConfig+0x2ea>
 8001e48:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	e01c      	b.n	8001e90 <HAL_RCC_OscConfig+0x324>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x30c>
 8001e5e:	4b5f      	ldr	r3, [pc, #380]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	4a5e      	ldr	r2, [pc, #376]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6a:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0x324>
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	6713      	str	r3, [r2, #112]	; 0x70
 8001e84:	4b55      	ldr	r3, [pc, #340]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e88:	4a54      	ldr	r2, [pc, #336]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001e8a:	f023 0304 	bic.w	r3, r3, #4
 8001e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d015      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7fe ffaa 	bl	8000df0 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e00a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7fe ffa6 	bl	8000df0 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0cb      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec4:	f7fe ff94 	bl	8000df0 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ecc:	f7fe ff90 	bl	8000df0 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e0b5      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ee      	bne.n	8001ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eee:	7dfb      	ldrb	r3, [r7, #23]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 80a1 	beq.w	800204c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f0a:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d05c      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d141      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff64 	bl	8000df0 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff60 	bl	8000df0 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e087      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	041b      	lsls	r3, r3, #16
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	491b      	ldr	r1, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7fe ff39 	bl	8000df0 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe ff35 	bl	8000df0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e05c      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x416>
 8001fa0:	e054      	b.n	800204c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_OscConfig+0x478>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ff22 	bl	8000df0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe ff1e 	bl	8000df0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e045      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_OscConfig+0x470>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x444>
 8001fce:	e03d      	b.n	800204c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e038      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_RCC_OscConfig+0x4ec>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d028      	beq.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d121      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d11a      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002018:	4013      	ands	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	3b01      	subs	r3, #1
 8002032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0cc      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b68      	ldr	r3, [pc, #416]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d90c      	bls.n	8002098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d044      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d119      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d003      	beq.n	800211a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e06f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e067      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4934      	ldr	r1, [pc, #208]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe fe50 	bl	8000df0 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fe4c 	bl	8000df0 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e04f      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d20c      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f821 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fdb0 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00
 8002218:	40023800 	.word	0x40023800
 800221c:	08004748 	.word	0x08004748
 8002220:	20000000 	.word	0x20000000
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800222c:	b090      	sub	sp, #64	; 0x40
 800222e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
 8002234:	2300      	movs	r3, #0
 8002236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d00d      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x40>
 800224c:	2b08      	cmp	r3, #8
 800224e:	f200 80a1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x16c>
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x34>
 8002256:	2b04      	cmp	r3, #4
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x3a>
 800225a:	e09b      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_GetSysClockFreq+0x184>)
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002260:	e09b      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002264:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002266:	e098      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002272:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d028      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800227e:	4b4a      	ldr	r3, [pc, #296]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	2200      	movs	r2, #0
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	627a      	str	r2, [r7, #36]	; 0x24
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002290:	2100      	movs	r1, #0
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002294:	fb03 f201 	mul.w	r2, r3, r1
 8002298:	2300      	movs	r3, #0
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	4413      	add	r3, r2
 80022a0:	4a43      	ldr	r2, [pc, #268]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80022a2:	fba0 1202 	umull	r1, r2, r0, r2
 80022a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022a8:	460a      	mov	r2, r1
 80022aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80022ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ae:	4413      	add	r3, r2
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b4:	2200      	movs	r2, #0
 80022b6:	61bb      	str	r3, [r7, #24]
 80022b8:	61fa      	str	r2, [r7, #28]
 80022ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80022c2:	f7fd ff69 	bl	8000198 <__aeabi_uldivmod>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4613      	mov	r3, r2
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ce:	e053      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	617a      	str	r2, [r7, #20]
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022e2:	f04f 0b00 	mov.w	fp, #0
 80022e6:	4652      	mov	r2, sl
 80022e8:	465b      	mov	r3, fp
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	0159      	lsls	r1, r3, #5
 80022f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f8:	0150      	lsls	r0, r2, #5
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002302:	eb63 090b 	sbc.w	r9, r3, fp
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800231a:	ebb2 0408 	subs.w	r4, r2, r8
 800231e:	eb63 0509 	sbc.w	r5, r3, r9
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	00eb      	lsls	r3, r5, #3
 800232c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002330:	00e2      	lsls	r2, r4, #3
 8002332:	4614      	mov	r4, r2
 8002334:	461d      	mov	r5, r3
 8002336:	eb14 030a 	adds.w	r3, r4, sl
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	eb45 030b 	adc.w	r3, r5, fp
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002362:	2200      	movs	r2, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800236c:	f7fd ff14 	bl	8000198 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800239c:	4618      	mov	r0, r3
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	017d7840 	.word	0x017d7840

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08004758 	.word	0x08004758

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	08004758 	.word	0x08004758

0800241c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07b      	b.n	8002526 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d108      	bne.n	8002448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243e:	d009      	beq.n	8002454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
 8002446:	e005      	b.n	8002454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f96a 	bl	8000748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	ea42 0103 	orr.w	r1, r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	0c1b      	lsrs	r3, r3, #16
 80024f2:	f003 0104 	and.w	r1, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f003 0210 	and.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08c      	sub	sp, #48	; 0x30
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800253c:	2301      	movs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x26>
 8002550:	2302      	movs	r3, #2
 8002552:	e18a      	b.n	800286a <HAL_SPI_TransmitReceive+0x33c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255c:	f7fe fc48 	bl	8000df0 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800257a:	2b01      	cmp	r3, #1
 800257c:	d00f      	beq.n	800259e <HAL_SPI_TransmitReceive+0x70>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002584:	d107      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <HAL_SPI_TransmitReceive+0x68>
 800258e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002596:	2302      	movs	r3, #2
 8002598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800259c:	e15b      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x82>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_SPI_TransmitReceive+0x82>
 80025aa:	887b      	ldrh	r3, [r7, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025b6:	e14e      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d003      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2205      	movs	r2, #5
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	887a      	ldrh	r2, [r7, #2]
 80025ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b40      	cmp	r3, #64	; 0x40
 800260e:	d007      	beq.n	8002620 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002628:	d178      	bne.n	800271c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x10a>
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d166      	bne.n	8002706 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	1c9a      	adds	r2, r3, #2
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265c:	e053      	b.n	8002706 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11b      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x176>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_SPI_TransmitReceive+0x176>
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	2b01      	cmp	r3, #1
 800267a:	d113      	bne.n	80026a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d119      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x1b8>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d014      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	b292      	uxth	r2, r2
 80026c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026e2:	2301      	movs	r3, #1
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026e6:	f7fe fb83 	bl	8000df0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d807      	bhi.n	8002706 <HAL_SPI_TransmitReceive+0x1d8>
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fc:	d003      	beq.n	8002706 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002704:	e0a7      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1a6      	bne.n	800265e <HAL_SPI_TransmitReceive+0x130>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1a1      	bne.n	800265e <HAL_SPI_TransmitReceive+0x130>
 800271a:	e07c      	b.n	8002816 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SPI_TransmitReceive+0x1fc>
 8002724:	8b7b      	ldrh	r3, [r7, #26]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d16b      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002750:	e057      	b.n	8002802 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d11c      	bne.n	800279a <HAL_SPI_TransmitReceive+0x26c>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d017      	beq.n	800279a <HAL_SPI_TransmitReceive+0x26c>
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d114      	bne.n	800279a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	7812      	ldrb	r2, [r2, #0]
 800277c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278c:	b29b      	uxth	r3, r3
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d119      	bne.n	80027dc <HAL_SPI_TransmitReceive+0x2ae>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d014      	beq.n	80027dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d8:	2301      	movs	r3, #1
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027dc:	f7fe fb08 	bl	8000df0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d803      	bhi.n	80027f4 <HAL_SPI_TransmitReceive+0x2c6>
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f2:	d102      	bne.n	80027fa <HAL_SPI_TransmitReceive+0x2cc>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002800:	e029      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1a2      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x224>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d19d      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9c4 	bl	8002ba8 <SPI_EndRxTxTransaction>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002832:	e010      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10b      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	e000      	b.n	8002856 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002854:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	; 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10e      	bne.n	80028b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	4798      	blx	r3
    return;
 80028b2:	e0ce      	b.n	8002a52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HAL_SPI_IRQHandler+0x5e>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
    return;
 80028d0:	e0bf      	b.n	8002a52 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <HAL_SPI_IRQHandler+0x7e>
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b0 	beq.w	8002a52 <HAL_SPI_IRQHandler+0x1de>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80aa 	beq.w	8002a52 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b03      	cmp	r3, #3
 8002912:	d011      	beq.n	8002938 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	e00b      	b.n	8002950 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]
        return;
 800294e:	e080      	b.n	8002a52 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f003 0320 	and.w	r3, r3, #32
 8002956:	2b00      	cmp	r3, #0
 8002958:	d014      	beq.n	8002984 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0208 	orr.w	r2, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d04f      	beq.n	8002a50 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_SPI_IRQHandler+0x168>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d034      	beq.n	8002a46 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0203 	bic.w	r2, r2, #3
 80029ea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d011      	beq.n	8002a18 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_SPI_IRQHandler+0x1e4>)
 80029fa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe fc89 	bl	8001318 <HAL_DMA_Abort_IT>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <HAL_SPI_IRQHandler+0x1e4>)
 8002a26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fc73 	bl	8001318 <HAL_DMA_Abort_IT>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002a44:	e003      	b.n	8002a4e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f808 	bl	8002a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a4c:	e000      	b.n	8002a50 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a4e:	bf00      	nop
    return;
 8002a50:	bf00      	nop
  }
}
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	08002a71 	.word	0x08002a71

08002a5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff ffe6 	bl	8002a5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002aa8:	f7fe f9a2 	bl	8000df0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ab8:	f7fe f99a 	bl	8000df0 <HAL_GetTick>
 8002abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002abe:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	015b      	lsls	r3, r3, #5
 8002ac4:	0d1b      	lsrs	r3, r3, #20
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ace:	e054      	b.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad6:	d050      	beq.n	8002b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ad8:	f7fe f98a 	bl	8000df0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d902      	bls.n	8002aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d13d      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b06:	d111      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b10:	d004      	beq.n	8002b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d107      	bne.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	d10f      	bne.n	8002b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e017      	b.n	8002b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4013      	ands	r3, r2
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	bf0c      	ite	eq
 8002b8a:	2301      	moveq	r3, #1
 8002b8c:	2300      	movne	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d19b      	bne.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000000 	.word	0x20000000

08002ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <SPI_EndRxTxTransaction+0x7c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <SPI_EndRxTxTransaction+0x80>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0d5b      	lsrs	r3, r3, #21
 8002bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd2:	d112      	bne.n	8002bfa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff ff5a 	bl	8002a98 <SPI_WaitFlagStateUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d016      	beq.n	8002c18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e00f      	b.n	8002c1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b80      	cmp	r3, #128	; 0x80
 8002c12:	d0f2      	beq.n	8002bfa <SPI_EndRxTxTransaction+0x52>
 8002c14:	e000      	b.n	8002c18 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c16:	bf00      	nop
  }

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000
 8002c28:	165e9f81 	.word	0x165e9f81

08002c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e03f      	b.n	8002cbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ffb0 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 ff73 	bl	8003b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08a      	sub	sp, #40	; 0x28
 8002cca:	af02      	add	r7, sp, #8
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d17c      	bne.n	8002de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_UART_Transmit+0x2c>
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e075      	b.n	8002de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_UART_Transmit+0x3e>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e06e      	b.n	8002de2 <HAL_UART_Transmit+0x11c>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1a:	f7fe f869 	bl	8000df0 <HAL_GetTick>
 8002d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	88fa      	ldrh	r2, [r7, #6]
 8002d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	88fa      	ldrh	r2, [r7, #6]
 8002d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d34:	d108      	bne.n	8002d48 <HAL_UART_Transmit+0x82>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d104      	bne.n	8002d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	e003      	b.n	8002d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d58:	e02a      	b.n	8002db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2180      	movs	r1, #128	; 0x80
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fc2b 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e036      	b.n	8002de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1cf      	bne.n	8002d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2140      	movs	r1, #64	; 0x40
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f000 fbfb 	bl	80035c0 <UART_WaitOnFlagUntilTimeout>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e006      	b.n	8002de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	4613      	mov	r3, r2
 8002df6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d11d      	bne.n	8002e40 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Receive_DMA+0x26>
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e016      	b.n	8002e42 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Receive_DMA+0x38>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e00f      	b.n	8002e42 <HAL_UART_Receive_DMA+0x58>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fc30 	bl	800369c <UART_Start_Receive_DMA>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	e000      	b.n	8002e42 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b0ba      	sub	sp, #232	; 0xe8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d009      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x66>
 8002e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 fd9b 	bl	80039e6 <UART_Receive_IT>
      return;
 8002eb0:	e256      	b.n	8003360 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80de 	beq.w	8003078 <HAL_UART_IRQHandler+0x22c>
 8002ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80d1 	beq.w	8003078 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_UART_IRQHandler+0xae>
 8002ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0xd2>
 8002f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0xf6>
 8002f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0204 	orr.w	r2, r3, #4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d011      	beq.n	8002f72 <HAL_UART_IRQHandler+0x126>
 8002f4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0208 	orr.w	r2, r3, #8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 81ed 	beq.w	8003356 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_UART_IRQHandler+0x14e>
 8002f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f8c:	f003 0320 	and.w	r3, r3, #32
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fd26 	bl	80039e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x17a>
 8002fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d04f      	beq.n	8003066 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fc2e 	bl	8003828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b40      	cmp	r3, #64	; 0x40
 8002fd8:	d141      	bne.n	800305e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3314      	adds	r3, #20
 8002fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3314      	adds	r3, #20
 8003002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800300a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800301e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1d9      	bne.n	8002fda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d013      	beq.n	8003056 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	4a7d      	ldr	r2, [pc, #500]	; (8003228 <HAL_UART_IRQHandler+0x3dc>)
 8003034:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe f96c 	bl	8001318 <HAL_DMA_Abort_IT>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003050:	4610      	mov	r0, r2
 8003052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e00e      	b.n	8003074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9a4 	bl	80033a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	e00a      	b.n	8003074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9a0 	bl	80033a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	e006      	b.n	8003074 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f99c 	bl	80033a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003072:	e170      	b.n	8003356 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	bf00      	nop
    return;
 8003076:	e16e      	b.n	8003356 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 814a 	bne.w	8003316 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 8143 	beq.w	8003316 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 813c 	beq.w	8003316 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800309e:	2300      	movs	r3, #0
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	f040 80b4 	bne.w	800322c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8140 	beq.w	800335a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030e2:	429a      	cmp	r2, r3
 80030e4:	f080 8139 	bcs.w	800335a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fa:	f000 8088 	beq.w	800320e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800310c:	e853 3f00 	ldrex	r3, [r3]
 8003110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800312a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800312e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800313a:	e841 2300 	strex	r3, r2, [r1]
 800313e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1d9      	bne.n	80030fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3314      	adds	r3, #20
 8003150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800315a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800316e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003172:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e1      	bne.n	800314a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3314      	adds	r3, #20
 800318c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3314      	adds	r3, #20
 80031a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e3      	bne.n	8003186 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	330c      	adds	r3, #12
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d6:	e853 3f00 	ldrex	r3, [r3]
 80031da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031de:	f023 0310 	bic.w	r3, r3, #16
 80031e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031f8:	e841 2300 	strex	r3, r2, [r1]
 80031fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e3      	bne.n	80031cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe f815 	bl	8001238 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003216:	b29b      	uxth	r3, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	b29b      	uxth	r3, r3
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f8ca 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003224:	e099      	b.n	800335a <HAL_UART_IRQHandler+0x50e>
 8003226:	bf00      	nop
 8003228:	080038ef 	.word	0x080038ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003234:	b29b      	uxth	r3, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 808b 	beq.w	800335e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8086 	beq.w	800335e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003264:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003268:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	330c      	adds	r3, #12
 8003272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003276:	647a      	str	r2, [r7, #68]	; 0x44
 8003278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800327c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800327e:	e841 2300 	strex	r3, r2, [r1]
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1e3      	bne.n	8003252 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	623b      	str	r3, [r7, #32]
   return(result);
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3314      	adds	r3, #20
 80032aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032ae:	633a      	str	r2, [r7, #48]	; 0x30
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e3      	bne.n	800328a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	e853 3f00 	ldrex	r3, [r3]
 80032de:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0310 	bic.w	r3, r3, #16
 80032e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	330c      	adds	r3, #12
 80032f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032f4:	61fa      	str	r2, [r7, #28]
 80032f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	617b      	str	r3, [r7, #20]
   return(result);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e3      	bne.n	80032d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f852 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003314:	e023      	b.n	800335e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0x4ea>
 8003322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 faf1 	bl	8003916 <UART_Transmit_IT>
    return;
 8003334:	e014      	b.n	8003360 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_UART_IRQHandler+0x514>
 8003342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fb31 	bl	80039b6 <UART_EndTransmit_IT>
    return;
 8003354:	e004      	b.n	8003360 <HAL_UART_IRQHandler+0x514>
    return;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <HAL_UART_IRQHandler+0x514>
      return;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_UART_IRQHandler+0x514>
      return;
 800335e:	bf00      	nop
  }
}
 8003360:	37e8      	adds	r7, #232	; 0xe8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop

08003368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b09c      	sub	sp, #112	; 0x70
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d172      	bne.n	80034d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	2200      	movs	r2, #0
 80033f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	330c      	adds	r3, #12
 80033f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003408:	66bb      	str	r3, [r7, #104]	; 0x68
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003412:	65ba      	str	r2, [r7, #88]	; 0x58
 8003414:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e5      	bne.n	80033f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003446:	647a      	str	r2, [r7, #68]	; 0x44
 8003448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e5      	bne.n	8003426 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3314      	adds	r3, #20
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	623b      	str	r3, [r7, #32]
   return(result);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003470:	663b      	str	r3, [r7, #96]	; 0x60
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3314      	adds	r3, #20
 8003478:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800347a:	633a      	str	r2, [r7, #48]	; 0x30
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	2b01      	cmp	r3, #1
 800349c:	d119      	bne.n	80034d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f023 0310 	bic.w	r3, r3, #16
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034be:	61fa      	str	r2, [r7, #28]
 80034c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	69b9      	ldr	r1, [r7, #24]
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	617b      	str	r3, [r7, #20]
   return(result);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e5      	bne.n	800349e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d106      	bne.n	80034e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034e2:	f7ff ff69 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034e6:	e002      	b.n	80034ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034ea:	f7ff ff47 	bl	800337c <HAL_UART_RxCpltCallback>
}
 80034ee:	bf00      	nop
 80034f0:	3770      	adds	r7, #112	; 0x70
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	d108      	bne.n	800351e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003510:	085b      	lsrs	r3, r3, #1
 8003512:	b29b      	uxth	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff ff4e 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800351c:	e002      	b.n	8003524 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7ff ff36 	bl	8003390 <HAL_UART_RxHalfCpltCallback>
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b21      	cmp	r3, #33	; 0x21
 800355e:	d108      	bne.n	8003572 <UART_DMAError+0x46>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2200      	movs	r2, #0
 800356a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800356c:	68b8      	ldr	r0, [r7, #8]
 800356e:	f000 f933 	bl	80037d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	bf0c      	ite	eq
 8003580:	2301      	moveq	r3, #1
 8003582:	2300      	movne	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b22      	cmp	r3, #34	; 0x22
 8003592:	d108      	bne.n	80035a6 <UART_DMAError+0x7a>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035a0:	68b8      	ldr	r0, [r7, #8]
 80035a2:	f000 f941 	bl	8003828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f043 0210 	orr.w	r2, r3, #16
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b2:	68b8      	ldr	r0, [r7, #8]
 80035b4:	f7ff fef6 	bl	80033a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b090      	sub	sp, #64	; 0x40
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	4613      	mov	r3, r2
 80035ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d0:	e050      	b.n	8003674 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035d8:	d04c      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e0:	f7fd fc06 	bl	8000df0 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d241      	bcs.n	8003674 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	330c      	adds	r3, #12
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	e853 3f00 	ldrex	r3, [r3]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003610:	637a      	str	r2, [r7, #52]	; 0x34
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003618:	e841 2300 	strex	r3, r2, [r1]
 800361c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1e5      	bne.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3314      	adds	r3, #20
 800362a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	613b      	str	r3, [r7, #16]
   return(result);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3314      	adds	r3, #20
 8003642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003644:	623a      	str	r2, [r7, #32]
 8003646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69f9      	ldr	r1, [r7, #28]
 800364a:	6a3a      	ldr	r2, [r7, #32]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	61bb      	str	r3, [r7, #24]
   return(result);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e00f      	b.n	8003694 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	429a      	cmp	r2, r3
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	461a      	mov	r2, r3
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	429a      	cmp	r2, r3
 8003690:	d09f      	beq.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3740      	adds	r7, #64	; 0x40
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b098      	sub	sp, #96	; 0x60
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2222      	movs	r2, #34	; 0x22
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	4a40      	ldr	r2, [pc, #256]	; (80037cc <UART_Start_Receive_DMA+0x130>)
 80036ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	4a3f      	ldr	r2, [pc, #252]	; (80037d0 <UART_Start_Receive_DMA+0x134>)
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <UART_Start_Receive_DMA+0x138>)
 80036da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	2200      	movs	r2, #0
 80036e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3304      	adds	r3, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	f7fd fd44 	bl	8001188 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d019      	beq.n	800375a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003746:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003748:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800374c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	657b      	str	r3, [r7, #84]	; 0x54
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800377a:	63ba      	str	r2, [r7, #56]	; 0x38
 800377c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	617b      	str	r3, [r7, #20]
   return(result);
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a4:	653b      	str	r3, [r7, #80]	; 0x50
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80037ae:	627a      	str	r2, [r7, #36]	; 0x24
 80037b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6a39      	ldr	r1, [r7, #32]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3760      	adds	r7, #96	; 0x60
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	080033d1 	.word	0x080033d1
 80037d0:	080034f7 	.word	0x080034f7
 80037d4:	0800352d 	.word	0x0800352d

080037d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	; 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	330c      	adds	r3, #12
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	61ba      	str	r2, [r7, #24]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6979      	ldr	r1, [r7, #20]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	613b      	str	r3, [r7, #16]
   return(result);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800381c:	bf00      	nop
 800381e:	3724      	adds	r7, #36	; 0x24
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b095      	sub	sp, #84	; 0x54
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003850:	643a      	str	r2, [r7, #64]	; 0x40
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e5      	bne.n	8003830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	61fb      	str	r3, [r7, #28]
   return(result);
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800388a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	2b01      	cmp	r3, #1
 800389e:	d119      	bne.n	80038d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	330c      	adds	r3, #12
 80038a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0310 	bic.w	r3, r3, #16
 80038b6:	647b      	str	r3, [r7, #68]	; 0x44
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038c0:	61ba      	str	r2, [r7, #24]
 80038c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	613b      	str	r3, [r7, #16]
   return(result);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e5      	bne.n	80038a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038e2:	bf00      	nop
 80038e4:	3754      	adds	r7, #84	; 0x54
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fd4b 	bl	80033a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003916:	b480      	push	{r7}
 8003918:	b085      	sub	sp, #20
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b21      	cmp	r3, #33	; 0x21
 8003928:	d13e      	bne.n	80039a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003932:	d114      	bne.n	800395e <UART_Transmit_IT+0x48>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d110      	bne.n	800395e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	1c9a      	adds	r2, r3, #2
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]
 800395c:	e008      	b.n	8003970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6211      	str	r1, [r2, #32]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29b      	uxth	r3, r3
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	4619      	mov	r1, r3
 800397e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff fcc6 	bl	8003368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b08c      	sub	sp, #48	; 0x30
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b22      	cmp	r3, #34	; 0x22
 80039f8:	f040 80ab 	bne.w	8003b52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a04:	d117      	bne.n	8003a36 <UART_Receive_IT+0x50>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d113      	bne.n	8003a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	1c9a      	adds	r2, r3, #2
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
 8003a34:	e026      	b.n	8003a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d007      	beq.n	8003a5a <UART_Receive_IT+0x74>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10a      	bne.n	8003a68 <UART_Receive_IT+0x82>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e008      	b.n	8003a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4619      	mov	r1, r3
 8003a92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d15a      	bne.n	8003b4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0220 	bic.w	r2, r2, #32
 8003aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d135      	bne.n	8003b44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	613b      	str	r3, [r7, #16]
   return(result);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	623a      	str	r2, [r7, #32]
 8003b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d10a      	bne.n	8003b36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fc3b 	bl	80033b8 <HAL_UARTEx_RxEventCallback>
 8003b42:	e002      	b.n	8003b4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff fc19 	bl	800337c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e002      	b.n	8003b54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	; 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b0c0      	sub	sp, #256	; 0x100
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	ea40 0301 	orr.w	r3, r0, r1
 8003b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bb4:	f021 010c 	bic.w	r1, r1, #12
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	ea40 0301 	orr.w	r3, r0, r1
 8003be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b8f      	ldr	r3, [pc, #572]	; (8003e28 <UART_SetConfig+0x2cc>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0xa0>
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	; (8003e2c <UART_SetConfig+0x2d0>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d104      	bne.n	8003c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fbfa 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003c00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c04:	e003      	b.n	8003c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c06:	f7fe fbe1 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	f040 810c 	bne.w	8003e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c36:	415b      	adcs	r3, r3
 8003c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c3e:	4621      	mov	r1, r4
 8003c40:	eb12 0801 	adds.w	r8, r2, r1
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb43 0901 	adc.w	r9, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb18 0303 	adds.w	r3, r8, r3
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	eb49 0303 	adc.w	r3, r9, r3
 8003c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	18db      	adds	r3, r3, r3
 8003c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c90:	4613      	mov	r3, r2
 8003c92:	eb42 0303 	adc.w	r3, r2, r3
 8003c96:	657b      	str	r3, [r7, #84]	; 0x54
 8003c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ca0:	f7fc fa7a 	bl	8000198 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <UART_SetConfig+0x2d4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf4:	4692      	mov	sl, r2
 8003cf6:	469b      	mov	fp, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8003cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d02:	464b      	mov	r3, r9
 8003d04:	eb4b 0303 	adc.w	r3, fp, r3
 8003d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d20:	460b      	mov	r3, r1
 8003d22:	18db      	adds	r3, r3, r3
 8003d24:	643b      	str	r3, [r7, #64]	; 0x40
 8003d26:	4613      	mov	r3, r2
 8003d28:	eb42 0303 	adc.w	r3, r2, r3
 8003d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d36:	f7fc fa2f 	bl	8000198 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <UART_SetConfig+0x2d4>)
 8003d42:	fba3 2301 	umull	r2, r3, r3, r1
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2264      	movs	r2, #100	; 0x64
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	1acb      	subs	r3, r1, r3
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d56:	4b36      	ldr	r3, [pc, #216]	; (8003e30 <UART_SetConfig+0x2d4>)
 8003d58:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d80:	415b      	adcs	r3, r3
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ddc:	460b      	mov	r3, r1
 8003dde:	18db      	adds	r3, r3, r3
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de2:	4613      	mov	r3, r2
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003df2:	f7fc f9d1 	bl	8000198 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <UART_SetConfig+0x2d4>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	; 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	3332      	adds	r3, #50	; 0x32
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <UART_SetConfig+0x2d4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4422      	add	r2, r4
 8003e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e24:	e106      	b.n	8004034 <UART_SetConfig+0x4d8>
 8003e26:	bf00      	nop
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	6239      	str	r1, [r7, #32]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	627b      	str	r3, [r7, #36]	; 0x24
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	4641      	mov	r1, r8
 8003e58:	1854      	adds	r4, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb43 0501 	adc.w	r5, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	eb45 0303 	adc.w	r3, r5, r3
 8003e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eac:	4621      	mov	r1, r4
 8003eae:	008a      	lsls	r2, r1, #2
 8003eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003eb4:	f7fc f970 	bl	8000198 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b60      	ldr	r3, [pc, #384]	; (8004040 <UART_SetConfig+0x4e4>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011c      	lsls	r4, r3, #4
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	61b9      	str	r1, [r7, #24]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6139      	str	r1, [r7, #16]
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	460a      	mov	r2, r1
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f40:	4649      	mov	r1, r9
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	4641      	mov	r1, r8
 8003f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	008a      	lsls	r2, r1, #2
 8003f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f52:	f7fc f921 	bl	8000198 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4b38      	ldr	r3, [pc, #224]	; (8004040 <UART_SetConfig+0x4e4>)
 8003f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2264      	movs	r2, #100	; 0x64
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	; 0x32
 8003f70:	4a33      	ldr	r2, [pc, #204]	; (8004040 <UART_SetConfig+0x4e4>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f7c:	441c      	add	r4, r3
 8003f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f82:	2200      	movs	r2, #0
 8003f84:	673b      	str	r3, [r7, #112]	; 0x70
 8003f86:	677a      	str	r2, [r7, #116]	; 0x74
 8003f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fce:	464b      	mov	r3, r9
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fe2:	667a      	str	r2, [r7, #100]	; 0x64
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004002:	f7fc f8c9 	bl	8000198 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <UART_SetConfig+0x4e4>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	; 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	3332      	adds	r3, #50	; 0x32
 800401e:	4a08      	ldr	r2, [pc, #32]	; (8004040 <UART_SetConfig+0x4e4>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4422      	add	r2, r4
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	4d0d      	ldr	r5, [pc, #52]	; (800407c <__libc_init_array+0x38>)
 8004048:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404a:	1b64      	subs	r4, r4, r5
 800404c:	10a4      	asrs	r4, r4, #2
 800404e:	2600      	movs	r6, #0
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	4d0b      	ldr	r5, [pc, #44]	; (8004084 <__libc_init_array+0x40>)
 8004056:	4c0c      	ldr	r4, [pc, #48]	; (8004088 <__libc_init_array+0x44>)
 8004058:	f000 fa6a 	bl	8004530 <_init>
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	2600      	movs	r6, #0
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08004770 	.word	0x08004770
 8004080:	08004770 	.word	0x08004770
 8004084:	08004770 	.word	0x08004770
 8004088:	08004774 	.word	0x08004774

0800408c <memcpy>:
 800408c:	440a      	add	r2, r1
 800408e:	4291      	cmp	r1, r2
 8004090:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004094:	d100      	bne.n	8004098 <memcpy+0xc>
 8004096:	4770      	bx	lr
 8004098:	b510      	push	{r4, lr}
 800409a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a2:	4291      	cmp	r1, r2
 80040a4:	d1f9      	bne.n	800409a <memcpy+0xe>
 80040a6:	bd10      	pop	{r4, pc}

080040a8 <calloc>:
 80040a8:	4b02      	ldr	r3, [pc, #8]	; (80040b4 <calloc+0xc>)
 80040aa:	460a      	mov	r2, r1
 80040ac:	4601      	mov	r1, r0
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	f000 b802 	b.w	80040b8 <_calloc_r>
 80040b4:	20000058 	.word	0x20000058

080040b8 <_calloc_r>:
 80040b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ba:	fba1 2402 	umull	r2, r4, r1, r2
 80040be:	b94c      	cbnz	r4, 80040d4 <_calloc_r+0x1c>
 80040c0:	4611      	mov	r1, r2
 80040c2:	9201      	str	r2, [sp, #4]
 80040c4:	f000 f83e 	bl	8004144 <_malloc_r>
 80040c8:	9a01      	ldr	r2, [sp, #4]
 80040ca:	4605      	mov	r5, r0
 80040cc:	b930      	cbnz	r0, 80040dc <_calloc_r+0x24>
 80040ce:	4628      	mov	r0, r5
 80040d0:	b003      	add	sp, #12
 80040d2:	bd30      	pop	{r4, r5, pc}
 80040d4:	220c      	movs	r2, #12
 80040d6:	6002      	str	r2, [r0, #0]
 80040d8:	2500      	movs	r5, #0
 80040da:	e7f8      	b.n	80040ce <_calloc_r+0x16>
 80040dc:	4621      	mov	r1, r4
 80040de:	f000 f807 	bl	80040f0 <memset>
 80040e2:	e7f4      	b.n	80040ce <_calloc_r+0x16>

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	; (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000058 	.word	0x20000058

080040f0 <memset>:
 80040f0:	4402      	add	r2, r0
 80040f2:	4603      	mov	r3, r0
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d100      	bne.n	80040fa <memset+0xa>
 80040f8:	4770      	bx	lr
 80040fa:	f803 1b01 	strb.w	r1, [r3], #1
 80040fe:	e7f9      	b.n	80040f4 <memset+0x4>

08004100 <__retarget_lock_acquire_recursive>:
 8004100:	4770      	bx	lr

08004102 <__retarget_lock_release_recursive>:
 8004102:	4770      	bx	lr

08004104 <sbrk_aligned>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4e0e      	ldr	r6, [pc, #56]	; (8004140 <sbrk_aligned+0x3c>)
 8004108:	460c      	mov	r4, r1
 800410a:	6831      	ldr	r1, [r6, #0]
 800410c:	4605      	mov	r5, r0
 800410e:	b911      	cbnz	r1, 8004116 <sbrk_aligned+0x12>
 8004110:	f000 f89a 	bl	8004248 <_sbrk_r>
 8004114:	6030      	str	r0, [r6, #0]
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f895 	bl	8004248 <_sbrk_r>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d00a      	beq.n	8004138 <sbrk_aligned+0x34>
 8004122:	1cc4      	adds	r4, r0, #3
 8004124:	f024 0403 	bic.w	r4, r4, #3
 8004128:	42a0      	cmp	r0, r4
 800412a:	d007      	beq.n	800413c <sbrk_aligned+0x38>
 800412c:	1a21      	subs	r1, r4, r0
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f88a 	bl	8004248 <_sbrk_r>
 8004134:	3001      	adds	r0, #1
 8004136:	d101      	bne.n	800413c <sbrk_aligned+0x38>
 8004138:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800413c:	4620      	mov	r0, r4
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	200002c4 	.word	0x200002c4

08004144 <_malloc_r>:
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4607      	mov	r7, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d905      	bls.n	800416c <_malloc_r+0x28>
 8004160:	230c      	movs	r3, #12
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	2600      	movs	r6, #0
 8004166:	4630      	mov	r0, r6
 8004168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800416c:	4e2f      	ldr	r6, [pc, #188]	; (800422c <_malloc_r+0xe8>)
 800416e:	f000 f85f 	bl	8004230 <__malloc_lock>
 8004172:	6833      	ldr	r3, [r6, #0]
 8004174:	461c      	mov	r4, r3
 8004176:	bb44      	cbnz	r4, 80041ca <_malloc_r+0x86>
 8004178:	4629      	mov	r1, r5
 800417a:	4638      	mov	r0, r7
 800417c:	f7ff ffc2 	bl	8004104 <sbrk_aligned>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	4604      	mov	r4, r0
 8004184:	d14f      	bne.n	8004226 <_malloc_r+0xe2>
 8004186:	6834      	ldr	r4, [r6, #0]
 8004188:	4626      	mov	r6, r4
 800418a:	2e00      	cmp	r6, #0
 800418c:	d142      	bne.n	8004214 <_malloc_r+0xd0>
 800418e:	2c00      	cmp	r4, #0
 8004190:	d043      	beq.n	800421a <_malloc_r+0xd6>
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	4631      	mov	r1, r6
 8004196:	4638      	mov	r0, r7
 8004198:	eb04 0803 	add.w	r8, r4, r3
 800419c:	f000 f854 	bl	8004248 <_sbrk_r>
 80041a0:	4580      	cmp	r8, r0
 80041a2:	d13a      	bne.n	800421a <_malloc_r+0xd6>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	3503      	adds	r5, #3
 80041a8:	1aed      	subs	r5, r5, r3
 80041aa:	f025 0503 	bic.w	r5, r5, #3
 80041ae:	3508      	adds	r5, #8
 80041b0:	2d0c      	cmp	r5, #12
 80041b2:	bf38      	it	cc
 80041b4:	250c      	movcc	r5, #12
 80041b6:	4629      	mov	r1, r5
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff ffa3 	bl	8004104 <sbrk_aligned>
 80041be:	3001      	adds	r0, #1
 80041c0:	d02b      	beq.n	800421a <_malloc_r+0xd6>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	442b      	add	r3, r5
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	e00e      	b.n	80041e8 <_malloc_r+0xa4>
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	1b52      	subs	r2, r2, r5
 80041ce:	d41e      	bmi.n	800420e <_malloc_r+0xca>
 80041d0:	2a0b      	cmp	r2, #11
 80041d2:	d916      	bls.n	8004202 <_malloc_r+0xbe>
 80041d4:	1961      	adds	r1, r4, r5
 80041d6:	42a3      	cmp	r3, r4
 80041d8:	6025      	str	r5, [r4, #0]
 80041da:	bf18      	it	ne
 80041dc:	6059      	strne	r1, [r3, #4]
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	bf08      	it	eq
 80041e2:	6031      	streq	r1, [r6, #0]
 80041e4:	5162      	str	r2, [r4, r5]
 80041e6:	604b      	str	r3, [r1, #4]
 80041e8:	4638      	mov	r0, r7
 80041ea:	f104 060b 	add.w	r6, r4, #11
 80041ee:	f000 f825 	bl	800423c <__malloc_unlock>
 80041f2:	f026 0607 	bic.w	r6, r6, #7
 80041f6:	1d23      	adds	r3, r4, #4
 80041f8:	1af2      	subs	r2, r6, r3
 80041fa:	d0b4      	beq.n	8004166 <_malloc_r+0x22>
 80041fc:	1b9b      	subs	r3, r3, r6
 80041fe:	50a3      	str	r3, [r4, r2]
 8004200:	e7b1      	b.n	8004166 <_malloc_r+0x22>
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	42a3      	cmp	r3, r4
 8004206:	bf0c      	ite	eq
 8004208:	6032      	streq	r2, [r6, #0]
 800420a:	605a      	strne	r2, [r3, #4]
 800420c:	e7ec      	b.n	80041e8 <_malloc_r+0xa4>
 800420e:	4623      	mov	r3, r4
 8004210:	6864      	ldr	r4, [r4, #4]
 8004212:	e7b0      	b.n	8004176 <_malloc_r+0x32>
 8004214:	4634      	mov	r4, r6
 8004216:	6876      	ldr	r6, [r6, #4]
 8004218:	e7b7      	b.n	800418a <_malloc_r+0x46>
 800421a:	230c      	movs	r3, #12
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4638      	mov	r0, r7
 8004220:	f000 f80c 	bl	800423c <__malloc_unlock>
 8004224:	e79f      	b.n	8004166 <_malloc_r+0x22>
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	e7de      	b.n	80041e8 <_malloc_r+0xa4>
 800422a:	bf00      	nop
 800422c:	200002c0 	.word	0x200002c0

08004230 <__malloc_lock>:
 8004230:	4801      	ldr	r0, [pc, #4]	; (8004238 <__malloc_lock+0x8>)
 8004232:	f7ff bf65 	b.w	8004100 <__retarget_lock_acquire_recursive>
 8004236:	bf00      	nop
 8004238:	200002b8 	.word	0x200002b8

0800423c <__malloc_unlock>:
 800423c:	4801      	ldr	r0, [pc, #4]	; (8004244 <__malloc_unlock+0x8>)
 800423e:	f7ff bf60 	b.w	8004102 <__retarget_lock_release_recursive>
 8004242:	bf00      	nop
 8004244:	200002b8 	.word	0x200002b8

08004248 <_sbrk_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_sbrk_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fb38 	bl	80008c8 <_sbrk>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_sbrk_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_sbrk_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	200002bc 	.word	0x200002bc

08004268 <__udivmoddi4>:
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	9e08      	ldr	r6, [sp, #32]
 800426e:	460d      	mov	r5, r1
 8004270:	4604      	mov	r4, r0
 8004272:	460f      	mov	r7, r1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d14a      	bne.n	800430e <__udivmoddi4+0xa6>
 8004278:	428a      	cmp	r2, r1
 800427a:	4694      	mov	ip, r2
 800427c:	d965      	bls.n	800434a <__udivmoddi4+0xe2>
 800427e:	fab2 f382 	clz	r3, r2
 8004282:	b143      	cbz	r3, 8004296 <__udivmoddi4+0x2e>
 8004284:	fa02 fc03 	lsl.w	ip, r2, r3
 8004288:	f1c3 0220 	rsb	r2, r3, #32
 800428c:	409f      	lsls	r7, r3
 800428e:	fa20 f202 	lsr.w	r2, r0, r2
 8004292:	4317      	orrs	r7, r2
 8004294:	409c      	lsls	r4, r3
 8004296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800429a:	fa1f f58c 	uxth.w	r5, ip
 800429e:	fbb7 f1fe 	udiv	r1, r7, lr
 80042a2:	0c22      	lsrs	r2, r4, #16
 80042a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80042a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80042ac:	fb01 f005 	mul.w	r0, r1, r5
 80042b0:	4290      	cmp	r0, r2
 80042b2:	d90a      	bls.n	80042ca <__udivmoddi4+0x62>
 80042b4:	eb1c 0202 	adds.w	r2, ip, r2
 80042b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80042bc:	f080 811c 	bcs.w	80044f8 <__udivmoddi4+0x290>
 80042c0:	4290      	cmp	r0, r2
 80042c2:	f240 8119 	bls.w	80044f8 <__udivmoddi4+0x290>
 80042c6:	3902      	subs	r1, #2
 80042c8:	4462      	add	r2, ip
 80042ca:	1a12      	subs	r2, r2, r0
 80042cc:	b2a4      	uxth	r4, r4
 80042ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80042d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80042d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80042da:	fb00 f505 	mul.w	r5, r0, r5
 80042de:	42a5      	cmp	r5, r4
 80042e0:	d90a      	bls.n	80042f8 <__udivmoddi4+0x90>
 80042e2:	eb1c 0404 	adds.w	r4, ip, r4
 80042e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80042ea:	f080 8107 	bcs.w	80044fc <__udivmoddi4+0x294>
 80042ee:	42a5      	cmp	r5, r4
 80042f0:	f240 8104 	bls.w	80044fc <__udivmoddi4+0x294>
 80042f4:	4464      	add	r4, ip
 80042f6:	3802      	subs	r0, #2
 80042f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	2100      	movs	r1, #0
 8004300:	b11e      	cbz	r6, 800430a <__udivmoddi4+0xa2>
 8004302:	40dc      	lsrs	r4, r3
 8004304:	2300      	movs	r3, #0
 8004306:	e9c6 4300 	strd	r4, r3, [r6]
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430e:	428b      	cmp	r3, r1
 8004310:	d908      	bls.n	8004324 <__udivmoddi4+0xbc>
 8004312:	2e00      	cmp	r6, #0
 8004314:	f000 80ed 	beq.w	80044f2 <__udivmoddi4+0x28a>
 8004318:	2100      	movs	r1, #0
 800431a:	e9c6 0500 	strd	r0, r5, [r6]
 800431e:	4608      	mov	r0, r1
 8004320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004324:	fab3 f183 	clz	r1, r3
 8004328:	2900      	cmp	r1, #0
 800432a:	d149      	bne.n	80043c0 <__udivmoddi4+0x158>
 800432c:	42ab      	cmp	r3, r5
 800432e:	d302      	bcc.n	8004336 <__udivmoddi4+0xce>
 8004330:	4282      	cmp	r2, r0
 8004332:	f200 80f8 	bhi.w	8004526 <__udivmoddi4+0x2be>
 8004336:	1a84      	subs	r4, r0, r2
 8004338:	eb65 0203 	sbc.w	r2, r5, r3
 800433c:	2001      	movs	r0, #1
 800433e:	4617      	mov	r7, r2
 8004340:	2e00      	cmp	r6, #0
 8004342:	d0e2      	beq.n	800430a <__udivmoddi4+0xa2>
 8004344:	e9c6 4700 	strd	r4, r7, [r6]
 8004348:	e7df      	b.n	800430a <__udivmoddi4+0xa2>
 800434a:	b902      	cbnz	r2, 800434e <__udivmoddi4+0xe6>
 800434c:	deff      	udf	#255	; 0xff
 800434e:	fab2 f382 	clz	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 8090 	bne.w	8004478 <__udivmoddi4+0x210>
 8004358:	1a8a      	subs	r2, r1, r2
 800435a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800435e:	fa1f fe8c 	uxth.w	lr, ip
 8004362:	2101      	movs	r1, #1
 8004364:	fbb2 f5f7 	udiv	r5, r2, r7
 8004368:	fb07 2015 	mls	r0, r7, r5, r2
 800436c:	0c22      	lsrs	r2, r4, #16
 800436e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004372:	fb0e f005 	mul.w	r0, lr, r5
 8004376:	4290      	cmp	r0, r2
 8004378:	d908      	bls.n	800438c <__udivmoddi4+0x124>
 800437a:	eb1c 0202 	adds.w	r2, ip, r2
 800437e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8004382:	d202      	bcs.n	800438a <__udivmoddi4+0x122>
 8004384:	4290      	cmp	r0, r2
 8004386:	f200 80cb 	bhi.w	8004520 <__udivmoddi4+0x2b8>
 800438a:	4645      	mov	r5, r8
 800438c:	1a12      	subs	r2, r2, r0
 800438e:	b2a4      	uxth	r4, r4
 8004390:	fbb2 f0f7 	udiv	r0, r2, r7
 8004394:	fb07 2210 	mls	r2, r7, r0, r2
 8004398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800439c:	fb0e fe00 	mul.w	lr, lr, r0
 80043a0:	45a6      	cmp	lr, r4
 80043a2:	d908      	bls.n	80043b6 <__udivmoddi4+0x14e>
 80043a4:	eb1c 0404 	adds.w	r4, ip, r4
 80043a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80043ac:	d202      	bcs.n	80043b4 <__udivmoddi4+0x14c>
 80043ae:	45a6      	cmp	lr, r4
 80043b0:	f200 80bb 	bhi.w	800452a <__udivmoddi4+0x2c2>
 80043b4:	4610      	mov	r0, r2
 80043b6:	eba4 040e 	sub.w	r4, r4, lr
 80043ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80043be:	e79f      	b.n	8004300 <__udivmoddi4+0x98>
 80043c0:	f1c1 0720 	rsb	r7, r1, #32
 80043c4:	408b      	lsls	r3, r1
 80043c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80043ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80043ce:	fa05 f401 	lsl.w	r4, r5, r1
 80043d2:	fa20 f307 	lsr.w	r3, r0, r7
 80043d6:	40fd      	lsrs	r5, r7
 80043d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80043dc:	4323      	orrs	r3, r4
 80043de:	fbb5 f8f9 	udiv	r8, r5, r9
 80043e2:	fa1f fe8c 	uxth.w	lr, ip
 80043e6:	fb09 5518 	mls	r5, r9, r8, r5
 80043ea:	0c1c      	lsrs	r4, r3, #16
 80043ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80043f0:	fb08 f50e 	mul.w	r5, r8, lr
 80043f4:	42a5      	cmp	r5, r4
 80043f6:	fa02 f201 	lsl.w	r2, r2, r1
 80043fa:	fa00 f001 	lsl.w	r0, r0, r1
 80043fe:	d90b      	bls.n	8004418 <__udivmoddi4+0x1b0>
 8004400:	eb1c 0404 	adds.w	r4, ip, r4
 8004404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8004408:	f080 8088 	bcs.w	800451c <__udivmoddi4+0x2b4>
 800440c:	42a5      	cmp	r5, r4
 800440e:	f240 8085 	bls.w	800451c <__udivmoddi4+0x2b4>
 8004412:	f1a8 0802 	sub.w	r8, r8, #2
 8004416:	4464      	add	r4, ip
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	b29d      	uxth	r5, r3
 800441c:	fbb4 f3f9 	udiv	r3, r4, r9
 8004420:	fb09 4413 	mls	r4, r9, r3, r4
 8004424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004428:	fb03 fe0e 	mul.w	lr, r3, lr
 800442c:	45a6      	cmp	lr, r4
 800442e:	d908      	bls.n	8004442 <__udivmoddi4+0x1da>
 8004430:	eb1c 0404 	adds.w	r4, ip, r4
 8004434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8004438:	d26c      	bcs.n	8004514 <__udivmoddi4+0x2ac>
 800443a:	45a6      	cmp	lr, r4
 800443c:	d96a      	bls.n	8004514 <__udivmoddi4+0x2ac>
 800443e:	3b02      	subs	r3, #2
 8004440:	4464      	add	r4, ip
 8004442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004446:	fba3 9502 	umull	r9, r5, r3, r2
 800444a:	eba4 040e 	sub.w	r4, r4, lr
 800444e:	42ac      	cmp	r4, r5
 8004450:	46c8      	mov	r8, r9
 8004452:	46ae      	mov	lr, r5
 8004454:	d356      	bcc.n	8004504 <__udivmoddi4+0x29c>
 8004456:	d053      	beq.n	8004500 <__udivmoddi4+0x298>
 8004458:	b156      	cbz	r6, 8004470 <__udivmoddi4+0x208>
 800445a:	ebb0 0208 	subs.w	r2, r0, r8
 800445e:	eb64 040e 	sbc.w	r4, r4, lr
 8004462:	fa04 f707 	lsl.w	r7, r4, r7
 8004466:	40ca      	lsrs	r2, r1
 8004468:	40cc      	lsrs	r4, r1
 800446a:	4317      	orrs	r7, r2
 800446c:	e9c6 7400 	strd	r7, r4, [r6]
 8004470:	4618      	mov	r0, r3
 8004472:	2100      	movs	r1, #0
 8004474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004478:	f1c3 0120 	rsb	r1, r3, #32
 800447c:	fa02 fc03 	lsl.w	ip, r2, r3
 8004480:	fa20 f201 	lsr.w	r2, r0, r1
 8004484:	fa25 f101 	lsr.w	r1, r5, r1
 8004488:	409d      	lsls	r5, r3
 800448a:	432a      	orrs	r2, r5
 800448c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004490:	fa1f fe8c 	uxth.w	lr, ip
 8004494:	fbb1 f0f7 	udiv	r0, r1, r7
 8004498:	fb07 1510 	mls	r5, r7, r0, r1
 800449c:	0c11      	lsrs	r1, r2, #16
 800449e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80044a2:	fb00 f50e 	mul.w	r5, r0, lr
 80044a6:	428d      	cmp	r5, r1
 80044a8:	fa04 f403 	lsl.w	r4, r4, r3
 80044ac:	d908      	bls.n	80044c0 <__udivmoddi4+0x258>
 80044ae:	eb1c 0101 	adds.w	r1, ip, r1
 80044b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80044b6:	d22f      	bcs.n	8004518 <__udivmoddi4+0x2b0>
 80044b8:	428d      	cmp	r5, r1
 80044ba:	d92d      	bls.n	8004518 <__udivmoddi4+0x2b0>
 80044bc:	3802      	subs	r0, #2
 80044be:	4461      	add	r1, ip
 80044c0:	1b49      	subs	r1, r1, r5
 80044c2:	b292      	uxth	r2, r2
 80044c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80044c8:	fb07 1115 	mls	r1, r7, r5, r1
 80044cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044d0:	fb05 f10e 	mul.w	r1, r5, lr
 80044d4:	4291      	cmp	r1, r2
 80044d6:	d908      	bls.n	80044ea <__udivmoddi4+0x282>
 80044d8:	eb1c 0202 	adds.w	r2, ip, r2
 80044dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80044e0:	d216      	bcs.n	8004510 <__udivmoddi4+0x2a8>
 80044e2:	4291      	cmp	r1, r2
 80044e4:	d914      	bls.n	8004510 <__udivmoddi4+0x2a8>
 80044e6:	3d02      	subs	r5, #2
 80044e8:	4462      	add	r2, ip
 80044ea:	1a52      	subs	r2, r2, r1
 80044ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80044f0:	e738      	b.n	8004364 <__udivmoddi4+0xfc>
 80044f2:	4631      	mov	r1, r6
 80044f4:	4630      	mov	r0, r6
 80044f6:	e708      	b.n	800430a <__udivmoddi4+0xa2>
 80044f8:	4639      	mov	r1, r7
 80044fa:	e6e6      	b.n	80042ca <__udivmoddi4+0x62>
 80044fc:	4610      	mov	r0, r2
 80044fe:	e6fb      	b.n	80042f8 <__udivmoddi4+0x90>
 8004500:	4548      	cmp	r0, r9
 8004502:	d2a9      	bcs.n	8004458 <__udivmoddi4+0x1f0>
 8004504:	ebb9 0802 	subs.w	r8, r9, r2
 8004508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800450c:	3b01      	subs	r3, #1
 800450e:	e7a3      	b.n	8004458 <__udivmoddi4+0x1f0>
 8004510:	4645      	mov	r5, r8
 8004512:	e7ea      	b.n	80044ea <__udivmoddi4+0x282>
 8004514:	462b      	mov	r3, r5
 8004516:	e794      	b.n	8004442 <__udivmoddi4+0x1da>
 8004518:	4640      	mov	r0, r8
 800451a:	e7d1      	b.n	80044c0 <__udivmoddi4+0x258>
 800451c:	46d0      	mov	r8, sl
 800451e:	e77b      	b.n	8004418 <__udivmoddi4+0x1b0>
 8004520:	3d02      	subs	r5, #2
 8004522:	4462      	add	r2, ip
 8004524:	e732      	b.n	800438c <__udivmoddi4+0x124>
 8004526:	4608      	mov	r0, r1
 8004528:	e70a      	b.n	8004340 <__udivmoddi4+0xd8>
 800452a:	4464      	add	r4, ip
 800452c:	3802      	subs	r0, #2
 800452e:	e742      	b.n	80043b6 <__udivmoddi4+0x14e>

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
