
main_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb0  08003eb0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eb8  08003eb8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08003f1c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08003f1c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011a75  00000000  00000000  000200bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000399a  00000000  00000000  00031b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  000354d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000946  00000000  00000000  000360c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016781  00000000  00000000  00036a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c9a3  00000000  00000000  0004d187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008848b  00000000  00000000  00059b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027cc  00000000  00000000  000e1fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000132  00000000  00000000  000e4784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000012f8  00000000  00000000  000e48b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_uldivmod>:
 8000198:	b953      	cbnz	r3, 80001b0 <__aeabi_uldivmod+0x18>
 800019a:	b94a      	cbnz	r2, 80001b0 <__aeabi_uldivmod+0x18>
 800019c:	2900      	cmp	r1, #0
 800019e:	bf08      	it	eq
 80001a0:	2800      	cmpeq	r0, #0
 80001a2:	bf1c      	itt	ne
 80001a4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001a8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ac:	f000 b80c 	b.w	80001c8 <__aeabi_idiv0>
 80001b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001b8:	f003 fcfa 	bl	8003bb0 <__udivmoddi4>
 80001bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c4:	b004      	add	sp, #16
 80001c6:	4770      	bx	lr

080001c8 <__aeabi_idiv0>:
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop

080001cc <deregister_tm_clones>:
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <deregister_tm_clones+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <deregister_tm_clones+0x14>)
 80001d0:	4283      	cmp	r3, r0
 80001d2:	d002      	beq.n	80001da <deregister_tm_clones+0xe>
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <deregister_tm_clones+0x18>)
 80001d6:	b103      	cbz	r3, 80001da <deregister_tm_clones+0xe>
 80001d8:	4718      	bx	r3
 80001da:	4770      	bx	lr
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000

080001e8 <register_tm_clones>:
 80001e8:	4805      	ldr	r0, [pc, #20]	; (8000200 <register_tm_clones+0x18>)
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <register_tm_clones+0x1c>)
 80001ec:	1a1b      	subs	r3, r3, r0
 80001ee:	0fd9      	lsrs	r1, r3, #31
 80001f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001f4:	1049      	asrs	r1, r1, #1
 80001f6:	d002      	beq.n	80001fe <register_tm_clones+0x16>
 80001f8:	4b03      	ldr	r3, [pc, #12]	; (8000208 <register_tm_clones+0x20>)
 80001fa:	b103      	cbz	r3, 80001fe <register_tm_clones+0x16>
 80001fc:	4718      	bx	r3
 80001fe:	4770      	bx	lr
 8000200:	2000005c 	.word	0x2000005c
 8000204:	2000005c 	.word	0x2000005c
 8000208:	00000000 	.word	0x00000000

0800020c <__do_global_dtors_aux>:
 800020c:	b510      	push	{r4, lr}
 800020e:	4c06      	ldr	r4, [pc, #24]	; (8000228 <__do_global_dtors_aux+0x1c>)
 8000210:	7823      	ldrb	r3, [r4, #0]
 8000212:	b943      	cbnz	r3, 8000226 <__do_global_dtors_aux+0x1a>
 8000214:	f7ff ffda 	bl	80001cc <deregister_tm_clones>
 8000218:	4b04      	ldr	r3, [pc, #16]	; (800022c <__do_global_dtors_aux+0x20>)
 800021a:	b113      	cbz	r3, 8000222 <__do_global_dtors_aux+0x16>
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <__do_global_dtors_aux+0x24>)
 800021e:	f3af 8000 	nop.w
 8000222:	2301      	movs	r3, #1
 8000224:	7023      	strb	r3, [r4, #0]
 8000226:	bd10      	pop	{r4, pc}
 8000228:	2000005c 	.word	0x2000005c
 800022c:	00000000 	.word	0x00000000
 8000230:	08003e78 	.word	0x08003e78

08000234 <frame_dummy>:
 8000234:	b508      	push	{r3, lr}
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <frame_dummy+0x18>)
 8000238:	b11b      	cbz	r3, 8000242 <frame_dummy+0xe>
 800023a:	4905      	ldr	r1, [pc, #20]	; (8000250 <frame_dummy+0x1c>)
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <frame_dummy+0x20>)
 800023e:	f3af 8000 	nop.w
 8000242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000246:	f7ff bfcf 	b.w	80001e8 <register_tm_clones>
 800024a:	bf00      	nop
 800024c:	00000000 	.word	0x00000000
 8000250:	20000060 	.word	0x20000060
 8000254:	08003e78 	.word	0x08003e78

08000258 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_DMA_Init+0x3c>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <MX_DMA_Init+0x3c>)
 8000268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_DMA_Init+0x3c>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800027a:	2200      	movs	r2, #0
 800027c:	2100      	movs	r1, #0
 800027e:	2010      	movs	r0, #16
 8000280:	f000 fda5 	bl	8000dce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000284:	2010      	movs	r0, #16
 8000286:	f000 fdbe 	bl	8000e06 <HAL_NVIC_EnableIRQ>

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800

08000298 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
 80002b2:	4b19      	ldr	r3, [pc, #100]	; (8000318 <MX_GPIO_Init+0x80>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a18      	ldr	r2, [pc, #96]	; (8000318 <MX_GPIO_Init+0x80>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_GPIO_Init+0x80>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	f003 0301 	and.w	r3, r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ca:	2300      	movs	r3, #0
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_GPIO_Init+0x80>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <MX_GPIO_Init+0x80>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_GPIO_Init+0x80>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_0_Pin|CS_1_Pin|CS_2_Pin, GPIO_PIN_RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <MX_GPIO_Init+0x84>)
 80002ee:	f001 fb2b 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_0_Pin|CS_1_Pin|CS_2_Pin;
 80002f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4619      	mov	r1, r3
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <MX_GPIO_Init+0x84>)
 800030c:	f001 f998 	bl	8001640 <HAL_GPIO_Init>

}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	40020400 	.word	0x40020400

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b08c      	sub	sp, #48	; 0x30
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000326:	f000 fc05 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800032a:	f000 f877 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032e:	f7ff ffb3 	bl	8000298 <MX_GPIO_Init>
  MX_DMA_Init();
 8000332:	f7ff ff91 	bl	8000258 <MX_DMA_Init>
  MX_SPI1_Init();
 8000336:	f000 f8df 	bl	80004f8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800033a:	f000 fb1b 	bl	8000974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	RX_data = new_uart_ibuf(&huart2, 1024);  // starts receiving
 800033e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000342:	4834      	ldr	r0, [pc, #208]	; (8000414 <main+0xf4>)
 8000344:	f000 fa16 	bl	8000774 <new_uart_ibuf>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	4b32      	ldr	r3, [pc, #200]	; (8000418 <main+0xf8>)
 800034e:	601a      	str	r2, [r3, #0]

	uint8_t motor_count = 0;  // TODO: make code to find motor count
 8000350:	2300      	movs	r3, #0
 8000352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	{  // anonymous scope so that temporary variables are cleaned up
		uint32_t baud = 9600;  // default baud
 8000356:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800035a:	62fb      	str	r3, [r7, #44]	; 0x2c
		// motor_count starts counting from 0
		handshake init;
		memset((void*)&init, 0, 6);  // set to 0
 800035c:	463b      	mov	r3, r7
 800035e:	2206      	movs	r2, #6
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fc1a 	bl	8003b9c <memset>

		HANDSHAKE:  // jmp to label in the case baud is changed (redo handshake)

		while (init.crc != 0xffff) {  // handshake
 8000368:	e014      	b.n	8000394 <main+0x74>
			if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <main+0xf8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	215c      	movs	r1, #92	; 0x5c
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fa69 	bl	8000848 <uart_ibuf_align>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d000      	beq.n	800037e <main+0x5e>
 800037c:	e00a      	b.n	8000394 <main+0x74>
			if (uart_ibuf_read(RX_data, &init, 6)) { continue; }
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0xf8>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4639      	mov	r1, r7
 8000384:	2206      	movs	r2, #6
 8000386:	4618      	mov	r0, r3
 8000388:	f000 fa85 	bl	8000896 <uart_ibuf_read>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d000      	beq.n	8000394 <main+0x74>
 8000392:	bf00      	nop
		while (init.crc != 0xffff) {  // handshake
 8000394:	88bb      	ldrh	r3, [r7, #4]
 8000396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800039a:	4293      	cmp	r3, r2
 800039c:	d1e5      	bne.n	800036a <main+0x4a>
		}  // TODO: add crc validation and fixing

		init.motor_count = motor_count;
 800039e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80003a2:	f003 031f 	and.w	r3, r3, #31
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	783b      	ldrb	r3, [r7, #0]
 80003aa:	f362 0304 	bfi	r3, r2, #0, #5
 80003ae:	703b      	strb	r3, [r7, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)&init, 6, 10);
 80003b0:	4639      	mov	r1, r7
 80003b2:	230a      	movs	r3, #10
 80003b4:	2206      	movs	r2, #6
 80003b6:	4817      	ldr	r0, [pc, #92]	; (8000414 <main+0xf4>)
 80003b8:	f002 f921 	bl	80025fe <HAL_UART_Transmit>
		if (init.init_0) {} // TODO: move all motors to their 0 position
		if (init.baud != baud) {
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	f3c3 1399 	ubfx	r3, r3, #6, #26
 80003c2:	461a      	mov	r2, r3
 80003c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d004      	beq.n	80003d4 <main+0xb4>
			// TODO: set new baud and go back to handshake
			baud = init.baud;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	f3c3 1399 	ubfx	r3, r3, #6, #26
 80003d0:	62fb      	str	r3, [r7, #44]	; 0x2c
			goto HANDSHAKE;
 80003d2:	e7c9      	b.n	8000368 <main+0x48>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	instruction inst;
	while (1) {
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <main+0xf8>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	215c      	movs	r1, #92	; 0x5c
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 fa34 	bl	8000848 <uart_ibuf_align>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d112      	bne.n	800040c <main+0xec>
		if (uart_ibuf_read(RX_data, &inst, 28)) { continue; }
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <main+0xf8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f107 0108 	add.w	r1, r7, #8
 80003ee:	221c      	movs	r2, #28
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fa50 	bl	8000896 <uart_ibuf_read>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d109      	bne.n	8000410 <main+0xf0>

		HAL_UART_Transmit(&huart2, (uint8_t*)&inst, 28, 100);
 80003fc:	f107 0108 	add.w	r1, r7, #8
 8000400:	2364      	movs	r3, #100	; 0x64
 8000402:	221c      	movs	r2, #28
 8000404:	4803      	ldr	r0, [pc, #12]	; (8000414 <main+0xf4>)
 8000406:	f002 f8fa 	bl	80025fe <HAL_UART_Transmit>
 800040a:	e7e3      	b.n	80003d4 <main+0xb4>
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 800040c:	bf00      	nop
 800040e:	e7e1      	b.n	80003d4 <main+0xb4>
		if (uart_ibuf_read(RX_data, &inst, 28)) { continue; }
 8000410:	bf00      	nop
		if (uart_ibuf_align(RX_data, SYNC_BYTE)) { continue; }
 8000412:	e7df      	b.n	80003d4 <main+0xb4>
 8000414:	200000d8 	.word	0x200000d8
 8000418:	20000078 	.word	0x20000078

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	; 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0320 	add.w	r3, r7, #32
 8000426:	2230      	movs	r2, #48	; 0x30
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f003 fbb6 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <SystemClock_Config+0xc8>)
 8000446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000448:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <SystemClock_Config+0xc8>)
 800044a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044e:	6413      	str	r3, [r2, #64]	; 0x40
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <SystemClock_Config+0xc8>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <SystemClock_Config+0xcc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a20      	ldr	r2, [pc, #128]	; (80004e8 <SystemClock_Config+0xcc>)
 8000466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800046a:	6013      	str	r3, [r2, #0]
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <SystemClock_Config+0xcc>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	2302      	movs	r3, #2
 800047a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	2310      	movs	r3, #16
 8000482:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000484:	2302      	movs	r3, #2
 8000486:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000488:	2300      	movs	r3, #0
 800048a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800048c:	2308      	movs	r3, #8
 800048e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000490:	2364      	movs	r3, #100	; 0x64
 8000492:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000494:	2302      	movs	r3, #2
 8000496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000498:	2304      	movs	r3, #4
 800049a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0320 	add.w	r3, r7, #32
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fa6b 	bl	800197c <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80004ac:	f000 f81e 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	2302      	movs	r3, #2
 80004b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2103      	movs	r1, #3
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fccd 	bl	8001e6c <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80004d8:	f000 f808 	bl	80004ec <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3750      	adds	r7, #80	; 0x50
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40007000 	.word	0x40007000

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_SPI1_Init+0x64>)
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <MX_SPI1_Init+0x68>)
 8000500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_SPI1_Init+0x64>)
 8000504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_SPI1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_SPI1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_SPI1_Init+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_SPI1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <MX_SPI1_Init+0x64>)
 8000524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <MX_SPI1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_SPI1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <MX_SPI1_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <MX_SPI1_Init+0x64>)
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_SPI1_Init+0x64>)
 8000544:	220a      	movs	r2, #10
 8000546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_SPI1_Init+0x64>)
 800054a:	f001 fe6f 	bl	800222c <HAL_SPI_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000554:	f7ff ffca 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000007c 	.word	0x2000007c
 8000560:	40013000 	.word	0x40013000

08000564 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	; 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0314 	add.w	r3, r7, #20
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <HAL_SPI_MspInit+0x94>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d133      	bne.n	80005ee <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <HAL_SPI_MspInit+0x98>)
 800058c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058e:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <HAL_SPI_MspInit+0x98>)
 8000590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000594:	6453      	str	r3, [r2, #68]	; 0x44
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <HAL_SPI_MspInit+0x98>)
 8000598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_SPI_MspInit+0x98>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a14      	ldr	r2, [pc, #80]	; (80005fc <HAL_SPI_MspInit+0x98>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_SPI_MspInit+0x98>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005be:	23e0      	movs	r3, #224	; 0xe0
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80005ce:	2305      	movs	r3, #5
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_SPI_MspInit+0x9c>)
 80005da:	f001 f831 	bl	8001640 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2023      	movs	r0, #35	; 0x23
 80005e4:	f000 fbf3 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005e8:	2023      	movs	r0, #35	; 0x23
 80005ea:	f000 fc0c 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40013000 	.word	0x40013000
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <HAL_MspInit+0x4c>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_MspInit+0x4c>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6453      	str	r3, [r2, #68]	; 0x44
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <HAL_MspInit+0x4c>)
 800061c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_MspInit+0x4c>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_MspInit+0x4c>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_MspInit+0x4c>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 fa9a 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <DMA1_Stream5_IRQHandler+0x10>)
 80006ae:	f000 fd5d 	bl	800116c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000011c 	.word	0x2000011c

080006bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <SPI1_IRQHandler+0x10>)
 80006c2:	f001 fe3d 	bl	8002340 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000007c 	.word	0x2000007c

080006d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d4:	4802      	ldr	r0, [pc, #8]	; (80006e0 <USART2_IRQHandler+0x10>)
 80006d6:	f002 f855 	bl	8002784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000d8 	.word	0x200000d8

080006e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <_sbrk+0x5c>)
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <_sbrk+0x60>)
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <_sbrk+0x64>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d102      	bne.n	8000706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <_sbrk+0x64>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <_sbrk+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <_sbrk+0x64>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4413      	add	r3, r2
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	429a      	cmp	r2, r3
 8000712:	d207      	bcs.n	8000724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000714:	f003 fa3c 	bl	8003b90 <__errno>
 8000718:	4603      	mov	r3, r0
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000722:	e009      	b.n	8000738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <_sbrk+0x64>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <_sbrk+0x64>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4413      	add	r3, r2
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <_sbrk+0x64>)
 8000734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20020000 	.word	0x20020000
 8000744:	00000400 	.word	0x00000400
 8000748:	200000d4 	.word	0x200000d4
 800074c:	200002c8 	.word	0x200002c8

08000750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <SystemInit+0x20>)
 8000756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <SystemInit+0x20>)
 800075c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <new_uart_ibuf>:
#include <string.h>
#include "uart_buffer.h"



uart_ibuf* new_uart_ibuf(UART_HandleTypeDef* uart_handle, uint32_t size) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uart_ibuf* handle = (uart_ibuf*)calloc(1, sizeof(uart_ibuf));
 800077e:	2114      	movs	r1, #20
 8000780:	2001      	movs	r0, #1
 8000782:	f003 f9d7 	bl	8003b34 <calloc>
 8000786:	4603      	mov	r3, r0
 8000788:	60fb      	str	r3, [r7, #12]
	handle->buffer = malloc(size);
 800078a:	6838      	ldr	r0, [r7, #0]
 800078c:	f003 f928 	bl	80039e0 <malloc>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	601a      	str	r2, [r3, #0]
	handle->uart_handle = uart_handle;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	605a      	str	r2, [r3, #4]
	handle->size = size;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	683a      	ldr	r2, [r7, #0]
 80007a2:	60da      	str	r2, [r3, #12]
	handle->read = size;  // dma starts writing from end
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	611a      	str	r2, [r3, #16]
	handle->end = &uart_handle->hdmarx->Instance->NDTR;  // dma index variable
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1d1a      	adds	r2, r3, #4
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	609a      	str	r2, [r3, #8]
	HAL_UART_Receive_DMA(uart_handle, handle->buffer, size);  // start receiving data
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	b292      	uxth	r2, r2
 80007be:	4619      	mov	r1, r3
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f001 ffae 	bl	8002722 <HAL_UART_Receive_DMA>
	return handle;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <uart_ibuf_reset>:

void uart_ibuf_reset(uart_ibuf* handle) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	*handle->end = 1024;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e0:	601a      	str	r2, [r3, #0]
	handle->read = 1024;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e8:	611a      	str	r2, [r3, #16]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <uart_ibuf_increment>:

uint8_t uart_ibuf_increment(uart_ibuf* handle) {
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68db      	ldr	r3, [r3, #12]
 8000806:	429a      	cmp	r2, r3
 8000808:	d904      	bls.n	8000814 <uart_ibuf_increment+0x1e>
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffe0 	bl	80007d0 <uart_ibuf_reset>
 8000810:	2301      	movs	r3, #1
 8000812:	e015      	b.n	8000840 <uart_ibuf_increment+0x4a>
	if (handle->read == (*handle->end)) { return 1; }  // error align byte not found
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	691a      	ldr	r2, [r3, #16]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	429a      	cmp	r2, r3
 8000820:	d101      	bne.n	8000826 <uart_ibuf_increment+0x30>
 8000822:	2301      	movs	r3, #1
 8000824:	e00c      	b.n	8000840 <uart_ibuf_increment+0x4a>
	handle->read = handle->read ? (handle->read - 1) : handle->size;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d003      	beq.n	8000836 <uart_ibuf_increment+0x40>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	3b01      	subs	r3, #1
 8000834:	e001      	b.n	800083a <uart_ibuf_increment+0x44>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	68db      	ldr	r3, [r3, #12]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	6113      	str	r3, [r2, #16]
	return 0;
 800083e:	2300      	movs	r3, #0
}
 8000840:	4618      	mov	r0, r3
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <uart_ibuf_align>:

uint8_t uart_ibuf_align(uart_ibuf* handle, uint8_t byte) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	70fb      	strb	r3, [r7, #3]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	691a      	ldr	r2, [r3, #16]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	429a      	cmp	r2, r3
 800085e:	d90c      	bls.n	800087a <uart_ibuf_align+0x32>
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f7ff ffb5 	bl	80007d0 <uart_ibuf_reset>
 8000866:	2301      	movs	r3, #1
 8000868:	e011      	b.n	800088e <uart_ibuf_align+0x46>
	while (*(handle->buffer + handle->read) != byte) {
		if (uart_ibuf_increment(handle)) { return 1; }
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffc3 	bl	80007f6 <uart_ibuf_increment>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <uart_ibuf_align+0x32>
 8000876:	2301      	movs	r3, #1
 8000878:	e009      	b.n	800088e <uart_ibuf_align+0x46>
	while (*(handle->buffer + handle->read) != byte) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	78fa      	ldrb	r2, [r7, #3]
 8000888:	429a      	cmp	r2, r3
 800088a:	d1ee      	bne.n	800086a <uart_ibuf_align+0x22>
	};
	return 0;
 800088c:	2300      	movs	r3, #0
	//return uart_ibuf_increment(handle);  // this should return 0 because the last byte was 0xff
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <uart_ibuf_read>:

uint8_t uart_ibuf_read(uart_ibuf* handle, void* output, uint32_t size) {
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
	if (handle->read > handle->size) { uart_ibuf_reset(handle); return 1; }  // somehow got invalid value
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	691a      	ldr	r2, [r3, #16]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68db      	ldr	r3, [r3, #12]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d904      	bls.n	80008b8 <uart_ibuf_read+0x22>
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff ff8e 	bl	80007d0 <uart_ibuf_reset>
 80008b4:	2301      	movs	r3, #1
 80008b6:	e058      	b.n	800096a <uart_ibuf_read+0xd4>
	if ((*handle->end) > handle->read && handle->read < size) {  // data is broken along the buffer limits
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	691b      	ldr	r3, [r3, #16]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d935      	bls.n	8000932 <uart_ibuf_read+0x9c>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	691b      	ldr	r3, [r3, #16]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d930      	bls.n	8000932 <uart_ibuf_read+0x9c>
		if ((1024 - (*handle->end)) + handle->read < size) { return 1; }  // not enough data
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	691a      	ldr	r2, [r3, #16]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d901      	bls.n	80008ea <uart_ibuf_read+0x54>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e03f      	b.n	800096a <uart_ibuf_read+0xd4>
		uint32_t split_size = size - handle->read;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
		if (handle->read) { memcpy(output + split_size, handle->buffer, handle->read); }  // only try memcpy if handle->read is a non zero value
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d009      	beq.n	8000910 <uart_ibuf_read+0x7a>
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	18d0      	adds	r0, r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	6819      	ldr	r1, [r3, #0]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	461a      	mov	r2, r3
 800090c:	f003 f85a 	bl	80039c4 <memcpy>
		handle->read = (1024 - split_size);
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	611a      	str	r2, [r3, #16]
		memcpy(output, handle->buffer + handle->read, split_size);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	4413      	add	r3, r2
 8000924:	697a      	ldr	r2, [r7, #20]
 8000926:	4619      	mov	r1, r3
 8000928:	68b8      	ldr	r0, [r7, #8]
 800092a:	f003 f84b 	bl	80039c4 <memcpy>
		return 0;
 800092e:	2300      	movs	r3, #0
 8000930:	e01b      	b.n	800096a <uart_ibuf_read+0xd4>
	}
	if (handle->read - (*handle->end) < size) { return 1; }  // not enough data
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	691a      	ldr	r2, [r3, #16]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	d901      	bls.n	8000948 <uart_ibuf_read+0xb2>
 8000944:	2301      	movs	r3, #1
 8000946:	e010      	b.n	800096a <uart_ibuf_read+0xd4>
	handle->read -= size;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	1ad2      	subs	r2, r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	611a      	str	r2, [r3, #16]
	memcpy(output, handle->buffer + handle->read, size);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	4413      	add	r3, r2
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4619      	mov	r1, r3
 8000962:	68b8      	ldr	r0, [r7, #8]
 8000964:	f003 f82e 	bl	80039c4 <memcpy>
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f001 fdda 	bl	8002564 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f7ff fd99 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000d8 	.word	0x200000d8
 80009c4:	40004400 	.word	0x40004400

080009c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a39      	ldr	r2, [pc, #228]	; (8000acc <HAL_UART_MspInit+0x104>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d16b      	bne.n	8000ac2 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a37      	ldr	r2, [pc, #220]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a30      	ldr	r2, [pc, #192]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <HAL_UART_MspInit+0x108>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a32:	2307      	movs	r3, #7
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <HAL_UART_MspInit+0x10c>)
 8000a3e:	f000 fdff 	bl	8001640 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a44:	4a25      	ldr	r2, [pc, #148]	; (8000adc <HAL_UART_MspInit+0x114>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a48:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a76:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a80:	2204      	movs	r2, #4
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a86:	2203      	movs	r2, #3
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a96:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000a98:	f000 f9d0 	bl	8000e3c <HAL_DMA_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000aa2:	f7ff fd23 	bl	80004ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_UART_MspInit+0x110>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2026      	movs	r0, #38	; 0x26
 8000ab8:	f000 f989 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abc:	2026      	movs	r0, #38	; 0x26
 8000abe:	f000 f9a2 	bl	8000e06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	2000011c 	.word	0x2000011c
 8000adc:	40026088 	.word	0x40026088

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff fe21 	bl	8000750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f002 ff35 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff fc05 	bl	8000320 <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b24:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 8000b28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b2c:	200002c8 	.word	0x200002c8

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f92b 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff fd4c 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f943 	bl	8000e22 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	f000 f90b 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	2000017c 	.word	0x2000017c

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000017c 	.word	0x2000017c

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d98:	f7ff ff8e 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff29 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff3e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff31 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff feda 	bl	8000c00 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d101      	bne.n	8000e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	e099      	b.n	8000f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e78:	e00f      	b.n	8000e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e7a:	f7ff fec1 	bl	8000c00 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d908      	bls.n	8000e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2220      	movs	r2, #32
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2203      	movs	r2, #3
 8000e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e078      	b.n	8000f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e8      	bne.n	8000e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_DMA_Init+0x158>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d107      	bne.n	8000f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4313      	orrs	r3, r2
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f023 0307 	bic.w	r3, r3, #7
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	d117      	bne.n	8000f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00e      	beq.n	8000f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fb01 	bl	8001548 <DMA_CheckFifoParam>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d008      	beq.n	8000f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2240      	movs	r2, #64	; 0x40
 8000f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e016      	b.n	8000f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fab8 	bl	80014dc <DMA_CalcBaseAndBitshift>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f74:	223f      	movs	r2, #63	; 0x3f
 8000f76:	409a      	lsls	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	f010803f 	.word	0xf010803f

08000f98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_DMA_Start_IT+0x26>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e040      	b.n	8001040 <HAL_DMA_Start_IT+0xa8>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d12f      	bne.n	8001032 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 fa4a 	bl	8001480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	223f      	movs	r2, #63	; 0x3f
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 0216 	orr.w	r2, r2, #22
 8001006:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0208 	orr.w	r2, r2, #8
 800101e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f042 0201 	orr.w	r2, r2, #1
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	e005      	b.n	800103e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800103a:	2302      	movs	r3, #2
 800103c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001054:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001056:	f7ff fdd3 	bl	8000c00 <HAL_GetTick>
 800105a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d008      	beq.n	800107a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2280      	movs	r2, #128	; 0x80
 800106c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e052      	b.n	8001120 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0216 	bic.w	r2, r2, #22
 8001088:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001098:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <HAL_DMA_Abort+0x62>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d007      	beq.n	80010ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0208 	bic.w	r2, r2, #8
 80010b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ca:	e013      	b.n	80010f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010cc:	f7ff fd98 	bl	8000c00 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d90c      	bls.n	80010f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2220      	movs	r2, #32
 80010de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e015      	b.n	8001120 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1e4      	bne.n	80010cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001106:	223f      	movs	r2, #63	; 0x3f
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d004      	beq.n	8001146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00c      	b.n	8001160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001178:	4b8e      	ldr	r3, [pc, #568]	; (80013b4 <HAL_DMA_IRQHandler+0x248>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a8e      	ldr	r2, [pc, #568]	; (80013b8 <HAL_DMA_IRQHandler+0x24c>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0a9b      	lsrs	r3, r3, #10
 8001184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2208      	movs	r2, #8
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0204 	bic.w	r2, r2, #4
 80011be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2208      	movs	r2, #8
 80011c6:	409a      	lsls	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2201      	movs	r2, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d012      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2201      	movs	r2, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2204      	movs	r2, #4
 8001214:	409a      	lsls	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2204      	movs	r2, #4
 8001232:	409a      	lsls	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2210      	movs	r2, #16
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d043      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03c      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2210      	movs	r2, #16
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d024      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
 800129a:	e01f      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01b      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
 80012ac:	e016      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0208 	bic.w	r2, r2, #8
 80012ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2220      	movs	r2, #32
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 808f 	beq.w	800140c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8087 	beq.w	800140c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2220      	movs	r2, #32
 8001304:	409a      	lsls	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b05      	cmp	r3, #5
 8001314:	d136      	bne.n	8001384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0216 	bic.w	r2, r2, #22
 8001324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <HAL_DMA_IRQHandler+0x1da>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0208 	bic.w	r2, r2, #8
 8001354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	223f      	movs	r2, #63	; 0x3f
 800135c:	409a      	lsls	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07e      	beq.n	8001478 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
        }
        return;
 8001382:	e079      	b.n	8001478 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01d      	beq.n	80013ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10d      	bne.n	80013bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d031      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e02c      	b.n	800140c <HAL_DMA_IRQHandler+0x2a0>
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000
 80013b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d023      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
 80013cc:	e01e      	b.n	800140c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10f      	bne.n	80013fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0210 	bic.w	r2, r2, #16
 80013ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	2b00      	cmp	r3, #0
 8001412:	d032      	beq.n	800147a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d022      	beq.n	8001466 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2205      	movs	r2, #5
 8001424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3301      	adds	r3, #1
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	429a      	cmp	r2, r3
 8001442:	d307      	bcc.n	8001454 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f2      	bne.n	8001438 <HAL_DMA_IRQHandler+0x2cc>
 8001452:	e000      	b.n	8001456 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001454:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d005      	beq.n	800147a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
 8001476:	e000      	b.n	800147a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001478:	bf00      	nop
    }
  }
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800149c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b40      	cmp	r3, #64	; 0x40
 80014ac:	d108      	bne.n	80014c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014be:	e007      	b.n	80014d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3b10      	subs	r3, #16
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <DMA_CalcBaseAndBitshift+0x64>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <DMA_CalcBaseAndBitshift+0x68>)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d909      	bls.n	800151e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	1d1a      	adds	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	659a      	str	r2, [r3, #88]	; 0x58
 800151c:	e007      	b.n	800152e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001526:	f023 0303 	bic.w	r3, r3, #3
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	aaaaaaab 	.word	0xaaaaaaab
 8001544:	08003ea8 	.word	0x08003ea8

08001548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d11f      	bne.n	80015a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d856      	bhi.n	8001616 <DMA_CheckFifoParam+0xce>
 8001568:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <DMA_CheckFifoParam+0x28>)
 800156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156e:	bf00      	nop
 8001570:	08001581 	.word	0x08001581
 8001574:	08001593 	.word	0x08001593
 8001578:	08001581 	.word	0x08001581
 800157c:	08001617 	.word	0x08001617
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d046      	beq.n	800161a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001590:	e043      	b.n	800161a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800159a:	d140      	bne.n	800161e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a0:	e03d      	b.n	800161e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015aa:	d121      	bne.n	80015f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d837      	bhi.n	8001622 <DMA_CheckFifoParam+0xda>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <DMA_CheckFifoParam+0x70>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	080015cf 	.word	0x080015cf
 80015c0:	080015c9 	.word	0x080015c9
 80015c4:	080015e1 	.word	0x080015e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
      break;
 80015cc:	e030      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d025      	beq.n	8001626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015de:	e022      	b.n	8001626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015e8:	d11f      	bne.n	800162a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015ee:	e01c      	b.n	800162a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d903      	bls.n	80015fe <DMA_CheckFifoParam+0xb6>
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d003      	beq.n	8001604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015fc:	e018      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
      break;
 8001602:	e015      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00e      	beq.n	800162e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
      break;
 8001614:	e00b      	b.n	800162e <DMA_CheckFifoParam+0xe6>
      break;
 8001616:	bf00      	nop
 8001618:	e00a      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800161a:	bf00      	nop
 800161c:	e008      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800161e:	bf00      	nop
 8001620:	e006      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 8001622:	bf00      	nop
 8001624:	e004      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
 8001628:	e002      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;   
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <DMA_CheckFifoParam+0xe8>
      break;
 800162e:	bf00      	nop
    }
  } 
  
  return status; 
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e159      	b.n	8001910 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800165c:	2201      	movs	r2, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8148 	bne.w	800190a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d005      	beq.n	8001692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168e:	2b02      	cmp	r3, #2
 8001690:	d130      	bne.n	80016f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c8:	2201      	movs	r2, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 0201 	and.w	r2, r3, #1
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d017      	beq.n	8001730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d123      	bne.n	8001784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	08da      	lsrs	r2, r3, #3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3208      	adds	r2, #8
 8001744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f003 0307 	and.w	r3, r3, #7
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	220f      	movs	r2, #15
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	691a      	ldr	r2, [r3, #16]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	08da      	lsrs	r2, r3, #3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3208      	adds	r2, #8
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a2 	beq.w	800190a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b57      	ldr	r3, [pc, #348]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a56      	ldr	r2, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_GPIO_Init+0x2e8>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e2:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x2ec>)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3302      	adds	r3, #2
 80017ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_GPIO_Init+0x2f0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x202>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2f4>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x1fe>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_GPIO_Init+0x2f8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x1fa>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a46      	ldr	r2, [pc, #280]	; (800193c <HAL_GPIO_Init+0x2fc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x1f6>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a45      	ldr	r2, [pc, #276]	; (8001940 <HAL_GPIO_Init+0x300>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x1f2>
 800182e:	2304      	movs	r3, #4
 8001830:	e008      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001832:	2307      	movs	r3, #7
 8001834:	e006      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001836:	2303      	movs	r3, #3
 8001838:	e004      	b.n	8001844 <HAL_GPIO_Init+0x204>
 800183a:	2302      	movs	r3, #2
 800183c:	e002      	b.n	8001844 <HAL_GPIO_Init+0x204>
 800183e:	2301      	movs	r3, #1
 8001840:	e000      	b.n	8001844 <HAL_GPIO_Init+0x204>
 8001842:	2300      	movs	r3, #0
 8001844:	69fa      	ldr	r2, [r7, #28]
 8001846:	f002 0203 	and.w	r2, r2, #3
 800184a:	0092      	lsls	r2, r2, #2
 800184c:	4093      	lsls	r3, r2
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <HAL_GPIO_Init+0x2ec>)
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x304>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018da:	4a1a      	ldr	r2, [pc, #104]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x304>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x304>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3301      	adds	r3, #1
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b0f      	cmp	r3, #15
 8001914:	f67f aea2 	bls.w	800165c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3724      	adds	r7, #36	; 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800
 800192c:	40013800 	.word	0x40013800
 8001930:	40020000 	.word	0x40020000
 8001934:	40020400 	.word	0x40020400
 8001938:	40020800 	.word	0x40020800
 800193c:	40020c00 	.word	0x40020c00
 8001940:	40021000 	.word	0x40021000
 8001944:	40013c00 	.word	0x40013c00

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e267      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d075      	beq.n	8001a86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d00c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d112      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b2:	4b82      	ldr	r3, [pc, #520]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	4b7e      	ldr	r3, [pc, #504]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d05b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x108>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d157      	bne.n	8001a84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e242      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x74>
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0x98>
 80019fa:	4b70      	ldr	r3, [pc, #448]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a6f      	ldr	r2, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6c      	ldr	r2, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xb0>
 8001a14:	4b69      	ldr	r3, [pc, #420]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a68      	ldr	r2, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f8e4 	bl	8000c00 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f8e0 	bl	8000c00 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e207      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xc0>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f8d0 	bl	8000c00 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f8cc 	bl	8000c00 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1f3      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b51      	ldr	r3, [pc, #324]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0xe8>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	4b4a      	ldr	r3, [pc, #296]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a9e:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aaa:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1c7      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	e03a      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_OscConfig+0x244>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f885 	bl	8000c00 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f881 	bl	8000c00 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1a8      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4925      	ldr	r1, [pc, #148]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
 8001b2c:	e015      	b.n	8001b5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_OscConfig+0x244>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff f864 	bl	8000c00 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f860 	bl	8000c00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e187      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d036      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d016      	beq.n	8001b9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_RCC_OscConfig+0x248>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f844 	bl	8000c00 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f840 	bl	8000c00 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e167      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <HAL_RCC_OscConfig+0x240>)
 8001b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x200>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_RCC_OscConfig+0x248>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff f82d 	bl	8000c00 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	e00e      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001baa:	f7ff f829 	bl	8000c00 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d907      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e150      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	42470000 	.word	0x42470000
 8001bc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ea      	bne.n	8001baa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8097 	beq.w	8001d10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b81      	ldr	r3, [pc, #516]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6413      	str	r3, [r2, #64]	; 0x40
 8001c02:	4b7a      	ldr	r3, [pc, #488]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	4b77      	ldr	r3, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d118      	bne.n	8001c50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1e:	4b74      	ldr	r3, [pc, #464]	; (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a73      	ldr	r2, [pc, #460]	; (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2a:	f7fe ffe9 	bl	8000c00 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c32:	f7fe ffe5 	bl	8000c00 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e10c      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x474>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d106      	bne.n	8001c66 <HAL_RCC_OscConfig+0x2ea>
 8001c58:	4b64      	ldr	r3, [pc, #400]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	e01c      	b.n	8001ca0 <HAL_RCC_OscConfig+0x324>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x30c>
 8001c6e:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a5e      	ldr	r2, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a5b      	ldr	r2, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0x324>
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	4b55      	ldr	r3, [pc, #340]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c98:	4a54      	ldr	r2, [pc, #336]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d015      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7fe ffaa 	bl	8000c00 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7fe ffa6 	bl	8000c00 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0cb      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ee      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x334>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7fe ff94 	bl	8000c00 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7fe ff90 	bl	8000c00 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0b5      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ee      	bne.n	8001cdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a38      	ldr	r2, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80a1 	beq.w	8001e5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d05c      	beq.n	8001de0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d141      	bne.n	8001db2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b31      	ldr	r3, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7fe ff64 	bl	8000c00 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe ff60 	bl	8000c00 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e087      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	019b      	lsls	r3, r3, #6
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	085b      	lsrs	r3, r3, #1
 8001d72:	3b01      	subs	r3, #1
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ff39 	bl	8000c00 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff35 	bl	8000c00 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e05c      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x416>
 8001db0:	e054      	b.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x478>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe ff22 	bl	8000c00 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe ff1e 	bl	8000c00 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e045      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x470>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x444>
 8001dde:	e03d      	b.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e038      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4ec>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d028      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d121      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d11a      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	085b      	lsrs	r3, r3, #1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0cc      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0307 	and.w	r3, r3, #7
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d90c      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b65      	ldr	r3, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d044      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d119      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e06f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e067      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f023 0203 	bic.w	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4934      	ldr	r1, [pc, #208]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fe50 	bl	8000c00 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	e00a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f64:	f7fe fe4c 	bl	8000c00 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e04f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 020c 	and.w	r2, r3, #12
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d1eb      	bne.n	8001f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d20c      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1c8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fdb0 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	08003e90 	.word	0x08003e90
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b090      	sub	sp, #64	; 0x40
 800203e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	637b      	str	r3, [r7, #52]	; 0x34
 8002044:	2300      	movs	r3, #0
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b08      	cmp	r3, #8
 800205a:	d00d      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 800205c:	2b08      	cmp	r3, #8
 800205e:	f200 80a1 	bhi.w	80021a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x34>
 8002066:	2b04      	cmp	r3, #4
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x3a>
 800206a:	e09b      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_GetSysClockFreq+0x184>)
 800206e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002070:	e09b      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002076:	e098      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002080:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d028      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	2200      	movs	r2, #0
 8002096:	623b      	str	r3, [r7, #32]
 8002098:	627a      	str	r2, [r7, #36]	; 0x24
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020a0:	2100      	movs	r1, #0
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020a4:	fb03 f201 	mul.w	r2, r3, r1
 80020a8:	2300      	movs	r3, #0
 80020aa:	fb00 f303 	mul.w	r3, r0, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	4a43      	ldr	r2, [pc, #268]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b2:	fba0 1202 	umull	r1, r2, r0, r2
 80020b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020b8:	460a      	mov	r2, r1
 80020ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80020bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020be:	4413      	add	r3, r2
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c4:	2200      	movs	r2, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	61fa      	str	r2, [r7, #28]
 80020ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020d2:	f7fe f861 	bl	8000198 <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4613      	mov	r3, r2
 80020dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020de:	e053      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	2200      	movs	r2, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	617a      	str	r2, [r7, #20]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020f2:	f04f 0b00 	mov.w	fp, #0
 80020f6:	4652      	mov	r2, sl
 80020f8:	465b      	mov	r3, fp
 80020fa:	f04f 0000 	mov.w	r0, #0
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	0159      	lsls	r1, r3, #5
 8002104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002108:	0150      	lsls	r0, r2, #5
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	ebb2 080a 	subs.w	r8, r2, sl
 8002112:	eb63 090b 	sbc.w	r9, r3, fp
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002122:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002126:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800212a:	ebb2 0408 	subs.w	r4, r2, r8
 800212e:	eb63 0509 	sbc.w	r5, r3, r9
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	00eb      	lsls	r3, r5, #3
 800213c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002140:	00e2      	lsls	r2, r4, #3
 8002142:	4614      	mov	r4, r2
 8002144:	461d      	mov	r5, r3
 8002146:	eb14 030a 	adds.w	r3, r4, sl
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	eb45 030b 	adc.w	r3, r5, fp
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800215e:	4629      	mov	r1, r5
 8002160:	028b      	lsls	r3, r1, #10
 8002162:	4621      	mov	r1, r4
 8002164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002168:	4621      	mov	r1, r4
 800216a:	028a      	lsls	r2, r1, #10
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	2200      	movs	r2, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800217c:	f7fe f80c 	bl	8000198 <__aeabi_uldivmod>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4613      	mov	r3, r2
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetSysClockFreq+0x184>)
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3740      	adds	r7, #64	; 0x40
 80021b0:	46bd      	mov	sp, r7
 80021b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	017d7840 	.word	0x017d7840

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	08003ea0 	.word	0x08003ea0

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffdc 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	08003ea0 	.word	0x08003ea0

0800222c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e07b      	b.n	8002336 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	2b00      	cmp	r3, #0
 8002244:	d108      	bne.n	8002258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800224e:	d009      	beq.n	8002264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
 8002256:	e005      	b.n	8002264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe f970 	bl	8000564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	ea42 0103 	orr.w	r1, r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0104 	and.w	r1, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0210 	and.w	r2, r3, #16
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69da      	ldr	r2, [r3, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002368:	2b00      	cmp	r3, #0
 800236a:	d009      	beq.n	8002380 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
    return;
 800237e:	e0ce      	b.n	800251e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_SPI_IRQHandler+0x5e>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    return;
 800239c:	e0bf      	b.n	800251e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_SPI_IRQHandler+0x7e>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80b0 	beq.w	800251e <HAL_SPI_IRQHandler+0x1de>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80aa 	beq.w	800251e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d023      	beq.n	800241c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d011      	beq.n	8002404 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	f043 0204 	orr.w	r2, r3, #4
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	e00b      	b.n	800241c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
        return;
 800241a:	e080      	b.n	800251e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d014      	beq.n	8002450 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002478:	2b00      	cmp	r3, #0
 800247a:	d04f      	beq.n	800251c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800248a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d104      	bne.n	80024a8 <HAL_SPI_IRQHandler+0x168>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d034      	beq.n	8002512 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0203 	bic.w	r2, r2, #3
 80024b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d011      	beq.n	80024e4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_SPI_IRQHandler+0x1e4>)
 80024c6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fe2b 	bl	8001128 <HAL_DMA_Abort_IT>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d016      	beq.n	800251a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f0:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_SPI_IRQHandler+0x1e4>)
 80024f2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fe15 	bl	8001128 <HAL_DMA_Abort_IT>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002510:	e003      	b.n	800251a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f808 	bl	8002528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002518:	e000      	b.n	800251c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800251a:	bf00      	nop
    return;
 800251c:	bf00      	nop
  }
}
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	0800253d 	.word	0x0800253d

08002528 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7ff ffe6 	bl	8002528 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03f      	b.n	80025f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fa1c 	bl	80009c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 ff73 	bl	8003494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b08a      	sub	sp, #40	; 0x28
 8002602:	af02      	add	r7, sp, #8
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b20      	cmp	r3, #32
 800261c:	d17c      	bne.n	8002718 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_UART_Transmit+0x2c>
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e075      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x3e>
 8002638:	2302      	movs	r3, #2
 800263a:	e06e      	b.n	800271a <HAL_UART_Transmit+0x11c>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2221      	movs	r2, #33	; 0x21
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe fad5 	bl	8000c00 <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	88fa      	ldrh	r2, [r7, #6]
 800265c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	88fa      	ldrh	r2, [r7, #6]
 8002662:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Transmit+0x82>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002690:	e02a      	b.n	80026e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2200      	movs	r2, #0
 800269a:	2180      	movs	r1, #128	; 0x80
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fc2b 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e036      	b.n	800271a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10b      	bne.n	80026ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3302      	adds	r3, #2
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	e007      	b.n	80026da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1cf      	bne.n	8002692 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2140      	movs	r1, #64	; 0x40
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fbfb 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e006      	b.n	800271a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	e000      	b.n	800271a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002718:	2302      	movs	r3, #2
  }
}
 800271a:	4618      	mov	r0, r3
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	4613      	mov	r3, r2
 800272e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b20      	cmp	r3, #32
 800273a:	d11d      	bne.n	8002778 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_UART_Receive_DMA+0x26>
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e016      	b.n	800277a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_UART_Receive_DMA+0x38>
 8002756:	2302      	movs	r3, #2
 8002758:	e00f      	b.n	800277a <HAL_UART_Receive_DMA+0x58>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	461a      	mov	r2, r3
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fc30 	bl	8002fd4 <UART_Start_Receive_DMA>
 8002774:	4603      	mov	r3, r0
 8002776:	e000      	b.n	800277a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0ba      	sub	sp, #232	; 0xe8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <HAL_UART_IRQHandler+0x66>
 80027d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fd9b 	bl	800331e <UART_Receive_IT>
      return;
 80027e8:	e256      	b.n	8002c98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80de 	beq.w	80029b0 <HAL_UART_IRQHandler+0x22c>
 80027f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d106      	bne.n	800280e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002804:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80d1 	beq.w	80029b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_UART_IRQHandler+0xae>
 800281a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f043 0201 	orr.w	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_UART_IRQHandler+0xd2>
 800283e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_UART_IRQHandler+0xf6>
 8002862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0204 	orr.w	r2, r3, #4
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800287a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d011      	beq.n	80028aa <HAL_UART_IRQHandler+0x126>
 8002886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f043 0208 	orr.w	r2, r3, #8
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 81ed 	beq.w	8002c8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_UART_IRQHandler+0x14e>
 80028c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fd26 	bl	800331e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_UART_IRQHandler+0x17a>
 80028f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04f      	beq.n	800299e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fc2e 	bl	8003160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d141      	bne.n	8002996 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	3314      	adds	r3, #20
 8002918:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002920:	e853 3f00 	ldrex	r3, [r3]
 8002924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800292c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800293e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800294a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1d9      	bne.n	8002912 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	2b00      	cmp	r3, #0
 8002964:	d013      	beq.n	800298e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4a7d      	ldr	r2, [pc, #500]	; (8002b60 <HAL_UART_IRQHandler+0x3dc>)
 800296c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fbd8 	bl	8001128 <HAL_DMA_Abort_IT>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002988:	4610      	mov	r0, r2
 800298a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800298c:	e00e      	b.n	80029ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f9a4 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002994:	e00a      	b.n	80029ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9a0 	bl	8002cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800299c:	e006      	b.n	80029ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f99c 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029aa:	e170      	b.n	8002c8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	bf00      	nop
    return;
 80029ae:	e16e      	b.n	8002c8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	f040 814a 	bne.w	8002c4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8143 	beq.w	8002c4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 813c 	beq.w	8002c4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	f040 80b4 	bne.w	8002b64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8140 	beq.w	8002c92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	f080 8139 	bcs.w	8002c92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	f000 8088 	beq.w	8002b46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a72:	e841 2300 	strex	r3, r2, [r1]
 8002a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1d9      	bne.n	8002a36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3314      	adds	r3, #20
 8002a88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a94:	f023 0301 	bic.w	r3, r3, #1
 8002a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3314      	adds	r3, #20
 8002aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ab2:	e841 2300 	strex	r3, r2, [r1]
 8002ab6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e1      	bne.n	8002a82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac8:	e853 3f00 	ldrex	r3, [r3]
 8002acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3314      	adds	r3, #20
 8002ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ae2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ae4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aea:	e841 2300 	strex	r3, r2, [r1]
 8002aee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e3      	bne.n	8002abe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	330c      	adds	r3, #12
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b16:	f023 0310 	bic.w	r3, r3, #16
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	330c      	adds	r3, #12
 8002b24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b28:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e3      	bne.n	8002b04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fa81 	bl	8001048 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4619      	mov	r1, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8ca 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b5c:	e099      	b.n	8002c92 <HAL_UART_IRQHandler+0x50e>
 8002b5e:	bf00      	nop
 8002b60:	08003227 	.word	0x08003227
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 808b 	beq.w	8002c96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8086 	beq.w	8002c96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bae:	647a      	str	r2, [r7, #68]	; 0x44
 8002bb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e3      	bne.n	8002b8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3314      	adds	r3, #20
 8002be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002be6:	633a      	str	r2, [r7, #48]	; 0x30
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e3      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0310 	bic.w	r3, r3, #16
 8002c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c2c:	61fa      	str	r2, [r7, #28]
 8002c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	69b9      	ldr	r1, [r7, #24]
 8002c32:	69fa      	ldr	r2, [r7, #28]
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	617b      	str	r3, [r7, #20]
   return(result);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e3      	bne.n	8002c08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f852 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c4c:	e023      	b.n	8002c96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_UART_IRQHandler+0x4ea>
 8002c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 faf1 	bl	800324e <UART_Transmit_IT>
    return;
 8002c6c:	e014      	b.n	8002c98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <HAL_UART_IRQHandler+0x514>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fb31 	bl	80032ee <UART_EndTransmit_IT>
    return;
 8002c8c:	e004      	b.n	8002c98 <HAL_UART_IRQHandler+0x514>
    return;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <HAL_UART_IRQHandler+0x514>
      return;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <HAL_UART_IRQHandler+0x514>
      return;
 8002c96:	bf00      	nop
  }
}
 8002c98:	37e8      	adds	r7, #232	; 0xe8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b09c      	sub	sp, #112	; 0x70
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d172      	bne.n	8002e0a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d26:	2200      	movs	r2, #0
 8002d28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	667b      	str	r3, [r7, #100]	; 0x64
 8002d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	623b      	str	r3, [r7, #32]
   return(result);
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
 8002daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002db2:	633a      	str	r2, [r7, #48]	; 0x30
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d119      	bne.n	8002e0a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	330c      	adds	r3, #12
 8002ddc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	330c      	adds	r3, #12
 8002df4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002df6:	61fa      	str	r2, [r7, #28]
 8002df8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	617b      	str	r3, [r7, #20]
   return(result);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e5      	bne.n	8002dd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002e1a:	f7ff ff69 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e1e:	e002      	b.n	8002e26 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002e20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002e22:	f7ff ff47 	bl	8002cb4 <HAL_UART_RxCpltCallback>
}
 8002e26:	bf00      	nop
 8002e28:	3770      	adds	r7, #112	; 0x70
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d108      	bne.n	8002e56 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff4e 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e54:	e002      	b.n	8002e5c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7ff ff36 	bl	8002cc8 <HAL_UART_RxHalfCpltCallback>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	2b80      	cmp	r3, #128	; 0x80
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d108      	bne.n	8002eaa <UART_DMAError+0x46>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d005      	beq.n	8002eaa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002ea4:	68b8      	ldr	r0, [r7, #8]
 8002ea6:	f000 f933 	bl	8003110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b22      	cmp	r3, #34	; 0x22
 8002eca:	d108      	bne.n	8002ede <UART_DMAError+0x7a>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ed8:	68b8      	ldr	r0, [r7, #8]
 8002eda:	f000 f941 	bl	8003160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	f7ff fef6 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b090      	sub	sp, #64	; 0x40
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	e050      	b.n	8002fac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f10:	d04c      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f18:	f7fd fe72 	bl	8000c00 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d241      	bcs.n	8002fac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	e853 3f00 	ldrex	r3, [r3]
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f48:	637a      	str	r2, [r7, #52]	; 0x34
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e5      	bne.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3314      	adds	r3, #20
 8002f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3314      	adds	r3, #20
 8002f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f7c:	623a      	str	r2, [r7, #32]
 8002f7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	69f9      	ldr	r1, [r7, #28]
 8002f82:	6a3a      	ldr	r2, [r7, #32]
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e5      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e00f      	b.n	8002fcc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d09f      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3740      	adds	r7, #64	; 0x40
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b098      	sub	sp, #96	; 0x60
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	88fa      	ldrh	r2, [r7, #6]
 8002fec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2222      	movs	r2, #34	; 0x22
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	4a40      	ldr	r2, [pc, #256]	; (8003104 <UART_Start_Receive_DMA+0x130>)
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <UART_Start_Receive_DMA+0x134>)
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	4a3e      	ldr	r2, [pc, #248]	; (800310c <UART_Start_Receive_DMA+0x138>)
 8003012:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	2200      	movs	r2, #0
 800301a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800301c:	f107 0308 	add.w	r3, r7, #8
 8003020:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	f7fd ffb0 	bl	8000f98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d019      	beq.n	8003092 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	330c      	adds	r3, #12
 8003064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	65bb      	str	r3, [r7, #88]	; 0x58
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	330c      	adds	r3, #12
 800307c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003080:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800308c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e5      	bne.n	800305e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3314      	adds	r3, #20
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	657b      	str	r3, [r7, #84]	; 0x54
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80030b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80030b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ba:	e841 2300 	strex	r3, r2, [r1]
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1e5      	bne.n	8003092 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3314      	adds	r3, #20
 80030cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	617b      	str	r3, [r7, #20]
   return(result);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030dc:	653b      	str	r3, [r7, #80]	; 0x50
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3314      	adds	r3, #20
 80030e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030e6:	627a      	str	r2, [r7, #36]	; 0x24
 80030e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	6a39      	ldr	r1, [r7, #32]
 80030ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3760      	adds	r7, #96	; 0x60
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08002d09 	.word	0x08002d09
 8003108:	08002e2f 	.word	0x08002e2f
 800310c:	08002e65 	.word	0x08002e65

08003110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	60bb      	str	r3, [r7, #8]
   return(result);
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800312e:	61fb      	str	r3, [r7, #28]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	330c      	adds	r3, #12
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	61ba      	str	r2, [r7, #24]
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	6979      	ldr	r1, [r7, #20]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	613b      	str	r3, [r7, #16]
   return(result);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e5      	bne.n	8003118 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003154:	bf00      	nop
 8003156:	3724      	adds	r7, #36	; 0x24
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003160:	b480      	push	{r7}
 8003162:	b095      	sub	sp, #84	; 0x54
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	330c      	adds	r3, #12
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003172:	e853 3f00 	ldrex	r3, [r3]
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003188:	643a      	str	r2, [r7, #64]	; 0x40
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800318e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003190:	e841 2300 	strex	r3, r2, [r1]
 8003194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e5      	bne.n	8003168 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3314      	adds	r3, #20
 80031a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3314      	adds	r3, #20
 80031ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d119      	bne.n	800320c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f023 0310 	bic.w	r3, r3, #16
 80031ee:	647b      	str	r3, [r7, #68]	; 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f8:	61ba      	str	r2, [r7, #24]
 80031fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6979      	ldr	r1, [r7, #20]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	613b      	str	r3, [r7, #16]
   return(result);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
}
 800321a:	bf00      	nop
 800321c:	3754      	adds	r7, #84	; 0x54
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b084      	sub	sp, #16
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f7ff fd4b 	bl	8002cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800324e:	b480      	push	{r7}
 8003250:	b085      	sub	sp, #20
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b21      	cmp	r3, #33	; 0x21
 8003260:	d13e      	bne.n	80032e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	d114      	bne.n	8003296 <UART_Transmit_IT+0x48>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d110      	bne.n	8003296 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	1c9a      	adds	r2, r3, #2
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	621a      	str	r2, [r3, #32]
 8003294:	e008      	b.n	80032a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	1c59      	adds	r1, r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6211      	str	r1, [r2, #32]
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4619      	mov	r1, r3
 80032b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10f      	bne.n	80032dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fcc6 	bl	8002ca0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b08c      	sub	sp, #48	; 0x30
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b22      	cmp	r3, #34	; 0x22
 8003330:	f040 80ab 	bne.w	800348a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333c:	d117      	bne.n	800336e <UART_Receive_IT+0x50>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335c:	b29a      	uxth	r2, r3
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	1c9a      	adds	r2, r3, #2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
 800336c:	e026      	b.n	80033bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d007      	beq.n	8003392 <UART_Receive_IT+0x74>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <UART_Receive_IT+0x82>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	b2da      	uxtb	r2, r3
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e008      	b.n	80033b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4619      	mov	r1, r3
 80033ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d15a      	bne.n	8003486 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0220 	bic.w	r2, r2, #32
 80033de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695a      	ldr	r2, [r3, #20]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	d135      	bne.n	800347c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	613b      	str	r3, [r7, #16]
   return(result);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f023 0310 	bic.w	r3, r3, #16
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003436:	623a      	str	r2, [r7, #32]
 8003438:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	69f9      	ldr	r1, [r7, #28]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	61bb      	str	r3, [r7, #24]
   return(result);
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e5      	bne.n	8003416 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d10a      	bne.n	800346e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003458:	2300      	movs	r3, #0
 800345a:	60fb      	str	r3, [r7, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fc3b 	bl	8002cf0 <HAL_UARTEx_RxEventCallback>
 800347a:	e002      	b.n	8003482 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fc19 	bl	8002cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	e002      	b.n	800348c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3730      	adds	r7, #48	; 0x30
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003498:	b0c0      	sub	sp, #256	; 0x100
 800349a:	af00      	add	r7, sp, #0
 800349c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	68d9      	ldr	r1, [r3, #12]
 80034b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	ea40 0301 	orr.w	r3, r0, r1
 80034bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034ec:	f021 010c 	bic.w	r1, r1, #12
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034fa:	430b      	orrs	r3, r1
 80034fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350e:	6999      	ldr	r1, [r3, #24]
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	ea40 0301 	orr.w	r3, r0, r1
 800351a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800351c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b8f      	ldr	r3, [pc, #572]	; (8003760 <UART_SetConfig+0x2cc>)
 8003524:	429a      	cmp	r2, r3
 8003526:	d005      	beq.n	8003534 <UART_SetConfig+0xa0>
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <UART_SetConfig+0x2d0>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d104      	bne.n	800353e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7fe fe66 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8003538:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800353c:	e003      	b.n	8003546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353e:	f7fe fe4d 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8003542:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003550:	f040 810c 	bne.w	800376c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800355e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003566:	4622      	mov	r2, r4
 8003568:	462b      	mov	r3, r5
 800356a:	1891      	adds	r1, r2, r2
 800356c:	65b9      	str	r1, [r7, #88]	; 0x58
 800356e:	415b      	adcs	r3, r3
 8003570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003576:	4621      	mov	r1, r4
 8003578:	eb12 0801 	adds.w	r8, r2, r1
 800357c:	4629      	mov	r1, r5
 800357e:	eb43 0901 	adc.w	r9, r3, r1
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800358e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003596:	4690      	mov	r8, r2
 8003598:	4699      	mov	r9, r3
 800359a:	4623      	mov	r3, r4
 800359c:	eb18 0303 	adds.w	r3, r8, r3
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035a4:	462b      	mov	r3, r5
 80035a6:	eb49 0303 	adc.w	r3, r9, r3
 80035aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035c2:	460b      	mov	r3, r1
 80035c4:	18db      	adds	r3, r3, r3
 80035c6:	653b      	str	r3, [r7, #80]	; 0x50
 80035c8:	4613      	mov	r3, r2
 80035ca:	eb42 0303 	adc.w	r3, r2, r3
 80035ce:	657b      	str	r3, [r7, #84]	; 0x54
 80035d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035d8:	f7fc fdde 	bl	8000198 <__aeabi_uldivmod>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4b61      	ldr	r3, [pc, #388]	; (8003768 <UART_SetConfig+0x2d4>)
 80035e2:	fba3 2302 	umull	r2, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	011c      	lsls	r4, r3, #4
 80035ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	1891      	adds	r1, r2, r2
 8003602:	64b9      	str	r1, [r7, #72]	; 0x48
 8003604:	415b      	adcs	r3, r3
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800360c:	4641      	mov	r1, r8
 800360e:	eb12 0a01 	adds.w	sl, r2, r1
 8003612:	4649      	mov	r1, r9
 8003614:	eb43 0b01 	adc.w	fp, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800362c:	4692      	mov	sl, r2
 800362e:	469b      	mov	fp, r3
 8003630:	4643      	mov	r3, r8
 8003632:	eb1a 0303 	adds.w	r3, sl, r3
 8003636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800363a:	464b      	mov	r3, r9
 800363c:	eb4b 0303 	adc.w	r3, fp, r3
 8003640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003650:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003658:	460b      	mov	r3, r1
 800365a:	18db      	adds	r3, r3, r3
 800365c:	643b      	str	r3, [r7, #64]	; 0x40
 800365e:	4613      	mov	r3, r2
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800366a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800366e:	f7fc fd93 	bl	8000198 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4611      	mov	r1, r2
 8003678:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <UART_SetConfig+0x2d4>)
 800367a:	fba3 2301 	umull	r2, r3, r3, r1
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2264      	movs	r2, #100	; 0x64
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	1acb      	subs	r3, r1, r3
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800368e:	4b36      	ldr	r3, [pc, #216]	; (8003768 <UART_SetConfig+0x2d4>)
 8003690:	fba3 2302 	umull	r2, r3, r3, r2
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800369c:	441c      	add	r4, r3
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036b8:	415b      	adcs	r3, r3
 80036ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036c0:	4641      	mov	r1, r8
 80036c2:	1851      	adds	r1, r2, r1
 80036c4:	6339      	str	r1, [r7, #48]	; 0x30
 80036c6:	4649      	mov	r1, r9
 80036c8:	414b      	adcs	r3, r1
 80036ca:	637b      	str	r3, [r7, #52]	; 0x34
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036d8:	4659      	mov	r1, fp
 80036da:	00cb      	lsls	r3, r1, #3
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e2:	4651      	mov	r1, sl
 80036e4:	00ca      	lsls	r2, r1, #3
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	4642      	mov	r2, r8
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036f4:	464b      	mov	r3, r9
 80036f6:	460a      	mov	r2, r1
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800370c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003714:	460b      	mov	r3, r1
 8003716:	18db      	adds	r3, r3, r3
 8003718:	62bb      	str	r3, [r7, #40]	; 0x28
 800371a:	4613      	mov	r3, r2
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800372a:	f7fc fd35 	bl	8000198 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <UART_SetConfig+0x2d4>)
 8003734:	fba3 1302 	umull	r1, r3, r3, r2
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	2164      	movs	r1, #100	; 0x64
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	3332      	adds	r3, #50	; 0x32
 8003746:	4a08      	ldr	r2, [pc, #32]	; (8003768 <UART_SetConfig+0x2d4>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	f003 0207 	and.w	r2, r3, #7
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4422      	add	r2, r4
 800375a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800375c:	e106      	b.n	800396c <UART_SetConfig+0x4d8>
 800375e:	bf00      	nop
 8003760:	40011000 	.word	0x40011000
 8003764:	40011400 	.word	0x40011400
 8003768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800376c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003776:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800377a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800377e:	4642      	mov	r2, r8
 8003780:	464b      	mov	r3, r9
 8003782:	1891      	adds	r1, r2, r2
 8003784:	6239      	str	r1, [r7, #32]
 8003786:	415b      	adcs	r3, r3
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378e:	4641      	mov	r1, r8
 8003790:	1854      	adds	r4, r2, r1
 8003792:	4649      	mov	r1, r9
 8003794:	eb43 0501 	adc.w	r5, r3, r1
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	00eb      	lsls	r3, r5, #3
 80037a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a6:	00e2      	lsls	r2, r4, #3
 80037a8:	4614      	mov	r4, r2
 80037aa:	461d      	mov	r5, r3
 80037ac:	4643      	mov	r3, r8
 80037ae:	18e3      	adds	r3, r4, r3
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037b4:	464b      	mov	r3, r9
 80037b6:	eb45 0303 	adc.w	r3, r5, r3
 80037ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037da:	4629      	mov	r1, r5
 80037dc:	008b      	lsls	r3, r1, #2
 80037de:	4621      	mov	r1, r4
 80037e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e4:	4621      	mov	r1, r4
 80037e6:	008a      	lsls	r2, r1, #2
 80037e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037ec:	f7fc fcd4 	bl	8000198 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4b60      	ldr	r3, [pc, #384]	; (8003978 <UART_SetConfig+0x4e4>)
 80037f6:	fba3 2302 	umull	r2, r3, r3, r2
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	011c      	lsls	r4, r3, #4
 80037fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003802:	2200      	movs	r2, #0
 8003804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800380c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	1891      	adds	r1, r2, r2
 8003816:	61b9      	str	r1, [r7, #24]
 8003818:	415b      	adcs	r3, r3
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003820:	4641      	mov	r1, r8
 8003822:	1851      	adds	r1, r2, r1
 8003824:	6139      	str	r1, [r7, #16]
 8003826:	4649      	mov	r1, r9
 8003828:	414b      	adcs	r3, r1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003838:	4659      	mov	r1, fp
 800383a:	00cb      	lsls	r3, r1, #3
 800383c:	4651      	mov	r1, sl
 800383e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003842:	4651      	mov	r1, sl
 8003844:	00ca      	lsls	r2, r1, #3
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	4603      	mov	r3, r0
 800384c:	4642      	mov	r2, r8
 800384e:	189b      	adds	r3, r3, r2
 8003850:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003854:	464b      	mov	r3, r9
 8003856:	460a      	mov	r2, r1
 8003858:	eb42 0303 	adc.w	r3, r2, r3
 800385c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	67bb      	str	r3, [r7, #120]	; 0x78
 800386a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003878:	4649      	mov	r1, r9
 800387a:	008b      	lsls	r3, r1, #2
 800387c:	4641      	mov	r1, r8
 800387e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003882:	4641      	mov	r1, r8
 8003884:	008a      	lsls	r2, r1, #2
 8003886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800388a:	f7fc fc85 	bl	8000198 <__aeabi_uldivmod>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4611      	mov	r1, r2
 8003894:	4b38      	ldr	r3, [pc, #224]	; (8003978 <UART_SetConfig+0x4e4>)
 8003896:	fba3 2301 	umull	r2, r3, r3, r1
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2264      	movs	r2, #100	; 0x64
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	1acb      	subs	r3, r1, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a33      	ldr	r2, [pc, #204]	; (8003978 <UART_SetConfig+0x4e4>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b4:	441c      	add	r4, r3
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	673b      	str	r3, [r7, #112]	; 0x70
 80038be:	677a      	str	r2, [r7, #116]	; 0x74
 80038c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	415b      	adcs	r3, r3
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	66bb      	str	r3, [r7, #104]	; 0x68
 8003906:	464b      	mov	r3, r9
 8003908:	460a      	mov	r2, r1
 800390a:	eb42 0303 	adc.w	r3, r2, r3
 800390e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	663b      	str	r3, [r7, #96]	; 0x60
 800391a:	667a      	str	r2, [r7, #100]	; 0x64
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003928:	4649      	mov	r1, r9
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	4641      	mov	r1, r8
 800392e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003932:	4641      	mov	r1, r8
 8003934:	008a      	lsls	r2, r1, #2
 8003936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800393a:	f7fc fc2d 	bl	8000198 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <UART_SetConfig+0x4e4>)
 8003944:	fba3 1302 	umull	r1, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	2164      	movs	r1, #100	; 0x64
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	3332      	adds	r3, #50	; 0x32
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <UART_SetConfig+0x4e4>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4422      	add	r2, r4
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003978:	51eb851f 	.word	0x51eb851f

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4d0d      	ldr	r5, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2600      	movs	r6, #0
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4d0b      	ldr	r5, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 fa72 	bl	8003e78 <_init>
 8003994:	1b64      	subs	r4, r4, r5
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2600      	movs	r6, #0
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08003eb8 	.word	0x08003eb8
 80039b8:	08003eb8 	.word	0x08003eb8
 80039bc:	08003eb8 	.word	0x08003eb8
 80039c0:	08003ebc 	.word	0x08003ebc

080039c4 <memcpy>:
 80039c4:	440a      	add	r2, r1
 80039c6:	4291      	cmp	r1, r2
 80039c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	4770      	bx	lr
 80039d0:	b510      	push	{r4, lr}
 80039d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039da:	4291      	cmp	r1, r2
 80039dc:	d1f9      	bne.n	80039d2 <memcpy+0xe>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <malloc>:
 80039e0:	4b02      	ldr	r3, [pc, #8]	; (80039ec <malloc+0xc>)
 80039e2:	4601      	mov	r1, r0
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	f000 b823 	b.w	8003a30 <_malloc_r>
 80039ea:	bf00      	nop
 80039ec:	20000058 	.word	0x20000058

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0e      	ldr	r6, [pc, #56]	; (8003a2c <sbrk_aligned+0x3c>)
 80039f4:	460c      	mov	r4, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	4605      	mov	r5, r0
 80039fa:	b911      	cbnz	r1, 8003a02 <sbrk_aligned+0x12>
 80039fc:	f000 f8b8 	bl	8003b70 <_sbrk_r>
 8003a00:	6030      	str	r0, [r6, #0]
 8003a02:	4621      	mov	r1, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 f8b3 	bl	8003b70 <_sbrk_r>
 8003a0a:	1c43      	adds	r3, r0, #1
 8003a0c:	d00a      	beq.n	8003a24 <sbrk_aligned+0x34>
 8003a0e:	1cc4      	adds	r4, r0, #3
 8003a10:	f024 0403 	bic.w	r4, r4, #3
 8003a14:	42a0      	cmp	r0, r4
 8003a16:	d007      	beq.n	8003a28 <sbrk_aligned+0x38>
 8003a18:	1a21      	subs	r1, r4, r0
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f8a8 	bl	8003b70 <_sbrk_r>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d101      	bne.n	8003a28 <sbrk_aligned+0x38>
 8003a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003a28:	4620      	mov	r0, r4
 8003a2a:	bd70      	pop	{r4, r5, r6, pc}
 8003a2c:	20000184 	.word	0x20000184

08003a30 <_malloc_r>:
 8003a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a34:	1ccd      	adds	r5, r1, #3
 8003a36:	f025 0503 	bic.w	r5, r5, #3
 8003a3a:	3508      	adds	r5, #8
 8003a3c:	2d0c      	cmp	r5, #12
 8003a3e:	bf38      	it	cc
 8003a40:	250c      	movcc	r5, #12
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	4607      	mov	r7, r0
 8003a46:	db01      	blt.n	8003a4c <_malloc_r+0x1c>
 8003a48:	42a9      	cmp	r1, r5
 8003a4a:	d905      	bls.n	8003a58 <_malloc_r+0x28>
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	2600      	movs	r6, #0
 8003a52:	4630      	mov	r0, r6
 8003a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a58:	4e2f      	ldr	r6, [pc, #188]	; (8003b18 <_malloc_r+0xe8>)
 8003a5a:	f000 f85f 	bl	8003b1c <__malloc_lock>
 8003a5e:	6833      	ldr	r3, [r6, #0]
 8003a60:	461c      	mov	r4, r3
 8003a62:	bb44      	cbnz	r4, 8003ab6 <_malloc_r+0x86>
 8003a64:	4629      	mov	r1, r5
 8003a66:	4638      	mov	r0, r7
 8003a68:	f7ff ffc2 	bl	80039f0 <sbrk_aligned>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	4604      	mov	r4, r0
 8003a70:	d14f      	bne.n	8003b12 <_malloc_r+0xe2>
 8003a72:	6834      	ldr	r4, [r6, #0]
 8003a74:	4626      	mov	r6, r4
 8003a76:	2e00      	cmp	r6, #0
 8003a78:	d142      	bne.n	8003b00 <_malloc_r+0xd0>
 8003a7a:	2c00      	cmp	r4, #0
 8003a7c:	d043      	beq.n	8003b06 <_malloc_r+0xd6>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	4631      	mov	r1, r6
 8003a82:	4638      	mov	r0, r7
 8003a84:	eb04 0803 	add.w	r8, r4, r3
 8003a88:	f000 f872 	bl	8003b70 <_sbrk_r>
 8003a8c:	4580      	cmp	r8, r0
 8003a8e:	d13a      	bne.n	8003b06 <_malloc_r+0xd6>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	3503      	adds	r5, #3
 8003a94:	1aed      	subs	r5, r5, r3
 8003a96:	f025 0503 	bic.w	r5, r5, #3
 8003a9a:	3508      	adds	r5, #8
 8003a9c:	2d0c      	cmp	r5, #12
 8003a9e:	bf38      	it	cc
 8003aa0:	250c      	movcc	r5, #12
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	f7ff ffa3 	bl	80039f0 <sbrk_aligned>
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d02b      	beq.n	8003b06 <_malloc_r+0xd6>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	442b      	add	r3, r5
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	e00e      	b.n	8003ad4 <_malloc_r+0xa4>
 8003ab6:	6822      	ldr	r2, [r4, #0]
 8003ab8:	1b52      	subs	r2, r2, r5
 8003aba:	d41e      	bmi.n	8003afa <_malloc_r+0xca>
 8003abc:	2a0b      	cmp	r2, #11
 8003abe:	d916      	bls.n	8003aee <_malloc_r+0xbe>
 8003ac0:	1961      	adds	r1, r4, r5
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	6025      	str	r5, [r4, #0]
 8003ac6:	bf18      	it	ne
 8003ac8:	6059      	strne	r1, [r3, #4]
 8003aca:	6863      	ldr	r3, [r4, #4]
 8003acc:	bf08      	it	eq
 8003ace:	6031      	streq	r1, [r6, #0]
 8003ad0:	5162      	str	r2, [r4, r5]
 8003ad2:	604b      	str	r3, [r1, #4]
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	f104 060b 	add.w	r6, r4, #11
 8003ada:	f000 f825 	bl	8003b28 <__malloc_unlock>
 8003ade:	f026 0607 	bic.w	r6, r6, #7
 8003ae2:	1d23      	adds	r3, r4, #4
 8003ae4:	1af2      	subs	r2, r6, r3
 8003ae6:	d0b4      	beq.n	8003a52 <_malloc_r+0x22>
 8003ae8:	1b9b      	subs	r3, r3, r6
 8003aea:	50a3      	str	r3, [r4, r2]
 8003aec:	e7b1      	b.n	8003a52 <_malloc_r+0x22>
 8003aee:	6862      	ldr	r2, [r4, #4]
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	bf0c      	ite	eq
 8003af4:	6032      	streq	r2, [r6, #0]
 8003af6:	605a      	strne	r2, [r3, #4]
 8003af8:	e7ec      	b.n	8003ad4 <_malloc_r+0xa4>
 8003afa:	4623      	mov	r3, r4
 8003afc:	6864      	ldr	r4, [r4, #4]
 8003afe:	e7b0      	b.n	8003a62 <_malloc_r+0x32>
 8003b00:	4634      	mov	r4, r6
 8003b02:	6876      	ldr	r6, [r6, #4]
 8003b04:	e7b7      	b.n	8003a76 <_malloc_r+0x46>
 8003b06:	230c      	movs	r3, #12
 8003b08:	603b      	str	r3, [r7, #0]
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f000 f80c 	bl	8003b28 <__malloc_unlock>
 8003b10:	e79f      	b.n	8003a52 <_malloc_r+0x22>
 8003b12:	6025      	str	r5, [r4, #0]
 8003b14:	e7de      	b.n	8003ad4 <_malloc_r+0xa4>
 8003b16:	bf00      	nop
 8003b18:	20000180 	.word	0x20000180

08003b1c <__malloc_lock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <__malloc_lock+0x8>)
 8003b1e:	f000 b845 	b.w	8003bac <__retarget_lock_acquire_recursive>
 8003b22:	bf00      	nop
 8003b24:	200002c0 	.word	0x200002c0

08003b28 <__malloc_unlock>:
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <__malloc_unlock+0x8>)
 8003b2a:	f000 b840 	b.w	8003bae <__retarget_lock_release_recursive>
 8003b2e:	bf00      	nop
 8003b30:	200002c0 	.word	0x200002c0

08003b34 <calloc>:
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <calloc+0xc>)
 8003b36:	460a      	mov	r2, r1
 8003b38:	4601      	mov	r1, r0
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	f000 b802 	b.w	8003b44 <_calloc_r>
 8003b40:	20000058 	.word	0x20000058

08003b44 <_calloc_r>:
 8003b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b46:	fba1 2402 	umull	r2, r4, r1, r2
 8003b4a:	b94c      	cbnz	r4, 8003b60 <_calloc_r+0x1c>
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	f7ff ff6e 	bl	8003a30 <_malloc_r>
 8003b54:	9a01      	ldr	r2, [sp, #4]
 8003b56:	4605      	mov	r5, r0
 8003b58:	b930      	cbnz	r0, 8003b68 <_calloc_r+0x24>
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bd30      	pop	{r4, r5, pc}
 8003b60:	220c      	movs	r2, #12
 8003b62:	6002      	str	r2, [r0, #0]
 8003b64:	2500      	movs	r5, #0
 8003b66:	e7f8      	b.n	8003b5a <_calloc_r+0x16>
 8003b68:	4621      	mov	r1, r4
 8003b6a:	f000 f817 	bl	8003b9c <memset>
 8003b6e:	e7f4      	b.n	8003b5a <_calloc_r+0x16>

08003b70 <_sbrk_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	; (8003b8c <_sbrk_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fc fdb2 	bl	80006e4 <_sbrk>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_sbrk_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_sbrk_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	200002c4 	.word	0x200002c4

08003b90 <__errno>:
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <__errno+0x8>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000058 	.word	0x20000058

08003b9c <memset>:
 8003b9c:	4402      	add	r2, r0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <__retarget_lock_acquire_recursive>:
 8003bac:	4770      	bx	lr

08003bae <__retarget_lock_release_recursive>:
 8003bae:	4770      	bx	lr

08003bb0 <__udivmoddi4>:
 8003bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb4:	9e08      	ldr	r6, [sp, #32]
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	4604      	mov	r4, r0
 8003bba:	460f      	mov	r7, r1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d14a      	bne.n	8003c56 <__udivmoddi4+0xa6>
 8003bc0:	428a      	cmp	r2, r1
 8003bc2:	4694      	mov	ip, r2
 8003bc4:	d965      	bls.n	8003c92 <__udivmoddi4+0xe2>
 8003bc6:	fab2 f382 	clz	r3, r2
 8003bca:	b143      	cbz	r3, 8003bde <__udivmoddi4+0x2e>
 8003bcc:	fa02 fc03 	lsl.w	ip, r2, r3
 8003bd0:	f1c3 0220 	rsb	r2, r3, #32
 8003bd4:	409f      	lsls	r7, r3
 8003bd6:	fa20 f202 	lsr.w	r2, r0, r2
 8003bda:	4317      	orrs	r7, r2
 8003bdc:	409c      	lsls	r4, r3
 8003bde:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8003be2:	fa1f f58c 	uxth.w	r5, ip
 8003be6:	fbb7 f1fe 	udiv	r1, r7, lr
 8003bea:	0c22      	lsrs	r2, r4, #16
 8003bec:	fb0e 7711 	mls	r7, lr, r1, r7
 8003bf0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8003bf4:	fb01 f005 	mul.w	r0, r1, r5
 8003bf8:	4290      	cmp	r0, r2
 8003bfa:	d90a      	bls.n	8003c12 <__udivmoddi4+0x62>
 8003bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8003c00:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8003c04:	f080 811c 	bcs.w	8003e40 <__udivmoddi4+0x290>
 8003c08:	4290      	cmp	r0, r2
 8003c0a:	f240 8119 	bls.w	8003e40 <__udivmoddi4+0x290>
 8003c0e:	3902      	subs	r1, #2
 8003c10:	4462      	add	r2, ip
 8003c12:	1a12      	subs	r2, r2, r0
 8003c14:	b2a4      	uxth	r4, r4
 8003c16:	fbb2 f0fe 	udiv	r0, r2, lr
 8003c1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8003c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003c22:	fb00 f505 	mul.w	r5, r0, r5
 8003c26:	42a5      	cmp	r5, r4
 8003c28:	d90a      	bls.n	8003c40 <__udivmoddi4+0x90>
 8003c2a:	eb1c 0404 	adds.w	r4, ip, r4
 8003c2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8003c32:	f080 8107 	bcs.w	8003e44 <__udivmoddi4+0x294>
 8003c36:	42a5      	cmp	r5, r4
 8003c38:	f240 8104 	bls.w	8003e44 <__udivmoddi4+0x294>
 8003c3c:	4464      	add	r4, ip
 8003c3e:	3802      	subs	r0, #2
 8003c40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	2100      	movs	r1, #0
 8003c48:	b11e      	cbz	r6, 8003c52 <__udivmoddi4+0xa2>
 8003c4a:	40dc      	lsrs	r4, r3
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e9c6 4300 	strd	r4, r3, [r6]
 8003c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c56:	428b      	cmp	r3, r1
 8003c58:	d908      	bls.n	8003c6c <__udivmoddi4+0xbc>
 8003c5a:	2e00      	cmp	r6, #0
 8003c5c:	f000 80ed 	beq.w	8003e3a <__udivmoddi4+0x28a>
 8003c60:	2100      	movs	r1, #0
 8003c62:	e9c6 0500 	strd	r0, r5, [r6]
 8003c66:	4608      	mov	r0, r1
 8003c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6c:	fab3 f183 	clz	r1, r3
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d149      	bne.n	8003d08 <__udivmoddi4+0x158>
 8003c74:	42ab      	cmp	r3, r5
 8003c76:	d302      	bcc.n	8003c7e <__udivmoddi4+0xce>
 8003c78:	4282      	cmp	r2, r0
 8003c7a:	f200 80f8 	bhi.w	8003e6e <__udivmoddi4+0x2be>
 8003c7e:	1a84      	subs	r4, r0, r2
 8003c80:	eb65 0203 	sbc.w	r2, r5, r3
 8003c84:	2001      	movs	r0, #1
 8003c86:	4617      	mov	r7, r2
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	d0e2      	beq.n	8003c52 <__udivmoddi4+0xa2>
 8003c8c:	e9c6 4700 	strd	r4, r7, [r6]
 8003c90:	e7df      	b.n	8003c52 <__udivmoddi4+0xa2>
 8003c92:	b902      	cbnz	r2, 8003c96 <__udivmoddi4+0xe6>
 8003c94:	deff      	udf	#255	; 0xff
 8003c96:	fab2 f382 	clz	r3, r2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 8090 	bne.w	8003dc0 <__udivmoddi4+0x210>
 8003ca0:	1a8a      	subs	r2, r1, r2
 8003ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003ca6:	fa1f fe8c 	uxth.w	lr, ip
 8003caa:	2101      	movs	r1, #1
 8003cac:	fbb2 f5f7 	udiv	r5, r2, r7
 8003cb0:	fb07 2015 	mls	r0, r7, r5, r2
 8003cb4:	0c22      	lsrs	r2, r4, #16
 8003cb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003cba:	fb0e f005 	mul.w	r0, lr, r5
 8003cbe:	4290      	cmp	r0, r2
 8003cc0:	d908      	bls.n	8003cd4 <__udivmoddi4+0x124>
 8003cc2:	eb1c 0202 	adds.w	r2, ip, r2
 8003cc6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8003cca:	d202      	bcs.n	8003cd2 <__udivmoddi4+0x122>
 8003ccc:	4290      	cmp	r0, r2
 8003cce:	f200 80cb 	bhi.w	8003e68 <__udivmoddi4+0x2b8>
 8003cd2:	4645      	mov	r5, r8
 8003cd4:	1a12      	subs	r2, r2, r0
 8003cd6:	b2a4      	uxth	r4, r4
 8003cd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8003cdc:	fb07 2210 	mls	r2, r7, r0, r2
 8003ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8003ce8:	45a6      	cmp	lr, r4
 8003cea:	d908      	bls.n	8003cfe <__udivmoddi4+0x14e>
 8003cec:	eb1c 0404 	adds.w	r4, ip, r4
 8003cf0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8003cf4:	d202      	bcs.n	8003cfc <__udivmoddi4+0x14c>
 8003cf6:	45a6      	cmp	lr, r4
 8003cf8:	f200 80bb 	bhi.w	8003e72 <__udivmoddi4+0x2c2>
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	eba4 040e 	sub.w	r4, r4, lr
 8003d02:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003d06:	e79f      	b.n	8003c48 <__udivmoddi4+0x98>
 8003d08:	f1c1 0720 	rsb	r7, r1, #32
 8003d0c:	408b      	lsls	r3, r1
 8003d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8003d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8003d16:	fa05 f401 	lsl.w	r4, r5, r1
 8003d1a:	fa20 f307 	lsr.w	r3, r0, r7
 8003d1e:	40fd      	lsrs	r5, r7
 8003d20:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8003d24:	4323      	orrs	r3, r4
 8003d26:	fbb5 f8f9 	udiv	r8, r5, r9
 8003d2a:	fa1f fe8c 	uxth.w	lr, ip
 8003d2e:	fb09 5518 	mls	r5, r9, r8, r5
 8003d32:	0c1c      	lsrs	r4, r3, #16
 8003d34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003d38:	fb08 f50e 	mul.w	r5, r8, lr
 8003d3c:	42a5      	cmp	r5, r4
 8003d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8003d42:	fa00 f001 	lsl.w	r0, r0, r1
 8003d46:	d90b      	bls.n	8003d60 <__udivmoddi4+0x1b0>
 8003d48:	eb1c 0404 	adds.w	r4, ip, r4
 8003d4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8003d50:	f080 8088 	bcs.w	8003e64 <__udivmoddi4+0x2b4>
 8003d54:	42a5      	cmp	r5, r4
 8003d56:	f240 8085 	bls.w	8003e64 <__udivmoddi4+0x2b4>
 8003d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8003d5e:	4464      	add	r4, ip
 8003d60:	1b64      	subs	r4, r4, r5
 8003d62:	b29d      	uxth	r5, r3
 8003d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8003d68:	fb09 4413 	mls	r4, r9, r3, r4
 8003d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8003d70:	fb03 fe0e 	mul.w	lr, r3, lr
 8003d74:	45a6      	cmp	lr, r4
 8003d76:	d908      	bls.n	8003d8a <__udivmoddi4+0x1da>
 8003d78:	eb1c 0404 	adds.w	r4, ip, r4
 8003d7c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8003d80:	d26c      	bcs.n	8003e5c <__udivmoddi4+0x2ac>
 8003d82:	45a6      	cmp	lr, r4
 8003d84:	d96a      	bls.n	8003e5c <__udivmoddi4+0x2ac>
 8003d86:	3b02      	subs	r3, #2
 8003d88:	4464      	add	r4, ip
 8003d8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003d8e:	fba3 9502 	umull	r9, r5, r3, r2
 8003d92:	eba4 040e 	sub.w	r4, r4, lr
 8003d96:	42ac      	cmp	r4, r5
 8003d98:	46c8      	mov	r8, r9
 8003d9a:	46ae      	mov	lr, r5
 8003d9c:	d356      	bcc.n	8003e4c <__udivmoddi4+0x29c>
 8003d9e:	d053      	beq.n	8003e48 <__udivmoddi4+0x298>
 8003da0:	b156      	cbz	r6, 8003db8 <__udivmoddi4+0x208>
 8003da2:	ebb0 0208 	subs.w	r2, r0, r8
 8003da6:	eb64 040e 	sbc.w	r4, r4, lr
 8003daa:	fa04 f707 	lsl.w	r7, r4, r7
 8003dae:	40ca      	lsrs	r2, r1
 8003db0:	40cc      	lsrs	r4, r1
 8003db2:	4317      	orrs	r7, r2
 8003db4:	e9c6 7400 	strd	r7, r4, [r6]
 8003db8:	4618      	mov	r0, r3
 8003dba:	2100      	movs	r1, #0
 8003dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc0:	f1c3 0120 	rsb	r1, r3, #32
 8003dc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8003dc8:	fa20 f201 	lsr.w	r2, r0, r1
 8003dcc:	fa25 f101 	lsr.w	r1, r5, r1
 8003dd0:	409d      	lsls	r5, r3
 8003dd2:	432a      	orrs	r2, r5
 8003dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8003dd8:	fa1f fe8c 	uxth.w	lr, ip
 8003ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8003de0:	fb07 1510 	mls	r5, r7, r0, r1
 8003de4:	0c11      	lsrs	r1, r2, #16
 8003de6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8003dea:	fb00 f50e 	mul.w	r5, r0, lr
 8003dee:	428d      	cmp	r5, r1
 8003df0:	fa04 f403 	lsl.w	r4, r4, r3
 8003df4:	d908      	bls.n	8003e08 <__udivmoddi4+0x258>
 8003df6:	eb1c 0101 	adds.w	r1, ip, r1
 8003dfa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8003dfe:	d22f      	bcs.n	8003e60 <__udivmoddi4+0x2b0>
 8003e00:	428d      	cmp	r5, r1
 8003e02:	d92d      	bls.n	8003e60 <__udivmoddi4+0x2b0>
 8003e04:	3802      	subs	r0, #2
 8003e06:	4461      	add	r1, ip
 8003e08:	1b49      	subs	r1, r1, r5
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	fbb1 f5f7 	udiv	r5, r1, r7
 8003e10:	fb07 1115 	mls	r1, r7, r5, r1
 8003e14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e18:	fb05 f10e 	mul.w	r1, r5, lr
 8003e1c:	4291      	cmp	r1, r2
 8003e1e:	d908      	bls.n	8003e32 <__udivmoddi4+0x282>
 8003e20:	eb1c 0202 	adds.w	r2, ip, r2
 8003e24:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8003e28:	d216      	bcs.n	8003e58 <__udivmoddi4+0x2a8>
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	d914      	bls.n	8003e58 <__udivmoddi4+0x2a8>
 8003e2e:	3d02      	subs	r5, #2
 8003e30:	4462      	add	r2, ip
 8003e32:	1a52      	subs	r2, r2, r1
 8003e34:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8003e38:	e738      	b.n	8003cac <__udivmoddi4+0xfc>
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	e708      	b.n	8003c52 <__udivmoddi4+0xa2>
 8003e40:	4639      	mov	r1, r7
 8003e42:	e6e6      	b.n	8003c12 <__udivmoddi4+0x62>
 8003e44:	4610      	mov	r0, r2
 8003e46:	e6fb      	b.n	8003c40 <__udivmoddi4+0x90>
 8003e48:	4548      	cmp	r0, r9
 8003e4a:	d2a9      	bcs.n	8003da0 <__udivmoddi4+0x1f0>
 8003e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8003e50:	eb65 0e0c 	sbc.w	lr, r5, ip
 8003e54:	3b01      	subs	r3, #1
 8003e56:	e7a3      	b.n	8003da0 <__udivmoddi4+0x1f0>
 8003e58:	4645      	mov	r5, r8
 8003e5a:	e7ea      	b.n	8003e32 <__udivmoddi4+0x282>
 8003e5c:	462b      	mov	r3, r5
 8003e5e:	e794      	b.n	8003d8a <__udivmoddi4+0x1da>
 8003e60:	4640      	mov	r0, r8
 8003e62:	e7d1      	b.n	8003e08 <__udivmoddi4+0x258>
 8003e64:	46d0      	mov	r8, sl
 8003e66:	e77b      	b.n	8003d60 <__udivmoddi4+0x1b0>
 8003e68:	3d02      	subs	r5, #2
 8003e6a:	4462      	add	r2, ip
 8003e6c:	e732      	b.n	8003cd4 <__udivmoddi4+0x124>
 8003e6e:	4608      	mov	r0, r1
 8003e70:	e70a      	b.n	8003c88 <__udivmoddi4+0xd8>
 8003e72:	4464      	add	r4, ip
 8003e74:	3802      	subs	r0, #2
 8003e76:	e742      	b.n	8003cfe <__udivmoddi4+0x14e>

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
