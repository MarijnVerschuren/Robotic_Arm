
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800763c  0800763c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007644  08007644  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800764c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000070  080076bc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  080076bc  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c1a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  00033cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00036a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00037c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018998  00000000  00000000  00038c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164b7  00000000  00000000  00051628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac07  00000000  00000000  00067adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001026e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  00102738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007604 	.word	0x08007604

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08007604 	.word	0x08007604

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_uldivmod>:
 8000550:	b953      	cbnz	r3, 8000568 <__aeabi_uldivmod+0x18>
 8000552:	b94a      	cbnz	r2, 8000568 <__aeabi_uldivmod+0x18>
 8000554:	2900      	cmp	r1, #0
 8000556:	bf08      	it	eq
 8000558:	2800      	cmpeq	r0, #0
 800055a:	bf1c      	itt	ne
 800055c:	f04f 31ff 	movne.w	r1, #4294967295
 8000560:	f04f 30ff 	movne.w	r0, #4294967295
 8000564:	f000 b974 	b.w	8000850 <__aeabi_idiv0>
 8000568:	f1ad 0c08 	sub.w	ip, sp, #8
 800056c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000570:	f000 f806 	bl	8000580 <__udivmoddi4>
 8000574:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9d08      	ldr	r5, [sp, #32]
 8000586:	4604      	mov	r4, r0
 8000588:	468e      	mov	lr, r1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d14d      	bne.n	800062a <__udivmoddi4+0xaa>
 800058e:	428a      	cmp	r2, r1
 8000590:	4694      	mov	ip, r2
 8000592:	d969      	bls.n	8000668 <__udivmoddi4+0xe8>
 8000594:	fab2 f282 	clz	r2, r2
 8000598:	b152      	cbz	r2, 80005b0 <__udivmoddi4+0x30>
 800059a:	fa01 f302 	lsl.w	r3, r1, r2
 800059e:	f1c2 0120 	rsb	r1, r2, #32
 80005a2:	fa20 f101 	lsr.w	r1, r0, r1
 80005a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005aa:	ea41 0e03 	orr.w	lr, r1, r3
 80005ae:	4094      	lsls	r4, r2
 80005b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005b4:	0c21      	lsrs	r1, r4, #16
 80005b6:	fbbe f6f8 	udiv	r6, lr, r8
 80005ba:	fa1f f78c 	uxth.w	r7, ip
 80005be:	fb08 e316 	mls	r3, r8, r6, lr
 80005c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005c6:	fb06 f107 	mul.w	r1, r6, r7
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d90a      	bls.n	80005e4 <__udivmoddi4+0x64>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80005d6:	f080 811f 	bcs.w	8000818 <__udivmoddi4+0x298>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 811c 	bls.w	8000818 <__udivmoddi4+0x298>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	4463      	add	r3, ip
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b2a4      	uxth	r4, r4
 80005e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005ec:	fb08 3310 	mls	r3, r8, r0, r3
 80005f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005f4:	fb00 f707 	mul.w	r7, r0, r7
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	d90a      	bls.n	8000612 <__udivmoddi4+0x92>
 80005fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000600:	f100 33ff 	add.w	r3, r0, #4294967295
 8000604:	f080 810a 	bcs.w	800081c <__udivmoddi4+0x29c>
 8000608:	42a7      	cmp	r7, r4
 800060a:	f240 8107 	bls.w	800081c <__udivmoddi4+0x29c>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000616:	1be4      	subs	r4, r4, r7
 8000618:	2600      	movs	r6, #0
 800061a:	b11d      	cbz	r5, 8000624 <__udivmoddi4+0xa4>
 800061c:	40d4      	lsrs	r4, r2
 800061e:	2300      	movs	r3, #0
 8000620:	e9c5 4300 	strd	r4, r3, [r5]
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	428b      	cmp	r3, r1
 800062c:	d909      	bls.n	8000642 <__udivmoddi4+0xc2>
 800062e:	2d00      	cmp	r5, #0
 8000630:	f000 80ef 	beq.w	8000812 <__udivmoddi4+0x292>
 8000634:	2600      	movs	r6, #0
 8000636:	e9c5 0100 	strd	r0, r1, [r5]
 800063a:	4630      	mov	r0, r6
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	fab3 f683 	clz	r6, r3
 8000646:	2e00      	cmp	r6, #0
 8000648:	d14a      	bne.n	80006e0 <__udivmoddi4+0x160>
 800064a:	428b      	cmp	r3, r1
 800064c:	d302      	bcc.n	8000654 <__udivmoddi4+0xd4>
 800064e:	4282      	cmp	r2, r0
 8000650:	f200 80f9 	bhi.w	8000846 <__udivmoddi4+0x2c6>
 8000654:	1a84      	subs	r4, r0, r2
 8000656:	eb61 0303 	sbc.w	r3, r1, r3
 800065a:	2001      	movs	r0, #1
 800065c:	469e      	mov	lr, r3
 800065e:	2d00      	cmp	r5, #0
 8000660:	d0e0      	beq.n	8000624 <__udivmoddi4+0xa4>
 8000662:	e9c5 4e00 	strd	r4, lr, [r5]
 8000666:	e7dd      	b.n	8000624 <__udivmoddi4+0xa4>
 8000668:	b902      	cbnz	r2, 800066c <__udivmoddi4+0xec>
 800066a:	deff      	udf	#255	; 0xff
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	2a00      	cmp	r2, #0
 8000672:	f040 8092 	bne.w	800079a <__udivmoddi4+0x21a>
 8000676:	eba1 010c 	sub.w	r1, r1, ip
 800067a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800067e:	fa1f fe8c 	uxth.w	lr, ip
 8000682:	2601      	movs	r6, #1
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f3f7 	udiv	r3, r1, r7
 800068a:	fb07 1113 	mls	r1, r7, r3, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb0e f003 	mul.w	r0, lr, r3
 8000696:	4288      	cmp	r0, r1
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0x12c>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f103 38ff 	add.w	r8, r3, #4294967295
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x12a>
 80006a4:	4288      	cmp	r0, r1
 80006a6:	f200 80cb 	bhi.w	8000840 <__udivmoddi4+0x2c0>
 80006aa:	4643      	mov	r3, r8
 80006ac:	1a09      	subs	r1, r1, r0
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b4:	fb07 1110 	mls	r1, r7, r0, r1
 80006b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006bc:	fb0e fe00 	mul.w	lr, lr, r0
 80006c0:	45a6      	cmp	lr, r4
 80006c2:	d908      	bls.n	80006d6 <__udivmoddi4+0x156>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006cc:	d202      	bcs.n	80006d4 <__udivmoddi4+0x154>
 80006ce:	45a6      	cmp	lr, r4
 80006d0:	f200 80bb 	bhi.w	800084a <__udivmoddi4+0x2ca>
 80006d4:	4608      	mov	r0, r1
 80006d6:	eba4 040e 	sub.w	r4, r4, lr
 80006da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006de:	e79c      	b.n	800061a <__udivmoddi4+0x9a>
 80006e0:	f1c6 0720 	rsb	r7, r6, #32
 80006e4:	40b3      	lsls	r3, r6
 80006e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ee:	fa20 f407 	lsr.w	r4, r0, r7
 80006f2:	fa01 f306 	lsl.w	r3, r1, r6
 80006f6:	431c      	orrs	r4, r3
 80006f8:	40f9      	lsrs	r1, r7
 80006fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000702:	fbb1 f8f9 	udiv	r8, r1, r9
 8000706:	0c20      	lsrs	r0, r4, #16
 8000708:	fa1f fe8c 	uxth.w	lr, ip
 800070c:	fb09 1118 	mls	r1, r9, r8, r1
 8000710:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000714:	fb08 f00e 	mul.w	r0, r8, lr
 8000718:	4288      	cmp	r0, r1
 800071a:	fa02 f206 	lsl.w	r2, r2, r6
 800071e:	d90b      	bls.n	8000738 <__udivmoddi4+0x1b8>
 8000720:	eb1c 0101 	adds.w	r1, ip, r1
 8000724:	f108 3aff 	add.w	sl, r8, #4294967295
 8000728:	f080 8088 	bcs.w	800083c <__udivmoddi4+0x2bc>
 800072c:	4288      	cmp	r0, r1
 800072e:	f240 8085 	bls.w	800083c <__udivmoddi4+0x2bc>
 8000732:	f1a8 0802 	sub.w	r8, r8, #2
 8000736:	4461      	add	r1, ip
 8000738:	1a09      	subs	r1, r1, r0
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000740:	fb09 1110 	mls	r1, r9, r0, r1
 8000744:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000748:	fb00 fe0e 	mul.w	lr, r0, lr
 800074c:	458e      	cmp	lr, r1
 800074e:	d908      	bls.n	8000762 <__udivmoddi4+0x1e2>
 8000750:	eb1c 0101 	adds.w	r1, ip, r1
 8000754:	f100 34ff 	add.w	r4, r0, #4294967295
 8000758:	d26c      	bcs.n	8000834 <__udivmoddi4+0x2b4>
 800075a:	458e      	cmp	lr, r1
 800075c:	d96a      	bls.n	8000834 <__udivmoddi4+0x2b4>
 800075e:	3802      	subs	r0, #2
 8000760:	4461      	add	r1, ip
 8000762:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000766:	fba0 9402 	umull	r9, r4, r0, r2
 800076a:	eba1 010e 	sub.w	r1, r1, lr
 800076e:	42a1      	cmp	r1, r4
 8000770:	46c8      	mov	r8, r9
 8000772:	46a6      	mov	lr, r4
 8000774:	d356      	bcc.n	8000824 <__udivmoddi4+0x2a4>
 8000776:	d053      	beq.n	8000820 <__udivmoddi4+0x2a0>
 8000778:	b15d      	cbz	r5, 8000792 <__udivmoddi4+0x212>
 800077a:	ebb3 0208 	subs.w	r2, r3, r8
 800077e:	eb61 010e 	sbc.w	r1, r1, lr
 8000782:	fa01 f707 	lsl.w	r7, r1, r7
 8000786:	fa22 f306 	lsr.w	r3, r2, r6
 800078a:	40f1      	lsrs	r1, r6
 800078c:	431f      	orrs	r7, r3
 800078e:	e9c5 7100 	strd	r7, r1, [r5]
 8000792:	2600      	movs	r6, #0
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a4:	fa21 f303 	lsr.w	r3, r1, r3
 80007a8:	4091      	lsls	r1, r2
 80007aa:	4301      	orrs	r1, r0
 80007ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007b8:	fb07 3610 	mls	r6, r7, r0, r3
 80007bc:	0c0b      	lsrs	r3, r1, #16
 80007be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007c2:	fb00 f60e 	mul.w	r6, r0, lr
 80007c6:	429e      	cmp	r6, r3
 80007c8:	fa04 f402 	lsl.w	r4, r4, r2
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x260>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 38ff 	add.w	r8, r0, #4294967295
 80007d6:	d22f      	bcs.n	8000838 <__udivmoddi4+0x2b8>
 80007d8:	429e      	cmp	r6, r3
 80007da:	d92d      	bls.n	8000838 <__udivmoddi4+0x2b8>
 80007dc:	3802      	subs	r0, #2
 80007de:	4463      	add	r3, ip
 80007e0:	1b9b      	subs	r3, r3, r6
 80007e2:	b289      	uxth	r1, r1
 80007e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007e8:	fb07 3316 	mls	r3, r7, r6, r3
 80007ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f0:	fb06 f30e 	mul.w	r3, r6, lr
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x28a>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000800:	d216      	bcs.n	8000830 <__udivmoddi4+0x2b0>
 8000802:	428b      	cmp	r3, r1
 8000804:	d914      	bls.n	8000830 <__udivmoddi4+0x2b0>
 8000806:	3e02      	subs	r6, #2
 8000808:	4461      	add	r1, ip
 800080a:	1ac9      	subs	r1, r1, r3
 800080c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000810:	e738      	b.n	8000684 <__udivmoddi4+0x104>
 8000812:	462e      	mov	r6, r5
 8000814:	4628      	mov	r0, r5
 8000816:	e705      	b.n	8000624 <__udivmoddi4+0xa4>
 8000818:	4606      	mov	r6, r0
 800081a:	e6e3      	b.n	80005e4 <__udivmoddi4+0x64>
 800081c:	4618      	mov	r0, r3
 800081e:	e6f8      	b.n	8000612 <__udivmoddi4+0x92>
 8000820:	454b      	cmp	r3, r9
 8000822:	d2a9      	bcs.n	8000778 <__udivmoddi4+0x1f8>
 8000824:	ebb9 0802 	subs.w	r8, r9, r2
 8000828:	eb64 0e0c 	sbc.w	lr, r4, ip
 800082c:	3801      	subs	r0, #1
 800082e:	e7a3      	b.n	8000778 <__udivmoddi4+0x1f8>
 8000830:	4646      	mov	r6, r8
 8000832:	e7ea      	b.n	800080a <__udivmoddi4+0x28a>
 8000834:	4620      	mov	r0, r4
 8000836:	e794      	b.n	8000762 <__udivmoddi4+0x1e2>
 8000838:	4640      	mov	r0, r8
 800083a:	e7d1      	b.n	80007e0 <__udivmoddi4+0x260>
 800083c:	46d0      	mov	r8, sl
 800083e:	e77b      	b.n	8000738 <__udivmoddi4+0x1b8>
 8000840:	3b02      	subs	r3, #2
 8000842:	4461      	add	r1, ip
 8000844:	e732      	b.n	80006ac <__udivmoddi4+0x12c>
 8000846:	4630      	mov	r0, r6
 8000848:	e709      	b.n	800065e <__udivmoddi4+0xde>
 800084a:	4464      	add	r4, ip
 800084c:	3802      	subs	r0, #2
 800084e:	e742      	b.n	80006d6 <__udivmoddi4+0x156>

08000850 <__aeabi_idiv0>:
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_ADC1_Init+0x98>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <MX_ADC1_Init+0x9c>)
 800086a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ADC1_Init+0x98>)
 800086e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000872:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_ADC1_Init+0x98>)
 8000882:	2201      	movs	r2, #1
 8000884:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_ADC1_Init+0x98>)
 8000888:	2200      	movs	r2, #0
 800088a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ADC1_Init+0x98>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_ADC1_Init+0xa0>)
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ADC1_Init+0x98>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_ADC1_Init+0x98>)
 80008b6:	f001 f9fb 	bl	8001cb0 <HAL_ADC_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c0:	f000 fea4 	bl	800160c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_ADC1_Init+0x98>)
 80008d6:	f001 fc57 	bl	8002188 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e0:	f000 fe94 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	40012000 	.word	0x40012000
 80008f4:	0f000001 	.word	0x0f000001

080008f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a38      	ldr	r2, [pc, #224]	; (80009f8 <HAL_ADC_MspInit+0x100>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d169      	bne.n	80009ee <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <HAL_ADC_MspInit+0x104>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <HAL_ADC_MspInit+0x104>)
 8000924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <HAL_ADC_MspInit+0x104>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <HAL_ADC_MspInit+0x104>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a2f      	ldr	r2, [pc, #188]	; (80009fc <HAL_ADC_MspInit+0x104>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <HAL_ADC_MspInit+0x104>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000952:	2301      	movs	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4826      	ldr	r0, [pc, #152]	; (8000a00 <HAL_ADC_MspInit+0x108>)
 8000966:	f002 fb87 	bl	8003078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <HAL_ADC_MspInit+0x110>)
 800096e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 8000984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000988:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 800098c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000990:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 8000994:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000998:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 800099c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009ac:	2204      	movs	r2, #4
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009c4:	f001 ffac 	bl	8002920 <HAL_DMA_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 80009ce:	f000 fe1d 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009d6:	639a      	str	r2, [r3, #56]	; 0x38
 80009d8:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_ADC_MspInit+0x10c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2012      	movs	r0, #18
 80009e4:	f001 ff65 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009e8:	2012      	movs	r0, #18
 80009ea:	f001 ff7e 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40012000 	.word	0x40012000
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	200000d4 	.word	0x200000d4
 8000a08:	40026470 	.word	0x40026470

08000a0c <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	2118      	movs	r1, #24
 8000a12:	2001      	movs	r0, #1
 8000a14:	f006 fcf4 	bl	8007400 <calloc>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <AS5600_init+0x16>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	220a      	movs	r2, #10
 8000a32:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7b9b      	ldrb	r3, [r3, #14]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d102      	bne.n	8000a42 <AS5600_init+0x24>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2201      	movs	r2, #1
 8000a40:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7bdb      	ldrb	r3, [r3, #15]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <AS5600_init+0x32>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7c1b      	ldrb	r3, [r3, #16]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d102      	bne.n	8000a5e <AS5600_init+0x40>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7c5b      	ldrb	r3, [r3, #17]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <AS5600_init+0x4e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2201      	movs	r2, #1
 8000a6a:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7c9b      	ldrb	r3, [r3, #18]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <AS5600_init+0x5c>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7cdb      	ldrb	r3, [r3, #19]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <AS5600_init+0x6a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2201      	movs	r2, #1
 8000a86:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7d1b      	ldrb	r3, [r3, #20]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d102      	bne.n	8000a96 <AS5600_init+0x78>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7d5b      	ldrb	r3, [r3, #21]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d102      	bne.n	8000aa4 <AS5600_init+0x86>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7bdb      	ldrb	r3, [r3, #15]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f86a 	bl	8000b84 <AS5600_set_low_power_mode>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <AS5600_init+0x9c>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e05f      	b.n	8000b7a <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	7c1b      	ldrb	r3, [r3, #16]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f8b3 	bl	8000c2c <AS5600_set_hysteresis>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <AS5600_init+0xb2>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e054      	b.n	8000b7a <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7c59      	ldrb	r1, [r3, #17]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	7c9b      	ldrb	r3, [r3, #18]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f8fa 	bl	8000cd4 <AS5600_set_output_mode>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <AS5600_init+0xcc>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e047      	b.n	8000b7a <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7cdb      	ldrb	r3, [r3, #19]
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f000 f983 	bl	8000dfc <AS5600_set_slow_filter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <AS5600_init+0xe2>
 8000afc:	2301      	movs	r3, #1
 8000afe:	e03c      	b.n	8000b7a <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7d1b      	ldrb	r3, [r3, #20]
 8000b04:	4619      	mov	r1, r3
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f9cc 	bl	8000ea4 <AS5600_set_fast_filter_threshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <AS5600_init+0xf8>
 8000b12:	2301      	movs	r3, #1
 8000b14:	e031      	b.n	8000b7a <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7d5b      	ldrb	r3, [r3, #21]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fa61 	bl	8000fe4 <AS5600_set_watchdog_timer>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <AS5600_init+0x10e>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e026      	b.n	8000b7a <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f000 fa80 	bl	8001032 <AS5600_write_config_register>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <AS5600_init+0x11e>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e01e      	b.n	8000b7a <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000b40:	f107 030f 	add.w	r3, r7, #15
 8000b44:	4619      	mov	r1, r3
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f000 fab2 	bl	80010b0 <AS5600_get_magnet_status>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <AS5600_init+0x138>
 8000b52:	2301      	movs	r3, #1
 8000b54:	e011      	b.n	8000b7a <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d009      	beq.n	8000b74 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d104      	bne.n	8000b74 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <AS5600_init+0x15a>
 8000b74:	2301      	movs	r3, #1
 8000b76:	e000      	b.n	8000b7a <AS5600_init+0x15c>
	return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d83f      	bhi.n	8000c18 <AS5600_set_low_power_mode+0x94>
 8000b98:	a201      	add	r2, pc, #4	; (adr r2, 8000ba0 <AS5600_set_low_power_mode+0x1c>)
 8000b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9e:	bf00      	nop
 8000ba0:	08000bb1 	.word	0x08000bb1
 8000ba4:	08000bc3 	.word	0x08000bc3
 8000ba8:	08000be5 	.word	0x08000be5
 8000bac:	08000c07 	.word	0x08000c07
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7ddb      	ldrb	r3, [r3, #23]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f023 0303 	bic.w	r3, r3, #3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	75da      	strb	r2, [r3, #23]
		break;
 8000bc0:	e02c      	b.n	8000c1c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	7ddb      	ldrb	r3, [r3, #23]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	7ddb      	ldrb	r3, [r3, #23]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	f023 0302 	bic.w	r3, r3, #2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	75da      	strb	r2, [r3, #23]
	break;
 8000be2:	e01b      	b.n	8000c1c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7ddb      	ldrb	r3, [r3, #23]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	7ddb      	ldrb	r3, [r3, #23]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	75da      	strb	r2, [r3, #23]
		break;
 8000c04:	e00a      	b.n	8000c1c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7ddb      	ldrb	r3, [r3, #23]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	75da      	strb	r2, [r3, #23]
		break;
 8000c16:	e001      	b.n	8000c1c <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8000c18:	2301      	movs	r3, #1
 8000c1a:	e000      	b.n	8000c1e <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000c38:	78fb      	ldrb	r3, [r7, #3]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d83f      	bhi.n	8000cc0 <AS5600_set_hysteresis+0x94>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <AS5600_set_hysteresis+0x1c>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000c59 	.word	0x08000c59
 8000c4c:	08000c6b 	.word	0x08000c6b
 8000c50:	08000c8d 	.word	0x08000c8d
 8000c54:	08000caf 	.word	0x08000caf
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	7ddb      	ldrb	r3, [r3, #23]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	f023 030c 	bic.w	r3, r3, #12
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	75da      	strb	r2, [r3, #23]
		break;
 8000c68:	e02c      	b.n	8000cc4 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7ddb      	ldrb	r3, [r3, #23]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	7ddb      	ldrb	r3, [r3, #23]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	f023 0308 	bic.w	r3, r3, #8
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	75da      	strb	r2, [r3, #23]
		break;
 8000c8a:	e01b      	b.n	8000cc4 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	7ddb      	ldrb	r3, [r3, #23]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f023 0304 	bic.w	r3, r3, #4
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7ddb      	ldrb	r3, [r3, #23]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	75da      	strb	r2, [r3, #23]
		break;
 8000cac:	e00a      	b.n	8000cc4 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7ddb      	ldrb	r3, [r3, #23]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	f043 030c 	orr.w	r3, r3, #12
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	75da      	strb	r2, [r3, #23]
		break;
 8000cbe:	e001      	b.n	8000cc4 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d020      	beq.n	8000d30 <AS5600_set_output_mode+0x5c>
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	dc31      	bgt.n	8000d56 <AS5600_set_output_mode+0x82>
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d002      	beq.n	8000cfc <AS5600_set_output_mode+0x28>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d009      	beq.n	8000d0e <AS5600_set_output_mode+0x3a>
 8000cfa:	e02c      	b.n	8000d56 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7ddb      	ldrb	r3, [r3, #23]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	75da      	strb	r2, [r3, #23]
		break;
 8000d0c:	e025      	b.n	8000d5a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7ddb      	ldrb	r3, [r3, #23]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7ddb      	ldrb	r3, [r3, #23]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f023 0320 	bic.w	r3, r3, #32
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	75da      	strb	r2, [r3, #23]
		break;
 8000d2e:	e014      	b.n	8000d5a <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7ddb      	ldrb	r3, [r3, #23]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7ddb      	ldrb	r3, [r3, #23]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e001      	b.n	8000d5a <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8000d56:	2301      	movs	r3, #1
 8000d58:	e04a      	b.n	8000df0 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d045      	beq.n	8000dec <AS5600_set_output_mode+0x118>
		switch (frequency) {
 8000d60:	78bb      	ldrb	r3, [r7, #2]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d83f      	bhi.n	8000de8 <AS5600_set_output_mode+0x114>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <AS5600_set_output_mode+0x9c>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000d93 	.word	0x08000d93
 8000d78:	08000db5 	.word	0x08000db5
 8000d7c:	08000dd7 	.word	0x08000dd7
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7ddb      	ldrb	r3, [r3, #23]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	75da      	strb	r2, [r3, #23]
			break;
 8000d90:	e02d      	b.n	8000dee <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7ddb      	ldrb	r3, [r3, #23]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7ddb      	ldrb	r3, [r3, #23]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	75da      	strb	r2, [r3, #23]
			break;
 8000db2:	e01c      	b.n	8000dee <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7ddb      	ldrb	r3, [r3, #23]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7ddb      	ldrb	r3, [r3, #23]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dce:	b2da      	uxtb	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	75da      	strb	r2, [r3, #23]
			break;
 8000dd4:	e00b      	b.n	8000dee <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7ddb      	ldrb	r3, [r3, #23]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	75da      	strb	r2, [r3, #23]
			break;
 8000de6:	e002      	b.n	8000dee <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 8000de8:	2301      	movs	r3, #1
 8000dea:	e001      	b.n	8000df0 <AS5600_set_output_mode+0x11c>
		}
	}
 8000dec:	bf00      	nop
	return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d83f      	bhi.n	8000e90 <AS5600_set_slow_filter+0x94>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <AS5600_set_slow_filter+0x1c>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e3b 	.word	0x08000e3b
 8000e20:	08000e5d 	.word	0x08000e5d
 8000e24:	08000e7f 	.word	0x08000e7f
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7d9b      	ldrb	r3, [r3, #22]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	f023 0303 	bic.w	r3, r3, #3
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	759a      	strb	r2, [r3, #22]
		break;
 8000e38:	e02c      	b.n	8000e94 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7d9b      	ldrb	r3, [r3, #22]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7d9b      	ldrb	r3, [r3, #22]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f023 0302 	bic.w	r3, r3, #2
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	759a      	strb	r2, [r3, #22]
		break;
 8000e5a:	e01b      	b.n	8000e94 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7d9b      	ldrb	r3, [r3, #22]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f023 0301 	bic.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7d9b      	ldrb	r3, [r3, #22]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	759a      	strb	r2, [r3, #22]
		break;
 8000e7c:	e00a      	b.n	8000e94 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7d9b      	ldrb	r3, [r3, #22]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f043 0303 	orr.w	r3, r3, #3
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	759a      	strb	r2, [r3, #22]
		break;
 8000e8e:	e001      	b.n	8000e94 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8000e90:	2301      	movs	r3, #1
 8000e92:	e000      	b.n	8000e96 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	f200 808b 	bhi.w	8000fd0 <AS5600_set_fast_filter_threshold+0x12c>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <AS5600_set_fast_filter_threshold+0x1c>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000ee1 	.word	0x08000ee1
 8000ec4:	08000ef3 	.word	0x08000ef3
 8000ec8:	08000f15 	.word	0x08000f15
 8000ecc:	08000f37 	.word	0x08000f37
 8000ed0:	08000f59 	.word	0x08000f59
 8000ed4:	08000f7b 	.word	0x08000f7b
 8000ed8:	08000f9d 	.word	0x08000f9d
 8000edc:	08000fbf 	.word	0x08000fbf
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7d9b      	ldrb	r3, [r3, #22]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f023 031c 	bic.w	r3, r3, #28
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	759a      	strb	r2, [r3, #22]
		break;
 8000ef0:	e070      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7d9b      	ldrb	r3, [r3, #22]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f023 0318 	bic.w	r3, r3, #24
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7d9b      	ldrb	r3, [r3, #22]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	759a      	strb	r2, [r3, #22]
		break;
 8000f12:	e05f      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7d9b      	ldrb	r3, [r3, #22]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	f023 0314 	bic.w	r3, r3, #20
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7d9b      	ldrb	r3, [r3, #22]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	759a      	strb	r2, [r3, #22]
		break;
 8000f34:	e04e      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7d9b      	ldrb	r3, [r3, #22]
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f023 0310 	bic.w	r3, r3, #16
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7d9b      	ldrb	r3, [r3, #22]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f043 030c 	orr.w	r3, r3, #12
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	759a      	strb	r2, [r3, #22]
		break;
 8000f56:	e03d      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7d9b      	ldrb	r3, [r3, #22]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	f023 030c 	bic.w	r3, r3, #12
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7d9b      	ldrb	r3, [r3, #22]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	759a      	strb	r2, [r3, #22]
		break;
 8000f78:	e02c      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7d9b      	ldrb	r3, [r3, #22]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f023 0308 	bic.w	r3, r3, #8
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7d9b      	ldrb	r3, [r3, #22]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f043 0314 	orr.w	r3, r3, #20
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	759a      	strb	r2, [r3, #22]
		break;
 8000f9a:	e01b      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7d9b      	ldrb	r3, [r3, #22]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f023 0304 	bic.w	r3, r3, #4
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7d9b      	ldrb	r3, [r3, #22]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	f043 0318 	orr.w	r3, r3, #24
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	759a      	strb	r2, [r3, #22]
		break;
 8000fbc:	e00a      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7d9b      	ldrb	r3, [r3, #22]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	f043 031c 	orr.w	r3, r3, #28
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	759a      	strb	r2, [r3, #22]
		break;
 8000fce:	e001      	b.n	8000fd4 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d002      	beq.n	8000ffc <AS5600_set_watchdog_timer+0x18>
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d009      	beq.n	800100e <AS5600_set_watchdog_timer+0x2a>
 8000ffa:	e011      	b.n	8001020 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7d9b      	ldrb	r3, [r3, #22]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001006:	b2da      	uxtb	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	759a      	strb	r2, [r3, #22]
		break;
 800100c:	e00a      	b.n	8001024 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7d9b      	ldrb	r3, [r3, #22]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	b2da      	uxtb	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	759a      	strb	r2, [r3, #22]
		break;
 800101e:	e001      	b.n	8001024 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af04      	add	r7, sp, #16
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3316      	adds	r3, #22
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6892      	ldr	r2, [r2, #8]
 8001046:	9202      	str	r2, [sp, #8]
 8001048:	2202      	movs	r2, #2
 800104a:	9201      	str	r2, [sp, #4]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2207      	movs	r2, #7
 8001052:	216c      	movs	r1, #108	; 0x6c
 8001054:	f002 faf2 	bl	800363c <HAL_I2C_Mem_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 8001062:	b580      	push	{r7, lr}
 8001064:	b088      	sub	sp, #32
 8001066:	af04      	add	r7, sp, #16
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 800106c:	2300      	movs	r3, #0
 800106e:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2302      	movs	r3, #2
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	220e      	movs	r2, #14
 8001088:	216c      	movs	r1, #108	; 0x6c
 800108a:	f002 fbd1 	bl	8003830 <HAL_I2C_Mem_Read>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 8001092:	7b3b      	ldrb	r3, [r7, #12]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7b7b      	ldrb	r3, [r7, #13]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	801a      	strh	r2, [r3, #0]
	return status;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	9302      	str	r3, [sp, #8]
 80010c4:	2301      	movs	r3, #1
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	220b      	movs	r2, #11
 80010d0:	216c      	movs	r1, #108	; 0x6c
 80010d2:	f002 fbad 	bl	8003830 <HAL_I2C_Mem_Read>
 80010d6:	4603      	mov	r3, r0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <MX_DMA_Init+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <MX_DMA_Init+0x88>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_DMA_Init+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_DMA_Init+0x88>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <MX_DMA_Init+0x88>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_DMA_Init+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	200b      	movs	r0, #11
 8001124:	f001 fbc5 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001128:	200b      	movs	r0, #11
 800112a:	f001 fbde 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2038      	movs	r0, #56	; 0x38
 8001134:	f001 fbbd 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001138:	2038      	movs	r0, #56	; 0x38
 800113a:	f001 fbd6 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	203b      	movs	r0, #59	; 0x3b
 8001144:	f001 fbb5 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001148:	203b      	movs	r0, #59	; 0x3b
 800114a:	f001 fbce 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	203c      	movs	r0, #60	; 0x3c
 8001154:	f001 fbad 	bl	80028b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001158:	203c      	movs	r0, #60	; 0x3c
 800115a:	f001 fbc6 	bl	80028ea <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b43      	ldr	r3, [pc, #268]	; (8001294 <MX_GPIO_Init+0x128>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a42      	ldr	r2, [pc, #264]	; (8001294 <MX_GPIO_Init+0x128>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b40      	ldr	r3, [pc, #256]	; (8001294 <MX_GPIO_Init+0x128>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <MX_GPIO_Init+0x128>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a3b      	ldr	r2, [pc, #236]	; (8001294 <MX_GPIO_Init+0x128>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <MX_GPIO_Init+0x128>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011c0:	4835      	ldr	r0, [pc, #212]	; (8001298 <MX_GPIO_Init+0x12c>)
 80011c2:	f002 f8dd 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f24e 0120 	movw	r1, #57376	; 0xe020
 80011cc:	4832      	ldr	r0, [pc, #200]	; (8001298 <MX_GPIO_Init+0x12c>)
 80011ce:	f002 f8d7 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011d8:	4830      	ldr	r0, [pc, #192]	; (800129c <MX_GPIO_Init+0x130>)
 80011da:	f002 f8d1 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80011de:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011e4:	2311      	movs	r3, #17
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4828      	ldr	r0, [pc, #160]	; (8001298 <MX_GPIO_Init+0x12c>)
 80011f8:	f001 ff3e 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001202:	2311      	movs	r3, #17
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4820      	ldr	r0, [pc, #128]	; (8001298 <MX_GPIO_Init+0x12c>)
 8001216:	f001 ff2f 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 800121a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001220:	2311      	movs	r3, #17
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	4619      	mov	r1, r3
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <MX_GPIO_Init+0x12c>)
 8001234:	f001 ff20 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 8001238:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800123e:	2311      	movs	r3, #17
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4619      	mov	r1, r3
 8001250:	4812      	ldr	r0, [pc, #72]	; (800129c <MX_GPIO_Init+0x130>)
 8001252:	f001 ff11 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001256:	2320      	movs	r3, #32
 8001258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800125a:	2311      	movs	r3, #17
 800125c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4619      	mov	r1, r3
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <MX_GPIO_Init+0x12c>)
 800126e:	f001 ff03 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 8001272:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x12c>)
 8001288:	f001 fef6 	bl	8003078 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400
 800129c:	40020000 	.word	0x40020000

080012a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	; (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f002 f869 	bl	80033b4 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 f990 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000134 	.word	0x20000134
 80012f4:	40005400 	.word	0x40005400
 80012f8:	000186a0 	.word	0x000186a0

080012fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <HAL_I2C_MspInit+0x118>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d175      	bne.n	800140a <HAL_I2C_MspInit+0x10e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b3d      	ldr	r3, [pc, #244]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 800133a:	23c0      	movs	r3, #192	; 0xc0
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134a:	2304      	movs	r3, #4
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4831      	ldr	r0, [pc, #196]	; (800141c <HAL_I2C_MspInit+0x120>)
 8001356:	f001 fe8f 	bl	8003078 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 8001364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_I2C_MspInit+0x11c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_I2C_MspInit+0x124>)
 8001378:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_I2C_MspInit+0x128>)
 800137a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <HAL_I2C_MspInit+0x124>)
 800137e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001382:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_I2C_MspInit+0x124>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138a:	4b25      	ldr	r3, [pc, #148]	; (8001420 <HAL_I2C_MspInit+0x124>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_I2C_MspInit+0x124>)
 8001392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001396:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <HAL_I2C_MspInit+0x124>)
 800139a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800139e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013b8:	2204      	movs	r2, #4
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013be:	2203      	movs	r2, #3
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80013ce:	4814      	ldr	r0, [pc, #80]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013d0:	f001 faa6 	bl	8002920 <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_I2C_MspInit+0xe2>
    {
      Error_Handler();
 80013da:	f000 f917 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013e2:	639a      	str	r2, [r3, #56]	; 0x38
 80013e4:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_I2C_MspInit+0x124>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201f      	movs	r0, #31
 80013f0:	f001 fa5f 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013f4:	201f      	movs	r0, #31
 80013f6:	f001 fa78 	bl	80028ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2020      	movs	r0, #32
 8001400:	f001 fa57 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001404:	2020      	movs	r0, #32
 8001406:	f001 fa70 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	; 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40005400 	.word	0x40005400
 8001418:	40023800 	.word	0x40023800
 800141c:	40020400 	.word	0x40020400
 8001420:	20000188 	.word	0x20000188
 8001424:	40026010 	.word	0x40026010

08001428 <dma_i2c_callback>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void dma_i2c_callback(DMA_HandleTypeDef* hdma) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af02      	add	r7, sp, #8
 800142e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c1, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&AS5600_i2c, 2);
 8001430:	2302      	movs	r3, #2
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <dma_i2c_callback+0x24>)
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	220e      	movs	r2, #14
 800143c:	216c      	movs	r1, #108	; 0x6c
 800143e:	4804      	ldr	r0, [pc, #16]	; (8001450 <dma_i2c_callback+0x28>)
 8001440:	f002 fc1c 	bl	8003c7c <HAL_I2C_Mem_Read_DMA>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001ee 	.word	0x200001ee
 8001450:	20000134 	.word	0x20000134

08001454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 800145a:	f7ff fad7 	bl	8000a0c <AS5600_new>
 800145e:	4603      	mov	r3, r0
 8001460:	4a2a      	ldr	r2, [pc, #168]	; (800150c <main+0xb8>)
 8001462:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <main+0xb8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <main+0xbc>)
 800146a:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <main+0xb8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	; (8001514 <main+0xc0>)
 8001472:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8001474:	4b25      	ldr	r3, [pc, #148]	; (800150c <main+0xb8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2220      	movs	r2, #32
 800147a:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CCW;
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <main+0xb8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2202      	movs	r2, #2
 8001482:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001484:	f000 fba2 	bl	8001bcc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001488:	f000 f858 	bl	800153c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800148c:	f7ff fe6e 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 8001490:	f7ff fe26 	bl	80010e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001494:	f000 f8c2 	bl	800161c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001498:	f7ff ff02 	bl	80012a0 <MX_I2C1_Init>
  MX_ADC1_Init();
 800149c:	f7ff f9da 	bl	8000854 <MX_ADC1_Init>
  MX_TIM2_Init();
 80014a0:	f000 fa9a 	bl	80019d8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80014a4:	f000 fae4 	bl	8001a70 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);  // start timer_2
 80014a8:	481b      	ldr	r0, [pc, #108]	; (8001518 <main+0xc4>)
 80014aa:	f005 fcff 	bl	8006eac <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <main+0xc8>)
 80014b0:	f005 fcfc 	bl	8006eac <HAL_TIM_Base_Start>

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 80014b4:	bf00      	nop
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <main+0xb8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff faaf 	bl	8000a1e <AS5600_init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f7      	bne.n	80014b6 <main+0x62>

	// initialize the AS5600 position variable
	AS5600_get_angle(sensor, &AS5600_pos);
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <main+0xb8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4915      	ldr	r1, [pc, #84]	; (8001520 <main+0xcc>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fdc8 	bl	8001062 <AS5600_get_angle>
	AS5600_pos_f64 = AS5600_pos;  // set the current angle to the most accurate value for the euler method
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <main+0xcc>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffc0 	bl	800045c <__aeabi_ui2d>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4910      	ldr	r1, [pc, #64]	; (8001524 <main+0xd0>)
 80014e2:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&instruction, 16);  // start data receiving loop
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AS5600_analog, 1);
 80014e6:	2201      	movs	r2, #1
 80014e8:	490f      	ldr	r1, [pc, #60]	; (8001528 <main+0xd4>)
 80014ea:	4810      	ldr	r0, [pc, #64]	; (800152c <main+0xd8>)
 80014ec:	f000 fd34 	bl	8001f58 <HAL_ADC_Start_DMA>
	// HAL_I2C_Mem_Read_DMA exec time 0 - 5 us??
	HAL_I2C_Mem_Read_DMA(&hi2c1, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&AS5600_i2c, 2);  // only makes one request??
 80014f0:	2302      	movs	r3, #2
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <main+0xdc>)
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2301      	movs	r3, #1
 80014fa:	220e      	movs	r2, #14
 80014fc:	216c      	movs	r1, #108	; 0x6c
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <main+0xbc>)
 8001500:	f002 fbbc 	bl	8003c7c <HAL_I2C_Mem_Read_DMA>
	hdma_i2c1_rx.XferCpltCallback = dma_i2c_callback;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <main+0xe0>)
 8001506:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <main+0xe4>)
 8001508:	63da      	str	r2, [r3, #60]	; 0x3c

	while (1) {  // run following tests: execution time and cyclic requests?
 800150a:	e7fe      	b.n	800150a <main+0xb6>
 800150c:	200001e8 	.word	0x200001e8
 8001510:	20000134 	.word	0x20000134
 8001514:	40020400 	.word	0x40020400
 8001518:	20000318 	.word	0x20000318
 800151c:	20000360 	.word	0x20000360
 8001520:	200001f8 	.word	0x200001f8
 8001524:	200001f0 	.word	0x200001f0
 8001528:	200001ec 	.word	0x200001ec
 800152c:	2000008c 	.word	0x2000008c
 8001530:	200001ee 	.word	0x200001ee
 8001534:	20000188 	.word	0x20000188
 8001538:	08001429 	.word	0x08001429

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f005 ff8a 	bl	8007464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b27      	ldr	r3, [pc, #156]	; (8001604 <SystemClock_Config+0xc8>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a26      	ldr	r2, [pc, #152]	; (8001604 <SystemClock_Config+0xc8>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b24      	ldr	r3, [pc, #144]	; (8001604 <SystemClock_Config+0xc8>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <SystemClock_Config+0xcc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a20      	ldr	r2, [pc, #128]	; (8001608 <SystemClock_Config+0xcc>)
 8001586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <SystemClock_Config+0xcc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159c:	2301      	movs	r3, #1
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a0:	2310      	movs	r3, #16
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a4:	2302      	movs	r3, #2
 80015a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015ac:	2310      	movs	r3, #16
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fe37 	bl	8006234 <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015cc:	f000 f81e 	bl	800160c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2302      	movs	r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015e6:	f107 030c 	add.w	r3, r7, #12
 80015ea:	2103      	movs	r1, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 f899 	bl	8006724 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015f8:	f000 f808 	bl	800160c <Error_Handler>
  }
}
 80015fc:	bf00      	nop
 80015fe:	3750      	adds	r7, #80	; 0x50
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000

0800160c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <MX_SPI1_Init+0x60>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_SPI1_Init+0x5c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_SPI1_Init+0x5c>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <MX_SPI1_Init+0x5c>)
 800164c:	2200      	movs	r2, #0
 800164e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_SPI1_Init+0x5c>)
 800165e:	220a      	movs	r2, #10
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001662:	4805      	ldr	r0, [pc, #20]	; (8001678 <MX_SPI1_Init+0x5c>)
 8001664:	f005 fa2a 	bl	8006abc <HAL_SPI_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800166e:	f7ff ffcd 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200001fc 	.word	0x200001fc
 800167c:	40013000 	.word	0x40013000

08001680 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_SPI_MspInit+0x168>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	f040 809d 	bne.w	80017de <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	4a4f      	ldr	r2, [pc, #316]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016b2:	6453      	str	r3, [r2, #68]	; 0x44
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	4b49      	ldr	r3, [pc, #292]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6313      	str	r3, [r2, #48]	; 0x30
 80016d0:	4b46      	ldr	r3, [pc, #280]	; (80017ec <HAL_SPI_MspInit+0x16c>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 80016dc:	23f0      	movs	r3, #240	; 0xf0
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ec:	2305      	movs	r3, #5
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	483e      	ldr	r0, [pc, #248]	; (80017f0 <HAL_SPI_MspInit+0x170>)
 80016f8:	f001 fcbe 	bl	8003078 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80016fc:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 80016fe:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_SPI_MspInit+0x178>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001702:	4b3c      	ldr	r3, [pc, #240]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001704:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001708:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170a:	4b3a      	ldr	r3, [pc, #232]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800171c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001720:	2200      	movs	r2, #0
 8001722:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 800172c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001730:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001738:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001742:	f001 f8ed 	bl	8002920 <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 800174c:	f7ff ff5e 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001754:	649a      	str	r2, [r3, #72]	; 0x48
 8001756:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <HAL_SPI_MspInit+0x174>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <HAL_SPI_MspInit+0x180>)
 8001760:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001764:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001768:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b22      	ldr	r3, [pc, #136]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b21      	ldr	r3, [pc, #132]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 800178c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001790:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 8001794:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001798:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 800179c:	2204      	movs	r2, #4
 800179e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017a2:	2203      	movs	r2, #3
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017b2:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017b4:	f001 f8b4 	bl	8002920 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 80017be:	f7ff ff25 	bl	800160c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_SPI_MspInit+0x17c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2023      	movs	r0, #35	; 0x23
 80017d4:	f001 f86d 	bl	80028b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80017d8:	2023      	movs	r0, #35	; 0x23
 80017da:	f001 f886 	bl	80028ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40013000 	.word	0x40013000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	20000254 	.word	0x20000254
 80017f8:	40026458 	.word	0x40026458
 80017fc:	200002b4 	.word	0x200002b4
 8001800:	40026410 	.word	0x40026410

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_MspInit+0x4c>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_MspInit+0x4c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler+0x4>

0800185a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <HardFault_Handler+0x4>

08001860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <MemManage_Handler+0x4>

08001866 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <BusFault_Handler+0x4>

0800186c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <UsageFault_Handler+0x4>

08001872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f9e6 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ae:	f001 f95f 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000188 	.word	0x20000188

080018bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <ADC_IRQHandler+0x10>)
 80018c2:	f000 fa38 	bl	8001d36 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <I2C1_EV_IRQHandler+0x10>)
 80018d6:	f002 fb65 	bl	8003fa4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000134 	.word	0x20000134

080018e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <I2C1_ER_IRQHandler+0x10>)
 80018ea:	f002 fccc 	bl	8004286 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000134 	.word	0x20000134

080018f8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <SPI1_IRQHandler+0x10>)
 80018fe:	f005 f967 	bl	8006bd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001fc 	.word	0x200001fc

0800190c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA2_Stream0_IRQHandler+0x10>)
 8001912:	f001 f92d 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002b4 	.word	0x200002b4

08001920 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA2_Stream3_IRQHandler+0x10>)
 8001926:	f001 f923 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000254 	.word	0x20000254

08001934 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA2_Stream4_IRQHandler+0x10>)
 800193a:	f001 f919 	bl	8002b70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200000d4 	.word	0x200000d4

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f005 fd4a 	bl	8007410 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	; (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20020000 	.word	0x20020000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	20000314 	.word	0x20000314
 80019b0:	200003c0 	.word	0x200003c0

080019b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <SystemInit+0x20>)
 80019ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <SystemInit+0x20>)
 80019c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019fe:	225f      	movs	r2, #95	; 0x5f
 8001a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a10:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a1c:	4813      	ldr	r0, [pc, #76]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a1e:	f005 f9f5 	bl	8006e0c <HAL_TIM_Base_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a28:	f7ff fdf0 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a32:	f107 0308 	add.w	r3, r7, #8
 8001a36:	4619      	mov	r1, r3
 8001a38:	480c      	ldr	r0, [pc, #48]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a3a:	f005 fa91 	bl	8006f60 <HAL_TIM_ConfigClockSource>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a44:	f7ff fde2 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a56:	f005 fc65 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a60:	f7ff fdd4 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000318 	.word	0x20000318

08001a70 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001a8e:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <MX_TIM5_Init+0x98>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001a94:	225f      	movs	r2, #95	; 0x5f
 8001a96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001ab4:	f005 f9aa 	bl	8006e0c <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001abe:	f7ff fda5 	bl	800160c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0308 	add.w	r3, r7, #8
 8001acc:	4619      	mov	r1, r3
 8001ace:	480d      	ldr	r0, [pc, #52]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001ad0:	f005 fa46 	bl	8006f60 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f7ff fd97 	bl	800160c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4806      	ldr	r0, [pc, #24]	; (8001b04 <MX_TIM5_Init+0x94>)
 8001aec:	f005 fc1a 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001af6:	f7ff fd89 	bl	800160c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000360 	.word	0x20000360
 8001b08:	40000c00 	.word	0x40000c00

08001b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d10e      	bne.n	8001b3c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001b3a:	e012      	b.n	8001b62 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM5)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0x68>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10d      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6413      	str	r3, [r2, #64]	; 0x40
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_TIM_Base_MspInit+0x64>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40000c00 	.word	0x40000c00

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b94:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba2:	f7ff ff07 	bl	80019b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f005 fc39 	bl	800741c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff fc53 	bl	8001454 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bbc:	0800764c 	.word	0x0800764c
  ldr r2, =_sbss
 8001bc0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bc4:	200003bc 	.word	0x200003bc

08001bc8 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <DMA1_Stream1_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_Init+0x40>)
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_Init+0x40>)
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x40>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 fe51 	bl	800289c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fe00 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fe69 	bl	8002906 <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 fe31 	bl	80028b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008
 8001c94:	200003a8 	.word	0x200003a8

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200003a8 	.word	0x200003a8

08001cb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e033      	b.n	8001d2e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe fe12 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d118      	bne.n	8001d20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf6:	f023 0302 	bic.w	r3, r3, #2
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 fb72 	bl	80023ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0201 	orr.w	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d1e:	e001      	b.n	8001d24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d049      	beq.n	8001e00 <HAL_ADC_IRQHandler+0xca>
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d046      	beq.n	8001e00 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d12b      	bne.n	8001df0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d127      	bne.n	8001df0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d119      	bne.n	8001df0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0220 	bic.w	r2, r2, #32
 8001dca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f043 0201 	orr.w	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f9a1 	bl	8002138 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0212 	mvn.w	r2, #18
 8001dfe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d057      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x190>
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d054      	beq.n	8001ec6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d139      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d12b      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d124      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d11d      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d119      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fc16 	bl	80026e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 020c 	mvn.w	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d017      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x1d6>
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d014      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10d      	bne.n	8001f0c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f92f 	bl	8002160 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0201 	mvn.w	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0320 	and.w	r3, r3, #32
 8001f12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f1a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d015      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x218>
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d012      	beq.n	8001f4e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f043 0202 	orr.w	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0220 	mvn.w	r2, #32
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f918 	bl	8002174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	601a      	str	r2, [r3, #0]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
	...

08001f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x1e>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0ce      	b.n	8002114 <HAL_ADC_Start_DMA+0x1bc>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d018      	beq.n	8001fbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9c:	4b5f      	ldr	r3, [pc, #380]	; (800211c <HAL_ADC_Start_DMA+0x1c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_ADC_Start_DMA+0x1c8>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9a      	lsrs	r2, r3, #18
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fcc:	d107      	bne.n	8001fde <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 8086 	bne.w	80020fa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202c:	d106      	bne.n	800203c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f023 0206 	bic.w	r2, r3, #6
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	645a      	str	r2, [r3, #68]	; 0x44
 800203a:	e002      	b.n	8002042 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204a:	4b36      	ldr	r3, [pc, #216]	; (8002124 <HAL_ADC_Start_DMA+0x1cc>)
 800204c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	4a35      	ldr	r2, [pc, #212]	; (8002128 <HAL_ADC_Start_DMA+0x1d0>)
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	4a34      	ldr	r2, [pc, #208]	; (800212c <HAL_ADC_Start_DMA+0x1d4>)
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	4a33      	ldr	r2, [pc, #204]	; (8002130 <HAL_ADC_Start_DMA+0x1d8>)
 8002064:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800206e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800207e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	334c      	adds	r3, #76	; 0x4c
 800209a:	4619      	mov	r1, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f000 fcec 	bl	8002a7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10f      	bne.n	80020d0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d129      	bne.n	8002112 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	e020      	b.n	8002112 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_ADC_Start_DMA+0x1dc>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d11b      	bne.n	8002112 <HAL_ADC_Start_DMA+0x1ba>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d114      	bne.n	8002112 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e00b      	b.n	8002112 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f043 0210 	orr.w	r2, r3, #16
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000000 	.word	0x20000000
 8002120:	431bde83 	.word	0x431bde83
 8002124:	40012300 	.word	0x40012300
 8002128:	080025e5 	.word	0x080025e5
 800212c:	0800269f 	.word	0x0800269f
 8002130:	080026bb 	.word	0x080026bb
 8002134:	40012000 	.word	0x40012000

08002138 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1c>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e113      	b.n	80023cc <HAL_ADC_ConfigChannel+0x244>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b09      	cmp	r3, #9
 80021b2:	d925      	bls.n	8002200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68d9      	ldr	r1, [r3, #12]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	2207      	movs	r2, #7
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68d9      	ldr	r1, [r3, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	4603      	mov	r3, r0
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4403      	add	r3, r0
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	409a      	lsls	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	e022      	b.n	8002246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	2207      	movs	r2, #7
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6919      	ldr	r1, [r3, #16]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	4603      	mov	r3, r0
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4403      	add	r3, r0
 800223c:	409a      	lsls	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d824      	bhi.n	8002298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b05      	subs	r3, #5
 8002260:	221f      	movs	r2, #31
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	400a      	ands	r2, r1
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	3b05      	subs	r3, #5
 800228a:	fa00 f203 	lsl.w	r2, r0, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
 8002296:	e04c      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d824      	bhi.n	80022ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	3b23      	subs	r3, #35	; 0x23
 80022b2:	221f      	movs	r2, #31
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43da      	mvns	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	400a      	ands	r2, r1
 80022c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	3b23      	subs	r3, #35	; 0x23
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
 80022e8:	e023      	b.n	8002332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b41      	subs	r3, #65	; 0x41
 80022fc:	221f      	movs	r2, #31
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b41      	subs	r3, #65	; 0x41
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_ADC_ConfigChannel+0x250>)
 8002334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a28      	ldr	r2, [pc, #160]	; (80023dc <HAL_ADC_ConfigChannel+0x254>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d10f      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d8>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b12      	cmp	r3, #18
 8002346:	d10b      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_ADC_ConfigChannel+0x254>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12b      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_ADC_ConfigChannel+0x258>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <HAL_ADC_ConfigChannel+0x1f4>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b11      	cmp	r3, #17
 800237a:	d122      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_ConfigChannel+0x258>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d111      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_ADC_ConfigChannel+0x25c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <HAL_ADC_ConfigChannel+0x260>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9a      	lsrs	r2, r3, #18
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40012300 	.word	0x40012300
 80023dc:	40012000 	.word	0x40012000
 80023e0:	10000012 	.word	0x10000012
 80023e4:	20000000 	.word	0x20000000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <ADC_Init+0x1f0>)
 80023f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <ADC_Init+0x1f4>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6899      	ldr	r1, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6899      	ldr	r1, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e00f      	b.n	80024ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0202 	bic.w	r2, r2, #2
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e1b      	ldrb	r3, [r3, #24]
 8002504:	005a      	lsls	r2, r3, #1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01b      	beq.n	8002550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	3b01      	subs	r3, #1
 8002544:	035a      	lsls	r2, r3, #13
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	e007      	b.n	8002560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69db      	ldr	r3, [r3, #28]
 800257a:	3b01      	subs	r3, #1
 800257c:	051a      	lsls	r2, r3, #20
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a2:	025a      	lsls	r2, r3, #9
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	029a      	lsls	r2, r3, #10
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40012300 	.word	0x40012300
 80025e0:	0f000001 	.word	0x0f000001

080025e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d13c      	bne.n	8002678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12b      	bne.n	8002670 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d127      	bne.n	8002670 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002638:	2b00      	cmp	r3, #0
 800263a:	d119      	bne.n	8002670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0220 	bic.w	r2, r2, #32
 800264a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d105      	bne.n	8002670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f043 0201 	orr.w	r2, r3, #1
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fd61 	bl	8002138 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002676:	e00e      	b.n	8002696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff fd75 	bl	8002174 <HAL_ADC_ErrorCallback>
}
 800268a:	e004      	b.n	8002696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff fd4d 	bl	800214c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fd4a 	bl	8002174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4907      	ldr	r1, [pc, #28]	; (8002798 <__NVIC_EnableIRQ+0x38>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002868:	d301      	bcc.n	800286e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286a:	2301      	movs	r3, #1
 800286c:	e00f      	b.n	800288e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <SysTick_Config+0x40>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002876:	210f      	movs	r1, #15
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	f7ff ff8e 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <SysTick_Config+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <SysTick_Config+0x40>)
 8002888:	2207      	movs	r2, #7
 800288a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000e010 	.word	0xe000e010

0800289c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff29 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4603      	mov	r3, r0
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c4:	f7ff ff3e 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	6978      	ldr	r0, [r7, #20]
 80028d0:	f7ff ff8e 	bl	80027f0 <NVIC_EncodePriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff5d 	bl	800279c <__NVIC_SetPriority>
}
 80028e2:	bf00      	nop
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff31 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff ffa2 	bl	8002858 <SysTick_Config>
 8002914:	4603      	mov	r3, r0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800292c:	f7ff f9b4 	bl	8001c98 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e099      	b.n	8002a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295c:	e00f      	b.n	800297e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800295e:	f7ff f99b 	bl	8001c98 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b05      	cmp	r3, #5
 800296a:	d908      	bls.n	800297e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2203      	movs	r2, #3
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e078      	b.n	8002a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e8      	bne.n	800295e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4b38      	ldr	r3, [pc, #224]	; (8002a78 <HAL_DMA_Init+0x158>)
 8002998:	4013      	ands	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d107      	bne.n	80029e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4313      	orrs	r3, r2
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d117      	bne.n	8002a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 faab 	bl	8002f80 <DMA_CheckFifoParam>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e016      	b.n	8002a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa62 	bl	8002f14 <DMA_CalcBaseAndBitshift>
 8002a50:	4603      	mov	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	223f      	movs	r2, #63	; 0x3f
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	f010803f 	.word	0xf010803f

08002a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
 8002a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Start_IT+0x26>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e040      	b.n	8002b24 <HAL_DMA_Start_IT+0xa8>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d12f      	bne.n	8002b16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f9f4 	bl	8002eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	223f      	movs	r2, #63	; 0x3f
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0216 	orr.w	r2, r2, #22
 8002aea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0208 	orr.w	r2, r2, #8
 8002b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e005      	b.n	8002b22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d004      	beq.n	8002b4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00c      	b.n	8002b64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b7c:	4b8e      	ldr	r3, [pc, #568]	; (8002db8 <HAL_DMA_IRQHandler+0x248>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a8e      	ldr	r2, [pc, #568]	; (8002dbc <HAL_DMA_IRQHandler+0x24c>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	2208      	movs	r2, #8
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0204 	bic.w	r2, r2, #4
 8002bc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2208      	movs	r2, #8
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0201 	orr.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2201      	movs	r2, #1
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d012      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2201      	movs	r2, #1
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f043 0202 	orr.w	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2204      	movs	r2, #4
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d012      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	2204      	movs	r2, #4
 8002c36:	409a      	lsls	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	2210      	movs	r2, #16
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d043      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03c      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	409a      	lsls	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d024      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
 8002c9e:	e01f      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	4798      	blx	r3
 8002cb0:	e016      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0208 	bic.w	r2, r2, #8
 8002cce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 808f 	beq.w	8002e10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 8087 	beq.w	8002e10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2220      	movs	r2, #32
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d136      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0216 	bic.w	r2, r2, #22
 8002d28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695a      	ldr	r2, [r3, #20]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x1da>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0208 	bic.w	r2, r2, #8
 8002d58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	223f      	movs	r2, #63	; 0x3f
 8002d60:	409a      	lsls	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d07e      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
        }
        return;
 8002d86:	e079      	b.n	8002e7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01d      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
 8002db4:	e02c      	b.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
 8002db6:	bf00      	nop
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
 8002dd0:	e01e      	b.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10f      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0210 	bic.w	r2, r2, #16
 8002dee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d032      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d022      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2205      	movs	r2, #5
 8002e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d307      	bcc.n	8002e58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f2      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x2cc>
 8002e56:	e000      	b.n	8002e5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e7c:	bf00      	nop
    }
  }
}
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e92:	b2db      	uxtb	r3, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d108      	bne.n	8002ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ef6:	e007      	b.n	8002f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3b10      	subs	r3, #16
 8002f24:	4a14      	ldr	r2, [pc, #80]	; (8002f78 <DMA_CalcBaseAndBitshift+0x64>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f2e:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <DMA_CalcBaseAndBitshift+0x68>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d909      	bls.n	8002f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	1d1a      	adds	r2, r3, #4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
 8002f54:	e007      	b.n	8002f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f5e:	f023 0303 	bic.w	r3, r3, #3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	aaaaaaab 	.word	0xaaaaaaab
 8002f7c:	08007634 	.word	0x08007634

08002f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11f      	bne.n	8002fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d856      	bhi.n	800304e <DMA_CheckFifoParam+0xce>
 8002fa0:	a201      	add	r2, pc, #4	; (adr r2, 8002fa8 <DMA_CheckFifoParam+0x28>)
 8002fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa6:	bf00      	nop
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fcb 	.word	0x08002fcb
 8002fb0:	08002fb9 	.word	0x08002fb9
 8002fb4:	0800304f 	.word	0x0800304f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d046      	beq.n	8003052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc8:	e043      	b.n	8003052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fd2:	d140      	bne.n	8003056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd8:	e03d      	b.n	8003056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	d121      	bne.n	8003028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d837      	bhi.n	800305a <DMA_CheckFifoParam+0xda>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <DMA_CheckFifoParam+0x70>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003001 	.word	0x08003001
 8002ff4:	08003007 	.word	0x08003007
 8002ff8:	08003001 	.word	0x08003001
 8002ffc:	08003019 	.word	0x08003019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      break;
 8003004:	e030      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d025      	beq.n	800305e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003016:	e022      	b.n	800305e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003020:	d11f      	bne.n	8003062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003026:	e01c      	b.n	8003062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d903      	bls.n	8003036 <DMA_CheckFifoParam+0xb6>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d003      	beq.n	800303c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003034:	e018      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
      break;
 800303a:	e015      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00e      	beq.n	8003066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      break;
 800304c:	e00b      	b.n	8003066 <DMA_CheckFifoParam+0xe6>
      break;
 800304e:	bf00      	nop
 8003050:	e00a      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003052:	bf00      	nop
 8003054:	e008      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003056:	bf00      	nop
 8003058:	e006      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
 800305c:	e004      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 800305e:	bf00      	nop
 8003060:	e002      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;   
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <DMA_CheckFifoParam+0xe8>
      break;
 8003066:	bf00      	nop
    }
  } 
  
  return status; 
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e159      	b.n	8003348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8148 	bne.w	8003342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d005      	beq.n	80030ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d130      	bne.n	800312c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 0201 	and.w	r2, r3, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d017      	beq.n	8003168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d123      	bne.n	80031bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	08da      	lsrs	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3208      	adds	r2, #8
 800317c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a2 	beq.w	8003342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b57      	ldr	r3, [pc, #348]	; (8003360 <HAL_GPIO_Init+0x2e8>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a56      	ldr	r2, [pc, #344]	; (8003360 <HAL_GPIO_Init+0x2e8>)
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b54      	ldr	r3, [pc, #336]	; (8003360 <HAL_GPIO_Init+0x2e8>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321a:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_GPIO_Init+0x2ec>)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	220f      	movs	r2, #15
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a49      	ldr	r2, [pc, #292]	; (8003368 <HAL_GPIO_Init+0x2f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d019      	beq.n	800327a <HAL_GPIO_Init+0x202>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a48      	ldr	r2, [pc, #288]	; (800336c <HAL_GPIO_Init+0x2f4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_GPIO_Init+0x1fe>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_GPIO_Init+0x2f8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00d      	beq.n	8003272 <HAL_GPIO_Init+0x1fa>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_GPIO_Init+0x2fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d007      	beq.n	800326e <HAL_GPIO_Init+0x1f6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a45      	ldr	r2, [pc, #276]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d101      	bne.n	800326a <HAL_GPIO_Init+0x1f2>
 8003266:	2304      	movs	r3, #4
 8003268:	e008      	b.n	800327c <HAL_GPIO_Init+0x204>
 800326a:	2307      	movs	r3, #7
 800326c:	e006      	b.n	800327c <HAL_GPIO_Init+0x204>
 800326e:	2303      	movs	r3, #3
 8003270:	e004      	b.n	800327c <HAL_GPIO_Init+0x204>
 8003272:	2302      	movs	r3, #2
 8003274:	e002      	b.n	800327c <HAL_GPIO_Init+0x204>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_GPIO_Init+0x204>
 800327a:	2300      	movs	r3, #0
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	f002 0203 	and.w	r2, r2, #3
 8003282:	0092      	lsls	r2, r2, #2
 8003284:	4093      	lsls	r3, r2
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800328c:	4935      	ldr	r1, [pc, #212]	; (8003364 <HAL_GPIO_Init+0x2ec>)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	089b      	lsrs	r3, r3, #2
 8003292:	3302      	adds	r3, #2
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_GPIO_Init+0x304>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <HAL_GPIO_Init+0x304>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c4:	4b2d      	ldr	r3, [pc, #180]	; (800337c <HAL_GPIO_Init+0x304>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e8:	4a24      	ldr	r2, [pc, #144]	; (800337c <HAL_GPIO_Init+0x304>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <HAL_GPIO_Init+0x304>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4313      	orrs	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003312:	4a1a      	ldr	r2, [pc, #104]	; (800337c <HAL_GPIO_Init+0x304>)
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003318:	4b18      	ldr	r3, [pc, #96]	; (800337c <HAL_GPIO_Init+0x304>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_GPIO_Init+0x304>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	f67f aea2 	bls.w	8003094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800
 8003364:	40013800 	.word	0x40013800
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021000 	.word	0x40021000
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800339c:	e003      	b.n	80033a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	041a      	lsls	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	619a      	str	r2, [r3, #24]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e12b      	b.n	800361e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ff8e 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003418:	f003 fb3c 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 800341c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	4a81      	ldr	r2, [pc, #516]	; (8003628 <HAL_I2C_Init+0x274>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d807      	bhi.n	8003438 <HAL_I2C_Init+0x84>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4a80      	ldr	r2, [pc, #512]	; (800362c <HAL_I2C_Init+0x278>)
 800342c:	4293      	cmp	r3, r2
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e006      	b.n	8003446 <HAL_I2C_Init+0x92>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a7d      	ldr	r2, [pc, #500]	; (8003630 <HAL_I2C_Init+0x27c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	bf94      	ite	ls
 8003440:	2301      	movls	r3, #1
 8003442:	2300      	movhi	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0e7      	b.n	800361e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4a78      	ldr	r2, [pc, #480]	; (8003634 <HAL_I2C_Init+0x280>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0c9b      	lsrs	r3, r3, #18
 8003458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_I2C_Init+0x274>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d802      	bhi.n	8003488 <HAL_I2C_Init+0xd4>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	e009      	b.n	800349c <HAL_I2C_Init+0xe8>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	4a69      	ldr	r2, [pc, #420]	; (8003638 <HAL_I2C_Init+0x284>)
 8003494:	fba2 2303 	umull	r2, r3, r2, r3
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	3301      	adds	r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	495c      	ldr	r1, [pc, #368]	; (8003628 <HAL_I2C_Init+0x274>)
 80034b8:	428b      	cmp	r3, r1
 80034ba:	d819      	bhi.n	80034f0 <HAL_I2C_Init+0x13c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e59      	subs	r1, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ca:	1c59      	adds	r1, r3, #1
 80034cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034d0:	400b      	ands	r3, r1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <HAL_I2C_Init+0x138>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	1e59      	subs	r1, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	e051      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e04f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d111      	bne.n	800351c <HAL_I2C_Init+0x168>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1e58      	subs	r0, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	440b      	add	r3, r1
 8003506:	fbb0 f3f3 	udiv	r3, r0, r3
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	2b00      	cmp	r3, #0
 8003512:	bf0c      	ite	eq
 8003514:	2301      	moveq	r3, #1
 8003516:	2300      	movne	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e012      	b.n	8003542 <HAL_I2C_Init+0x18e>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	1e58      	subs	r0, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	0099      	lsls	r1, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003532:	3301      	adds	r3, #1
 8003534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x196>
 8003546:	2301      	movs	r3, #1
 8003548:	e022      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10e      	bne.n	8003570 <HAL_I2C_Init+0x1bc>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	1e58      	subs	r0, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	fbb0 f3f3 	udiv	r3, r0, r3
 8003564:	3301      	adds	r3, #1
 8003566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800356e:	e00f      	b.n	8003590 <HAL_I2C_Init+0x1dc>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6809      	ldr	r1, [r1, #0]
 8003594:	4313      	orrs	r3, r2
 8003596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6911      	ldr	r1, [r2, #16]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	000186a0 	.word	0x000186a0
 800362c:	001e847f 	.word	0x001e847f
 8003630:	003d08ff 	.word	0x003d08ff
 8003634:	431bde83 	.word	0x431bde83
 8003638:	10624dd3 	.word	0x10624dd3

0800363c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003656:	f7fe fb1f 	bl	8001c98 <HAL_GetTick>
 800365a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b20      	cmp	r3, #32
 8003666:	f040 80d9 	bne.w	800381c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2319      	movs	r3, #25
 8003670:	2201      	movs	r2, #1
 8003672:	496d      	ldr	r1, [pc, #436]	; (8003828 <HAL_I2C_Mem_Write+0x1ec>)
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f002 fbb3 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003680:	2302      	movs	r3, #2
 8003682:	e0cc      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_I2C_Mem_Write+0x56>
 800368e:	2302      	movs	r3, #2
 8003690:	e0c5      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d007      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2221      	movs	r2, #33	; 0x21
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2240      	movs	r2, #64	; 0x40
 80036d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a4d      	ldr	r2, [pc, #308]	; (800382c <HAL_I2C_Mem_Write+0x1f0>)
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fa:	88f8      	ldrh	r0, [r7, #6]
 80036fc:	893a      	ldrh	r2, [r7, #8]
 80036fe:	8979      	ldrh	r1, [r7, #10]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4603      	mov	r3, r0
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f002 f830 	bl	8005770 <I2C_RequestMemoryWrite>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d052      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e081      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f002 fc34 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b04      	cmp	r3, #4
 8003730:	d107      	bne.n	8003742 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003740:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e06b      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	781a      	ldrb	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b04      	cmp	r3, #4
 8003782:	d11b      	bne.n	80037bc <HAL_I2C_Mem_Write+0x180>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1aa      	bne.n	800371a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f002 fc20 	bl	800600e <I2C_WaitOnBTFFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00d      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d107      	bne.n	80037ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e016      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	00100002 	.word	0x00100002
 800382c:	ffff0000 	.word	0xffff0000

08003830 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	817b      	strh	r3, [r7, #10]
 8003842:	460b      	mov	r3, r1
 8003844:	813b      	strh	r3, [r7, #8]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800384a:	f7fe fa25 	bl	8001c98 <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	f040 8208 	bne.w	8003c6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2319      	movs	r3, #25
 8003864:	2201      	movs	r2, #1
 8003866:	497b      	ldr	r1, [pc, #492]	; (8003a54 <HAL_I2C_Mem_Read+0x224>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f002 fab9 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
 8003876:	e1fb      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2C_Mem_Read+0x56>
 8003882:	2302      	movs	r3, #2
 8003884:	e1f4      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d007      	beq.n	80038ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2222      	movs	r2, #34	; 0x22
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80038dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_I2C_Mem_Read+0x228>)
 80038ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ee:	88f8      	ldrh	r0, [r7, #6]
 80038f0:	893a      	ldrh	r2, [r7, #8]
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4603      	mov	r3, r0
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f001 ffcc 	bl	800589c <I2C_RequestMemoryRead>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1b0      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	623b      	str	r3, [r7, #32]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	623b      	str	r3, [r7, #32]
 800392a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	e184      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	2b01      	cmp	r3, #1
 8003944:	d11b      	bne.n	800397e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e164      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	2b02      	cmp	r3, #2
 8003984:	d11b      	bne.n	80039be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003994:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	e144      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80039d4:	e138      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	2b03      	cmp	r3, #3
 80039dc:	f200 80f1 	bhi.w	8003bc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d123      	bne.n	8003a30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f002 fb81 	bl	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e139      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a2e:	e10b      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d14e      	bne.n	8003ad6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4906      	ldr	r1, [pc, #24]	; (8003a5c <HAL_I2C_Mem_Read+0x22c>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f002 f9cc 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e10e      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
 8003a52:	bf00      	nop
 8003a54:	00100002 	.word	0x00100002
 8003a58:	ffff0000 	.word	0xffff0000
 8003a5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad4:	e0b8      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	2200      	movs	r2, #0
 8003ade:	4966      	ldr	r1, [pc, #408]	; (8003c78 <HAL_I2C_Mem_Read+0x448>)
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f002 f97d 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0bf      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	2200      	movs	r2, #0
 8003b3a:	494f      	ldr	r1, [pc, #316]	; (8003c78 <HAL_I2C_Mem_Read+0x448>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f002 f94f 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e091      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003baa:	3b01      	subs	r3, #1
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bc0:	e042      	b.n	8003c48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f002 fa94 	bl	80060f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e04c      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d118      	bne.n	8003c48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f47f aec2 	bne.w	80039d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3728      	adds	r7, #40	; 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	00010004 	.word	0x00010004

08003c7c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c96:	f7fd ffff 	bl	8001c98 <HAL_GetTick>
 8003c9a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	f040 8176 	bne.w	8003f9a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cae:	4b95      	ldr	r3, [pc, #596]	; (8003f04 <HAL_I2C_Mem_Read_DMA+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	08db      	lsrs	r3, r3, #3
 8003cb4:	4a94      	ldr	r2, [pc, #592]	; (8003f08 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0a1a      	lsrs	r2, r3, #8
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009a      	lsls	r2, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f043 0220 	orr.w	r2, r3, #32
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e14c      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d0db      	beq.n	8003cc8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Read_DMA+0xa2>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e13e      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d007      	beq.n	8003d44 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	; 0x22
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2240      	movs	r2, #64	; 0x40
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a62      	ldr	r2, [pc, #392]	; (8003f0c <HAL_I2C_Mem_Read_DMA+0x290>)
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d86:	897a      	ldrh	r2, [r7, #10]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80cc 	beq.w	8003f40 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02d      	beq.n	8003e0c <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	4a56      	ldr	r2, [pc, #344]	; (8003f10 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003db6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	2200      	movs	r2, #0
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2200      	movs	r2, #0
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3310      	adds	r3, #16
 8003dea:	4619      	mov	r1, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	461a      	mov	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df6:	f7fe fe41 	bl	8002a7c <HAL_DMA_Start_IT>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f040 8087 	bne.w	8003f18 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003e0a:	e013      	b.n	8003e34 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b3      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003e34:	88f8      	ldrh	r0, [r7, #6]
 8003e36:	893a      	ldrh	r2, [r7, #8]
 8003e38:	8979      	ldrh	r1, [r7, #10]
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	2323      	movs	r3, #35	; 0x23
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	4603      	mov	r3, r0
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f001 fd29 	bl	800589c <I2C_RequestMemoryRead>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d023      	beq.n	8003e98 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fe69 	bl	8002b2c <HAL_DMA_Abort_IT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	2200      	movs	r2, #0
 8003e66:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e76:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e081      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ec0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eee:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e049      	b.n	8003f96 <HAL_I2C_Mem_Read_DMA+0x31a>
 8003f02:	bf00      	nop
 8003f04:	20000000 	.word	0x20000000
 8003f08:	14f8b589 	.word	0x14f8b589
 8003f0c:	ffff0000 	.word	0xffff0000
 8003f10:	08005a6d 	.word	0x08005a6d
 8003f14:	08005c17 	.word	0x08005c17
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e02d      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003f40:	88f8      	ldrh	r0, [r7, #6]
 8003f42:	893a      	ldrh	r2, [r7, #8]
 8003f44:	8979      	ldrh	r1, [r7, #10]
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	2323      	movs	r3, #35	; 0x23
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4603      	mov	r3, r0
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f001 fca3 	bl	800589c <I2C_RequestMemoryRead>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e01d      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f84:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
  }
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3728      	adds	r7, #40	; 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d003      	beq.n	8003fdc <HAL_I2C_EV_IRQHandler+0x38>
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	f040 80c1 	bne.w	800415e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_I2C_EV_IRQHandler+0x6e>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ffc:	d003      	beq.n	8004006 <HAL_I2C_EV_IRQHandler+0x62>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004004:	d101      	bne.n	800400a <HAL_I2C_EV_IRQHandler+0x66>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_I2C_EV_IRQHandler+0x68>
 800400a:	2300      	movs	r3, #0
 800400c:	2b01      	cmp	r3, #1
 800400e:	f000 8132 	beq.w	8004276 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00c      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x92>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	0a5b      	lsrs	r3, r3, #9
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d006      	beq.n	8004036 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f002 f8e8 	bl	80061fe <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fd83 	bl	8004b3a <I2C_Master_SB>
 8004034:	e092      	b.n	800415c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0xb2>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fdf9 	bl	8004c46 <I2C_Master_ADD10>
 8004054:	e082      	b.n	800415c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0xd2>
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	0a5b      	lsrs	r3, r3, #9
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fe13 	bl	8004c9a <I2C_Master_ADDR>
 8004074:	e072      	b.n	800415c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d03b      	beq.n	80040fa <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004090:	f000 80f3 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	09db      	lsrs	r3, r3, #7
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	0a9b      	lsrs	r3, r3, #10
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x11c>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	089b      	lsrs	r3, r3, #2
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9f3 	bl	80044a4 <I2C_MasterTransmit_TXE>
 80040be:	e04d      	b.n	800415c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80d6 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	0a5b      	lsrs	r3, r3, #9
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 80cf 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	2b21      	cmp	r3, #33	; 0x21
 80040e0:	d103      	bne.n	80040ea <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa7a 	bl	80045dc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040e8:	e0c7      	b.n	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	f040 80c4 	bne.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fae8 	bl	80046c8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f8:	e0bf      	b.n	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004108:	f000 80b7 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00f      	beq.n	8004138 <HAL_I2C_EV_IRQHandler+0x194>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	0a9b      	lsrs	r3, r3, #10
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_I2C_EV_IRQHandler+0x194>
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb5d 	bl	80047f0 <I2C_MasterReceive_RXNE>
 8004136:	e011      	b.n	800415c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 809a 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	0a5b      	lsrs	r3, r3, #9
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8093 	beq.w	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fc06 	bl	8004966 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800415a:	e08e      	b.n	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
 800415c:	e08d      	b.n	800427a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e007      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0x20e>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	0a5b      	lsrs	r3, r3, #9
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00c      	beq.n	80041b2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041a8:	69b9      	ldr	r1, [r7, #24]
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 ffc4 	bl	8005138 <I2C_Slave_ADDR>
 80041b0:	e066      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_I2C_EV_IRQHandler+0x22e>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	0a5b      	lsrs	r3, r3, #9
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fffe 	bl	80051cc <I2C_Slave_STOPF>
 80041d0:	e056      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041d2:	7bbb      	ldrb	r3, [r7, #14]
 80041d4:	2b21      	cmp	r3, #33	; 0x21
 80041d6:	d002      	beq.n	80041de <HAL_I2C_EV_IRQHandler+0x23a>
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	2b29      	cmp	r3, #41	; 0x29
 80041dc:	d125      	bne.n	800422a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	09db      	lsrs	r3, r3, #7
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00f      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x266>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	0a9b      	lsrs	r3, r3, #10
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x266>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	089b      	lsrs	r3, r3, #2
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 feda 	bl	8004fbc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004208:	e039      	b.n	800427e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d033      	beq.n	800427e <HAL_I2C_EV_IRQHandler+0x2da>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	0a5b      	lsrs	r3, r3, #9
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d02d      	beq.n	800427e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 ff07 	bl	8005036 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004228:	e029      	b.n	800427e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00f      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	0a9b      	lsrs	r3, r3, #10
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 ff12 	bl	8005078 <I2C_SlaveReceive_RXNE>
 8004254:	e014      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00e      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 ff40 	bl	80050f4 <I2C_SlaveReceive_BTF>
 8004274:	e004      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800427e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004280:	3720      	adds	r7, #32
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b08a      	sub	sp, #40	; 0x28
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800429e:	2300      	movs	r3, #0
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00e      	beq.n	80042d4 <HAL_I2C_ER_IRQHandler+0x4e>
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	0a5b      	lsrs	r3, r3, #9
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <HAL_I2C_ER_IRQHandler+0x78>
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	0a1b      	lsrs	r3, r3, #8
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f043 0302 	orr.w	r3, r3, #2
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80042fc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	0a9b      	lsrs	r3, r3, #10
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d03f      	beq.n	800438a <HAL_I2C_ER_IRQHandler+0x104>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	0a1b      	lsrs	r3, r3, #8
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d039      	beq.n	800438a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004316:	7efb      	ldrb	r3, [r7, #27]
 8004318:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004330:	7ebb      	ldrb	r3, [r7, #26]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d112      	bne.n	800435c <HAL_I2C_ER_IRQHandler+0xd6>
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10f      	bne.n	800435c <HAL_I2C_ER_IRQHandler+0xd6>
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b21      	cmp	r3, #33	; 0x21
 8004340:	d008      	beq.n	8004354 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2b29      	cmp	r3, #41	; 0x29
 8004346:	d005      	beq.n	8004354 <HAL_I2C_ER_IRQHandler+0xce>
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b28      	cmp	r3, #40	; 0x28
 800434c:	d106      	bne.n	800435c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b21      	cmp	r3, #33	; 0x21
 8004352:	d103      	bne.n	800435c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f001 f869 	bl	800542c <I2C_Slave_AF>
 800435a:	e016      	b.n	800438a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004364:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800436e:	7efb      	ldrb	r3, [r7, #27]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d002      	beq.n	800437a <HAL_I2C_ER_IRQHandler+0xf4>
 8004374:	7efb      	ldrb	r3, [r7, #27]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d107      	bne.n	800438a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	0adb      	lsrs	r3, r3, #11
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00e      	beq.n	80043b4 <HAL_I2C_ER_IRQHandler+0x12e>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	0a1b      	lsrs	r3, r3, #8
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 0308 	orr.w	r3, r3, #8
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043b2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f8a0 	bl	800550c <I2C_ITError>
  }
}
 80043cc:	bf00      	nop
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
 8004430:	4613      	mov	r3, r2
 8004432:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d150      	bne.n	800456c <I2C_MasterTransmit_TXE+0xc8>
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b21      	cmp	r3, #33	; 0x21
 80044ce:	d14d      	bne.n	800456c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d01d      	beq.n	8004512 <I2C_MasterTransmit_TXE+0x6e>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d01a      	beq.n	8004512 <I2C_MasterTransmit_TXE+0x6e>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e2:	d016      	beq.n	8004512 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2211      	movs	r2, #17
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7ff ff62 	bl	80043d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004510:	e060      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004520:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004530:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d107      	bne.n	800455c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff7d 	bl	8004454 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800455a:	e03b      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff35 	bl	80043d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800456a:	e033      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	2b21      	cmp	r3, #33	; 0x21
 8004570:	d005      	beq.n	800457e <I2C_MasterTransmit_TXE+0xda>
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d12d      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b22      	cmp	r3, #34	; 0x22
 800457c:	d12a      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d108      	bne.n	800459a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004596:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004598:	e01c      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d103      	bne.n	80045ae <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f88e 	bl	80046c8 <I2C_MemoryTransmit_TXE_BTF>
}
 80045ac:	e012      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045d2:	e7ff      	b.n	80045d4 <I2C_MasterTransmit_TXE+0x130>
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b21      	cmp	r3, #33	; 0x21
 80045f4:	d164      	bne.n	80046c0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d012      	beq.n	8004626 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	781a      	ldrb	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004624:	e04c      	b.n	80046c0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d01d      	beq.n	8004668 <I2C_MasterTransmit_BTF+0x8c>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b20      	cmp	r3, #32
 8004630:	d01a      	beq.n	8004668 <I2C_MasterTransmit_BTF+0x8c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004638:	d016      	beq.n	8004668 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685a      	ldr	r2, [r3, #4]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004648:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2211      	movs	r2, #17
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff feb7 	bl	80043d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004666:	e02b      	b.n	80046c0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004676:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	d107      	bne.n	80046b2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff fed2 	bl	8004454 <HAL_I2C_MemTxCpltCallback>
}
 80046b0:	e006      	b.n	80046c0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fe8a 	bl	80043d4 <HAL_I2C_MasterTxCpltCallback>
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10b      	bne.n	8004700 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	1c9a      	adds	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80046fe:	e073      	b.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	b29b      	uxth	r3, r3
 8004706:	121b      	asrs	r3, r3, #8
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	651a      	str	r2, [r3, #80]	; 0x50
}
 800471a:	e065      	b.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	2b01      	cmp	r3, #1
 8004722:	d10b      	bne.n	800473c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	b2da      	uxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
}
 800473a:	e055      	b.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004740:	2b02      	cmp	r3, #2
 8004742:	d151      	bne.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b22      	cmp	r3, #34	; 0x22
 8004748:	d10d      	bne.n	8004766 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004758:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004764:	e040      	b.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b21      	cmp	r3, #33	; 0x21
 8004774:	d112      	bne.n	800479c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800479a:	e025      	b.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d120      	bne.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d11d      	bne.n	80047e8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ba:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe36 	bl	8004454 <HAL_I2C_MemTxCpltCallback>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b22      	cmp	r3, #34	; 0x22
 8004802:	f040 80ac 	bne.w	800495e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d921      	bls.n	8004858 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b03      	cmp	r3, #3
 8004842:	f040 808c 	bne.w	800495e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004854:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004856:	e082      	b.n	800495e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	2b02      	cmp	r3, #2
 800485e:	d075      	beq.n	800494c <I2C_MasterReceive_RXNE+0x15c>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d002      	beq.n	800486c <I2C_MasterReceive_RXNE+0x7c>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d16f      	bne.n	800494c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 fc0f 	bl	8006090 <I2C_WaitOnSTOPRequestThroughIT>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d142      	bne.n	80048fe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004886:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004896:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d10a      	bne.n	80048e8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fdc1 	bl	8004468 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048e6:	e03a      	b.n	800495e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2212      	movs	r2, #18
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff fd76 	bl	80043e8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048fc:	e02f      	b.n	800495e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fd99 	bl	800447c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800494a:	e008      	b.n	800495e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	605a      	str	r2, [r3, #4]
}
 800495c:	e7ff      	b.n	800495e <I2C_MasterReceive_RXNE+0x16e>
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b04      	cmp	r3, #4
 800497c:	d11b      	bne.n	80049b6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049b4:	e0bd      	b.n	8004b32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d129      	bne.n	8004a14 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ce:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d00a      	beq.n	80049ec <I2C_MasterReceive_BTF+0x86>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d007      	beq.n	80049ec <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a12:	e08e      	b.n	8004b32 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d176      	bne.n	8004b0c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d002      	beq.n	8004a2a <I2C_MasterReceive_BTF+0xc4>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e019      	b.n	8004a70 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d002      	beq.n	8004a48 <I2C_MasterReceive_BTF+0xe2>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d108      	bne.n	8004a5a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e00a      	b.n	8004a70 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d007      	beq.n	8004a70 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d10a      	bne.n	8004af6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7ff fcba 	bl	8004468 <HAL_I2C_MemRxCpltCallback>
}
 8004af4:	e01d      	b.n	8004b32 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2212      	movs	r2, #18
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fc6f 	bl	80043e8 <HAL_I2C_MasterRxCpltCallback>
}
 8004b0a:	e012      	b.n	8004b32 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b32:	bf00      	nop
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d117      	bne.n	8004b7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b68:	e067      	b.n	8004c3a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]
}
 8004b7c:	e05d      	b.n	8004c3a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b86:	d133      	bne.n	8004bf0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b21      	cmp	r3, #33	; 0x21
 8004b92:	d109      	bne.n	8004ba8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	e008      	b.n	8004bba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d004      	beq.n	8004bcc <I2C_Master_SB+0x92>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d108      	bne.n	8004bde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d032      	beq.n	8004c3a <I2C_Master_SB+0x100>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d02d      	beq.n	8004c3a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bec:	605a      	str	r2, [r3, #4]
}
 8004bee:	e024      	b.n	8004c3a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10e      	bne.n	8004c16 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	11db      	asrs	r3, r3, #7
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0306 	and.w	r3, r3, #6
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f063 030f 	orn	r3, r3, #15
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
}
 8004c14:	e011      	b.n	8004c3a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10d      	bne.n	8004c3a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	11db      	asrs	r3, r3, #7
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 0306 	and.w	r3, r3, #6
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f063 030e 	orn	r3, r3, #14
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <I2C_Master_ADD10+0x26>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d108      	bne.n	8004c7e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <I2C_Master_ADD10+0x48>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8c:	605a      	str	r2, [r3, #4]
  }
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b091      	sub	sp, #68	; 0x44
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b22      	cmp	r3, #34	; 0x22
 8004cc2:	f040 8169 	bne.w	8004f98 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <I2C_Master_ADDR+0x54>
 8004cce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d10b      	bne.n	8004cee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	e160      	b.n	8004fb0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11d      	bne.n	8004d32 <I2C_Master_ADDR+0x98>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cfe:	d118      	bne.n	8004d32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d00:	2300      	movs	r3, #0
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d30:	e13e      	b.n	8004fb0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d113      	bne.n	8004d64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e115      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	f040 808a 	bne.w	8004e84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d76:	d137      	bne.n	8004de8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d96:	d113      	bne.n	8004dc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da8:	2300      	movs	r3, #0
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	e0e7      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	623b      	str	r3, [r7, #32]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	e0d3      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d02e      	beq.n	8004e4c <I2C_Master_ADDR+0x1b2>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d02b      	beq.n	8004e4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df6:	2b12      	cmp	r3, #18
 8004df8:	d102      	bne.n	8004e00 <I2C_Master_ADDR+0x166>
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d125      	bne.n	8004e4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d00e      	beq.n	8004e24 <I2C_Master_ADDR+0x18a>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d00b      	beq.n	8004e24 <I2C_Master_ADDR+0x18a>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d008      	beq.n	8004e24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e007      	b.n	8004e34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	61fb      	str	r3, [r7, #28]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	e0a1      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e085      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d14d      	bne.n	8004f2a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d016      	beq.n	8004ec2 <I2C_Master_ADDR+0x228>
 8004e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d013      	beq.n	8004ec2 <I2C_Master_ADDR+0x228>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d010      	beq.n	8004ec2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eae:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e007      	b.n	8004ed2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee0:	d117      	bne.n	8004f12 <I2C_Master_ADDR+0x278>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ee8:	d00b      	beq.n	8004f02 <I2C_Master_ADDR+0x268>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d008      	beq.n	8004f02 <I2C_Master_ADDR+0x268>
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d005      	beq.n	8004f02 <I2C_Master_ADDR+0x268>
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d002      	beq.n	8004f02 <I2C_Master_ADDR+0x268>
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d107      	bne.n	8004f12 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	e032      	b.n	8004f90 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f38:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f48:	d117      	bne.n	8004f7a <I2C_Master_ADDR+0x2e0>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f50:	d00b      	beq.n	8004f6a <I2C_Master_ADDR+0x2d0>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d008      	beq.n	8004f6a <I2C_Master_ADDR+0x2d0>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d005      	beq.n	8004f6a <I2C_Master_ADDR+0x2d0>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d002      	beq.n	8004f6a <I2C_Master_ADDR+0x2d0>
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	2b20      	cmp	r3, #32
 8004f68:	d107      	bne.n	8004f7a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f78:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f96:	e00b      	b.n	8004fb0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	68fb      	ldr	r3, [r7, #12]
}
 8004fae:	e7ff      	b.n	8004fb0 <I2C_Master_ADDR+0x316>
 8004fb0:	bf00      	nop
 8004fb2:	3744      	adds	r7, #68	; 0x44
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d02b      	beq.n	800502e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d114      	bne.n	800502e <I2C_SlaveTransmit_TXE+0x72>
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b29      	cmp	r3, #41	; 0x29
 8005008:	d111      	bne.n	800502e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2221      	movs	r2, #33	; 0x21
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2228      	movs	r2, #40	; 0x28
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff f9e7 	bl	80043fc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d011      	beq.n	800506c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005086:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d02c      	beq.n	80050ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d114      	bne.n	80050ec <I2C_SlaveReceive_RXNE+0x74>
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b2a      	cmp	r3, #42	; 0x2a
 80050c6:	d111      	bne.n	80050ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2222      	movs	r2, #34	; 0x22
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2228      	movs	r2, #40	; 0x28
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff f992 	bl	8004410 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d012      	beq.n	800512c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005142:	2300      	movs	r3, #0
 8005144:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005152:	2b28      	cmp	r3, #40	; 0x28
 8005154:	d127      	bne.n	80051a6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	81bb      	strh	r3, [r7, #12]
 8005188:	e002      	b.n	8005190 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005198:	89ba      	ldrh	r2, [r7, #12]
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff f940 	bl	8004424 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051a4:	e00e      	b.n	80051c4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051c4:	bf00      	nop
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005218:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005228:	d172      	bne.n	8005310 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	2b22      	cmp	r3, #34	; 0x22
 800522e:	d002      	beq.n	8005236 <I2C_Slave_STOPF+0x6a>
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b2a      	cmp	r3, #42	; 0x2a
 8005234:	d135      	bne.n	80052a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0204 	orr.w	r2, r3, #4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005268:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526e:	4618      	mov	r0, r3
 8005270:	f7fd fe08 	bl	8002e84 <HAL_DMA_GetState>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d049      	beq.n	800530e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	4a69      	ldr	r2, [pc, #420]	; (8005424 <I2C_Slave_STOPF+0x258>)
 8005280:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd fc50 	bl	8002b2c <HAL_DMA_Abort_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d03d      	beq.n	800530e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800529c:	4610      	mov	r0, r2
 800529e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052a0:	e035      	b.n	800530e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0204 	orr.w	r2, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fd fdd2 	bl	8002e84 <HAL_DMA_GetState>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d014      	beq.n	8005310 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ea:	4a4e      	ldr	r2, [pc, #312]	; (8005424 <I2C_Slave_STOPF+0x258>)
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fc1a 	bl	8002b2c <HAL_DMA_Abort_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d008      	beq.n	8005310 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
 800530c:	e000      	b.n	8005310 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800530e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03e      	beq.n	8005398 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d112      	bne.n	800534e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d112      	bne.n	8005382 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	f043 0204 	orr.w	r2, r3, #4
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8b3 	bl	800550c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053a6:	e039      	b.n	800541c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b2a      	cmp	r3, #42	; 0x2a
 80053ac:	d109      	bne.n	80053c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2228      	movs	r2, #40	; 0x28
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff f827 	bl	8004410 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b28      	cmp	r3, #40	; 0x28
 80053cc:	d111      	bne.n	80053f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <I2C_Slave_STOPF+0x25c>)
 80053d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff f828 	bl	8004440 <HAL_I2C_ListenCpltCallback>
}
 80053f0:	e014      	b.n	800541c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	2b22      	cmp	r3, #34	; 0x22
 80053f8:	d002      	beq.n	8005400 <I2C_Slave_STOPF+0x234>
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b22      	cmp	r3, #34	; 0x22
 80053fe:	d10d      	bne.n	800541c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fe fffa 	bl	8004410 <HAL_I2C_SlaveRxCpltCallback>
}
 800541c:	bf00      	nop
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	08005c91 	.word	0x08005c91
 8005428:	ffff0000 	.word	0xffff0000

0800542c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d002      	beq.n	800544e <I2C_Slave_AF+0x22>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d129      	bne.n	80054a2 <I2C_Slave_AF+0x76>
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b28      	cmp	r3, #40	; 0x28
 8005452:	d126      	bne.n	80054a2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <I2C_Slave_AF+0xdc>)
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005468:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005472:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005482:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fe ffd0 	bl	8004440 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054a0:	e02e      	b.n	8005500 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
 80054a4:	2b21      	cmp	r3, #33	; 0x21
 80054a6:	d126      	bne.n	80054f6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a17      	ldr	r2, [pc, #92]	; (8005508 <I2C_Slave_AF+0xdc>)
 80054ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2221      	movs	r2, #33	; 0x21
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054d2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fe ff84 	bl	80043fc <HAL_I2C_SlaveTxCpltCallback>
}
 80054f4:	e004      	b.n	8005500 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054fe:	615a      	str	r2, [r3, #20]
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	ffff0000 	.word	0xffff0000

0800550c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	2b10      	cmp	r3, #16
 8005528:	d002      	beq.n	8005530 <I2C_ITError+0x24>
 800552a:	7bbb      	ldrb	r3, [r7, #14]
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d10a      	bne.n	8005546 <I2C_ITError+0x3a>
 8005530:	7bfb      	ldrb	r3, [r7, #15]
 8005532:	2b22      	cmp	r3, #34	; 0x22
 8005534:	d107      	bne.n	8005546 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005544:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800554c:	2b28      	cmp	r3, #40	; 0x28
 800554e:	d107      	bne.n	8005560 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2228      	movs	r2, #40	; 0x28
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800555e:	e015      	b.n	800558c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d00a      	beq.n	8005586 <I2C_ITError+0x7a>
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b60      	cmp	r3, #96	; 0x60
 8005574:	d007      	beq.n	8005586 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559a:	d162      	bne.n	8005662 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d020      	beq.n	80055fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <I2C_ITError+0x25c>)
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd fab0 	bl	8002b2c <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8089 	beq.w	80056e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055f6:	4610      	mov	r0, r2
 80055f8:	4798      	blx	r3
 80055fa:	e074      	b.n	80056e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005600:	4a59      	ldr	r2, [pc, #356]	; (8005768 <I2C_ITError+0x25c>)
 8005602:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	4618      	mov	r0, r3
 800560a:	f7fd fa8f 	bl	8002b2c <HAL_DMA_Abort_IT>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d068      	beq.n	80056e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d10b      	bne.n	800563a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	e041      	b.n	80056e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b60      	cmp	r3, #96	; 0x60
 800566c:	d125      	bne.n	80056ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b40      	cmp	r3, #64	; 0x40
 8005688:	d10b      	bne.n	80056a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fe feec 	bl	8004490 <HAL_I2C_AbortCpltCallback>
 80056b8:	e015      	b.n	80056e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d10b      	bne.n	80056e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fe fecb 	bl	800447c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10e      	bne.n	8005714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005706:	2b00      	cmp	r3, #0
 8005708:	d104      	bne.n	8005714 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d113      	bne.n	8005760 <I2C_ITError+0x254>
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b28      	cmp	r3, #40	; 0x28
 800573c:	d110      	bne.n	8005760 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <I2C_ITError+0x260>)
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fe fe70 	bl	8004440 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	08005c91 	.word	0x08005c91
 800576c:	ffff0000 	.word	0xffff0000

08005770 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	4608      	mov	r0, r1
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	817b      	strh	r3, [r7, #10]
 8005782:	460b      	mov	r3, r1
 8005784:	813b      	strh	r3, [r7, #8]
 8005786:	4613      	mov	r3, r2
 8005788:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005798:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fb1a 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	d103      	bne.n	80057ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e05f      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ce:	897b      	ldrh	r3, [r7, #10]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	492d      	ldr	r1, [pc, #180]	; (8005898 <I2C_RequestMemoryWrite+0x128>)
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fb52 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e04c      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fbbc 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00d      	beq.n	8005836 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	2b04      	cmp	r3, #4
 8005820:	d107      	bne.n	8005832 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e02b      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d105      	bne.n	8005848 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	e021      	b.n	800588c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005848:	893b      	ldrh	r3, [r7, #8]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b29b      	uxth	r3, r3
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	6a39      	ldr	r1, [r7, #32]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fb96 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00d      	beq.n	8005882 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	2b04      	cmp	r3, #4
 800586c:	d107      	bne.n	800587e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e005      	b.n	800588e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005882:	893b      	ldrh	r3, [r7, #8]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	00010002 	.word	0x00010002

0800589c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af02      	add	r7, sp, #8
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	4608      	mov	r0, r1
 80058a6:	4611      	mov	r1, r2
 80058a8:	461a      	mov	r2, r3
 80058aa:	4603      	mov	r3, r0
 80058ac:	817b      	strh	r3, [r7, #10]
 80058ae:	460b      	mov	r3, r1
 80058b0:	813b      	strh	r3, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	2200      	movs	r2, #0
 80058de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 fa7c 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058fc:	d103      	bne.n	8005906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e0aa      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	4952      	ldr	r1, [pc, #328]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fab4 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e097      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 fb1e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00d      	beq.n	8005972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b04      	cmp	r3, #4
 800595c:	d107      	bne.n	800596e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800596c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e076      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005978:	893b      	ldrh	r3, [r7, #8]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]
 8005982:	e021      	b.n	80059c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005984:	893b      	ldrh	r3, [r7, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b29b      	uxth	r3, r3
 800598a:	b2da      	uxtb	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 faf8 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00d      	beq.n	80059be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d107      	bne.n	80059ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e050      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059be:	893b      	ldrh	r3, [r7, #8]
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fadd 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00d      	beq.n	80059f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d107      	bne.n	80059f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e035      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f9e5 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2a:	d103      	bne.n	8005a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a38:	897b      	ldrh	r3, [r7, #10]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	4906      	ldr	r1, [pc, #24]	; (8005a68 <I2C_RequestMemoryRead+0x1cc>)
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fa1d 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	00010002 	.word	0x00010002

08005a6c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a88:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	2200      	movs	r2, #0
 8005aae:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	2200      	movs	r2, #0
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005ac0:	7cfb      	ldrb	r3, [r7, #19]
 8005ac2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005ac6:	2b21      	cmp	r3, #33	; 0x21
 8005ac8:	d007      	beq.n	8005ada <I2C_DMAXferCplt+0x6e>
 8005aca:	7cfb      	ldrb	r3, [r7, #19]
 8005acc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005ad0:	2b22      	cmp	r3, #34	; 0x22
 8005ad2:	d131      	bne.n	8005b38 <I2C_DMAXferCplt+0xcc>
 8005ad4:	7cbb      	ldrb	r3, [r7, #18]
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d12e      	bne.n	8005b38 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2200      	movs	r2, #0
 8005aee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b29      	cmp	r3, #41	; 0x29
 8005af4:	d10a      	bne.n	8005b0c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2221      	movs	r2, #33	; 0x21
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2228      	movs	r2, #40	; 0x28
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b04:	6978      	ldr	r0, [r7, #20]
 8005b06:	f7fe fc79 	bl	80043fc <HAL_I2C_SlaveTxCpltCallback>
 8005b0a:	e00c      	b.n	8005b26 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b10:	d109      	bne.n	8005b26 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2222      	movs	r2, #34	; 0x22
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2228      	movs	r2, #40	; 0x28
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b20:	6978      	ldr	r0, [r7, #20]
 8005b22:	f7fe fc75 	bl	8004410 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005b34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005b36:	e06a      	b.n	8005c0e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d064      	beq.n	8005c0e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d107      	bne.n	8005b5e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b6c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b74:	d009      	beq.n	8005b8a <I2C_DMAXferCplt+0x11e>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d006      	beq.n	8005b8a <I2C_DMAXferCplt+0x11e>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b82:	d002      	beq.n	8005b8a <I2C_DMAXferCplt+0x11e>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d107      	bne.n	8005b9a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b98:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ba8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005bc8:	6978      	ldr	r0, [r7, #20]
 8005bca:	f7fe fc57 	bl	800447c <HAL_I2C_ErrorCallback>
}
 8005bce:	e01e      	b.n	8005c0e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d10a      	bne.n	8005bfa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f7fe fc38 	bl	8004468 <HAL_I2C_MemRxCpltCallback>
}
 8005bf8:	e009      	b.n	8005c0e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2212      	movs	r2, #18
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c08:	6978      	ldr	r0, [r7, #20]
 8005c0a:	f7fe fbed 	bl	80043e8 <HAL_I2C_MasterRxCpltCallback>
}
 8005c0e:	bf00      	nop
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	2200      	movs	r2, #0
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	2200      	movs	r2, #0
 8005c42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fd f92b 	bl	8002ea0 <HAL_DMA_GetError>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d01b      	beq.n	8005c88 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f043 0210 	orr.w	r2, r3, #16
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7fe fbfa 	bl	800447c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005caa:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <I2C_DMAAbort+0x148>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	4a4a      	ldr	r2, [pc, #296]	; (8005ddc <I2C_DMAAbort+0x14c>)
 8005cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb6:	0a1a      	lsrs	r2, r3, #8
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00da      	lsls	r2, r3, #3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005cd6:	e00a      	b.n	8005cee <I2C_DMAAbort+0x5e>
    }
    count--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d0ea      	beq.n	8005cc4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2200      	movs	r2, #0
 8005d22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	2200      	movs	r2, #0
 8005d32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	2200      	movs	r2, #0
 8005d42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d10e      	bne.n	8005d7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2200      	movs	r2, #0
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7fe fb8a 	bl	8004490 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d7c:	e027      	b.n	8005dce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d84:	2b28      	cmp	r3, #40	; 0x28
 8005d86:	d117      	bne.n	8005db8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2228      	movs	r2, #40	; 0x28
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005db6:	e007      	b.n	8005dc8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7fe fb57 	bl	800447c <HAL_I2C_ErrorCallback>
}
 8005dce:	bf00      	nop
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000000 	.word	0x20000000
 8005ddc:	14f8b589 	.word	0x14f8b589

08005de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df0:	e025      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d021      	beq.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fb ff4d 	bl	8001c98 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e023      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10d      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	e00c      	b.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0b6      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9c:	e051      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eac:	d123      	bne.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e046      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d021      	beq.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fb fecb 	bl	8001c98 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d116      	bne.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e020      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10c      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e00b      	b.n	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d18d      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f98:	e02d      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f900 	bl	80061a0 <I2C_IsAcknowledgeFailed>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e02d      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb0:	d021      	beq.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fb fe71 	bl	8001c98 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d1ca      	bne.n	8005f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800601a:	e02d      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f8bf 	bl	80061a0 <I2C_IsAcknowledgeFailed>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02d      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d021      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7fb fe30 	bl	8001c98 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d1ca      	bne.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800609c:	4b13      	ldr	r3, [pc, #76]	; (80060ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	08db      	lsrs	r3, r3, #3
 80060a2:	4a13      	ldr	r2, [pc, #76]	; (80060f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80060a4:	fba2 2303 	umull	r2, r3, r2, r3
 80060a8:	0a1a      	lsrs	r2, r3, #8
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d107      	bne.n	80060ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e008      	b.n	80060e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060dc:	d0e9      	beq.n	80060b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	20000000 	.word	0x20000000
 80060f0:	14f8b589 	.word	0x14f8b589

080060f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006100:	e042      	b.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d119      	bne.n	8006144 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0210 	mvn.w	r2, #16
 8006118:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e029      	b.n	8006198 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006144:	f7fb fda8 	bl	8001c98 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	429a      	cmp	r2, r3
 8006152:	d302      	bcc.n	800615a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d116      	bne.n	8006188 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0220 	orr.w	r2, r3, #32
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e007      	b.n	8006198 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006192:	2b40      	cmp	r3, #64	; 0x40
 8006194:	d1b5      	bne.n	8006102 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b6:	d11b      	bne.n	80061f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	f043 0204 	orr.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800620e:	d103      	bne.n	8006218 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006216:	e007      	b.n	8006228 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006220:	d102      	bne.n	8006228 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e267      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d075      	beq.n	800633e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006252:	4b88      	ldr	r3, [pc, #544]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 030c 	and.w	r3, r3, #12
 800625a:	2b04      	cmp	r3, #4
 800625c:	d00c      	beq.n	8006278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800625e:	4b85      	ldr	r3, [pc, #532]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006266:	2b08      	cmp	r3, #8
 8006268:	d112      	bne.n	8006290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800626a:	4b82      	ldr	r3, [pc, #520]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006276:	d10b      	bne.n	8006290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006278:	4b7e      	ldr	r3, [pc, #504]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d05b      	beq.n	800633c <HAL_RCC_OscConfig+0x108>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d157      	bne.n	800633c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e242      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006298:	d106      	bne.n	80062a8 <HAL_RCC_OscConfig+0x74>
 800629a:	4b76      	ldr	r3, [pc, #472]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a75      	ldr	r2, [pc, #468]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e01d      	b.n	80062e4 <HAL_RCC_OscConfig+0xb0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b0:	d10c      	bne.n	80062cc <HAL_RCC_OscConfig+0x98>
 80062b2:	4b70      	ldr	r3, [pc, #448]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a6f      	ldr	r2, [pc, #444]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	4b6d      	ldr	r3, [pc, #436]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a6c      	ldr	r2, [pc, #432]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c8:	6013      	str	r3, [r2, #0]
 80062ca:	e00b      	b.n	80062e4 <HAL_RCC_OscConfig+0xb0>
 80062cc:	4b69      	ldr	r3, [pc, #420]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a68      	ldr	r2, [pc, #416]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	4b66      	ldr	r3, [pc, #408]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a65      	ldr	r2, [pc, #404]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80062de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fb fcd4 	bl	8001c98 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f4:	f7fb fcd0 	bl	8001c98 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b64      	cmp	r3, #100	; 0x64
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e207      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	4b5b      	ldr	r3, [pc, #364]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0xc0>
 8006312:	e014      	b.n	800633e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006314:	f7fb fcc0 	bl	8001c98 <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800631c:	f7fb fcbc 	bl	8001c98 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b64      	cmp	r3, #100	; 0x64
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e1f3      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800632e:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <HAL_RCC_OscConfig+0xe8>
 800633a:	e000      	b.n	800633e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800633c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d063      	beq.n	8006412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 030c 	and.w	r3, r3, #12
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006356:	4b47      	ldr	r3, [pc, #284]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800635e:	2b08      	cmp	r3, #8
 8006360:	d11c      	bne.n	800639c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006362:	4b44      	ldr	r3, [pc, #272]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d116      	bne.n	800639c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636e:	4b41      	ldr	r3, [pc, #260]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_RCC_OscConfig+0x152>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d001      	beq.n	8006386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e1c7      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006386:	4b3b      	ldr	r3, [pc, #236]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	4937      	ldr	r1, [pc, #220]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800639a:	e03a      	b.n	8006412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d020      	beq.n	80063e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a4:	4b34      	ldr	r3, [pc, #208]	; (8006478 <HAL_RCC_OscConfig+0x244>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063aa:	f7fb fc75 	bl	8001c98 <HAL_GetTick>
 80063ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b0:	e008      	b.n	80063c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b2:	f7fb fc71 	bl	8001c98 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d901      	bls.n	80063c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e1a8      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c4:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f0      	beq.n	80063b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4925      	ldr	r1, [pc, #148]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]
 80063e4:	e015      	b.n	8006412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063e6:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_OscConfig+0x244>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fb fc54 	bl	8001c98 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063f4:	f7fb fc50 	bl	8001c98 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e187      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006406:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f0      	bne.n	80063f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0308 	and.w	r3, r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	d036      	beq.n	800648c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d016      	beq.n	8006454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <HAL_RCC_OscConfig+0x248>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642c:	f7fb fc34 	bl	8001c98 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006434:	f7fb fc30 	bl	8001c98 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e167      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCC_OscConfig+0x240>)
 8006448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0x200>
 8006452:	e01b      	b.n	800648c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_RCC_OscConfig+0x248>)
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645a:	f7fb fc1d 	bl	8001c98 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006460:	e00e      	b.n	8006480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006462:	f7fb fc19 	bl	8001c98 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d907      	bls.n	8006480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e150      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
 8006474:	40023800 	.word	0x40023800
 8006478:	42470000 	.word	0x42470000
 800647c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006480:	4b88      	ldr	r3, [pc, #544]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ea      	bne.n	8006462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8097 	beq.w	80065c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649a:	2300      	movs	r3, #0
 800649c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800649e:	4b81      	ldr	r3, [pc, #516]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064aa:	2300      	movs	r3, #0
 80064ac:	60bb      	str	r3, [r7, #8]
 80064ae:	4b7d      	ldr	r3, [pc, #500]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	4a7c      	ldr	r2, [pc, #496]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80064b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ba:	4b7a      	ldr	r3, [pc, #488]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c2:	60bb      	str	r3, [r7, #8]
 80064c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064c6:	2301      	movs	r3, #1
 80064c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ca:	4b77      	ldr	r3, [pc, #476]	; (80066a8 <HAL_RCC_OscConfig+0x474>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d118      	bne.n	8006508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064d6:	4b74      	ldr	r3, [pc, #464]	; (80066a8 <HAL_RCC_OscConfig+0x474>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a73      	ldr	r2, [pc, #460]	; (80066a8 <HAL_RCC_OscConfig+0x474>)
 80064dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064e2:	f7fb fbd9 	bl	8001c98 <HAL_GetTick>
 80064e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064e8:	e008      	b.n	80064fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ea:	f7fb fbd5 	bl	8001c98 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e10c      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fc:	4b6a      	ldr	r3, [pc, #424]	; (80066a8 <HAL_RCC_OscConfig+0x474>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0f0      	beq.n	80064ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d106      	bne.n	800651e <HAL_RCC_OscConfig+0x2ea>
 8006510:	4b64      	ldr	r3, [pc, #400]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	4a63      	ldr	r2, [pc, #396]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006516:	f043 0301 	orr.w	r3, r3, #1
 800651a:	6713      	str	r3, [r2, #112]	; 0x70
 800651c:	e01c      	b.n	8006558 <HAL_RCC_OscConfig+0x324>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b05      	cmp	r3, #5
 8006524:	d10c      	bne.n	8006540 <HAL_RCC_OscConfig+0x30c>
 8006526:	4b5f      	ldr	r3, [pc, #380]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	4a5e      	ldr	r2, [pc, #376]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 800652c:	f043 0304 	orr.w	r3, r3, #4
 8006530:	6713      	str	r3, [r2, #112]	; 0x70
 8006532:	4b5c      	ldr	r3, [pc, #368]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a5b      	ldr	r2, [pc, #364]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	6713      	str	r3, [r2, #112]	; 0x70
 800653e:	e00b      	b.n	8006558 <HAL_RCC_OscConfig+0x324>
 8006540:	4b58      	ldr	r3, [pc, #352]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	4a57      	ldr	r2, [pc, #348]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006546:	f023 0301 	bic.w	r3, r3, #1
 800654a:	6713      	str	r3, [r2, #112]	; 0x70
 800654c:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006550:	4a54      	ldr	r2, [pc, #336]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006552:	f023 0304 	bic.w	r3, r3, #4
 8006556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d015      	beq.n	800658c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fb fb9a 	bl	8001c98 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006566:	e00a      	b.n	800657e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006568:	f7fb fb96 	bl	8001c98 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f241 3288 	movw	r2, #5000	; 0x1388
 8006576:	4293      	cmp	r3, r2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e0cb      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657e:	4b49      	ldr	r3, [pc, #292]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0ee      	beq.n	8006568 <HAL_RCC_OscConfig+0x334>
 800658a:	e014      	b.n	80065b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800658c:	f7fb fb84 	bl	8001c98 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006592:	e00a      	b.n	80065aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006594:	f7fb fb80 	bl	8001c98 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e0b5      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065aa:	4b3e      	ldr	r3, [pc, #248]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1ee      	bne.n	8006594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d105      	bne.n	80065c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065bc:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	4a38      	ldr	r2, [pc, #224]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80065c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80a1 	beq.w	8006714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065d2:	4b34      	ldr	r3, [pc, #208]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d05c      	beq.n	8006698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d141      	bne.n	800666a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e6:	4b31      	ldr	r3, [pc, #196]	; (80066ac <HAL_RCC_OscConfig+0x478>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fb fb54 	bl	8001c98 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fb fb50 	bl	8001c98 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e087      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	019b      	lsls	r3, r3, #6
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	3b01      	subs	r3, #1
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	061b      	lsls	r3, r3, #24
 8006636:	491b      	ldr	r1, [pc, #108]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800663c:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCC_OscConfig+0x478>)
 800663e:	2201      	movs	r2, #1
 8006640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006642:	f7fb fb29 	bl	8001c98 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006648:	e008      	b.n	800665c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664a:	f7fb fb25 	bl	8001c98 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b02      	cmp	r3, #2
 8006656:	d901      	bls.n	800665c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e05c      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0f0      	beq.n	800664a <HAL_RCC_OscConfig+0x416>
 8006668:	e054      	b.n	8006714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <HAL_RCC_OscConfig+0x478>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006670:	f7fb fb12 	bl	8001c98 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006676:	e008      	b.n	800668a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006678:	f7fb fb0e 	bl	8001c98 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e045      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668a:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <HAL_RCC_OscConfig+0x470>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1f0      	bne.n	8006678 <HAL_RCC_OscConfig+0x444>
 8006696:	e03d      	b.n	8006714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d107      	bne.n	80066b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e038      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40007000 	.word	0x40007000
 80066ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066b0:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <HAL_RCC_OscConfig+0x4ec>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d028      	beq.n	8006710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d121      	bne.n	8006710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d11a      	bne.n	8006710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d111      	bne.n	8006710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	085b      	lsrs	r3, r3, #1
 80066f8:	3b01      	subs	r3, #1
 80066fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d107      	bne.n	8006710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023800 	.word	0x40023800

08006724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0cc      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006738:	4b68      	ldr	r3, [pc, #416]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d90c      	bls.n	8006760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006746:	4b65      	ldr	r3, [pc, #404]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800674e:	4b63      	ldr	r3, [pc, #396]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	683a      	ldr	r2, [r7, #0]
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0b8      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d020      	beq.n	80067ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d005      	beq.n	8006784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006778:	4b59      	ldr	r3, [pc, #356]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4a58      	ldr	r2, [pc, #352]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006790:	4b53      	ldr	r3, [pc, #332]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4a52      	ldr	r2, [pc, #328]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800679a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800679c:	4b50      	ldr	r3, [pc, #320]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	494d      	ldr	r1, [pc, #308]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d044      	beq.n	8006844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c2:	4b47      	ldr	r3, [pc, #284]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d119      	bne.n	8006802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e07f      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d003      	beq.n	80067e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067de:	2b03      	cmp	r3, #3
 80067e0:	d107      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e2:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e06f      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f2:	4b3b      	ldr	r3, [pc, #236]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e067      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006802:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f023 0203 	bic.w	r2, r3, #3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4934      	ldr	r1, [pc, #208]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	4313      	orrs	r3, r2
 8006812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006814:	f7fb fa40 	bl	8001c98 <HAL_GetTick>
 8006818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	e00a      	b.n	8006832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800681c:	f7fb fa3c 	bl	8001c98 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	f241 3288 	movw	r2, #5000	; 0x1388
 800682a:	4293      	cmp	r3, r2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e04f      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006832:	4b2b      	ldr	r3, [pc, #172]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 020c 	and.w	r2, r3, #12
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	429a      	cmp	r2, r3
 8006842:	d1eb      	bne.n	800681c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006844:	4b25      	ldr	r3, [pc, #148]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d20c      	bcs.n	800686c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006852:	4b22      	ldr	r3, [pc, #136]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b20      	ldr	r3, [pc, #128]	; (80068dc <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d001      	beq.n	800686c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e032      	b.n	80068d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006878:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4916      	ldr	r1, [pc, #88]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006896:	4b12      	ldr	r3, [pc, #72]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	490e      	ldr	r1, [pc, #56]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068aa:	f000 f821 	bl	80068f0 <HAL_RCC_GetSysClockFreq>
 80068ae:	4602      	mov	r2, r0
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	091b      	lsrs	r3, r3, #4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	490a      	ldr	r1, [pc, #40]	; (80068e4 <HAL_RCC_ClockConfig+0x1c0>)
 80068bc:	5ccb      	ldrb	r3, [r1, r3]
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	4a09      	ldr	r2, [pc, #36]	; (80068e8 <HAL_RCC_ClockConfig+0x1c4>)
 80068c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068c6:	4b09      	ldr	r3, [pc, #36]	; (80068ec <HAL_RCC_ClockConfig+0x1c8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fb f9a0 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40023c00 	.word	0x40023c00
 80068e0:	40023800 	.word	0x40023800
 80068e4:	0800761c 	.word	0x0800761c
 80068e8:	20000000 	.word	0x20000000
 80068ec:	20000004 	.word	0x20000004

080068f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f4:	b090      	sub	sp, #64	; 0x40
 80068f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	637b      	str	r3, [r7, #52]	; 0x34
 80068fc:	2300      	movs	r3, #0
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006900:	2300      	movs	r3, #0
 8006902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006908:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 030c 	and.w	r3, r3, #12
 8006910:	2b08      	cmp	r3, #8
 8006912:	d00d      	beq.n	8006930 <HAL_RCC_GetSysClockFreq+0x40>
 8006914:	2b08      	cmp	r3, #8
 8006916:	f200 80a1 	bhi.w	8006a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_RCC_GetSysClockFreq+0x34>
 800691e:	2b04      	cmp	r3, #4
 8006920:	d003      	beq.n	800692a <HAL_RCC_GetSysClockFreq+0x3a>
 8006922:	e09b      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006928:	e09b      	b.n	8006a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800692a:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800692c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800692e:	e098      	b.n	8006a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006930:	4b4f      	ldr	r3, [pc, #316]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800693a:	4b4d      	ldr	r3, [pc, #308]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d028      	beq.n	8006998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006946:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	2200      	movs	r2, #0
 800694e:	623b      	str	r3, [r7, #32]
 8006950:	627a      	str	r2, [r7, #36]	; 0x24
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006958:	2100      	movs	r1, #0
 800695a:	4b47      	ldr	r3, [pc, #284]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800695c:	fb03 f201 	mul.w	r2, r3, r1
 8006960:	2300      	movs	r3, #0
 8006962:	fb00 f303 	mul.w	r3, r0, r3
 8006966:	4413      	add	r3, r2
 8006968:	4a43      	ldr	r2, [pc, #268]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800696a:	fba0 1202 	umull	r1, r2, r0, r2
 800696e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006970:	460a      	mov	r2, r1
 8006972:	62ba      	str	r2, [r7, #40]	; 0x28
 8006974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006976:	4413      	add	r3, r2
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	2200      	movs	r2, #0
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	61fa      	str	r2, [r7, #28]
 8006982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800698a:	f7f9 fde1 	bl	8000550 <__aeabi_uldivmod>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4613      	mov	r3, r2
 8006994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006996:	e053      	b.n	8006a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006998:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	099b      	lsrs	r3, r3, #6
 800699e:	2200      	movs	r2, #0
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	617a      	str	r2, [r7, #20]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069aa:	f04f 0b00 	mov.w	fp, #0
 80069ae:	4652      	mov	r2, sl
 80069b0:	465b      	mov	r3, fp
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	0159      	lsls	r1, r3, #5
 80069bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c0:	0150      	lsls	r0, r2, #5
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	ebb2 080a 	subs.w	r8, r2, sl
 80069ca:	eb63 090b 	sbc.w	r9, r3, fp
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	f04f 0300 	mov.w	r3, #0
 80069d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069e2:	ebb2 0408 	subs.w	r4, r2, r8
 80069e6:	eb63 0509 	sbc.w	r5, r3, r9
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	f04f 0300 	mov.w	r3, #0
 80069f2:	00eb      	lsls	r3, r5, #3
 80069f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069f8:	00e2      	lsls	r2, r4, #3
 80069fa:	4614      	mov	r4, r2
 80069fc:	461d      	mov	r5, r3
 80069fe:	eb14 030a 	adds.w	r3, r4, sl
 8006a02:	603b      	str	r3, [r7, #0]
 8006a04:	eb45 030b 	adc.w	r3, r5, fp
 8006a08:	607b      	str	r3, [r7, #4]
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a16:	4629      	mov	r1, r5
 8006a18:	028b      	lsls	r3, r1, #10
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a20:	4621      	mov	r1, r4
 8006a22:	028a      	lsls	r2, r1, #10
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	60fa      	str	r2, [r7, #12]
 8006a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a34:	f7f9 fd8c 	bl	8000550 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	0c1b      	lsrs	r3, r3, #16
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a5a:	e002      	b.n	8006a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3740      	adds	r7, #64	; 0x40
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800
 8006a74:	00f42400 	.word	0x00f42400
 8006a78:	017d7840 	.word	0x017d7840

08006a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a80:	4b03      	ldr	r3, [pc, #12]	; (8006a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a82:	681b      	ldr	r3, [r3, #0]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20000000 	.word	0x20000000

08006a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a98:	f7ff fff0 	bl	8006a7c <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0a9b      	lsrs	r3, r3, #10
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4903      	ldr	r1, [pc, #12]	; (8006ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	0800762c 	.word	0x0800762c

08006abc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e07b      	b.n	8006bc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d108      	bne.n	8006ae8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ade:	d009      	beq.n	8006af4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	61da      	str	r2, [r3, #28]
 8006ae6:	e005      	b.n	8006af4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fa fdb6 	bl	8001680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b78:	ea42 0103 	orr.w	r1, r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	0c1b      	lsrs	r3, r3, #16
 8006b92:	f003 0104 	and.w	r1, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f003 0210 	and.w	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	099b      	lsrs	r3, r3, #6
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10f      	bne.n	8006c14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	099b      	lsrs	r3, r3, #6
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d004      	beq.n	8006c14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	4798      	blx	r3
    return;
 8006c12:	e0d7      	b.n	8006dc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_SPI_IRQHandler+0x66>
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	09db      	lsrs	r3, r3, #7
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
    return;
 8006c34:	e0c6      	b.n	8006dc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10c      	bne.n	8006c5c <HAL_SPI_IRQHandler+0x8c>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	099b      	lsrs	r3, r3, #6
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80b4 	beq.w	8006dc4 <HAL_SPI_IRQHandler+0x1f4>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 80ad 	beq.w	8006dc4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	099b      	lsrs	r3, r3, #6
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d023      	beq.n	8006cbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d011      	beq.n	8006ca6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c86:	f043 0204 	orr.w	r2, r3, #4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c8e:	2300      	movs	r3, #0
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	e00b      	b.n	8006cbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	613b      	str	r3, [r7, #16]
 8006cba:	693b      	ldr	r3, [r7, #16]
        return;
 8006cbc:	e082      	b.n	8006dc4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	095b      	lsrs	r3, r3, #5
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d014      	beq.n	8006cf4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00c      	beq.n	8006d1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	f043 0208 	orr.w	r2, r3, #8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d04f      	beq.n	8006dc2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d104      	bne.n	8006d4e <HAL_SPI_IRQHandler+0x17e>
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d034      	beq.n	8006db8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0203 	bic.w	r2, r2, #3
 8006d5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_SPI_IRQHandler+0x1fc>)
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fb feda 	bl	8002b2c <HAL_DMA_Abort_IT>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d96:	4a0d      	ldr	r2, [pc, #52]	; (8006dcc <HAL_SPI_IRQHandler+0x1fc>)
 8006d98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb fec4 	bl	8002b2c <HAL_DMA_Abort_IT>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006db6:	e003      	b.n	8006dc0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f809 	bl	8006dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006dbe:	e000      	b.n	8006dc2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006dc0:	bf00      	nop
    return;
 8006dc2:	bf00      	nop
  }
}
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	08006de5 	.word	0x08006de5

08006dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f7ff ffe6 	bl	8006dd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e04:	bf00      	nop
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e041      	b.n	8006ea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fa fe6a 	bl	8001b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4610      	mov	r0, r2
 8006e4c:	f000 f950 	bl	80070f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d001      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e03c      	b.n	8006f3e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1e      	ldr	r2, [pc, #120]	; (8006f4c <HAL_TIM_Base_Start+0xa0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_TIM_Base_Start+0x5c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d013      	beq.n	8006f08 <HAL_TIM_Base_Start+0x5c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_TIM_Base_Start+0xa4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_TIM_Base_Start+0x5c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <HAL_TIM_Base_Start+0xa8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_TIM_Base_Start+0x5c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIM_Base_Start+0xac>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIM_Base_Start+0x5c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a16      	ldr	r2, [pc, #88]	; (8006f5c <HAL_TIM_Base_Start+0xb0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d010      	beq.n	8006f3c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	e007      	b.n	8006f3c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40014000 	.word	0x40014000

08006f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_ConfigClockSource+0x1c>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e0b4      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0x186>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fb4:	d03e      	beq.n	8007034 <HAL_TIM_ConfigClockSource+0xd4>
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	f200 8087 	bhi.w	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc2:	f000 8086 	beq.w	80070d2 <HAL_TIM_ConfigClockSource+0x172>
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fca:	d87f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fcc:	2b70      	cmp	r3, #112	; 0x70
 8006fce:	d01a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xa6>
 8006fd0:	2b70      	cmp	r3, #112	; 0x70
 8006fd2:	d87b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fd4:	2b60      	cmp	r3, #96	; 0x60
 8006fd6:	d050      	beq.n	800707a <HAL_TIM_ConfigClockSource+0x11a>
 8006fd8:	2b60      	cmp	r3, #96	; 0x60
 8006fda:	d877      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fdc:	2b50      	cmp	r3, #80	; 0x50
 8006fde:	d03c      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xfa>
 8006fe0:	2b50      	cmp	r3, #80	; 0x50
 8006fe2:	d873      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d058      	beq.n	800709a <HAL_TIM_ConfigClockSource+0x13a>
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d86f      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d064      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8006ff0:	2b30      	cmp	r3, #48	; 0x30
 8006ff2:	d86b      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d060      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d867      	bhi.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d05c      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8007000:	2b10      	cmp	r3, #16
 8007002:	d05a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0x15a>
 8007004:	e062      	b.n	80070cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6899      	ldr	r1, [r3, #8]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	f000 f965 	bl	80072e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	609a      	str	r2, [r3, #8]
      break;
 8007032:	e04f      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f000 f94e 	bl	80072e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007056:	609a      	str	r2, [r3, #8]
      break;
 8007058:	e03c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6859      	ldr	r1, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	461a      	mov	r2, r3
 8007068:	f000 f8c2 	bl	80071f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2150      	movs	r1, #80	; 0x50
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f91b 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8007078:	e02c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	461a      	mov	r2, r3
 8007088:	f000 f8e1 	bl	800724e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2160      	movs	r1, #96	; 0x60
 8007092:	4618      	mov	r0, r3
 8007094:	f000 f90b 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 8007098:	e01c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6859      	ldr	r1, [r3, #4]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f000 f8a2 	bl	80071f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2140      	movs	r1, #64	; 0x40
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 f8fb 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 80070b8:	e00c      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4619      	mov	r1, r3
 80070c4:	4610      	mov	r0, r2
 80070c6:	f000 f8f2 	bl	80072ae <TIM_ITRx_SetConfig>
      break;
 80070ca:	e003      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
      break;
 80070d0:	e000      	b.n	80070d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80070d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a34      	ldr	r2, [pc, #208]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710e:	d00b      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a31      	ldr	r2, [pc, #196]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a30      	ldr	r2, [pc, #192]	; (80071dc <TIM_Base_SetConfig+0xec>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_Base_SetConfig+0x38>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d108      	bne.n	800713a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01b      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007148:	d017      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <TIM_Base_SetConfig+0xe8>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a21      	ldr	r2, [pc, #132]	; (80071dc <TIM_Base_SetConfig+0xec>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00f      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a20      	ldr	r2, [pc, #128]	; (80071e0 <TIM_Base_SetConfig+0xf0>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00b      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <TIM_Base_SetConfig+0xf4>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <TIM_Base_SetConfig+0xf8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_Base_SetConfig+0x8a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1d      	ldr	r2, [pc, #116]	; (80071ec <TIM_Base_SetConfig+0xfc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <TIM_Base_SetConfig+0xe4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	615a      	str	r2, [r3, #20]
}
 80071c6:	bf00      	nop
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40014400 	.word	0x40014400
 80071ec:	40014800 	.word	0x40014800

080071f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800721a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4313      	orrs	r3, r2
 8007224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f023 030a 	bic.w	r3, r3, #10
 800722c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	4313      	orrs	r3, r2
 8007234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	621a      	str	r2, [r3, #32]
}
 8007242:	bf00      	nop
 8007244:	371c      	adds	r7, #28
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800724e:	b480      	push	{r7}
 8007250:	b087      	sub	sp, #28
 8007252:	af00      	add	r7, sp, #0
 8007254:	60f8      	str	r0, [r7, #12]
 8007256:	60b9      	str	r1, [r7, #8]
 8007258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0210 	bic.w	r2, r3, #16
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	697a      	ldr	r2, [r7, #20]
 8007280:	4313      	orrs	r3, r2
 8007282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800728a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	621a      	str	r2, [r3, #32]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
 80072b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f043 0307 	orr.w	r3, r3, #7
 80072d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	609a      	str	r2, [r3, #8]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	431a      	orrs	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4313      	orrs	r3, r2
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	4313      	orrs	r3, r2
 8007310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	609a      	str	r2, [r3, #8]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007338:	2302      	movs	r3, #2
 800733a:	e050      	b.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4313      	orrs	r3, r2
 800736c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a1c      	ldr	r2, [pc, #112]	; (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d018      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007388:	d013      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a18      	ldr	r2, [pc, #96]	; (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d00e      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d009      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a15      	ldr	r2, [pc, #84]	; (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d004      	beq.n	80073b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d10c      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	40010000 	.word	0x40010000
 80073f0:	40000400 	.word	0x40000400
 80073f4:	40000800 	.word	0x40000800
 80073f8:	40000c00 	.word	0x40000c00
 80073fc:	40014000 	.word	0x40014000

08007400 <calloc>:
 8007400:	4b02      	ldr	r3, [pc, #8]	; (800740c <calloc+0xc>)
 8007402:	460a      	mov	r2, r1
 8007404:	4601      	mov	r1, r0
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	f000 b834 	b.w	8007474 <_calloc_r>
 800740c:	2000000c 	.word	0x2000000c

08007410 <__errno>:
 8007410:	4b01      	ldr	r3, [pc, #4]	; (8007418 <__errno+0x8>)
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	2000000c 	.word	0x2000000c

0800741c <__libc_init_array>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4d0d      	ldr	r5, [pc, #52]	; (8007454 <__libc_init_array+0x38>)
 8007420:	4c0d      	ldr	r4, [pc, #52]	; (8007458 <__libc_init_array+0x3c>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	2600      	movs	r6, #0
 8007428:	42a6      	cmp	r6, r4
 800742a:	d109      	bne.n	8007440 <__libc_init_array+0x24>
 800742c:	4d0b      	ldr	r5, [pc, #44]	; (800745c <__libc_init_array+0x40>)
 800742e:	4c0c      	ldr	r4, [pc, #48]	; (8007460 <__libc_init_array+0x44>)
 8007430:	f000 f8e8 	bl	8007604 <_init>
 8007434:	1b64      	subs	r4, r4, r5
 8007436:	10a4      	asrs	r4, r4, #2
 8007438:	2600      	movs	r6, #0
 800743a:	42a6      	cmp	r6, r4
 800743c:	d105      	bne.n	800744a <__libc_init_array+0x2e>
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	f855 3b04 	ldr.w	r3, [r5], #4
 8007444:	4798      	blx	r3
 8007446:	3601      	adds	r6, #1
 8007448:	e7ee      	b.n	8007428 <__libc_init_array+0xc>
 800744a:	f855 3b04 	ldr.w	r3, [r5], #4
 800744e:	4798      	blx	r3
 8007450:	3601      	adds	r6, #1
 8007452:	e7f2      	b.n	800743a <__libc_init_array+0x1e>
 8007454:	08007644 	.word	0x08007644
 8007458:	08007644 	.word	0x08007644
 800745c:	08007644 	.word	0x08007644
 8007460:	08007648 	.word	0x08007648

08007464 <memset>:
 8007464:	4402      	add	r2, r0
 8007466:	4603      	mov	r3, r0
 8007468:	4293      	cmp	r3, r2
 800746a:	d100      	bne.n	800746e <memset+0xa>
 800746c:	4770      	bx	lr
 800746e:	f803 1b01 	strb.w	r1, [r3], #1
 8007472:	e7f9      	b.n	8007468 <memset+0x4>

08007474 <_calloc_r>:
 8007474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007476:	fba1 2402 	umull	r2, r4, r1, r2
 800747a:	b94c      	cbnz	r4, 8007490 <_calloc_r+0x1c>
 800747c:	4611      	mov	r1, r2
 800747e:	9201      	str	r2, [sp, #4]
 8007480:	f000 f82e 	bl	80074e0 <_malloc_r>
 8007484:	9a01      	ldr	r2, [sp, #4]
 8007486:	4605      	mov	r5, r0
 8007488:	b930      	cbnz	r0, 8007498 <_calloc_r+0x24>
 800748a:	4628      	mov	r0, r5
 800748c:	b003      	add	sp, #12
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	220c      	movs	r2, #12
 8007492:	6002      	str	r2, [r0, #0]
 8007494:	2500      	movs	r5, #0
 8007496:	e7f8      	b.n	800748a <_calloc_r+0x16>
 8007498:	4621      	mov	r1, r4
 800749a:	f7ff ffe3 	bl	8007464 <memset>
 800749e:	e7f4      	b.n	800748a <_calloc_r+0x16>

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0e      	ldr	r6, [pc, #56]	; (80074dc <sbrk_aligned+0x3c>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f000 f88c 	bl	80075c8 <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f887 	bl	80075c8 <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d00a      	beq.n	80074d4 <sbrk_aligned+0x34>
 80074be:	1cc4      	adds	r4, r0, #3
 80074c0:	f024 0403 	bic.w	r4, r4, #3
 80074c4:	42a0      	cmp	r0, r4
 80074c6:	d007      	beq.n	80074d8 <sbrk_aligned+0x38>
 80074c8:	1a21      	subs	r1, r4, r0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f87c 	bl	80075c8 <_sbrk_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d101      	bne.n	80074d8 <sbrk_aligned+0x38>
 80074d4:	f04f 34ff 	mov.w	r4, #4294967295
 80074d8:	4620      	mov	r0, r4
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	200003b0 	.word	0x200003b0

080074e0 <_malloc_r>:
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	1ccd      	adds	r5, r1, #3
 80074e6:	f025 0503 	bic.w	r5, r5, #3
 80074ea:	3508      	adds	r5, #8
 80074ec:	2d0c      	cmp	r5, #12
 80074ee:	bf38      	it	cc
 80074f0:	250c      	movcc	r5, #12
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	4607      	mov	r7, r0
 80074f6:	db01      	blt.n	80074fc <_malloc_r+0x1c>
 80074f8:	42a9      	cmp	r1, r5
 80074fa:	d905      	bls.n	8007508 <_malloc_r+0x28>
 80074fc:	230c      	movs	r3, #12
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	2600      	movs	r6, #0
 8007502:	4630      	mov	r0, r6
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007508:	4e2e      	ldr	r6, [pc, #184]	; (80075c4 <_malloc_r+0xe4>)
 800750a:	f000 f86d 	bl	80075e8 <__malloc_lock>
 800750e:	6833      	ldr	r3, [r6, #0]
 8007510:	461c      	mov	r4, r3
 8007512:	bb34      	cbnz	r4, 8007562 <_malloc_r+0x82>
 8007514:	4629      	mov	r1, r5
 8007516:	4638      	mov	r0, r7
 8007518:	f7ff ffc2 	bl	80074a0 <sbrk_aligned>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	4604      	mov	r4, r0
 8007520:	d14d      	bne.n	80075be <_malloc_r+0xde>
 8007522:	6834      	ldr	r4, [r6, #0]
 8007524:	4626      	mov	r6, r4
 8007526:	2e00      	cmp	r6, #0
 8007528:	d140      	bne.n	80075ac <_malloc_r+0xcc>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	4631      	mov	r1, r6
 800752e:	4638      	mov	r0, r7
 8007530:	eb04 0803 	add.w	r8, r4, r3
 8007534:	f000 f848 	bl	80075c8 <_sbrk_r>
 8007538:	4580      	cmp	r8, r0
 800753a:	d13a      	bne.n	80075b2 <_malloc_r+0xd2>
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	3503      	adds	r5, #3
 8007540:	1a6d      	subs	r5, r5, r1
 8007542:	f025 0503 	bic.w	r5, r5, #3
 8007546:	3508      	adds	r5, #8
 8007548:	2d0c      	cmp	r5, #12
 800754a:	bf38      	it	cc
 800754c:	250c      	movcc	r5, #12
 800754e:	4629      	mov	r1, r5
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff ffa5 	bl	80074a0 <sbrk_aligned>
 8007556:	3001      	adds	r0, #1
 8007558:	d02b      	beq.n	80075b2 <_malloc_r+0xd2>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	442b      	add	r3, r5
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	e00e      	b.n	8007580 <_malloc_r+0xa0>
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	1b52      	subs	r2, r2, r5
 8007566:	d41e      	bmi.n	80075a6 <_malloc_r+0xc6>
 8007568:	2a0b      	cmp	r2, #11
 800756a:	d916      	bls.n	800759a <_malloc_r+0xba>
 800756c:	1961      	adds	r1, r4, r5
 800756e:	42a3      	cmp	r3, r4
 8007570:	6025      	str	r5, [r4, #0]
 8007572:	bf18      	it	ne
 8007574:	6059      	strne	r1, [r3, #4]
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	bf08      	it	eq
 800757a:	6031      	streq	r1, [r6, #0]
 800757c:	5162      	str	r2, [r4, r5]
 800757e:	604b      	str	r3, [r1, #4]
 8007580:	4638      	mov	r0, r7
 8007582:	f104 060b 	add.w	r6, r4, #11
 8007586:	f000 f835 	bl	80075f4 <__malloc_unlock>
 800758a:	f026 0607 	bic.w	r6, r6, #7
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	1af2      	subs	r2, r6, r3
 8007592:	d0b6      	beq.n	8007502 <_malloc_r+0x22>
 8007594:	1b9b      	subs	r3, r3, r6
 8007596:	50a3      	str	r3, [r4, r2]
 8007598:	e7b3      	b.n	8007502 <_malloc_r+0x22>
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	bf0c      	ite	eq
 80075a0:	6032      	streq	r2, [r6, #0]
 80075a2:	605a      	strne	r2, [r3, #4]
 80075a4:	e7ec      	b.n	8007580 <_malloc_r+0xa0>
 80075a6:	4623      	mov	r3, r4
 80075a8:	6864      	ldr	r4, [r4, #4]
 80075aa:	e7b2      	b.n	8007512 <_malloc_r+0x32>
 80075ac:	4634      	mov	r4, r6
 80075ae:	6876      	ldr	r6, [r6, #4]
 80075b0:	e7b9      	b.n	8007526 <_malloc_r+0x46>
 80075b2:	230c      	movs	r3, #12
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 f81c 	bl	80075f4 <__malloc_unlock>
 80075bc:	e7a1      	b.n	8007502 <_malloc_r+0x22>
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	e7de      	b.n	8007580 <_malloc_r+0xa0>
 80075c2:	bf00      	nop
 80075c4:	200003ac 	.word	0x200003ac

080075c8 <_sbrk_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_sbrk_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa f9b8 	bl	8001948 <_sbrk>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_sbrk_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_sbrk_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200003b4 	.word	0x200003b4

080075e8 <__malloc_lock>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__malloc_lock+0x8>)
 80075ea:	f000 b809 	b.w	8007600 <__retarget_lock_acquire_recursive>
 80075ee:	bf00      	nop
 80075f0:	200003b8 	.word	0x200003b8

080075f4 <__malloc_unlock>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__malloc_unlock+0x8>)
 80075f6:	f000 b804 	b.w	8007602 <__retarget_lock_release_recursive>
 80075fa:	bf00      	nop
 80075fc:	200003b8 	.word	0x200003b8

08007600 <__retarget_lock_acquire_recursive>:
 8007600:	4770      	bx	lr

08007602 <__retarget_lock_release_recursive>:
 8007602:	4770      	bx	lr

08007604 <_init>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

08007610 <_fini>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr
