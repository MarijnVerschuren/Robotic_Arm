
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000868c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a44  08008a44  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a4c  08008a4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a50  08008a50  00018a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000070  08008ac4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08008ac4  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014de2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030aa  00000000  00000000  00034e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  000391b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da4  00000000  00000000  0003a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172c3  00000000  00000000  00053064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b01f  00000000  00000000  0006a327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105346  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005118  00000000  00000000  00105398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800880c 	.word	0x0800880c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	0800880c 	.word	0x0800880c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_ADC1_Init+0x9c>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xa0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e2a:	f001 febd 	bl	8002ba8 <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f001 fb14 	bl	8002460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e4a:	f002 f919 	bl	8003080 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f001 fb04 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000008c 	.word	0x2000008c
 8000e64:	40012000 	.word	0x40012000
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a37      	ldr	r2, [pc, #220]	; (8000f68 <HAL_ADC_MspInit+0xfc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d168      	bne.n	8000f60 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a35      	ldr	r2, [pc, #212]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <HAL_ADC_MspInit+0x104>)
 8000eda:	f003 f83d 	bl	8003f58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_ADC_MspInit+0x10c>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f36:	f002 fc6f 	bl	8003818 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000f40:	f001 fa8e 	bl	8002460 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2012      	movs	r0, #18
 8000f56:	f002 fc28 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f5a:	2012      	movs	r0, #18
 8000f5c:	f002 fc41 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	200000d4 	.word	0x200000d4
 8000f78:	40026470 	.word	0x40026470

08000f7c <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	2118      	movs	r1, #24
 8000f82:	2001      	movs	r0, #1
 8000f84:	f007 fad6 	bl	8008534 <calloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <AS5600_init+0x16>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b9b      	ldrb	r3, [r3, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <AS5600_init+0x24>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7bdb      	ldrb	r3, [r3, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <AS5600_init+0x32>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <AS5600_init+0x40>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7c5b      	ldrb	r3, [r3, #17]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <AS5600_init+0x4e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c9b      	ldrb	r3, [r3, #18]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <AS5600_init+0x5c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7cdb      	ldrb	r3, [r3, #19]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <AS5600_init+0x6a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7d1b      	ldrb	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <AS5600_init+0x78>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7d5b      	ldrb	r3, [r3, #21]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <AS5600_init+0x86>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7bdb      	ldrb	r3, [r3, #15]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f86a 	bl	80010f4 <AS5600_set_low_power_mode>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <AS5600_init+0x9c>
 8001026:	2301      	movs	r3, #1
 8001028:	e05f      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7c1b      	ldrb	r3, [r3, #16]
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f8b3 	bl	800119c <AS5600_set_hysteresis>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <AS5600_init+0xb2>
 800103c:	2301      	movs	r3, #1
 800103e:	e054      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7c59      	ldrb	r1, [r3, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7c9b      	ldrb	r3, [r3, #18]
 8001048:	461a      	mov	r2, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8fa 	bl	8001244 <AS5600_set_output_mode>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <AS5600_init+0xcc>
 8001056:	2301      	movs	r3, #1
 8001058:	e047      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7cdb      	ldrb	r3, [r3, #19]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f983 	bl	800136c <AS5600_set_slow_filter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <AS5600_init+0xe2>
 800106c:	2301      	movs	r3, #1
 800106e:	e03c      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7d1b      	ldrb	r3, [r3, #20]
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9cc 	bl	8001414 <AS5600_set_fast_filter_threshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <AS5600_init+0xf8>
 8001082:	2301      	movs	r3, #1
 8001084:	e031      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7d5b      	ldrb	r3, [r3, #21]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fa61 	bl	8001554 <AS5600_set_watchdog_timer>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <AS5600_init+0x10e>
 8001098:	2301      	movs	r3, #1
 800109a:	e026      	b.n	80010ea <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa80 	bl	80015a2 <AS5600_write_config_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <AS5600_init+0x11e>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01e      	b.n	80010ea <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	4619      	mov	r1, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fab2 	bl	8001620 <AS5600_get_magnet_status>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <AS5600_init+0x138>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e011      	b.n	80010ea <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <AS5600_init+0x15a>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <AS5600_init+0x15c>
	return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET); break;
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	3b01      	subs	r3, #1
 8001104:	2b03      	cmp	r3, #3
 8001106:	d83f      	bhi.n	8001188 <AS5600_set_low_power_mode+0x94>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <AS5600_set_low_power_mode+0x1c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	08001133 	.word	0x08001133
 8001118:	08001155 	.word	0x08001155
 800111c:	08001177 	.word	0x08001177
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7ddb      	ldrb	r3, [r3, #23]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f023 0303 	bic.w	r3, r3, #3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	75da      	strb	r2, [r3, #23]
		break;
 8001130:	e02c      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7ddb      	ldrb	r3, [r3, #23]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7ddb      	ldrb	r3, [r3, #23]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	75da      	strb	r2, [r3, #23]
	break;
 8001152:	e01b      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7ddb      	ldrb	r3, [r3, #23]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7ddb      	ldrb	r3, [r3, #23]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	75da      	strb	r2, [r3, #23]
		break;
 8001174:	e00a      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7ddb      	ldrb	r3, [r3, #23]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0303 	orr.w	r3, r3, #3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	75da      	strb	r2, [r3, #23]
		break;
 8001186:	e001      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d83f      	bhi.n	8001230 <AS5600_set_hysteresis+0x94>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <AS5600_set_hysteresis+0x1c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011fd 	.word	0x080011fd
 80011c4:	0800121f 	.word	0x0800121f
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7ddb      	ldrb	r3, [r3, #23]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f023 030c 	bic.w	r3, r3, #12
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	75da      	strb	r2, [r3, #23]
		break;
 80011d8:	e02c      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7ddb      	ldrb	r3, [r3, #23]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7ddb      	ldrb	r3, [r3, #23]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f023 0308 	bic.w	r3, r3, #8
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	75da      	strb	r2, [r3, #23]
		break;
 80011fa:	e01b      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7ddb      	ldrb	r3, [r3, #23]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7ddb      	ldrb	r3, [r3, #23]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	75da      	strb	r2, [r3, #23]
		break;
 800121c:	e00a      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7ddb      	ldrb	r3, [r3, #23]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 030c 	orr.w	r3, r3, #12
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	75da      	strb	r2, [r3, #23]
		break;
 800122e:	e001      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d020      	beq.n	80012a0 <AS5600_set_output_mode+0x5c>
 800125e:	2b03      	cmp	r3, #3
 8001260:	dc31      	bgt.n	80012c6 <AS5600_set_output_mode+0x82>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <AS5600_set_output_mode+0x28>
 8001266:	2b02      	cmp	r3, #2
 8001268:	d009      	beq.n	800127e <AS5600_set_output_mode+0x3a>
 800126a:	e02c      	b.n	80012c6 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7ddb      	ldrb	r3, [r3, #23]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001276:	b2da      	uxtb	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	75da      	strb	r2, [r3, #23]
		break;
 800127c:	e025      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7ddb      	ldrb	r3, [r3, #23]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7ddb      	ldrb	r3, [r3, #23]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f023 0320 	bic.w	r3, r3, #32
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	75da      	strb	r2, [r3, #23]
		break;
 800129e:	e014      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7ddb      	ldrb	r3, [r3, #23]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7ddb      	ldrb	r3, [r3, #23]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 80012c6:	2301      	movs	r3, #1
 80012c8:	e04a      	b.n	8001360 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d045      	beq.n	800135c <AS5600_set_output_mode+0x118>
		switch (frequency) {
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d83f      	bhi.n	8001358 <AS5600_set_output_mode+0x114>
 80012d8:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <AS5600_set_output_mode+0x9c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	08001303 	.word	0x08001303
 80012e8:	08001325 	.word	0x08001325
 80012ec:	08001347 	.word	0x08001347
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7ddb      	ldrb	r3, [r3, #23]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	75da      	strb	r2, [r3, #23]
			break;
 8001300:	e02d      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7ddb      	ldrb	r3, [r3, #23]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7ddb      	ldrb	r3, [r3, #23]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	75da      	strb	r2, [r3, #23]
			break;
 8001322:	e01c      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7ddb      	ldrb	r3, [r3, #23]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7ddb      	ldrb	r3, [r3, #23]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	75da      	strb	r2, [r3, #23]
			break;
 8001344:	e00b      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7ddb      	ldrb	r3, [r3, #23]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	75da      	strb	r2, [r3, #23]
			break;
 8001356:	e002      	b.n	800135e <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 8001358:	2301      	movs	r3, #1
 800135a:	e001      	b.n	8001360 <AS5600_set_output_mode+0x11c>
		}
	}
 800135c:	bf00      	nop
	return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	3b01      	subs	r3, #1
 800137c:	2b03      	cmp	r3, #3
 800137e:	d83f      	bhi.n	8001400 <AS5600_set_slow_filter+0x94>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <AS5600_set_slow_filter+0x1c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013ab 	.word	0x080013ab
 8001390:	080013cd 	.word	0x080013cd
 8001394:	080013ef 	.word	0x080013ef
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d9b      	ldrb	r3, [r3, #22]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	759a      	strb	r2, [r3, #22]
		break;
 80013a8:	e02c      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7d9b      	ldrb	r3, [r3, #22]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7d9b      	ldrb	r3, [r3, #22]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	759a      	strb	r2, [r3, #22]
		break;
 80013ca:	e01b      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7d9b      	ldrb	r3, [r3, #22]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7d9b      	ldrb	r3, [r3, #22]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	759a      	strb	r2, [r3, #22]
		break;
 80013ec:	e00a      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7d9b      	ldrb	r3, [r3, #22]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0303 	orr.w	r3, r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	759a      	strb	r2, [r3, #22]
		break;
 80013fe:	e001      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	3b01      	subs	r3, #1
 8001424:	2b07      	cmp	r3, #7
 8001426:	f200 808b 	bhi.w	8001540 <AS5600_set_fast_filter_threshold+0x12c>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <AS5600_set_fast_filter_threshold+0x1c>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001451 	.word	0x08001451
 8001434:	08001463 	.word	0x08001463
 8001438:	08001485 	.word	0x08001485
 800143c:	080014a7 	.word	0x080014a7
 8001440:	080014c9 	.word	0x080014c9
 8001444:	080014eb 	.word	0x080014eb
 8001448:	0800150d 	.word	0x0800150d
 800144c:	0800152f 	.word	0x0800152f
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7d9b      	ldrb	r3, [r3, #22]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	759a      	strb	r2, [r3, #22]
		break;
 8001460:	e070      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7d9b      	ldrb	r3, [r3, #22]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f023 0318 	bic.w	r3, r3, #24
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7d9b      	ldrb	r3, [r3, #22]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	759a      	strb	r2, [r3, #22]
		break;
 8001482:	e05f      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7d9b      	ldrb	r3, [r3, #22]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f023 0314 	bic.w	r3, r3, #20
 800148e:	b2da      	uxtb	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7d9b      	ldrb	r3, [r3, #22]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	759a      	strb	r2, [r3, #22]
		break;
 80014a4:	e04e      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7d9b      	ldrb	r3, [r3, #22]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f023 0310 	bic.w	r3, r3, #16
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7d9b      	ldrb	r3, [r3, #22]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 030c 	orr.w	r3, r3, #12
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	759a      	strb	r2, [r3, #22]
		break;
 80014c6:	e03d      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d9b      	ldrb	r3, [r3, #22]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f023 030c 	bic.w	r3, r3, #12
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7d9b      	ldrb	r3, [r3, #22]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	759a      	strb	r2, [r3, #22]
		break;
 80014e8:	e02c      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7d9b      	ldrb	r3, [r3, #22]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f023 0308 	bic.w	r3, r3, #8
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7d9b      	ldrb	r3, [r3, #22]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0314 	orr.w	r3, r3, #20
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	759a      	strb	r2, [r3, #22]
		break;
 800150a:	e01b      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7d9b      	ldrb	r3, [r3, #22]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d9b      	ldrb	r3, [r3, #22]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0318 	orr.w	r3, r3, #24
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	759a      	strb	r2, [r3, #22]
		break;
 800152c:	e00a      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7d9b      	ldrb	r3, [r3, #22]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 031c 	orr.w	r3, r3, #28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	759a      	strb	r2, [r3, #22]
		break;
 800153e:	e001      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d002      	beq.n	800156c <AS5600_set_watchdog_timer+0x18>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d009      	beq.n	800157e <AS5600_set_watchdog_timer+0x2a>
 800156a:	e011      	b.n	8001590 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7d9b      	ldrb	r3, [r3, #22]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	759a      	strb	r2, [r3, #22]
		break;
 800157c:	e00a      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7d9b      	ldrb	r3, [r3, #22]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	b2da      	uxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	759a      	strb	r2, [r3, #22]
		break;
 800158e:	e001      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af04      	add	r7, sp, #16
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3316      	adds	r3, #22
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6892      	ldr	r2, [r2, #8]
 80015b6:	9202      	str	r2, [sp, #8]
 80015b8:	2202      	movs	r2, #2
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	2207      	movs	r2, #7
 80015c2:	216c      	movs	r1, #108	; 0x6c
 80015c4:	f002 ffc2 	bl	800454c <HAL_I2C_Mem_Write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 80015dc:	2300      	movs	r3, #0
 80015de:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2302      	movs	r3, #2
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	220e      	movs	r2, #14
 80015f8:	216c      	movs	r1, #108	; 0x6c
 80015fa:	f003 f8a1 	bl	8004740 <HAL_I2C_Mem_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 8001602:	7b3b      	ldrb	r3, [r7, #12]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	801a      	strh	r2, [r3, #0]
	return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	220b      	movs	r2, #11
 8001640:	216c      	movs	r1, #108	; 0x6c
 8001642:	f003 f87d 	bl	8004740 <HAL_I2C_Mem_Read>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <crc16_dnp>:
};



// crc16_dnp was the most error resilient for messages under 130 bytes with a hamming distance of 7!!
uint16_t crc16_dnp(const void* buffer, uint64_t size) {
 8001650:	b4b0      	push	{r4, r5, r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t crc = 0x0000;
 800165c:	2300      	movs	r3, #0
 800165e:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800166c:	e01a      	b.n	80016a4 <crc16_dnp+0x54>
		crc = ((crc << 8) & 0xff00) ^ crc16_dnp_table[((crc >> 8) ^ ((const uint8_t*)buffer)[i]) & 0xff];
 800166e:	8bfb      	ldrh	r3, [r7, #30]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	8bfb      	ldrh	r3, [r7, #30]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	440b      	add	r3, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4043      	eors	r3, r0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <crc16_dnp+0x74>)
 800168a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4053      	eors	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8001696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800169a:	1c54      	adds	r4, r2, #1
 800169c:	f143 0500 	adc.w	r5, r3, #0
 80016a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80016a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ac:	4290      	cmp	r0, r2
 80016ae:	eb71 0303 	sbcs.w	r3, r1, r3
 80016b2:	d3dc      	bcc.n	800166e <crc16_dnp+0x1e>
	}; return crc ^ 0xffff;
 80016b4:	8bfb      	ldrh	r3, [r7, #30]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b29b      	uxth	r3, r3
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bcb0      	pop	{r4, r5, r7}
 80016c2:	4770      	bx	lr
 80016c4:	08008824 	.word	0x08008824

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_DMA_Init+0x5c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_DMA_Init+0x5c>)
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_DMA_Init+0x5c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2038      	movs	r0, #56	; 0x38
 80016f0:	f002 f85b 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f4:	2038      	movs	r0, #56	; 0x38
 80016f6:	f002 f874 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	203b      	movs	r0, #59	; 0x3b
 8001700:	f002 f853 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001704:	203b      	movs	r0, #59	; 0x3b
 8001706:	f002 f86c 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	203c      	movs	r0, #60	; 0x3c
 8001710:	f002 f84b 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001714:	203c      	movs	r0, #60	; 0x3c
 8001716:	f002 f864 	bl	80037e2 <HAL_NVIC_EnableIRQ>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <MX_GPIO_Init+0x18c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <MX_GPIO_Init+0x18c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001798:	4847      	ldr	r0, [pc, #284]	; (80018b8 <MX_GPIO_Init+0x190>)
 800179a:	f002 fd61 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_DIR_Pin|STEPPER_STP_Pin|STEPPER_SRD_Pin|STEPPER_MS2_Pin
 800179e:	2200      	movs	r2, #0
 80017a0:	f24f 0120 	movw	r1, #61472	; 0xf020
 80017a4:	4845      	ldr	r0, [pc, #276]	; (80018bc <MX_GPIO_Init+0x194>)
 80017a6:	f002 fd5b 	bl	8004260 <HAL_GPIO_WritePin>
                          |AS5600_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80017aa:	2201      	movs	r2, #1
 80017ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b0:	4841      	ldr	r0, [pc, #260]	; (80018b8 <MX_GPIO_Init+0x190>)
 80017b2:	f002 fd55 	bl	8004260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017ba:	2311      	movs	r3, #17
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	483a      	ldr	r0, [pc, #232]	; (80018b8 <MX_GPIO_Init+0x190>)
 80017ce:	f002 fbc3 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 80017d2:	2308      	movs	r3, #8
 80017d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4834      	ldr	r0, [pc, #208]	; (80018b8 <MX_GPIO_Init+0x190>)
 80017e8:	f002 fbb6 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_DIR_Pin;
 80017ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017f2:	2311      	movs	r3, #17
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_DIR_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <MX_GPIO_Init+0x194>)
 8001806:	f002 fba7 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001810:	2311      	movs	r3, #17
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4619      	mov	r1, r3
 8001822:	4826      	ldr	r0, [pc, #152]	; (80018bc <MX_GPIO_Init+0x194>)
 8001824:	f002 fb98 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin|STEPPER_MS2_Pin;
 8001828:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800182e:	2311      	movs	r3, #17
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	481e      	ldr	r0, [pc, #120]	; (80018bc <MX_GPIO_Init+0x194>)
 8001842:	f002 fb89 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS1_Pin|STEPPER_NEN_Pin;
 8001846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800184c:	2311      	movs	r3, #17
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <MX_GPIO_Init+0x190>)
 8001860:	f002 fb7a 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001868:	2311      	movs	r3, #17
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_GPIO_Init+0x194>)
 800187c:	f002 fb6c 	bl	8003f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 8001880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <MX_GPIO_Init+0x194>)
 8001896:	f002 fb5f 	bl	8003f58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2009      	movs	r0, #9
 80018a0:	f001 ff83 	bl	80037aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018a4:	2009      	movs	r0, #9
 80018a6:	f001 ff9c 	bl	80037e2 <HAL_NVIC_EnableIRQ>

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400

080018c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_I2C1_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_I2C1_Init+0x50>)
 80018fe:	f002 fce1 	bl	80042c4 <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fdaa 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000134 	.word	0x20000134
 8001914:	40005400 	.word	0x40005400
 8001918:	000186a0 	.word	0x000186a0

0800191c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_I2C_MspInit+0x94>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d133      	bne.n	80019a6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a1b      	ldr	r2, [pc, #108]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196a:	2304      	movs	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4810      	ldr	r0, [pc, #64]	; (80019b8 <HAL_I2C_MspInit+0x9c>)
 8001976:	f002 faef 	bl	8003f58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a0c      	ldr	r2, [pc, #48]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_I2C_MspInit+0x98>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201f      	movs	r0, #31
 800199c:	f001 ff05 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019a0:	201f      	movs	r0, #31
 80019a2:	f001 ff1e 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40005400 	.word	0x40005400
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020400 	.word	0x40020400

080019bc <delete_chain>:
 */
#include "list.h"


// hidden
void delete_chain(Node_TypeDef* node) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	if (node->next) { delete_chain(node->next);	}
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d004      	beq.n	80019d6 <delete_chain+0x1a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fff3 	bl	80019bc <delete_chain>
	free(node->data);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f006 fde4 	bl	80085a8 <free>
	free(node);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fde1 	bl	80085a8 <free>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <init>:
void init(Linked_List* list) {
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	// delete the chain from index 1
	if (list->start->next) { delete_chain(list->start->next); }
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <init+0x1e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffd8 	bl	80019bc <delete_chain>
	list->start = calloc(1, sizeof(Node_TypeDef));
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f006 fd90 	bl	8008534 <calloc>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	601a      	str	r2, [r3, #0]
	list->size = 1;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	609a      	str	r2, [r3, #8]
	list->end = (void*)0;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <new_list>:


// exposed
Linked_List* new_list()				{ return (Linked_List*)calloc(1, sizeof(Linked_List)); }
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	210c      	movs	r1, #12
 8001a36:	2001      	movs	r0, #1
 8001a38:	f006 fd7c 	bl	8008534 <calloc>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <push>:
	node->data = data;
	list->end->next = node;
	list->end = node;
	list->size++;
}
void push(Linked_List* list, void* data) {
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
	if (list->size == 0) { init(list); list->start->data = data; return; }
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <push+0x22>
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ffca 	bl	80019ee <init>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e014      	b.n	8001a8e <push+0x4c>
	Node_TypeDef* node = calloc(1, sizeof(Node_TypeDef));
 8001a64:	2108      	movs	r1, #8
 8001a66:	2001      	movs	r0, #1
 8001a68:	f006 fd64 	bl	8008534 <calloc>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
	node->data = data;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
	node->next = list->start;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]
	list->start = node;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	601a      	str	r2, [r3, #0]
	list->size++;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
}
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <pop>:
	Node_TypeDef* node = get(list, index);
	new_node->next = node->next;
	node->next = new_node;
	list->size++;
}
void pop(Linked_List* list) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
	if (list->size == 0) { return; }
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <pop+0x42>
	free(list->end->data);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f006 fd7c 	bl	80085a8 <free>
	free(list->end);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f006 fd77 	bl	80085a8 <free>
	list->end = (void*)0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	605a      	str	r2, [r3, #4]
	list->end = get(list, list->size - 2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	3b02      	subs	r3, #2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f808 	bl	8001ade <get>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	e000      	b.n	8001ad8 <pop+0x44>
	if (list->size == 0) { return; }
 8001ad6:	bf00      	nop
}
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <get>:
	node->next = del_node->next;
	free(del_node->data);
	free(del_node);
}

Node_TypeDef* get(Linked_List* list, uint32_t index) {
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
	Node_TypeDef* node = list->start;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < index; i++) { node = node->next; }
 8001aee:	2301      	movs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	e005      	b.n	8001b00 <get+0x22>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3f5      	bcc.n	8001af4 <get+0x16>
	return node;
 8001b08:	68fb      	ldr	r3, [r7, #12]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <status_parity>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void status_parity(void) {
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	state.n_status = ~state.status;
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <status_parity+0x80>)
 8001b1e:	8bdb      	ldrh	r3, [r3, #30]
 8001b20:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	b2d9      	uxtb	r1, r3
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <status_parity+0x80>)
 8001b32:	8bd3      	ldrh	r3, [r2, #30]
 8001b34:	f361 1307 	bfi	r3, r1, #4, #4
 8001b38:	83d3      	strh	r3, [r2, #30]
	state.status_parity =	(state.status & 0x1)		^ \
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <status_parity+0x80>)
 8001b3c:	8bdb      	ldrh	r3, [r3, #30]
 8001b3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25a      	sxtb	r2, r3
							((state.status >> 1) & 0x1)	^ \
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <status_parity+0x80>)
 8001b48:	8bdb      	ldrh	r3, [r3, #30]
 8001b4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	105b      	asrs	r3, r3, #1
	state.status_parity =	(state.status & 0x1)		^ \
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	4053      	eors	r3, r2
 8001b56:	b25a      	sxtb	r2, r3
							((state.status >> 2) & 0x1)	^ \
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <status_parity+0x80>)
 8001b5a:	8bdb      	ldrh	r3, [r3, #30]
 8001b5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	109b      	asrs	r3, r3, #2
							((state.status >> 1) & 0x1)	^ \
 8001b64:	b25b      	sxtb	r3, r3
 8001b66:	4053      	eors	r3, r2
 8001b68:	b25a      	sxtb	r2, r3
							((state.status >> 3) & 0x1);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <status_parity+0x80>)
 8001b6c:	8bdb      	ldrh	r3, [r3, #30]
 8001b6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	10db      	asrs	r3, r3, #3
							((state.status >> 2) & 0x1)	^ \
 8001b76:	b25b      	sxtb	r3, r3
 8001b78:	4053      	eors	r3, r2
 8001b7a:	b25b      	sxtb	r3, r3
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	b2d9      	uxtb	r1, r3
	state.status_parity =	(state.status & 0x1)		^ \
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <status_parity+0x80>)
 8001b84:	8bd3      	ldrh	r3, [r2, #30]
 8001b86:	f361 2308 	bfi	r3, r1, #8, #1
 8001b8a:	83d3      	strh	r3, [r2, #30]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000188 	.word	0x20000188

08001b9c <set_status>:
void set_status(uint8_t stat)	{ state.status |= stat;	status_parity(); }
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <set_status+0x38>)
 8001ba8:	8bdb      	ldrh	r3, [r3, #30]
 8001baa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	4a05      	ldr	r2, [pc, #20]	; (8001bd4 <set_status+0x38>)
 8001bc0:	8bd3      	ldrh	r3, [r2, #30]
 8001bc2:	f361 0303 	bfi	r3, r1, #0, #4
 8001bc6:	83d3      	strh	r3, [r2, #30]
 8001bc8:	f7ff ffa6 	bl	8001b18 <status_parity>
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000188 	.word	0x20000188

08001bd8 <reset_status>:
void reset_status(uint8_t stat)	{ state.status &= ~stat;status_parity(); }
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <reset_status+0x40>)
 8001be4:	8bdb      	ldrh	r3, [r3, #30]
 8001be6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	b25a      	sxtb	r2, r3
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	b25b      	sxtb	r3, r3
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2d9      	uxtb	r1, r3
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <reset_status+0x40>)
 8001c02:	8bd3      	ldrh	r3, [r2, #30]
 8001c04:	f361 0303 	bfi	r3, r1, #0, #4
 8001c08:	83d3      	strh	r3, [r2, #30]
 8001c0a:	f7ff ff85 	bl	8001b18 <status_parity>
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000188 	.word	0x20000188

08001c1c <delay_us>:

void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c28:	2200      	movs	r2, #0
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c2c:	bf00      	nop
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d8f9      	bhi.n	8001c2e <delay_us+0x12>
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <set_motor_setting+0x84>)
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	491d      	ldr	r1, [pc, #116]	; (8001ccc <set_motor_setting+0x84>)
 8001c56:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	614b      	str	r3, [r1, #20]
	switch(instruction->micro_step) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7e1b      	ldrb	r3, [r3, #24]
 8001c62:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d018      	beq.n	8001c9e <set_motor_setting+0x56>
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	dc03      	bgt.n	8001c78 <set_motor_setting+0x30>
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d008      	beq.n	8001c86 <set_motor_setting+0x3e>
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d00d      	beq.n	8001c94 <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <set_motor_setting+0x84>)
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <set_motor_setting+0x84>)
 8001c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c82:	6153      	str	r3, [r2, #20]
 8001c84:	e012      	b.n	8001cac <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <set_motor_setting+0x84>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <set_motor_setting+0x84>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c90:	6153      	str	r3, [r2, #20]
 8001c92:	e00b      	b.n	8001cac <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <set_motor_setting+0x84>)
 8001c96:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <set_motor_setting+0x84>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	6153      	str	r3, [r2, #20]
 8001c9c:	e006      	b.n	8001cac <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <set_motor_setting+0x84>)
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <set_motor_setting+0x84>)
 8001ca4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001ca8:	6153      	str	r3, [r2, #20]
 8001caa:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->srd_mode);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e1b      	ldrb	r3, [r3, #24]
 8001cb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cbc:	4804      	ldr	r0, [pc, #16]	; (8001cd0 <set_motor_setting+0x88>)
 8001cbe:	f002 facf 	bl	8004260 <HAL_GPIO_WritePin>
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <euler_method>:
void euler_method(void) {  // typical execution time ~45 us
 8001cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cdc:	af00      	add	r7, sp, #0
	register uint16_t pos_diff = (AS5600_pos_f64 - state.raw_angle);  // rotation detection
 8001cde:	4b6c      	ldr	r3, [pc, #432]	; (8001e90 <euler_method+0x1b8>)
 8001ce0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ce4:	4b6b      	ldr	r3, [pc, #428]	; (8001e94 <euler_method+0x1bc>)
 8001ce6:	8b1b      	ldrh	r3, [r3, #24]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fbc6 	bl	800047c <__aeabi_i2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fa72 	bl	80001e0 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe febe 	bl	8000a84 <__aeabi_d2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29c      	uxth	r4, r3
	state.pos.rotation += pos_diff > 2048; state.pos.rotation -= pos_diff < -2048;
 8001d0c:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <euler_method+0x1bc>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f343 0313 	sbfx	r3, r3, #0, #20
 8001d14:	461a      	mov	r2, r3
 8001d16:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8001d1a:	bf8c      	ite	hi
 8001d1c:	2301      	movhi	r3, #1
 8001d1e:	2300      	movls	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	031a      	lsls	r2, r3, #12
 8001d26:	1312      	asrs	r2, r2, #12
 8001d28:	495a      	ldr	r1, [pc, #360]	; (8001e94 <euler_method+0x1bc>)
 8001d2a:	690b      	ldr	r3, [r1, #16]
 8001d2c:	f362 0313 	bfi	r3, r2, #0, #20
 8001d30:	610b      	str	r3, [r1, #16]
 8001d32:	4b58      	ldr	r3, [pc, #352]	; (8001e94 <euler_method+0x1bc>)
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f343 0113 	sbfx	r1, r3, #0, #20
 8001d3a:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <euler_method+0x1bc>)
 8001d3c:	6913      	ldr	r3, [r2, #16]
 8001d3e:	f361 0313 	bfi	r3, r1, #0, #20
 8001d42:	6113      	str	r3, [r2, #16]
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <euler_method+0x1c0>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb87 	bl	800045c <__aeabi_ui2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	a149      	add	r1, pc, #292	; (adr r1, 8001e78 <euler_method+0x1a0>)
 8001d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d58:	f7fe fd24 	bl	80007a4 <__aeabi_ddiv>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b4c      	ldr	r3, [pc, #304]	; (8001e9c <euler_method+0x1c4>)
 8001d6a:	f7fe fa3b 	bl	80001e4 <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f04f 0000 	mov.w	r0, #0
 8001d76:	4949      	ldr	r1, [pc, #292]	; (8001e9c <euler_method+0x1c4>)
 8001d78:	f7fe fd14 	bl	80007a4 <__aeabi_ddiv>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461d      	mov	r5, r3
	AS5600_pos_f64 = (state.raw_angle * alpha) + ((1 - alpha) * AS5600_pos_f64);
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <euler_method+0x1bc>)
 8001d86:	8b1b      	ldrh	r3, [r3, #24]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fb76 	bl	800047c <__aeabi_i2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fbda 	bl	8000550 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4690      	mov	r8, r2
 8001da2:	4699      	mov	r9, r3
 8001da4:	4622      	mov	r2, r4
 8001da6:	462b      	mov	r3, r5
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	493b      	ldr	r1, [pc, #236]	; (8001e9c <euler_method+0x1c4>)
 8001dae:	f7fe fa17 	bl	80001e0 <__aeabi_dsub>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <euler_method+0x1b8>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fbc6 	bl	8000550 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4640      	mov	r0, r8
 8001dca:	4649      	mov	r1, r9
 8001dcc:	f7fe fa0a 	bl	80001e4 <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	492e      	ldr	r1, [pc, #184]	; (8001e90 <euler_method+0x1b8>)
 8001dd6:	e9c1 2300 	strd	r2, r3, [r1]
	state.vel = (1e6 / TIM5->CNT) * ((uint16_t)AS5600_pos_f64 - state.pos.angle) * AS5600_RAD_CONV;  // rad / s
 8001dda:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <euler_method+0x1c0>)
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb3c 	bl	800045c <__aeabi_ui2d>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	a125      	add	r1, pc, #148	; (adr r1, 8001e80 <euler_method+0x1a8>)
 8001dea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dee:	f7fe fcd9 	bl	80007a4 <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4614      	mov	r4, r2
 8001df8:	461d      	mov	r5, r3
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <euler_method+0x1b8>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f7fe fe3e 	bl	8000a84 <__aeabi_d2uiz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <euler_method+0x1bc>)
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f3c3 530b 	ubfx	r3, r3, #20, #12
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb2e 	bl	800047c <__aeabi_i2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fb92 	bl	8000550 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	a314      	add	r3, pc, #80	; (adr r3, 8001e88 <euler_method+0x1b0>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fb89 	bl	8000550 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4914      	ldr	r1, [pc, #80]	; (8001e94 <euler_method+0x1bc>)
 8001e44:	e9c1 2300 	strd	r2, r3, [r1]
	state.pos.angle = (uint16_t)AS5600_pos_f64;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <euler_method+0x1b8>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f7fe fe17 	bl	8000a84 <__aeabi_d2uiz>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	4a0c      	ldr	r2, [pc, #48]	; (8001e94 <euler_method+0x1bc>)
 8001e62:	6913      	ldr	r3, [r2, #16]
 8001e64:	f361 531f 	bfi	r3, r1, #20, #12
 8001e68:	6113      	str	r3, [r2, #16]
	TIM5->CNT = 0;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <euler_method+0x1c0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
}  // TODO: integrate vel and acc <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 8001e70:	bf00      	nop
 8001e72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e76:	bf00      	nop
 8001e78:	66666666 	.word	0x66666666
 8001e7c:	40026666 	.word	0x40026666
 8001e80:	00000000 	.word	0x00000000
 8001e84:	412e8480 	.word	0x412e8480
 8001e88:	5798a5fb 	.word	0x5798a5fb
 8001e8c:	3f5921fb 	.word	0x3f5921fb
 8001e90:	200001f8 	.word	0x200001f8
 8001e94:	20000188 	.word	0x20000188
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	3ff00000 	.word	0x3ff00000

08001ea0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	if (htim != &htim10) { return; }
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	f040 80a8 	bne.w	8002004 <HAL_TIM_PeriodElapsedCallback+0x164>
	//if (state.queue_size == 0) { return; }
	euler_method();  // update state.pos.angle, AS5600_delta_pos using the selected mode
 8001eb4:	f7ff ff10 	bl	8001cd8 <euler_method>
	double target_delta = instruction.target - (double)state.pos.angle;
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001eba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ebe:	4b56      	ldr	r3, [pc, #344]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f3c3 530b 	ubfx	r3, r3, #20, #12
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fac7 	bl	800045c <__aeabi_ui2d>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4640      	mov	r0, r8
 8001ed4:	4649      	mov	r1, r9
 8001ed6:	f7fe f983 	bl	80001e0 <__aeabi_dsub>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	e9c7 2302 	strd	r2, r3, [r7, #8]
	// TODO: add defining rotation dir with SPI (this is obviously implicated with the previous TODO)
	// TODO: re-do: ease-in ease-out function
	// TODO: delete / re-do: pathfinding code
	// TODO: tune interrupt timing

	HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	461e      	mov	r6, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ef2:	f7fe fd9f 	bl	8000a34 <__aeabi_dcmplt>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001efc:	2300      	movs	r3, #0
 8001efe:	461e      	mov	r6, r3
 8001f00:	b2f3      	uxtb	r3, r6
 8001f02:	461a      	mov	r2, r3
 8001f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f08:	4844      	ldr	r0, [pc, #272]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001f0a:	f002 f9a9 	bl	8004260 <HAL_GPIO_WritePin>
	step_gain = MIN(1, ABS(target_delta / 1024));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	4b43      	ldr	r3, [pc, #268]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f18:	f7fe fc44 	bl	80007a4 <__aeabi_ddiv>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	f7fe fda0 	bl	8000a70 <__aeabi_dcmpgt>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d018      	beq.n	8001f68 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f40:	f7fe fc30 	bl	80007a4 <__aeabi_ddiv>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	461e      	mov	r6, r3
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001f56:	f7fe fd8b 	bl	8000a70 <__aeabi_dcmpgt>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001f60:	2300      	movs	r3, #0
 8001f62:	461e      	mov	r6, r3
 8001f64:	b2f3      	uxtb	r3, r6
 8001f66:	e017      	b.n	8001f98 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f72:	f7fe fc17 	bl	80007a4 <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	2301      	movs	r3, #1
 8001f80:	461e      	mov	r6, r3
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001f88:	f7fe fd54 	bl	8000a34 <__aeabi_dcmplt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PeriodElapsedCallback+0xf6>
 8001f92:	2300      	movs	r3, #0
 8001f94:	461e      	mov	r6, r3
 8001f96:	b2f3      	uxtb	r3, r6
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001f9c:	f04f 0400 	mov.w	r4, #0
 8001fa0:	4d20      	ldr	r5, [pc, #128]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fa2:	e02b      	b.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x15c>
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fae:	f7fe fbf9 	bl	80007a4 <__aeabi_ddiv>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	f7fe fd55 	bl	8000a70 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_TIM_PeriodElapsedCallback+0x144>
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fd6:	f7fe fbe5 	bl	80007a4 <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4614      	mov	r4, r2
 8001fe0:	461d      	mov	r5, r3
 8001fe2:	e00b      	b.n	8001ffc <HAL_TIM_PeriodElapsedCallback+0x15c>
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fee:	f7fe fbd9 	bl	80007a4 <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001ffe:	e9c3 4500 	strd	r4, r5, [r3]
 8002002:	e000      	b.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x166>
	if (htim != &htim10) { return; }
 8002004:	bf00      	nop
}
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800200e:	bf00      	nop
 8002010:	200003b4 	.word	0x200003b4
 8002014:	200001a8 	.word	0x200001a8
 8002018:	20000188 	.word	0x20000188
 800201c:	40020400 	.word	0x40020400
 8002020:	40900000 	.word	0x40900000
 8002024:	3ff00000 	.word	0x3ff00000
 8002028:	bff00000 	.word	0xbff00000
 800202c:	20000200 	.word	0x20000200

08002030 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	// only hspi1 is used so there is no need to check
	if ((instruction_input.crc != crc16_dnp((uint8_t*)&instruction_input, 30))) { set_status(CRC_ERROR); return; }  // reject instruction if crc does not match
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_SPI_TxRxCpltCallback+0x70>)
 800203a:	8bdb      	ldrh	r3, [r3, #30]
 800203c:	b29c      	uxth	r4, r3
 800203e:	f04f 021e 	mov.w	r2, #30
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	4816      	ldr	r0, [pc, #88]	; (80020a0 <HAL_SPI_TxRxCpltCallback+0x70>)
 8002048:	f7ff fb02 	bl	8001650 <crc16_dnp>
 800204c:	4603      	mov	r3, r0
 800204e:	429c      	cmp	r4, r3
 8002050:	d003      	beq.n	800205a <HAL_SPI_TxRxCpltCallback+0x2a>
 8002052:	2004      	movs	r0, #4
 8002054:	f7ff fda2 	bl	8001b9c <set_status>
 8002058:	e01f      	b.n	800209a <HAL_SPI_TxRxCpltCallback+0x6a>
	MCU_Instruction* new = malloc(sizeof(MCU_Instruction));
 800205a:	2020      	movs	r0, #32
 800205c:	f006 fa9c 	bl	8008598 <malloc>
 8002060:	4603      	mov	r3, r0
 8002062:	60fb      	str	r3, [r7, #12]
	memcpy(new, &instruction_input, sizeof(MCU_Instruction));
 8002064:	2220      	movs	r2, #32
 8002066:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_SPI_TxRxCpltCallback+0x70>)
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f006 faa5 	bl	80085b8 <memcpy>
	push(queue, new);  // push to top of queue
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_SPI_TxRxCpltCallback+0x74>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fce4 	bl	8001a42 <push>
	state.queue_size = queue->size;
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_SPI_TxRxCpltCallback+0x74>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002084:	b299      	uxth	r1, r3
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_SPI_TxRxCpltCallback+0x78>)
 8002088:	8b93      	ldrh	r3, [r2, #28]
 800208a:	f361 03cf 	bfi	r3, r1, #3, #13
 800208e:	8393      	strh	r3, [r2, #28]
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 0);  // signal to the arm computer that instruction is received correctly
 8002090:	2200      	movs	r2, #0
 8002092:	2104      	movs	r1, #4
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <HAL_SPI_TxRxCpltCallback+0x7c>)
 8002096:	f002 f8e3 	bl	8004260 <HAL_GPIO_WritePin>
}
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	200001d0 	.word	0x200001d0
 80020a4:	200001c8 	.word	0x200001c8
 80020a8:	20000188 	.word	0x20000188
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
	// this will not instantly load next instruction
	if (GPIO_Pin == NSS_Pin) { HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 1); }  // set the flag pin until reset from SPI_TxRxCplt callback on success
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d104      	bne.n	80020ca <HAL_GPIO_EXTI_Callback+0x1a>
 80020c0:	2201      	movs	r2, #1
 80020c2:	2104      	movs	r1, #4
 80020c4:	4813      	ldr	r0, [pc, #76]	; (8002114 <HAL_GPIO_EXTI_Callback+0x64>)
 80020c6:	f002 f8cb 	bl	8004260 <HAL_GPIO_WritePin>
	if (GPIO_Pin == INSTUCTION_INT_Pin) {
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d11e      	bne.n	800210e <HAL_GPIO_EXTI_Callback+0x5e>
		pop(queue);
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_GPIO_EXTI_Callback+0x68>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fcdd 	bl	8001a94 <pop>
		if (!queue->end) { return; }  // do not update instruction so that the position is held
 80020da:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_GPIO_EXTI_Callback+0x68>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_GPIO_EXTI_Callback+0x5c>
		memcpy(&instruction, queue->end->data, sizeof(MCU_Instruction));
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_GPIO_EXTI_Callback+0x68>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2220      	movs	r2, #32
 80020ee:	4619      	mov	r1, r3
 80020f0:	480a      	ldr	r0, [pc, #40]	; (800211c <HAL_GPIO_EXTI_Callback+0x6c>)
 80020f2:	f006 fa61 	bl	80085b8 <memcpy>
		set_motor_setting(&instruction);
 80020f6:	4809      	ldr	r0, [pc, #36]	; (800211c <HAL_GPIO_EXTI_Callback+0x6c>)
 80020f8:	f7ff fda6 	bl	8001c48 <set_motor_setting>
		step_gain = 0;
 80020fc:	4908      	ldr	r1, [pc, #32]	; (8002120 <HAL_GPIO_EXTI_Callback+0x70>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	e9c1 2300 	strd	r2, r3, [r1]
 800210a:	e000      	b.n	800210e <HAL_GPIO_EXTI_Callback+0x5e>
		if (!queue->end) { return; }  // do not update instruction so that the position is held
 800210c:	bf00      	nop
	}
}
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40020000 	.word	0x40020000
 8002118:	200001c8 	.word	0x200001c8
 800211c:	200001a8 	.word	0x200001a8
 8002120:	20000200 	.word	0x20000200
 8002124:	00000000 	.word	0x00000000

08002128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002128:	b598      	push	{r3, r4, r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	status_parity();
 800212c:	f7ff fcf4 	bl	8001b18 <status_parity>
	queue = new_list();
 8002130:	f7ff fc7e 	bl	8001a30 <new_list>
 8002134:	4603      	mov	r3, r0
 8002136:	4a84      	ldr	r2, [pc, #528]	; (8002348 <main+0x220>)
 8002138:	6013      	str	r3, [r2, #0]

	// <TEST>  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	instruction.target = 1000;
 800213a:	4984      	ldr	r1, [pc, #528]	; (800234c <main+0x224>)
 800213c:	f04f 0200 	mov.w	r2, #0
 8002140:	4b83      	ldr	r3, [pc, #524]	; (8002350 <main+0x228>)
 8002142:	e9c1 2300 	strd	r2, r3, [r1]
	instruction.max_vel = 0;
 8002146:	4981      	ldr	r1, [pc, #516]	; (800234c <main+0x224>)
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2302 	strd	r2, r3, [r1, #8]
	instruction.max_acc = 0;
 8002154:	497d      	ldr	r1, [pc, #500]	; (800234c <main+0x224>)
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	instruction.micro_step = 3;
 8002162:	4a7a      	ldr	r2, [pc, #488]	; (800234c <main+0x224>)
 8002164:	8b13      	ldrh	r3, [r2, #24]
 8002166:	f043 0303 	orr.w	r3, r3, #3
 800216a:	8313      	strh	r3, [r2, #24]
	instruction.srd_mode = 1;
 800216c:	4a77      	ldr	r2, [pc, #476]	; (800234c <main+0x224>)
 800216e:	8b13      	ldrh	r3, [r2, #24]
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	8313      	strh	r3, [r2, #24]
	instruction.action = 0xf;
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <main+0x224>)
 8002178:	8b13      	ldrh	r3, [r2, #24]
 800217a:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 800217e:	8313      	strh	r3, [r2, #24]
	instruction.id = 0;
 8002180:	4a72      	ldr	r2, [pc, #456]	; (800234c <main+0x224>)
 8002182:	8b13      	ldrh	r3, [r2, #24]
 8002184:	f36f 234f 	bfc	r3, #9, #7
 8002188:	8313      	strh	r3, [r2, #24]
	instruction.instrution_id = 0;
 800218a:	4b70      	ldr	r3, [pc, #448]	; (800234c <main+0x224>)
 800218c:	2200      	movs	r2, #0
 800218e:	835a      	strh	r2, [r3, #26]
	// </TEST>

	sensor = AS5600_new();
 8002190:	f7fe fef4 	bl	8000f7c <AS5600_new>
 8002194:	4603      	mov	r3, r0
 8002196:	4a6f      	ldr	r2, [pc, #444]	; (8002354 <main+0x22c>)
 8002198:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <main+0x22c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	; (8002358 <main+0x230>)
 80021a0:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 80021a2:	4b6c      	ldr	r3, [pc, #432]	; (8002354 <main+0x22c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6d      	ldr	r2, [pc, #436]	; (800235c <main+0x234>)
 80021a8:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 80021aa:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <main+0x22c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2220      	movs	r2, #32
 80021b0:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 80021b2:	4b68      	ldr	r3, [pc, #416]	; (8002354 <main+0x22c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ba:	f000 fc83 	bl	8002ac4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021be:	f000 f8e7 	bl	8002390 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c2:	f7ff fab1 	bl	8001728 <MX_GPIO_Init>
  MX_DMA_Init();
 80021c6:	f7ff fa7f 	bl	80016c8 <MX_DMA_Init>
  MX_SPI1_Init();
 80021ca:	f000 f951 	bl	8002470 <MX_SPI1_Init>
  MX_I2C1_Init();
 80021ce:	f7ff fb77 	bl	80018c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 80021d2:	f7fe fdf9 	bl	8000dc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80021d6:	f000 fb3b 	bl	8002850 <MX_TIM2_Init>
  MX_TIM5_Init();
 80021da:	f000 fb85 	bl	80028e8 <MX_TIM5_Init>
  MX_TIM10_Init();
 80021de:	f000 fbd1 	bl	8002984 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// disable motor driver
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e8:	485d      	ldr	r0, [pc, #372]	; (8002360 <main+0x238>)
 80021ea:	f002 f839 	bl	8004260 <HAL_GPIO_WritePin>

	// enable messages
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*)&state, (uint8_t*)&instruction_input, 32);
 80021ee:	2320      	movs	r3, #32
 80021f0:	4a5c      	ldr	r2, [pc, #368]	; (8002364 <main+0x23c>)
 80021f2:	495d      	ldr	r1, [pc, #372]	; (8002368 <main+0x240>)
 80021f4:	485d      	ldr	r0, [pc, #372]	; (800236c <main+0x244>)
 80021f6:	f005 f8b7 	bl	8007368 <HAL_SPI_TransmitReceive_DMA>

	// initialize AS5600 sensor
	set_status(SENSOR_ERROR);
 80021fa:	2008      	movs	r0, #8
 80021fc:	f7ff fcce 	bl	8001b9c <set_status>
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 1);  // set flag and set error code after first fault
 8002200:	2201      	movs	r2, #1
 8002202:	2104      	movs	r1, #4
 8002204:	4856      	ldr	r0, [pc, #344]	; (8002360 <main+0x238>)
 8002206:	f002 f82b 	bl	8004260 <HAL_GPIO_WritePin>
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 800220a:	bf00      	nop
 800220c:	4b51      	ldr	r3, [pc, #324]	; (8002354 <main+0x22c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe febc 	bl	8000f8e <AS5600_init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f7      	bne.n	800220c <main+0xe4>
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 0);  // reset flag
 800221c:	2200      	movs	r2, #0
 800221e:	2104      	movs	r1, #4
 8002220:	484f      	ldr	r0, [pc, #316]	; (8002360 <main+0x238>)
 8002222:	f002 f81d 	bl	8004260 <HAL_GPIO_WritePin>
	reset_status(SENSOR_ERROR);  // reset error status (so that this isn't read later on)
 8002226:	2008      	movs	r0, #8
 8002228:	f7ff fcd6 	bl	8001bd8 <reset_status>

	state.vel = 0.0;
 800222c:	494e      	ldr	r1, [pc, #312]	; (8002368 <main+0x240>)
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9c1 2300 	strd	r2, r3, [r1]
	state.acc = 0.0;
 800223a:	494b      	ldr	r1, [pc, #300]	; (8002368 <main+0x240>)
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9c1 2302 	strd	r2, r3, [r1, #8]
	state.instrution_id = 0;
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <main+0x240>)
 800224a:	2200      	movs	r2, #0
 800224c:	835a      	strh	r2, [r3, #26]
	state.queue_size = 0;
 800224e:	4a46      	ldr	r2, [pc, #280]	; (8002368 <main+0x240>)
 8002250:	8b93      	ldrh	r3, [r2, #28]
 8002252:	f36f 03cf 	bfc	r3, #3, #13
 8002256:	8393      	strh	r3, [r2, #28]
	state.micro_step = 0;
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <main+0x240>)
 800225a:	7f13      	ldrb	r3, [r2, #28]
 800225c:	f36f 0301 	bfc	r3, #0, #2
 8002260:	7713      	strb	r3, [r2, #28]
	state.srd_mode = 0;
 8002262:	4a41      	ldr	r2, [pc, #260]	; (8002368 <main+0x240>)
 8002264:	7f13      	ldrb	r3, [r2, #28]
 8002266:	f36f 0382 	bfc	r3, #2, #1
 800226a:	7713      	strb	r3, [r2, #28]
	// initialize the state struct using AS5600 position values
	AS5600_get_angle(sensor, &state.raw_angle);
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <main+0x22c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	493f      	ldr	r1, [pc, #252]	; (8002370 <main+0x248>)
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f9ad 	bl	80015d2 <AS5600_get_angle>
	state.pos.angle =	state.raw_angle;
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <main+0x240>)
 800227a:	8b1b      	ldrh	r3, [r3, #24]
 800227c:	b29b      	uxth	r3, r3
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	b299      	uxth	r1, r3
 8002284:	4a38      	ldr	r2, [pc, #224]	; (8002368 <main+0x240>)
 8002286:	6913      	ldr	r3, [r2, #16]
 8002288:	f361 531f 	bfi	r3, r1, #20, #12
 800228c:	6113      	str	r3, [r2, #16]
	AS5600_pos_f64 =	state.raw_angle;  // set the current angle to the most accurate value for the euler method
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <main+0x240>)
 8002290:	8b1b      	ldrh	r3, [r3, #24]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f8e1 	bl	800045c <__aeabi_ui2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4935      	ldr	r1, [pc, #212]	; (8002374 <main+0x24c>)
 80022a0:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// TODO: use flag pin to tell CTRL where MCU is in initialization cycle
	// start communication with CTRL
	HAL_TIM_Base_Start(&htim2);  // start timer_2 (for delays)
 80022a4:	4834      	ldr	r0, [pc, #208]	; (8002378 <main+0x250>)
 80022a6:	f005 fcf5 	bl	8007c94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5 (for simulation time keeping)
 80022aa:	4834      	ldr	r0, [pc, #208]	; (800237c <main+0x254>)
 80022ac:	f005 fcf2 	bl	8007c94 <HAL_TIM_Base_Start>

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&state.raw_angle, 1);
 80022b0:	2201      	movs	r2, #1
 80022b2:	492f      	ldr	r1, [pc, #188]	; (8002370 <main+0x248>)
 80022b4:	4832      	ldr	r0, [pc, #200]	; (8002380 <main+0x258>)
 80022b6:	f000 fdcb 	bl	8002e50 <HAL_ADC_Start_DMA>

	//instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function
	// TODO: FIX ADC NOW IT STARTS FROM 500 AND HANGS ON 4096
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);  // TODO: remove this in final version
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c0:	4827      	ldr	r0, [pc, #156]	; (8002360 <main+0x238>)
 80022c2:	f001 ffcd 	bl	8004260 <HAL_GPIO_WritePin>
	TIM5->CNT = 0;
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <main+0x25c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt) [100Hz]
 80022cc:	482e      	ldr	r0, [pc, #184]	; (8002388 <main+0x260>)
 80022ce:	f005 fd3b 	bl	8007d48 <HAL_TIM_Base_Start_IT>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <main+0x264>)
 80022d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d8:	a317      	add	r3, pc, #92	; (adr r3, 8002338 <main+0x210>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fe fba9 	bl	8000a34 <__aeabi_dcmplt>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d124      	bne.n	8002332 <main+0x20a>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <main+0x264>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	a114      	add	r1, pc, #80	; (adr r1, 8002340 <main+0x218>)
 80022f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022f4:	f7fe fa56 	bl	80007a4 <__aeabi_ddiv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4610      	mov	r0, r2
 80022fe:	4619      	mov	r1, r3
 8002300:	f7fe fbc0 	bl	8000a84 <__aeabi_d2uiz>
 8002304:	4603      	mov	r3, r0
 8002306:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8002308:	2201      	movs	r2, #1
 800230a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800230e:	4813      	ldr	r0, [pc, #76]	; (800235c <main+0x234>)
 8002310:	f001 ffa6 	bl	8004260 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002314:	4623      	mov	r3, r4
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fc80 	bl	8001c1c <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <main+0x234>)
 8002324:	f001 ff9c 	bl	8004260 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002328:	4623      	mov	r3, r4
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc76 	bl	8001c1c <delay_us>
 8002330:	e7cf      	b.n	80022d2 <main+0x1aa>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8002332:	bf00      	nop
	while (1) {
 8002334:	e7cd      	b.n	80022d2 <main+0x1aa>
 8002336:	bf00      	nop
 8002338:	88e368f1 	.word	0x88e368f1
 800233c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002340:	00000000 	.word	0x00000000
 8002344:	4052c000 	.word	0x4052c000
 8002348:	200001c8 	.word	0x200001c8
 800234c:	200001a8 	.word	0x200001a8
 8002350:	408f4000 	.word	0x408f4000
 8002354:	200001f0 	.word	0x200001f0
 8002358:	20000134 	.word	0x20000134
 800235c:	40020400 	.word	0x40020400
 8002360:	40020000 	.word	0x40020000
 8002364:	200001d0 	.word	0x200001d0
 8002368:	20000188 	.word	0x20000188
 800236c:	20000208 	.word	0x20000208
 8002370:	200001a0 	.word	0x200001a0
 8002374:	200001f8 	.word	0x200001f8
 8002378:	20000324 	.word	0x20000324
 800237c:	2000036c 	.word	0x2000036c
 8002380:	2000008c 	.word	0x2000008c
 8002384:	40000c00 	.word	0x40000c00
 8002388:	200003b4 	.word	0x200003b4
 800238c:	20000200 	.word	0x20000200

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	; 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2230      	movs	r2, #48	; 0x30
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f006 f918 	bl	80085d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <SystemClock_Config+0xc8>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	4a26      	ldr	r2, [pc, #152]	; (8002458 <SystemClock_Config+0xc8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	; 0x40
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <SystemClock_Config+0xc8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <SystemClock_Config+0xcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	; (800245c <SystemClock_Config+0xcc>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <SystemClock_Config+0xcc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023f4:	2310      	movs	r3, #16
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f8:	2302      	movs	r3, #2
 80023fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002400:	2310      	movs	r3, #16
 8002402:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002404:	23c0      	movs	r3, #192	; 0xc0
 8002406:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002408:	2302      	movs	r3, #2
 800240a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800240c:	2304      	movs	r3, #4
 800240e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	4618      	mov	r0, r3
 8002416:	f004 fad9 	bl	80069cc <HAL_RCC_OscConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002420:	f000 f81e 	bl	8002460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002424:	230f      	movs	r3, #15
 8002426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2103      	movs	r1, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f004 fd3b 	bl	8006ebc <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800244c:	f000 f808 	bl	8002460 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	; 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_SPI1_Init+0x5c>)
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <MX_SPI1_Init+0x60>)
 8002478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_SPI1_Init+0x5c>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_SPI1_Init+0x5c>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_SPI1_Init+0x5c>)
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_SPI1_Init+0x5c>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_SPI1_Init+0x5c>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_SPI1_Init+0x5c>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_SPI1_Init+0x5c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_SPI1_Init+0x5c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_SPI1_Init+0x5c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_SPI1_Init+0x5c>)
 80024b2:	220a      	movs	r2, #10
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_SPI1_Init+0x5c>)
 80024b8:	f004 fecc 	bl	8007254 <HAL_SPI_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80024c2:	f7ff ffcd 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000208 	.word	0x20000208
 80024d0:	40013000 	.word	0x40013000

080024d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5c      	ldr	r2, [pc, #368]	; (8002664 <HAL_SPI_MspInit+0x190>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 80b2 	bne.w	800265c <HAL_SPI_MspInit+0x188>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
	// Setting NSS pin as interrupt so that RxTx can be set up
	GPIO_InitStruct.Pin = NSS_Pin;
 80024f8:	2310      	movs	r3, #16
 80024fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002500:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4856      	ldr	r0, [pc, #344]	; (8002668 <HAL_SPI_MspInit+0x194>)
 800250e:	f001 fd23 	bl	8003f58 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	200a      	movs	r0, #10
 8002518:	f001 f947 	bl	80037aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800251c:	200a      	movs	r0, #10
 800251e:	f001 f960 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_SPI_MspInit+0x198>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a50      	ldr	r2, [pc, #320]	; (800266c <HAL_SPI_MspInit+0x198>)
 800252c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <HAL_SPI_MspInit+0x198>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b4a      	ldr	r3, [pc, #296]	; (800266c <HAL_SPI_MspInit+0x198>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_SPI_MspInit+0x198>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b47      	ldr	r3, [pc, #284]	; (800266c <HAL_SPI_MspInit+0x198>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 800255a:	23f0      	movs	r3, #240	; 0xf0
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800256a:	2305      	movs	r3, #5
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	483c      	ldr	r0, [pc, #240]	; (8002668 <HAL_SPI_MspInit+0x194>)
 8002576:	f001 fcef 	bl	8003f58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 800257c:	4a3d      	ldr	r2, [pc, #244]	; (8002674 <HAL_SPI_MspInit+0x1a0>)
 800257e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002580:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 8002582:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002586:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002588:	4b39      	ldr	r3, [pc, #228]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258e:	4b38      	ldr	r3, [pc, #224]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 8002596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259c:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a2:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ae:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025b6:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80025be:	482c      	ldr	r0, [pc, #176]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025c0:	f001 f92a 	bl	8003818 <HAL_DMA_Init>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 80025ca:	f7ff ff49 	bl	8002460 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a27      	ldr	r2, [pc, #156]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025d2:	649a      	str	r2, [r3, #72]	; 0x48
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <HAL_SPI_MspInit+0x19c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_SPI_MspInit+0x1a8>)
 80025de:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e8:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ee:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002612:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002616:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 800261a:	2204      	movs	r2, #4
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002620:	2203      	movs	r2, #3
 8002622:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002626:	2200      	movs	r2, #0
 8002628:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002630:	4811      	ldr	r0, [pc, #68]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002632:	f001 f8f1 	bl	8003818 <HAL_DMA_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_SPI_MspInit+0x16c>
    {
      Error_Handler();
 800263c:	f7ff ff10 	bl	8002460 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
 8002646:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <HAL_SPI_MspInit+0x1a4>)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	2023      	movs	r0, #35	; 0x23
 8002652:	f001 f8aa 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002656:	2023      	movs	r0, #35	; 0x23
 8002658:	f001 f8c3 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	; 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013000 	.word	0x40013000
 8002668:	40020000 	.word	0x40020000
 800266c:	40023800 	.word	0x40023800
 8002670:	20000260 	.word	0x20000260
 8002674:	40026458 	.word	0x40026458
 8002678:	200002c0 	.word	0x200002c0
 800267c:	40026410 	.word	0x40026410

08002680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_MspInit+0x4c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_MspInit+0x4c>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_MspInit+0x4c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <HAL_MspInit+0x4c>)
 80026ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <NMI_Handler+0x4>

080026d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026da:	e7fe      	b.n	80026da <HardFault_Handler+0x4>

080026dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <MemManage_Handler+0x4>

080026e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026e2:	b480      	push	{r7}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <BusFault_Handler+0x4>

080026e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ec:	e7fe      	b.n	80026ec <UsageFault_Handler+0x4>

080026ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271c:	f000 fa24 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}

08002724 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INSTUCTION_INT_Pin);
 8002728:	2008      	movs	r0, #8
 800272a:	f001 fdb3 	bl	8004294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <ADC_IRQHandler+0x10>)
 800273a:	f000 fa78 	bl	8002c2e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000008c 	.word	0x2000008c

08002748 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800274e:	f005 fb5d 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003b4 	.word	0x200003b4

0800275c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <I2C1_EV_IRQHandler+0x10>)
 8002762:	f002 fa13 	bl	8004b8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000134 	.word	0x20000134

08002770 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <SPI1_IRQHandler+0x10>)
 8002776:	f004 fef9 	bl	800756c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000208 	.word	0x20000208

08002784 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <DMA2_Stream0_IRQHandler+0x10>)
 800278a:	f001 f96d 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200002c0 	.word	0x200002c0

08002798 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA2_Stream3_IRQHandler+0x10>)
 800279e:	f001 f963 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000260 	.word	0x20000260

080027ac <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <DMA2_Stream4_IRQHandler+0x10>)
 80027b2:	f001 f959 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200000d4 	.word	0x200000d4

080027c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c8:	4a14      	ldr	r2, [pc, #80]	; (800281c <_sbrk+0x5c>)
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <_sbrk+0x60>)
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d4:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <_sbrk+0x64>)
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <_sbrk+0x68>)
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <_sbrk+0x64>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d207      	bcs.n	8002800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f0:	f005 fea8 	bl	8008544 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	220c      	movs	r2, #12
 80027f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027fe:	e009      	b.n	8002814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002800:	4b08      	ldr	r3, [pc, #32]	; (8002824 <_sbrk+0x64>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <_sbrk+0x64>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_sbrk+0x64>)
 8002810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20020000 	.word	0x20020000
 8002820:	00000400 	.word	0x00000400
 8002824:	20000320 	.word	0x20000320
 8002828:	20000410 	.word	0x20000410

0800282c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <SystemInit+0x20>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <SystemInit+0x20>)
 8002838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800283c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	463b      	mov	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <MX_TIM2_Init+0x94>)
 800286e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <MX_TIM2_Init+0x94>)
 8002876:	225f      	movs	r2, #95	; 0x5f
 8002878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <MX_TIM2_Init+0x94>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <MX_TIM2_Init+0x94>)
 8002882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <MX_TIM2_Init+0x94>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <MX_TIM2_Init+0x94>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002894:	4813      	ldr	r0, [pc, #76]	; (80028e4 <MX_TIM2_Init+0x94>)
 8002896:	f005 f9ad 	bl	8007bf4 <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80028a0:	f7ff fdde 	bl	8002460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <MX_TIM2_Init+0x94>)
 80028b2:	f005 fbb3 	bl	800801c <HAL_TIM_ConfigClockSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028bc:	f7ff fdd0 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c8:	463b      	mov	r3, r7
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_TIM2_Init+0x94>)
 80028ce:	f005 fdaf 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028d8:	f7ff fdc2 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000324 	.word	0x20000324

080028e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ee:	f107 0308 	add.w	r3, r7, #8
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028fc:	463b      	mov	r3, r7
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <MX_TIM5_Init+0x94>)
 8002906:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <MX_TIM5_Init+0x98>)
 8002908:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <MX_TIM5_Init+0x94>)
 800290c:	225f      	movs	r2, #95	; 0x5f
 800290e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_TIM5_Init+0x94>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <MX_TIM5_Init+0x94>)
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <MX_TIM5_Init+0x94>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_TIM5_Init+0x94>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <MX_TIM5_Init+0x94>)
 800292c:	f005 f962 	bl	8007bf4 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002936:	f7ff fd93 	bl	8002460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800293a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	4619      	mov	r1, r3
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <MX_TIM5_Init+0x94>)
 8002948:	f005 fb68 	bl	800801c <HAL_TIM_ConfigClockSource>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002952:	f7ff fd85 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800295e:	463b      	mov	r3, r7
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_TIM5_Init+0x94>)
 8002964:	f005 fd64 	bl	8008430 <HAL_TIMEx_MasterConfigSynchronization>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800296e:	f7ff fd77 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	2000036c 	.word	0x2000036c
 8002980:	40000c00 	.word	0x40000c00

08002984 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_TIM10_Init+0x40>)
 800298a:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <MX_TIM10_Init+0x44>)
 800298c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9500;
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <MX_TIM10_Init+0x40>)
 8002990:	f242 521c 	movw	r2, #9500	; 0x251c
 8002994:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_TIM10_Init+0x40>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_TIM10_Init+0x40>)
 800299e:	2264      	movs	r2, #100	; 0x64
 80029a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029aa:	2280      	movs	r2, #128	; 0x80
 80029ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80029ae:	4805      	ldr	r0, [pc, #20]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029b0:	f005 f920 	bl	8007bf4 <HAL_TIM_Base_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80029ba:	f7ff fd51 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200003b4 	.word	0x200003b4
 80029c8:	40014400 	.word	0x40014400

080029cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	4b20      	ldr	r3, [pc, #128]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a1f      	ldr	r2, [pc, #124]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b1d      	ldr	r3, [pc, #116]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80029fa:	e02e      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	; (8002a68 <HAL_TIM_Base_MspInit+0x9c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10e      	bne.n	8002a24 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b16      	ldr	r3, [pc, #88]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6413      	str	r3, [r2, #64]	; 0x40
 8002a16:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
}
 8002a22:	e01a      	b.n	8002a5a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a10      	ldr	r2, [pc, #64]	; (8002a6c <HAL_TIM_Base_MspInit+0xa0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d115      	bne.n	8002a5a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_TIM_Base_MspInit+0x98>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2019      	movs	r0, #25
 8002a50:	f000 feab 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a54:	2019      	movs	r0, #25
 8002a56:	f000 fec4 	bl	80037e2 <HAL_NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40000c00 	.word	0x40000c00
 8002a6c:	40014400 	.word	0x40014400

08002a70 <Reset_Handler>:
 8002a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002aa8 <LoopFillZerobss+0x12>
 8002a74:	480d      	ldr	r0, [pc, #52]	; (8002aac <LoopFillZerobss+0x16>)
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <LoopFillZerobss+0x1a>)
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LoopFillZerobss+0x1e>)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:
 8002a7e:	58d4      	ldr	r4, [r2, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:
 8002a84:	18c4      	adds	r4, r0, r3
 8002a86:	428c      	cmp	r4, r1
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
 8002a8a:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <LoopFillZerobss+0x22>)
 8002a8c:	4c0b      	ldr	r4, [pc, #44]	; (8002abc <LoopFillZerobss+0x26>)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:
 8002a96:	42a2      	cmp	r2, r4
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>
 8002a9a:	f7ff fec7 	bl	800282c <SystemInit>
 8002a9e:	f005 fd57 	bl	8008550 <__libc_init_array>
 8002aa2:	f7ff fb41 	bl	8002128 <main>
 8002aa6:	4770      	bx	lr
 8002aa8:	20020000 	.word	0x20020000
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000070 	.word	0x20000070
 8002ab4:	08008a54 	.word	0x08008a54
 8002ab8:	20000070 	.word	0x20000070
 8002abc:	20000410 	.word	0x20000410

08002ac0 <DMA1_Stream0_IRQHandler>:
 8002ac0:	e7fe      	b.n	8002ac0 <DMA1_Stream0_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 fe51 	bl	8003794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7ff fdc2 	bl	8002680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fe69 	bl	80037fe <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b44:	f000 fe31 	bl	80037aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000008 	.word	0x20000008
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	200003fc 	.word	0x200003fc

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200003fc 	.word	0x200003fc

08002ba8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e033      	b.n	8002c26 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d109      	bne.n	8002bda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe f950 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bee:	f023 0302 	bic.w	r3, r3, #2
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fb72 	bl	80032e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
 8002c16:	e001      	b.n	8002c1c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d049      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0xca>
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d046      	beq.n	8002cf8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d12b      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d127      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d119      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0220 	bic.w	r2, r2, #32
 8002cc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f9a1 	bl	8003030 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f06f 0212 	mvn.w	r2, #18
 8002cf6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d057      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x190>
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d054      	beq.n	8002dbe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d139      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d12b      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d124      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11d      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d119      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d88:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fc16 	bl	80035e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 020c 	mvn.w	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dcc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d017      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x1d6>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d014      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10d      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f92f 	bl	8003058 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0201 	mvn.w	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e12:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x218>
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d012      	beq.n	8002e46 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	f043 0202 	orr.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0220 	mvn.w	r2, #32
 8002e34:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f918 	bl	800306c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f06f 0220 	mvn.w	r2, #32
 8002e44:	601a      	str	r2, [r3, #0]
  }
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_Start_DMA+0x1e>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e0ce      	b.n	800300c <HAL_ADC_Start_DMA+0x1bc>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d018      	beq.n	8002eb6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0201 	orr.w	r2, r2, #1
 8002e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e94:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_ADC_Start_DMA+0x1c4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5f      	ldr	r2, [pc, #380]	; (8003018 <HAL_ADC_Start_DMA+0x1c8>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0c9a      	lsrs	r2, r3, #18
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ea8:	e002      	b.n	8002eb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f9      	bne.n	8002eaa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d107      	bne.n	8002ed6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	f040 8086 	bne.w	8002ff2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f023 0206 	bic.w	r2, r3, #6
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	645a      	str	r2, [r3, #68]	; 0x44
 8002f32:	e002      	b.n	8002f3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <HAL_ADC_Start_DMA+0x1cc>)
 8002f44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	4a35      	ldr	r2, [pc, #212]	; (8003020 <HAL_ADC_Start_DMA+0x1d0>)
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_ADC_Start_DMA+0x1d4>)
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_ADC_Start_DMA+0x1d8>)
 8002f5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f76:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f86:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	334c      	adds	r3, #76	; 0x4c
 8002f92:	4619      	mov	r1, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f000 fcec 	bl	8003974 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d129      	bne.n	800300a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	e020      	b.n	800300a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_ADC_Start_DMA+0x1dc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d11b      	bne.n	800300a <HAL_ADC_Start_DMA+0x1ba>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d114      	bne.n	800300a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e00b      	b.n	800300a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0210 	orr.w	r2, r3, #16
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0201 	orr.w	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000000 	.word	0x20000000
 8003018:	431bde83 	.word	0x431bde83
 800301c:	40012300 	.word	0x40012300
 8003020:	080034dd 	.word	0x080034dd
 8003024:	08003597 	.word	0x08003597
 8003028:	080035b3 	.word	0x080035b3
 800302c:	40012000 	.word	0x40012000

08003030 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_ADC_ConfigChannel+0x1c>
 8003098:	2302      	movs	r3, #2
 800309a:	e113      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x244>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d925      	bls.n	80030f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68d9      	ldr	r1, [r3, #12]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	3b1e      	subs	r3, #30
 80030c2:	2207      	movs	r2, #7
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43da      	mvns	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4403      	add	r3, r0
 80030ea:	3b1e      	subs	r3, #30
 80030ec:	409a      	lsls	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e022      	b.n	800313e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	2207      	movs	r2, #7
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6919      	ldr	r1, [r3, #16]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	4603      	mov	r3, r0
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4403      	add	r3, r0
 8003134:	409a      	lsls	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b06      	cmp	r3, #6
 8003144:	d824      	bhi.n	8003190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	3b05      	subs	r3, #5
 8003158:	221f      	movs	r2, #31
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	4618      	mov	r0, r3
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	3b05      	subs	r3, #5
 8003182:	fa00 f203 	lsl.w	r2, r0, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	635a      	str	r2, [r3, #52]	; 0x34
 800318e:	e04c      	b.n	800322a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d824      	bhi.n	80031e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b23      	subs	r3, #35	; 0x23
 80031aa:	221f      	movs	r2, #31
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b23      	subs	r3, #35	; 0x23
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
 80031e0:	e023      	b.n	800322a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b41      	subs	r3, #65	; 0x41
 80031f4:	221f      	movs	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43da      	mvns	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	400a      	ands	r2, r1
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	4618      	mov	r0, r3
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b41      	subs	r3, #65	; 0x41
 800321e:	fa00 f203 	lsl.w	r2, r0, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800322a:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_ADC_ConfigChannel+0x250>)
 800322c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <HAL_ADC_ConfigChannel+0x254>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d10f      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1d8>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d10b      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_ADC_ConfigChannel+0x254>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d12b      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <HAL_ADC_ConfigChannel+0x258>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d003      	beq.n	8003274 <HAL_ADC_ConfigChannel+0x1f4>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b11      	cmp	r3, #17
 8003272:	d122      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <HAL_ADC_ConfigChannel+0x258>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d111      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_ADC_ConfigChannel+0x25c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_ADC_ConfigChannel+0x260>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0c9a      	lsrs	r2, r3, #18
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032ac:	e002      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f9      	bne.n	80032ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40012300 	.word	0x40012300
 80032d4:	40012000 	.word	0x40012000
 80032d8:	10000012 	.word	0x10000012
 80032dc:	20000000 	.word	0x20000000
 80032e0:	431bde83 	.word	0x431bde83

080032e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ec:	4b79      	ldr	r3, [pc, #484]	; (80034d4 <ADC_Init+0x1f0>)
 80032ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	431a      	orrs	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800333c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800335e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <ADC_Init+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800338a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6899      	ldr	r1, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	e00f      	b.n	80033e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0202 	bic.w	r2, r2, #2
 80033f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e1b      	ldrb	r3, [r3, #24]
 80033fc:	005a      	lsls	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01b      	beq.n	8003448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800341e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800342e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	035a      	lsls	r2, r3, #13
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e007      	b.n	8003458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003456:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	3b01      	subs	r3, #1
 8003474:	051a      	lsls	r2, r3, #20
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800348c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6899      	ldr	r1, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800349a:	025a      	lsls	r2, r3, #9
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6899      	ldr	r1, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	029a      	lsls	r2, r3, #10
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40012300 	.word	0x40012300
 80034d8:	0f000001 	.word	0x0f000001

080034dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d13c      	bne.n	8003570 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d12b      	bne.n	8003568 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003514:	2b00      	cmp	r3, #0
 8003516:	d127      	bne.n	8003568 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	d006      	beq.n	8003534 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003530:	2b00      	cmp	r3, #0
 8003532:	d119      	bne.n	8003568 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0220 	bic.w	r2, r2, #32
 8003542:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d105      	bne.n	8003568 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff fd61 	bl	8003030 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800356e:	e00e      	b.n	800358e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f7ff fd75 	bl	800306c <HAL_ADC_ErrorCallback>
}
 8003582:	e004      	b.n	800358e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff fd4d 	bl	8003044 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2240      	movs	r2, #64	; 0x40
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fd4a 	bl	800306c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	; (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	2b04      	cmp	r3, #4
 8003704:	bf28      	it	cs
 8003706:	2304      	movcs	r3, #4
 8003708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3304      	adds	r3, #4
 800370e:	2b06      	cmp	r3, #6
 8003710:	d902      	bls.n	8003718 <NVIC_EncodePriority+0x30>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3b03      	subs	r3, #3
 8003716:	e000      	b.n	800371a <NVIC_EncodePriority+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	401a      	ands	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43d9      	mvns	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	4313      	orrs	r3, r2
         );
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003760:	d301      	bcc.n	8003766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003762:	2301      	movs	r3, #1
 8003764:	e00f      	b.n	8003786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <SysTick_Config+0x40>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800376e:	210f      	movs	r1, #15
 8003770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003774:	f7ff ff8e 	bl	8003694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <SysTick_Config+0x40>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <SysTick_Config+0x40>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010

08003794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff29 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037bc:	f7ff ff3e 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff8e 	bl	80036e8 <NVIC_EncodePriority>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5d 	bl	8003694 <__NVIC_SetPriority>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff31 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffa2 	bl	8003750 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7ff f9b4 	bl	8002b90 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e099      	b.n	8003968 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003854:	e00f      	b.n	8003876 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003856:	f7ff f99b 	bl	8002b90 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b05      	cmp	r3, #5
 8003862:	d908      	bls.n	8003876 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2203      	movs	r2, #3
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e078      	b.n	8003968 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e8      	bne.n	8003856 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <HAL_DMA_Init+0x158>)
 8003890:	4013      	ands	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d107      	bne.n	80038e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	4313      	orrs	r3, r2
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 0307 	bic.w	r3, r3, #7
 80038f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b04      	cmp	r3, #4
 8003908:	d117      	bne.n	800393a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00e      	beq.n	800393a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fa9f 	bl	8003e60 <DMA_CheckFifoParam>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003936:	2301      	movs	r3, #1
 8003938:	e016      	b.n	8003968 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fa56 	bl	8003df4 <DMA_CalcBaseAndBitshift>
 8003948:	4603      	mov	r3, r0
 800394a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	223f      	movs	r2, #63	; 0x3f
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	f010803f 	.word	0xf010803f

08003974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_DMA_Start_IT+0x26>
 8003996:	2302      	movs	r3, #2
 8003998:	e040      	b.n	8003a1c <HAL_DMA_Start_IT+0xa8>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d12f      	bne.n	8003a0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f9e8 	bl	8003d98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	223f      	movs	r2, #63	; 0x3f
 80039ce:	409a      	lsls	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0216 	orr.w	r2, r2, #22
 80039e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0208 	orr.w	r2, r2, #8
 80039fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e005      	b.n	8003a1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d004      	beq.n	8003a42 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00c      	b.n	8003a5c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2205      	movs	r2, #5
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a74:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_DMA_IRQHandler+0x248>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a8e      	ldr	r2, [pc, #568]	; (8003cb4 <HAL_DMA_IRQHandler+0x24c>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	2208      	movs	r2, #8
 8003a94:	409a      	lsls	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d01a      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d013      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0204 	bic.w	r2, r2, #4
 8003aba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2201      	movs	r2, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d012      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	2201      	movs	r2, #1
 8003af8:	409a      	lsls	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2204      	movs	r2, #4
 8003b10:	409a      	lsls	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d012      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2210      	movs	r2, #16
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d043      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d03c      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	2210      	movs	r2, #16
 8003b64:	409a      	lsls	r2, r3
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d024      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	4798      	blx	r3
 8003b96:	e01f      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
 8003ba8:	e016      	b.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0208 	bic.w	r2, r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	2220      	movs	r2, #32
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 808f 	beq.w	8003d08 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8087 	beq.w	8003d08 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfe:	2220      	movs	r2, #32
 8003c00:	409a      	lsls	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d136      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0216 	bic.w	r2, r2, #22
 8003c20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <HAL_DMA_IRQHandler+0x1da>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0208 	bic.w	r2, r2, #8
 8003c50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	223f      	movs	r2, #63	; 0x3f
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07e      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	4798      	blx	r3
        }
        return;
 8003c7e:	e079      	b.n	8003d74 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01d      	beq.n	8003cca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d031      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	4798      	blx	r3
 8003cac:	e02c      	b.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
 8003cae:	bf00      	nop
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d023      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	4798      	blx	r3
 8003cc8:	e01e      	b.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0210 	bic.w	r2, r2, #16
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d032      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d307      	bcc.n	8003d50 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f2      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x2cc>
 8003d4e:	e000      	b.n	8003d52 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d50:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d74:	bf00      	nop
    }
  }
}
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d8a:	b2db      	uxtb	r3, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d108      	bne.n	8003dd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dd6:	e007      	b.n	8003de8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	3b10      	subs	r3, #16
 8003e04:	4a14      	ldr	r2, [pc, #80]	; (8003e58 <DMA_CalcBaseAndBitshift+0x64>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	091b      	lsrs	r3, r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <DMA_CalcBaseAndBitshift+0x68>)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4413      	add	r3, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d909      	bls.n	8003e36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	1d1a      	adds	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	659a      	str	r2, [r3, #88]	; 0x58
 8003e34:	e007      	b.n	8003e46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	aaaaaaab 	.word	0xaaaaaaab
 8003e5c:	08008a3c 	.word	0x08008a3c

08003e60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11f      	bne.n	8003eba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d856      	bhi.n	8003f2e <DMA_CheckFifoParam+0xce>
 8003e80:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <DMA_CheckFifoParam+0x28>)
 8003e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e86:	bf00      	nop
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003eab 	.word	0x08003eab
 8003e90:	08003e99 	.word	0x08003e99
 8003e94:	08003f2f 	.word	0x08003f2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d046      	beq.n	8003f32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea8:	e043      	b.n	8003f32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eb2:	d140      	bne.n	8003f36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb8:	e03d      	b.n	8003f36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	d121      	bne.n	8003f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d837      	bhi.n	8003f3a <DMA_CheckFifoParam+0xda>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <DMA_CheckFifoParam+0x70>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ee7 	.word	0x08003ee7
 8003ed8:	08003ee1 	.word	0x08003ee1
 8003edc:	08003ef9 	.word	0x08003ef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e030      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d025      	beq.n	8003f3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef6:	e022      	b.n	8003f3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f00:	d11f      	bne.n	8003f42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f06:	e01c      	b.n	8003f42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d903      	bls.n	8003f16 <DMA_CheckFifoParam+0xb6>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f14:	e018      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1a:	e015      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e00b      	b.n	8003f46 <DMA_CheckFifoParam+0xe6>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e00a      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;
 8003f32:	bf00      	nop
 8003f34:	e008      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;
 8003f36:	bf00      	nop
 8003f38:	e006      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
    }
  } 
  
  return status; 
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop

08003f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b089      	sub	sp, #36	; 0x24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	e159      	b.n	8004228 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f74:	2201      	movs	r2, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	f040 8148 	bne.w	8004222 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d005      	beq.n	8003faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d130      	bne.n	800400c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0201 	and.w	r2, r3, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b03      	cmp	r3, #3
 8004016:	d017      	beq.n	8004048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d123      	bne.n	800409c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	220f      	movs	r2, #15
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	08da      	lsrs	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3208      	adds	r2, #8
 8004096:	69b9      	ldr	r1, [r7, #24]
 8004098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	2203      	movs	r2, #3
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 0203 	and.w	r2, r3, #3
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a2 	beq.w	8004222 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b57      	ldr	r3, [pc, #348]	; (8004240 <HAL_GPIO_Init+0x2e8>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	4a56      	ldr	r2, [pc, #344]	; (8004240 <HAL_GPIO_Init+0x2e8>)
 80040e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ec:	6453      	str	r3, [r2, #68]	; 0x44
 80040ee:	4b54      	ldr	r3, [pc, #336]	; (8004240 <HAL_GPIO_Init+0x2e8>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fa:	4a52      	ldr	r2, [pc, #328]	; (8004244 <HAL_GPIO_Init+0x2ec>)
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	089b      	lsrs	r3, r3, #2
 8004100:	3302      	adds	r3, #2
 8004102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	220f      	movs	r2, #15
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a49      	ldr	r2, [pc, #292]	; (8004248 <HAL_GPIO_Init+0x2f0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d019      	beq.n	800415a <HAL_GPIO_Init+0x202>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a48      	ldr	r2, [pc, #288]	; (800424c <HAL_GPIO_Init+0x2f4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d013      	beq.n	8004156 <HAL_GPIO_Init+0x1fe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a47      	ldr	r2, [pc, #284]	; (8004250 <HAL_GPIO_Init+0x2f8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00d      	beq.n	8004152 <HAL_GPIO_Init+0x1fa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a46      	ldr	r2, [pc, #280]	; (8004254 <HAL_GPIO_Init+0x2fc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <HAL_GPIO_Init+0x1f6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a45      	ldr	r2, [pc, #276]	; (8004258 <HAL_GPIO_Init+0x300>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_GPIO_Init+0x1f2>
 8004146:	2304      	movs	r3, #4
 8004148:	e008      	b.n	800415c <HAL_GPIO_Init+0x204>
 800414a:	2307      	movs	r3, #7
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x204>
 800414e:	2303      	movs	r3, #3
 8004150:	e004      	b.n	800415c <HAL_GPIO_Init+0x204>
 8004152:	2302      	movs	r3, #2
 8004154:	e002      	b.n	800415c <HAL_GPIO_Init+0x204>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_GPIO_Init+0x204>
 800415a:	2300      	movs	r3, #0
 800415c:	69fa      	ldr	r2, [r7, #28]
 800415e:	f002 0203 	and.w	r2, r2, #3
 8004162:	0092      	lsls	r2, r2, #2
 8004164:	4093      	lsls	r3, r2
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800416c:	4935      	ldr	r1, [pc, #212]	; (8004244 <HAL_GPIO_Init+0x2ec>)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	3302      	adds	r3, #2
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_GPIO_Init+0x304>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800419e:	4a2f      	ldr	r2, [pc, #188]	; (800425c <HAL_GPIO_Init+0x304>)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_GPIO_Init+0x304>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	43db      	mvns	r3, r3
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	4013      	ands	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c8:	4a24      	ldr	r2, [pc, #144]	; (800425c <HAL_GPIO_Init+0x304>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041ce:	4b23      	ldr	r3, [pc, #140]	; (800425c <HAL_GPIO_Init+0x304>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	43db      	mvns	r3, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	4013      	ands	r3, r2
 80041dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041f2:	4a1a      	ldr	r2, [pc, #104]	; (800425c <HAL_GPIO_Init+0x304>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <HAL_GPIO_Init+0x304>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800421c:	4a0f      	ldr	r2, [pc, #60]	; (800425c <HAL_GPIO_Init+0x304>)
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3301      	adds	r3, #1
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	f67f aea2 	bls.w	8003f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	40013800 	.word	0x40013800
 8004248:	40020000 	.word	0x40020000
 800424c:	40020400 	.word	0x40020400
 8004250:	40020800 	.word	0x40020800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021000 	.word	0x40021000
 800425c:	40013c00 	.word	0x40013c00

08004260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
 800426c:	4613      	mov	r3, r2
 800426e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004270:	787b      	ldrb	r3, [r7, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800427c:	e003      	b.n	8004286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800427e:	887b      	ldrh	r3, [r7, #2]
 8004280:	041a      	lsls	r2, r3, #16
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	619a      	str	r2, [r3, #24]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042aa:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fefc 	bl	80020b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40013c00 	.word	0x40013c00

080042c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e12b      	b.n	800452e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fd fb16 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004328:	f002 ff80 	bl	800722c <HAL_RCC_GetPCLK1Freq>
 800432c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4a81      	ldr	r2, [pc, #516]	; (8004538 <HAL_I2C_Init+0x274>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d807      	bhi.n	8004348 <HAL_I2C_Init+0x84>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a80      	ldr	r2, [pc, #512]	; (800453c <HAL_I2C_Init+0x278>)
 800433c:	4293      	cmp	r3, r2
 800433e:	bf94      	ite	ls
 8004340:	2301      	movls	r3, #1
 8004342:	2300      	movhi	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	e006      	b.n	8004356 <HAL_I2C_Init+0x92>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a7d      	ldr	r2, [pc, #500]	; (8004540 <HAL_I2C_Init+0x27c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	bf94      	ite	ls
 8004350:	2301      	movls	r3, #1
 8004352:	2300      	movhi	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0e7      	b.n	800452e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_I2C_Init+0x280>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0c9b      	lsrs	r3, r3, #18
 8004368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4a6a      	ldr	r2, [pc, #424]	; (8004538 <HAL_I2C_Init+0x274>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d802      	bhi.n	8004398 <HAL_I2C_Init+0xd4>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	3301      	adds	r3, #1
 8004396:	e009      	b.n	80043ac <HAL_I2C_Init+0xe8>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	4a69      	ldr	r2, [pc, #420]	; (8004548 <HAL_I2C_Init+0x284>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	3301      	adds	r3, #1
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	495c      	ldr	r1, [pc, #368]	; (8004538 <HAL_I2C_Init+0x274>)
 80043c8:	428b      	cmp	r3, r1
 80043ca:	d819      	bhi.n	8004400 <HAL_I2C_Init+0x13c>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1e59      	subs	r1, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043da:	1c59      	adds	r1, r3, #1
 80043dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043e0:	400b      	ands	r3, r1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_I2C_Init+0x138>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e59      	subs	r1, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f4:	3301      	adds	r3, #1
 80043f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fa:	e051      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 80043fc:	2304      	movs	r3, #4
 80043fe:	e04f      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d111      	bne.n	800442c <HAL_I2C_Init+0x168>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	e012      	b.n	8004452 <HAL_I2C_Init+0x18e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Init+0x196>
 8004456:	2301      	movs	r3, #1
 8004458:	e022      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10e      	bne.n	8004480 <HAL_I2C_Init+0x1bc>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1e58      	subs	r0, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6859      	ldr	r1, [r3, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	440b      	add	r3, r1
 8004470:	fbb0 f3f3 	udiv	r3, r0, r3
 8004474:	3301      	adds	r3, #1
 8004476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447e:	e00f      	b.n	80044a0 <HAL_I2C_Init+0x1dc>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1e58      	subs	r0, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	0099      	lsls	r1, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	fbb0 f3f3 	udiv	r3, r0, r3
 8004496:	3301      	adds	r3, #1
 8004498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	6809      	ldr	r1, [r1, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6911      	ldr	r1, [r2, #16]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	68d2      	ldr	r2, [r2, #12]
 80044da:	4311      	orrs	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	000186a0 	.word	0x000186a0
 800453c:	001e847f 	.word	0x001e847f
 8004540:	003d08ff 	.word	0x003d08ff
 8004544:	431bde83 	.word	0x431bde83
 8004548:	10624dd3 	.word	0x10624dd3

0800454c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004566:	f7fe fb13 	bl	8002b90 <HAL_GetTick>
 800456a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b20      	cmp	r3, #32
 8004576:	f040 80d9 	bne.w	800472c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2319      	movs	r3, #25
 8004580:	2201      	movs	r2, #1
 8004582:	496d      	ldr	r1, [pc, #436]	; (8004738 <HAL_I2C_Mem_Write+0x1ec>)
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f001 fff7 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	e0cc      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_I2C_Mem_Write+0x56>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0c5      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d007      	beq.n	80045c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2221      	movs	r2, #33	; 0x21
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a4d      	ldr	r2, [pc, #308]	; (800473c <HAL_I2C_Mem_Write+0x1f0>)
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800460a:	88f8      	ldrh	r0, [r7, #6]
 800460c:	893a      	ldrh	r2, [r7, #8]
 800460e:	8979      	ldrh	r1, [r7, #10]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	4603      	mov	r3, r0
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f001 fd86 	bl	800612c <I2C_RequestMemoryWrite>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d052      	beq.n	80046cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e081      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f002 f878 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06b      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d11b      	bne.n	80046cc <HAL_I2C_Mem_Write+0x180>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1aa      	bne.n	800462a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f002 f864 	bl	80067a6 <I2C_WaitOnBTFFlagUntilTimeout>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00d      	beq.n	8004700 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e016      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000

08004740 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	461a      	mov	r2, r3
 800474e:	4603      	mov	r3, r0
 8004750:	817b      	strh	r3, [r7, #10]
 8004752:	460b      	mov	r3, r1
 8004754:	813b      	strh	r3, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800475a:	f7fe fa19 	bl	8002b90 <HAL_GetTick>
 800475e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b20      	cmp	r3, #32
 800476a:	f040 8208 	bne.w	8004b7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	2319      	movs	r3, #25
 8004774:	2201      	movs	r2, #1
 8004776:	497b      	ldr	r1, [pc, #492]	; (8004964 <HAL_I2C_Mem_Read+0x224>)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f001 fefd 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
 8004786:	e1fb      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_I2C_Mem_Read+0x56>
 8004792:	2302      	movs	r3, #2
 8004794:	e1f4      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d007      	beq.n	80047bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2222      	movs	r2, #34	; 0x22
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a5b      	ldr	r2, [pc, #364]	; (8004968 <HAL_I2C_Mem_Read+0x228>)
 80047fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047fe:	88f8      	ldrh	r0, [r7, #6]
 8004800:	893a      	ldrh	r2, [r7, #8]
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4603      	mov	r3, r0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f001 fd22 	bl	8006258 <I2C_RequestMemoryRead>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1b0      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d113      	bne.n	800484e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	623b      	str	r3, [r7, #32]
 800483a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e184      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b01      	cmp	r3, #1
 8004854:	d11b      	bne.n	800488e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e164      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	2b02      	cmp	r3, #2
 8004894:	d11b      	bne.n	80048ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	61bb      	str	r3, [r7, #24]
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	e144      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048e4:	e138      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	f200 80f1 	bhi.w	8004ad2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d123      	bne.n	8004940 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f001 ffc5 	bl	800688c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e139      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800493e:	e10b      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004944:	2b02      	cmp	r3, #2
 8004946:	d14e      	bne.n	80049e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2200      	movs	r2, #0
 8004950:	4906      	ldr	r1, [pc, #24]	; (800496c <HAL_I2C_Mem_Read+0x22c>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f001 fe10 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e10e      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
 8004962:	bf00      	nop
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000
 800496c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049e4:	e0b8      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ec:	2200      	movs	r2, #0
 80049ee:	4966      	ldr	r1, [pc, #408]	; (8004b88 <HAL_I2C_Mem_Read+0x448>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f001 fdc1 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0bf      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	2200      	movs	r2, #0
 8004a4a:	494f      	ldr	r1, [pc, #316]	; (8004b88 <HAL_I2C_Mem_Read+0x448>)
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f001 fd93 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e091      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad0:	e042      	b.n	8004b58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 fed8 	bl	800688c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e04c      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d118      	bne.n	8004b58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f47f aec2 	bne.w	80048e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e000      	b.n	8004b80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b7e:	2302      	movs	r3, #2
  }
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	00010004 	.word	0x00010004

08004b8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d003      	beq.n	8004bc4 <HAL_I2C_EV_IRQHandler+0x38>
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b40      	cmp	r3, #64	; 0x40
 8004bc0:	f040 80c1 	bne.w	8004d46 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10d      	bne.n	8004bfa <HAL_I2C_EV_IRQHandler+0x6e>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004be4:	d003      	beq.n	8004bee <HAL_I2C_EV_IRQHandler+0x62>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bec:	d101      	bne.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x66>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x68>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f000 8132 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x92>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	0a5b      	lsrs	r3, r3, #9
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d006      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f001 fec0 	bl	8006996 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fcdc 	bl	80055d4 <I2C_Master_SB>
 8004c1c:	e092      	b.n	8004d44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_I2C_EV_IRQHandler+0xb2>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fd52 	bl	80056e0 <I2C_Master_ADD10>
 8004c3c:	e082      	b.n	8004d44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d009      	beq.n	8004c5e <HAL_I2C_EV_IRQHandler+0xd2>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	0a5b      	lsrs	r3, r3, #9
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fd6c 	bl	8005734 <I2C_Master_ADDR>
 8004c5c:	e072      	b.n	8004d44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03b      	beq.n	8004ce2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c78:	f000 80f3 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	09db      	lsrs	r3, r3, #7
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d009      	beq.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d103      	bne.n	8004ca8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f94c 	bl	8004f3e <I2C_MasterTransmit_TXE>
 8004ca6:	e04d      	b.n	8004d44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80d6 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	0a5b      	lsrs	r3, r3, #9
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80cf 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cc4:	7bbb      	ldrb	r3, [r7, #14]
 8004cc6:	2b21      	cmp	r3, #33	; 0x21
 8004cc8:	d103      	bne.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f9d3 	bl	8005076 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd0:	e0c7      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	f040 80c4 	bne.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fa41 	bl	8005162 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce0:	e0bf      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf0:	f000 80b7 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00f      	beq.n	8004d20 <HAL_I2C_EV_IRQHandler+0x194>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	0a9b      	lsrs	r3, r3, #10
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d009      	beq.n	8004d20 <HAL_I2C_EV_IRQHandler+0x194>
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fab6 	bl	800528a <I2C_MasterReceive_RXNE>
 8004d1e:	e011      	b.n	8004d44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 809a 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	0a5b      	lsrs	r3, r3, #9
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8093 	beq.w	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb5f 	bl	8005400 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d42:	e08e      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d44:	e08d      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e007      	b.n	8004d68 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	085b      	lsrs	r3, r3, #1
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <HAL_I2C_EV_IRQHandler+0x20e>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	0a5b      	lsrs	r3, r3, #9
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00c      	beq.n	8004d9a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d90:	69b9      	ldr	r1, [r7, #24]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 ff1d 	bl	8005bd2 <I2C_Slave_ADDR>
 8004d98:	e066      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <HAL_I2C_EV_IRQHandler+0x22e>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	0a5b      	lsrs	r3, r3, #9
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 ff58 	bl	8005c68 <I2C_Slave_STOPF>
 8004db8:	e056      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dba:	7bbb      	ldrb	r3, [r7, #14]
 8004dbc:	2b21      	cmp	r3, #33	; 0x21
 8004dbe:	d002      	beq.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	2b29      	cmp	r3, #41	; 0x29
 8004dc4:	d125      	bne.n	8004e12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	09db      	lsrs	r3, r3, #7
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00f      	beq.n	8004df2 <HAL_I2C_EV_IRQHandler+0x266>
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0a9b      	lsrs	r3, r3, #10
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_I2C_EV_IRQHandler+0x266>
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fe33 	bl	8005a56 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df0:	e039      	b.n	8004e66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	089b      	lsrs	r3, r3, #2
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d033      	beq.n	8004e66 <HAL_I2C_EV_IRQHandler+0x2da>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	0a5b      	lsrs	r3, r3, #9
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d02d      	beq.n	8004e66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fe60 	bl	8005ad0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e10:	e029      	b.n	8004e66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00f      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	0a9b      	lsrs	r3, r3, #10
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	089b      	lsrs	r3, r3, #2
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fe6b 	bl	8005b12 <I2C_SlaveReceive_RXNE>
 8004e3c:	e014      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00e      	beq.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	0a5b      	lsrs	r3, r3, #9
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d008      	beq.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fe99 	bl	8005b8e <I2C_SlaveReceive_BTF>
 8004e5c:	e004      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f54:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d150      	bne.n	8005006 <I2C_MasterTransmit_TXE+0xc8>
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b21      	cmp	r3, #33	; 0x21
 8004f68:	d14d      	bne.n	8005006 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d01d      	beq.n	8004fac <I2C_MasterTransmit_TXE+0x6e>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d01a      	beq.n	8004fac <I2C_MasterTransmit_TXE+0x6e>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f7c:	d016      	beq.n	8004fac <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f8c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2211      	movs	r2, #17
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff ff62 	bl	8004e6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004faa:	e060      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fba:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d107      	bne.n	8004ff6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff ff7d 	bl	8004eee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ff4:	e03b      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ff35 	bl	8004e6e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005004:	e033      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b21      	cmp	r3, #33	; 0x21
 800500a:	d005      	beq.n	8005018 <I2C_MasterTransmit_TXE+0xda>
 800500c:	7bbb      	ldrb	r3, [r7, #14]
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d12d      	bne.n	800506e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b22      	cmp	r3, #34	; 0x22
 8005016:	d12a      	bne.n	800506e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d108      	bne.n	8005034 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005032:	e01c      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d103      	bne.n	8005048 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f88e 	bl	8005162 <I2C_MemoryTransmit_TXE_BTF>
}
 8005046:	e012      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	781a      	ldrb	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800506c:	e7ff      	b.n	800506e <I2C_MasterTransmit_TXE+0x130>
 800506e:	bf00      	nop
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b21      	cmp	r3, #33	; 0x21
 800508e:	d164      	bne.n	800515a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d012      	beq.n	80050c0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050be:	e04c      	b.n	800515a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d01d      	beq.n	8005102 <I2C_MasterTransmit_BTF+0x8c>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d01a      	beq.n	8005102 <I2C_MasterTransmit_BTF+0x8c>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050d2:	d016      	beq.n	8005102 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050e2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2211      	movs	r2, #17
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff feb7 	bl	8004e6e <HAL_I2C_MasterTxCpltCallback>
}
 8005100:	e02b      	b.n	800515a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005110:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005120:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d107      	bne.n	800514c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff fed2 	bl	8004eee <HAL_I2C_MemTxCpltCallback>
}
 800514a:	e006      	b.n	800515a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fe8a 	bl	8004e6e <HAL_I2C_MasterTxCpltCallback>
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10b      	bne.n	800519a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	b2da      	uxtb	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005198:	e073      	b.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519e:	b29b      	uxth	r3, r3
 80051a0:	121b      	asrs	r3, r3, #8
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051b4:	e065      	b.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d10b      	bne.n	80051d6 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051d4:	e055      	b.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d151      	bne.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b22      	cmp	r3, #34	; 0x22
 80051e2:	d10d      	bne.n	8005200 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051fe:	e040      	b.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d015      	beq.n	8005236 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b21      	cmp	r3, #33	; 0x21
 800520e:	d112      	bne.n	8005236 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	781a      	ldrb	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005234:	e025      	b.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d120      	bne.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b21      	cmp	r3, #33	; 0x21
 8005244:	d11d      	bne.n	8005282 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005254:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005264:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff fe36 	bl	8004eee <HAL_I2C_MemTxCpltCallback>
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b22      	cmp	r3, #34	; 0x22
 800529c:	f040 80ac 	bne.w	80053f8 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d921      	bls.n	80052f2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	f040 808c 	bne.w	80053f8 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80052f0:	e082      	b.n	80053f8 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d075      	beq.n	80053e6 <I2C_MasterReceive_RXNE+0x15c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d002      	beq.n	8005306 <I2C_MasterReceive_RXNE+0x7c>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d16f      	bne.n	80053e6 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 fa8e 	bl	8006828 <I2C_WaitOnSTOPRequestThroughIT>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d142      	bne.n	8005398 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005320:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005330:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b40      	cmp	r3, #64	; 0x40
 800536a:	d10a      	bne.n	8005382 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fdc1 	bl	8004f02 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005380:	e03a      	b.n	80053f8 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2212      	movs	r2, #18
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd76 	bl	8004e82 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005396:	e02f      	b.n	80053f8 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7ff fd99 	bl	8004f16 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053e4:	e008      	b.n	80053f8 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f4:	605a      	str	r2, [r3, #4]
}
 80053f6:	e7ff      	b.n	80053f8 <I2C_MasterReceive_RXNE+0x16e>
 80053f8:	bf00      	nop
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11b      	bne.n	8005450 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005426:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800544e:	e0bd      	b.n	80055cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b03      	cmp	r3, #3
 8005458:	d129      	bne.n	80054ae <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005468:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b04      	cmp	r3, #4
 800546e:	d00a      	beq.n	8005486 <I2C_MasterReceive_BTF+0x86>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d007      	beq.n	8005486 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054ac:	e08e      	b.n	80055cc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d176      	bne.n	80055a6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d002      	beq.n	80054c4 <I2C_MasterReceive_BTF+0xc4>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d108      	bne.n	80054d6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e019      	b.n	800550a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d002      	beq.n	80054e2 <I2C_MasterReceive_BTF+0xe2>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d108      	bne.n	80054f4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e00a      	b.n	800550a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d007      	beq.n	800550a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005564:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d10a      	bne.n	8005590 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff fcba 	bl	8004f02 <HAL_I2C_MemRxCpltCallback>
}
 800558e:	e01d      	b.n	80055cc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2212      	movs	r2, #18
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff fc6f 	bl	8004e82 <HAL_I2C_MasterRxCpltCallback>
}
 80055a4:	e012      	b.n	80055cc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d117      	bne.n	8005618 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005600:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005602:	e067      	b.n	80056d4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	b2da      	uxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	611a      	str	r2, [r3, #16]
}
 8005616:	e05d      	b.n	80056d4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005620:	d133      	bne.n	800568a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b21      	cmp	r3, #33	; 0x21
 800562c:	d109      	bne.n	8005642 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	b2db      	uxtb	r3, r3
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800563e:	611a      	str	r2, [r3, #16]
 8005640:	e008      	b.n	8005654 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <I2C_Master_SB+0x92>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d108      	bne.n	8005678 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	2b00      	cmp	r3, #0
 800566c:	d032      	beq.n	80056d4 <I2C_Master_SB+0x100>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d02d      	beq.n	80056d4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005686:	605a      	str	r2, [r3, #4]
}
 8005688:	e024      	b.n	80056d4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10e      	bne.n	80056b0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	b29b      	uxth	r3, r3
 8005698:	11db      	asrs	r3, r3, #7
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 0306 	and.w	r3, r3, #6
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f063 030f 	orn	r3, r3, #15
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	611a      	str	r2, [r3, #16]
}
 80056ae:	e011      	b.n	80056d4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10d      	bne.n	80056d4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056bc:	b29b      	uxth	r3, r3
 80056be:	11db      	asrs	r3, r3, #7
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f003 0306 	and.w	r3, r3, #6
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	f063 030e 	orn	r3, r3, #14
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	611a      	str	r2, [r3, #16]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <I2C_Master_ADD10+0x26>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d108      	bne.n	8005718 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00c      	beq.n	8005728 <I2C_Master_ADD10+0x48>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d007      	beq.n	8005728 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005726:	605a      	str	r2, [r3, #4]
  }
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005734:	b480      	push	{r7}
 8005736:	b091      	sub	sp, #68	; 0x44
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b22      	cmp	r3, #34	; 0x22
 800575c:	f040 8169 	bne.w	8005a32 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10f      	bne.n	8005788 <I2C_Master_ADDR+0x54>
 8005768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800576c:	2b40      	cmp	r3, #64	; 0x40
 800576e:	d10b      	bne.n	8005788 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005770:	2300      	movs	r3, #0
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	633b      	str	r3, [r7, #48]	; 0x30
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	633b      	str	r3, [r7, #48]	; 0x30
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	e160      	b.n	8005a4a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d11d      	bne.n	80057cc <I2C_Master_ADDR+0x98>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005798:	d118      	bne.n	80057cc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579a:	2300      	movs	r3, #0
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057be:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	651a      	str	r2, [r3, #80]	; 0x50
 80057ca:	e13e      	b.n	8005a4a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d113      	bne.n	80057fe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d6:	2300      	movs	r3, #0
 80057d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	e115      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 808a 	bne.w	800591e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005810:	d137      	bne.n	8005882 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005820:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800582c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005830:	d113      	bne.n	800585a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005840:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	e0e7      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	623b      	str	r3, [r7, #32]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e0d3      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005884:	2b08      	cmp	r3, #8
 8005886:	d02e      	beq.n	80058e6 <I2C_Master_ADDR+0x1b2>
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	2b20      	cmp	r3, #32
 800588c:	d02b      	beq.n	80058e6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	2b12      	cmp	r3, #18
 8005892:	d102      	bne.n	800589a <I2C_Master_ADDR+0x166>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	2b01      	cmp	r3, #1
 8005898:	d125      	bne.n	80058e6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800589a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589c:	2b04      	cmp	r3, #4
 800589e:	d00e      	beq.n	80058be <I2C_Master_ADDR+0x18a>
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d00b      	beq.n	80058be <I2C_Master_ADDR+0x18a>
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d008      	beq.n	80058be <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e007      	b.n	80058ce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	61fb      	str	r3, [r7, #28]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	e0a1      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	e085      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d14d      	bne.n	80059c4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b04      	cmp	r3, #4
 800592c:	d016      	beq.n	800595c <I2C_Master_ADDR+0x228>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	2b02      	cmp	r3, #2
 8005932:	d013      	beq.n	800595c <I2C_Master_ADDR+0x228>
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	2b10      	cmp	r3, #16
 8005938:	d010      	beq.n	800595c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005948:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e007      	b.n	800596c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800596a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d117      	bne.n	80059ac <I2C_Master_ADDR+0x278>
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005982:	d00b      	beq.n	800599c <I2C_Master_ADDR+0x268>
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	2b01      	cmp	r3, #1
 8005988:	d008      	beq.n	800599c <I2C_Master_ADDR+0x268>
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	2b08      	cmp	r3, #8
 800598e:	d005      	beq.n	800599c <I2C_Master_ADDR+0x268>
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	2b10      	cmp	r3, #16
 8005994:	d002      	beq.n	800599c <I2C_Master_ADDR+0x268>
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	2b20      	cmp	r3, #32
 800599a:	d107      	bne.n	80059ac <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	e032      	b.n	8005a2a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059d2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059e2:	d117      	bne.n	8005a14 <I2C_Master_ADDR+0x2e0>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059ea:	d00b      	beq.n	8005a04 <I2C_Master_ADDR+0x2d0>
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d008      	beq.n	8005a04 <I2C_Master_ADDR+0x2d0>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d005      	beq.n	8005a04 <I2C_Master_ADDR+0x2d0>
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d002      	beq.n	8005a04 <I2C_Master_ADDR+0x2d0>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d107      	bne.n	8005a14 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a30:	e00b      	b.n	8005a4a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	e7ff      	b.n	8005a4a <I2C_Master_ADDR+0x316>
 8005a4a:	bf00      	nop
 8005a4c:	3744      	adds	r7, #68	; 0x44
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02b      	beq.n	8005ac8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	781a      	ldrb	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	1c5a      	adds	r2, r3, #1
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <I2C_SlaveTransmit_TXE+0x72>
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b29      	cmp	r3, #41	; 0x29
 8005aa2:	d111      	bne.n	8005ac8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2221      	movs	r2, #33	; 0x21
 8005ab8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2228      	movs	r2, #40	; 0x28
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff f9e7 	bl	8004e96 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d011      	beq.n	8005b06 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b20:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d02c      	beq.n	8005b86 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d114      	bne.n	8005b86 <I2C_SlaveReceive_RXNE+0x74>
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b60:	d111      	bne.n	8005b86 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2222      	movs	r2, #34	; 0x22
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2228      	movs	r2, #40	; 0x28
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff f992 	bl	8004eaa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d012      	beq.n	8005bc6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bec:	2b28      	cmp	r3, #40	; 0x28
 8005bee:	d127      	bne.n	8005c40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	089b      	lsrs	r3, r3, #2
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	09db      	lsrs	r3, r3, #7
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	81bb      	strh	r3, [r7, #12]
 8005c22:	e002      	b.n	8005c2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c32:	89ba      	ldrh	r2, [r7, #12]
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff f940 	bl	8004ebe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c3e:	e00e      	b.n	8005c5e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	60bb      	str	r3, [r7, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc4:	d172      	bne.n	8005dac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b22      	cmp	r3, #34	; 0x22
 8005cca:	d002      	beq.n	8005cd2 <I2C_Slave_STOPF+0x6a>
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b2a      	cmp	r3, #42	; 0x2a
 8005cd0:	d135      	bne.n	8005d3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f043 0204 	orr.w	r2, r3, #4
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe f836 	bl	8003d7c <HAL_DMA_GetState>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d049      	beq.n	8005daa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	4a69      	ldr	r2, [pc, #420]	; (8005ec0 <I2C_Slave_STOPF+0x258>)
 8005d1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd fe7e 	bl	8003a24 <HAL_DMA_Abort_IT>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d03d      	beq.n	8005daa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d3c:	e035      	b.n	8005daa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f043 0204 	orr.w	r2, r3, #4
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe f800 	bl	8003d7c <HAL_DMA_GetState>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d014      	beq.n	8005dac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	4a4e      	ldr	r2, [pc, #312]	; (8005ec0 <I2C_Slave_STOPF+0x258>)
 8005d88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fd fe48 	bl	8003a24 <HAL_DMA_Abort_IT>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005da4:	4610      	mov	r0, r2
 8005da6:	4798      	blx	r3
 8005da8:	e000      	b.n	8005dac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005daa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d03e      	beq.n	8005e34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d112      	bne.n	8005dea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d112      	bne.n	8005e1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f043 0204 	orr.w	r2, r3, #4
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f843 	bl	8005ec8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e42:	e039      	b.n	8005eb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b2a      	cmp	r3, #42	; 0x2a
 8005e48:	d109      	bne.n	8005e5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2228      	movs	r2, #40	; 0x28
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f826 	bl	8004eaa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b28      	cmp	r3, #40	; 0x28
 8005e68:	d111      	bne.n	8005e8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <I2C_Slave_STOPF+0x25c>)
 8005e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff f827 	bl	8004eda <HAL_I2C_ListenCpltCallback>
}
 8005e8c:	e014      	b.n	8005eb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	2b22      	cmp	r3, #34	; 0x22
 8005e94:	d002      	beq.n	8005e9c <I2C_Slave_STOPF+0x234>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b22      	cmp	r3, #34	; 0x22
 8005e9a:	d10d      	bne.n	8005eb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7fe fff9 	bl	8004eaa <HAL_I2C_SlaveRxCpltCallback>
}
 8005eb8:	bf00      	nop
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	08006429 	.word	0x08006429
 8005ec4:	ffff0000 	.word	0xffff0000

08005ec8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ede:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	2b10      	cmp	r3, #16
 8005ee4:	d002      	beq.n	8005eec <I2C_ITError+0x24>
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d10a      	bne.n	8005f02 <I2C_ITError+0x3a>
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	2b22      	cmp	r3, #34	; 0x22
 8005ef0:	d107      	bne.n	8005f02 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f00:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f08:	2b28      	cmp	r3, #40	; 0x28
 8005f0a:	d107      	bne.n	8005f1c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2228      	movs	r2, #40	; 0x28
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f1a:	e015      	b.n	8005f48 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2a:	d00a      	beq.n	8005f42 <I2C_ITError+0x7a>
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b60      	cmp	r3, #96	; 0x60
 8005f30:	d007      	beq.n	8005f42 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f56:	d162      	bne.n	800601e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f66:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d020      	beq.n	8005fb8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	4a6a      	ldr	r2, [pc, #424]	; (8006124 <I2C_ITError+0x25c>)
 8005f7c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fd fd4e 	bl	8003a24 <HAL_DMA_Abort_IT>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 8089 	beq.w	80060a2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4798      	blx	r3
 8005fb6:	e074      	b.n	80060a2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	4a59      	ldr	r2, [pc, #356]	; (8006124 <I2C_ITError+0x25c>)
 8005fbe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fd fd2d 	bl	8003a24 <HAL_DMA_Abort_IT>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d068      	beq.n	80060a2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d10b      	bne.n	8005ff6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006018:	4610      	mov	r0, r2
 800601a:	4798      	blx	r3
 800601c:	e041      	b.n	80060a2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b60      	cmp	r3, #96	; 0x60
 8006028:	d125      	bne.n	8006076 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d10b      	bne.n	800605e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fe ff5b 	bl	8004f2a <HAL_I2C_AbortCpltCallback>
 8006074:	e015      	b.n	80060a2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d10b      	bne.n	800609c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fe ff3a 	bl	8004f16 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10e      	bne.n	80060d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d104      	bne.n	80060d0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060de:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	d113      	bne.n	800611c <I2C_ITError+0x254>
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b28      	cmp	r3, #40	; 0x28
 80060f8:	d110      	bne.n	800611c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <I2C_ITError+0x260>)
 80060fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7fe fedf 	bl	8004eda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	08006429 	.word	0x08006429
 8006128:	ffff0000 	.word	0xffff0000

0800612c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4603      	mov	r3, r0
 800613c:	817b      	strh	r3, [r7, #10]
 800613e:	460b      	mov	r3, r1
 8006140:	813b      	strh	r3, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2200      	movs	r2, #0
 800615e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fa08 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00d      	beq.n	800618a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617c:	d103      	bne.n	8006186 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e05f      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800618a:	897b      	ldrh	r3, [r7, #10]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	461a      	mov	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	492d      	ldr	r1, [pc, #180]	; (8006254 <I2C_RequestMemoryWrite+0x128>)
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 fa40 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e04c      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c8:	6a39      	ldr	r1, [r7, #32]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 faaa 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00d      	beq.n	80061f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d107      	bne.n	80061ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e02b      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d105      	bne.n	8006204 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061f8:	893b      	ldrh	r3, [r7, #8]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	611a      	str	r2, [r3, #16]
 8006202:	e021      	b.n	8006248 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006204:	893b      	ldrh	r3, [r7, #8]
 8006206:	0a1b      	lsrs	r3, r3, #8
 8006208:	b29b      	uxth	r3, r3
 800620a:	b2da      	uxtb	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006214:	6a39      	ldr	r1, [r7, #32]
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fa84 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00d      	beq.n	800623e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	2b04      	cmp	r3, #4
 8006228:	d107      	bne.n	800623a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e005      	b.n	800624a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800623e:	893b      	ldrh	r3, [r7, #8]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	00010002 	.word	0x00010002

08006258 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af02      	add	r7, sp, #8
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	4608      	mov	r0, r1
 8006262:	4611      	mov	r1, r2
 8006264:	461a      	mov	r2, r3
 8006266:	4603      	mov	r3, r0
 8006268:	817b      	strh	r3, [r7, #10]
 800626a:	460b      	mov	r3, r1
 800626c:	813b      	strh	r3, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006280:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	2200      	movs	r2, #0
 800629a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f96a 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b8:	d103      	bne.n	80062c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e0aa      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	4952      	ldr	r1, [pc, #328]	; (8006424 <I2C_RequestMemoryRead+0x1cc>)
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f9a2 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e097      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	6a39      	ldr	r1, [r7, #32]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa0c 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	2b04      	cmp	r3, #4
 8006318:	d107      	bne.n	800632a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006328:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e076      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632e:	88fb      	ldrh	r3, [r7, #6]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006334:	893b      	ldrh	r3, [r7, #8]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	611a      	str	r2, [r3, #16]
 800633e:	e021      	b.n	8006384 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 f9e6 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b04      	cmp	r3, #4
 8006364:	d107      	bne.n	8006376 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006374:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e050      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800637a:	893b      	ldrh	r3, [r7, #8]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006386:	6a39      	ldr	r1, [r7, #32]
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f9cb 	bl	8006724 <I2C_WaitOnTXEFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b04      	cmp	r3, #4
 800639a:	d107      	bne.n	80063ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e035      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f8d3 	bl	8006578 <I2C_WaitOnFlagUntilTimeout>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00d      	beq.n	80063f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063e6:	d103      	bne.n	80063f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e013      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063f4:	897b      	ldrh	r3, [r7, #10]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	6a3a      	ldr	r2, [r7, #32]
 8006408:	4906      	ldr	r1, [pc, #24]	; (8006424 <I2C_RequestMemoryRead+0x1cc>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f90b 	bl	8006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	00010002 	.word	0x00010002

08006428 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006442:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <I2C_DMAAbort+0x148>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	08db      	lsrs	r3, r3, #3
 8006448:	4a4a      	ldr	r2, [pc, #296]	; (8006574 <I2C_DMAAbort+0x14c>)
 800644a:	fba2 2303 	umull	r2, r3, r2, r3
 800644e:	0a1a      	lsrs	r2, r3, #8
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00da      	lsls	r2, r3, #3
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800646e:	e00a      	b.n	8006486 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3b01      	subs	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d0ea      	beq.n	800645c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006492:	2200      	movs	r2, #0
 8006494:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	2200      	movs	r2, #0
 80064a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c8:	2200      	movs	r2, #0
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	2200      	movs	r2, #0
 80064da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b60      	cmp	r3, #96	; 0x60
 80064f6:	d10e      	bne.n	8006516 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2200      	movs	r2, #0
 800650c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f7fe fd0b 	bl	8004f2a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006514:	e027      	b.n	8006566 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651c:	2b28      	cmp	r3, #40	; 0x28
 800651e:	d117      	bne.n	8006550 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2228      	movs	r2, #40	; 0x28
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800654e:	e007      	b.n	8006560 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006560:	6978      	ldr	r0, [r7, #20]
 8006562:	f7fe fcd8 	bl	8004f16 <HAL_I2C_ErrorCallback>
}
 8006566:	bf00      	nop
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000000 	.word	0x20000000
 8006574:	14f8b589 	.word	0x14f8b589

08006578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006588:	e025      	b.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006590:	d021      	beq.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fc fafd 	bl	8002b90 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d116      	bne.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f043 0220 	orr.w	r2, r3, #32
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e023      	b.n	800661e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10d      	bne.n	80065fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	43da      	mvns	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	4013      	ands	r3, r2
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bf0c      	ite	eq
 80065f2:	2301      	moveq	r3, #1
 80065f4:	2300      	movne	r3, #0
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	e00c      	b.n	8006616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	43da      	mvns	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf0c      	ite	eq
 800660e:	2301      	moveq	r3, #1
 8006610:	2300      	movne	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	429a      	cmp	r2, r3
 800661a:	d0b6      	beq.n	800658a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006634:	e051      	b.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d123      	bne.n	800668e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800665e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	f043 0204 	orr.w	r2, r3, #4
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e046      	b.n	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006694:	d021      	beq.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006696:	f7fc fa7b 	bl	8002b90 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d302      	bcc.n	80066ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d116      	bne.n	80066da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f043 0220 	orr.w	r2, r3, #32
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e020      	b.n	800671c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d10c      	bne.n	80066fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	43da      	mvns	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf14      	ite	ne
 80066f6:	2301      	movne	r3, #1
 80066f8:	2300      	moveq	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	e00b      	b.n	8006716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	43da      	mvns	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4013      	ands	r3, r2
 800670a:	b29b      	uxth	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	bf14      	ite	ne
 8006710:	2301      	movne	r3, #1
 8006712:	2300      	moveq	r3, #0
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d18d      	bne.n	8006636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006730:	e02d      	b.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f900 	bl	8006938 <I2C_IsAcknowledgeFailed>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e02d      	b.n	800679e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006748:	d021      	beq.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fc fa21 	bl	8002b90 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d116      	bne.n	800678e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e007      	b.n	800679e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006798:	2b80      	cmp	r3, #128	; 0x80
 800679a:	d1ca      	bne.n	8006732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067b2:	e02d      	b.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f8bf 	bl	8006938 <I2C_IsAcknowledgeFailed>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e02d      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ca:	d021      	beq.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067cc:	f7fc f9e0 	bl	8002b90 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d116      	bne.n	8006810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e007      	b.n	8006820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	2b04      	cmp	r3, #4
 800681c:	d1ca      	bne.n	80067b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006834:	4b13      	ldr	r3, [pc, #76]	; (8006884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	08db      	lsrs	r3, r3, #3
 800683a:	4a13      	ldr	r2, [pc, #76]	; (8006888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	0a1a      	lsrs	r2, r3, #8
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3b01      	subs	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e008      	b.n	8006878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006874:	d0e9      	beq.n	800684a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	20000000 	.word	0x20000000
 8006888:	14f8b589 	.word	0x14f8b589

0800688c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006898:	e042      	b.n	8006920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695b      	ldr	r3, [r3, #20]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2b10      	cmp	r3, #16
 80068a6:	d119      	bne.n	80068dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f06f 0210 	mvn.w	r2, #16
 80068b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e029      	b.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fc f958 	bl	8002b90 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692a:	2b40      	cmp	r3, #64	; 0x40
 800692c:	d1b5      	bne.n	800689a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800694a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694e:	d11b      	bne.n	8006988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	f043 0204 	orr.w	r2, r3, #4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006996:	b480      	push	{r7}
 8006998:	b083      	sub	sp, #12
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80069a6:	d103      	bne.n	80069b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80069ae:	e007      	b.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80069b8:	d102      	bne.n	80069c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2208      	movs	r2, #8
 80069be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e267      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d075      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ea:	4b88      	ldr	r3, [pc, #544]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d00c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069f6:	4b85      	ldr	r3, [pc, #532]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d112      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a02:	4b82      	ldr	r3, [pc, #520]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a0e:	d10b      	bne.n	8006a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a10:	4b7e      	ldr	r3, [pc, #504]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d05b      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x108>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d157      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e242      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a30:	d106      	bne.n	8006a40 <HAL_RCC_OscConfig+0x74>
 8006a32:	4b76      	ldr	r3, [pc, #472]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a75      	ldr	r2, [pc, #468]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e01d      	b.n	8006a7c <HAL_RCC_OscConfig+0xb0>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a48:	d10c      	bne.n	8006a64 <HAL_RCC_OscConfig+0x98>
 8006a4a:	4b70      	ldr	r3, [pc, #448]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a6f      	ldr	r2, [pc, #444]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	4b6d      	ldr	r3, [pc, #436]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a6c      	ldr	r2, [pc, #432]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e00b      	b.n	8006a7c <HAL_RCC_OscConfig+0xb0>
 8006a64:	4b69      	ldr	r3, [pc, #420]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a68      	ldr	r2, [pc, #416]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d013      	beq.n	8006aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a84:	f7fc f884 	bl	8002b90 <HAL_GetTick>
 8006a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fc f880 	bl	8002b90 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b64      	cmp	r3, #100	; 0x64
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e207      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d0f0      	beq.n	8006a8c <HAL_RCC_OscConfig+0xc0>
 8006aaa:	e014      	b.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aac:	f7fc f870 	bl	8002b90 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab2:	e008      	b.n	8006ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ab4:	f7fc f86c 	bl	8002b90 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b64      	cmp	r3, #100	; 0x64
 8006ac0:	d901      	bls.n	8006ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1f3      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ac6:	4b51      	ldr	r3, [pc, #324]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f0      	bne.n	8006ab4 <HAL_RCC_OscConfig+0xe8>
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d063      	beq.n	8006baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ae2:	4b4a      	ldr	r3, [pc, #296]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 030c 	and.w	r3, r3, #12
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aee:	4b47      	ldr	r3, [pc, #284]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d11c      	bne.n	8006b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006afa:	4b44      	ldr	r3, [pc, #272]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d116      	bne.n	8006b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b06:	4b41      	ldr	r3, [pc, #260]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_RCC_OscConfig+0x152>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d001      	beq.n	8006b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e1c7      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4937      	ldr	r1, [pc, #220]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b32:	e03a      	b.n	8006baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d020      	beq.n	8006b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b3c:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <HAL_RCC_OscConfig+0x244>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b42:	f7fc f825 	bl	8002b90 <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b48:	e008      	b.n	8006b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b4a:	f7fc f821 	bl	8002b90 <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d901      	bls.n	8006b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e1a8      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0f0      	beq.n	8006b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b68:	4b28      	ldr	r3, [pc, #160]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	4925      	ldr	r1, [pc, #148]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	600b      	str	r3, [r1, #0]
 8006b7c:	e015      	b.n	8006baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b7e:	4b24      	ldr	r3, [pc, #144]	; (8006c10 <HAL_RCC_OscConfig+0x244>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b84:	f7fc f804 	bl	8002b90 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b8c:	f7fc f800 	bl	8002b90 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e187      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b9e:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d036      	beq.n	8006c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bbe:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <HAL_RCC_OscConfig+0x248>)
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc4:	f7fb ffe4 	bl	8002b90 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bcc:	f7fb ffe0 	bl	8002b90 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e167      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCC_OscConfig+0x240>)
 8006be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0f0      	beq.n	8006bcc <HAL_RCC_OscConfig+0x200>
 8006bea:	e01b      	b.n	8006c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <HAL_RCC_OscConfig+0x248>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf2:	f7fb ffcd 	bl	8002b90 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf8:	e00e      	b.n	8006c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bfa:	f7fb ffc9 	bl	8002b90 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d907      	bls.n	8006c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e150      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
 8006c0c:	40023800 	.word	0x40023800
 8006c10:	42470000 	.word	0x42470000
 8006c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c18:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ea      	bne.n	8006bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8097 	beq.w	8006d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c36:	4b81      	ldr	r3, [pc, #516]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10f      	bne.n	8006c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	4b7d      	ldr	r3, [pc, #500]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	4a7c      	ldr	r2, [pc, #496]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c50:	6413      	str	r3, [r2, #64]	; 0x40
 8006c52:	4b7a      	ldr	r3, [pc, #488]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c5a:	60bb      	str	r3, [r7, #8]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c62:	4b77      	ldr	r3, [pc, #476]	; (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d118      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6e:	4b74      	ldr	r3, [pc, #464]	; (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a73      	ldr	r2, [pc, #460]	; (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c7a:	f7fb ff89 	bl	8002b90 <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c80:	e008      	b.n	8006c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c82:	f7fb ff85 	bl	8002b90 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e10c      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c94:	4b6a      	ldr	r3, [pc, #424]	; (8006e40 <HAL_RCC_OscConfig+0x474>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d106      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x2ea>
 8006ca8:	4b64      	ldr	r3, [pc, #400]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	4a63      	ldr	r2, [pc, #396]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb4:	e01c      	b.n	8006cf0 <HAL_RCC_OscConfig+0x324>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d10c      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x30c>
 8006cbe:	4b5f      	ldr	r3, [pc, #380]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc2:	4a5e      	ldr	r2, [pc, #376]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cca:	4b5c      	ldr	r3, [pc, #368]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	4a5b      	ldr	r2, [pc, #364]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd6:	e00b      	b.n	8006cf0 <HAL_RCC_OscConfig+0x324>
 8006cd8:	4b58      	ldr	r3, [pc, #352]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cdc:	4a57      	ldr	r2, [pc, #348]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce4:	4b55      	ldr	r3, [pc, #340]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce8:	4a54      	ldr	r2, [pc, #336]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006cea:	f023 0304 	bic.w	r3, r3, #4
 8006cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fb ff4a 	bl	8002b90 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfe:	e00a      	b.n	8006d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d00:	f7fb ff46 	bl	8002b90 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e0cb      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d16:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ee      	beq.n	8006d00 <HAL_RCC_OscConfig+0x334>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d24:	f7fb ff34 	bl	8002b90 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d2a:	e00a      	b.n	8006d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d2c:	f7fb ff30 	bl	8002b90 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e0b5      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d42:	4b3e      	ldr	r3, [pc, #248]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ee      	bne.n	8006d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d105      	bne.n	8006d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d54:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 80a1 	beq.w	8006eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d6a:	4b34      	ldr	r3, [pc, #208]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 030c 	and.w	r3, r3, #12
 8006d72:	2b08      	cmp	r3, #8
 8006d74:	d05c      	beq.n	8006e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d141      	bne.n	8006e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d7e:	4b31      	ldr	r3, [pc, #196]	; (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d84:	f7fb ff04 	bl	8002b90 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d8c:	f7fb ff00 	bl	8002b90 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e087      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d9e:	4b27      	ldr	r3, [pc, #156]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f0      	bne.n	8006d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	019b      	lsls	r3, r3, #6
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	041b      	lsls	r3, r3, #16
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	491b      	ldr	r1, [pc, #108]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dd4:	4b1b      	ldr	r3, [pc, #108]	; (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dda:	f7fb fed9 	bl	8002b90 <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de0:	e008      	b.n	8006df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006de2:	f7fb fed5 	bl	8002b90 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e05c      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <HAL_RCC_OscConfig+0x416>
 8006e00:	e054      	b.n	8006eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e02:	4b10      	ldr	r3, [pc, #64]	; (8006e44 <HAL_RCC_OscConfig+0x478>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e08:	f7fb fec2 	bl	8002b90 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fb febe 	bl	8002b90 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e045      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <HAL_RCC_OscConfig+0x470>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x444>
 8006e2e:	e03d      	b.n	8006eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d107      	bne.n	8006e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e038      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	40007000 	.word	0x40007000
 8006e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e48:	4b1b      	ldr	r3, [pc, #108]	; (8006eb8 <HAL_RCC_OscConfig+0x4ec>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d028      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d121      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d11a      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d111      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	3b01      	subs	r3, #1
 8006e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d001      	beq.n	8006eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3718      	adds	r7, #24
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800

08006ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e0cc      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ed0:	4b68      	ldr	r3, [pc, #416]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d90c      	bls.n	8006ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ede:	4b65      	ldr	r3, [pc, #404]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b63      	ldr	r3, [pc, #396]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0b8      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d020      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f10:	4b59      	ldr	r3, [pc, #356]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4a58      	ldr	r2, [pc, #352]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f28:	4b53      	ldr	r3, [pc, #332]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a52      	ldr	r2, [pc, #328]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f34:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	494d      	ldr	r1, [pc, #308]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d044      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	4b47      	ldr	r3, [pc, #284]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d119      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e07f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d003      	beq.n	8006f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d107      	bne.n	8006f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f7a:	4b3f      	ldr	r3, [pc, #252]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d109      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e06f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8a:	4b3b      	ldr	r3, [pc, #236]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e067      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f9a:	4b37      	ldr	r3, [pc, #220]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f023 0203 	bic.w	r2, r3, #3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4934      	ldr	r1, [pc, #208]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fac:	f7fb fdf0 	bl	8002b90 <HAL_GetTick>
 8006fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb2:	e00a      	b.n	8006fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fb4:	f7fb fdec 	bl	8002b90 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e04f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fca:	4b2b      	ldr	r3, [pc, #172]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 020c 	and.w	r2, r3, #12
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d1eb      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fdc:	4b25      	ldr	r3, [pc, #148]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d20c      	bcs.n	8007004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff2:	4b20      	ldr	r3, [pc, #128]	; (8007074 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e032      	b.n	800706a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007010:	4b19      	ldr	r3, [pc, #100]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4916      	ldr	r1, [pc, #88]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	490e      	ldr	r1, [pc, #56]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	4313      	orrs	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007042:	f000 f821 	bl	8007088 <HAL_RCC_GetSysClockFreq>
 8007046:	4602      	mov	r2, r0
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	091b      	lsrs	r3, r3, #4
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	490a      	ldr	r1, [pc, #40]	; (800707c <HAL_RCC_ClockConfig+0x1c0>)
 8007054:	5ccb      	ldrb	r3, [r1, r3]
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <HAL_RCC_ClockConfig+0x1c4>)
 800705c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCC_ClockConfig+0x1c8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fb fd50 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40023c00 	.word	0x40023c00
 8007078:	40023800 	.word	0x40023800
 800707c:	08008a24 	.word	0x08008a24
 8007080:	20000000 	.word	0x20000000
 8007084:	20000004 	.word	0x20000004

08007088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800708c:	b090      	sub	sp, #64	; 0x40
 800708e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
 8007094:	2300      	movs	r3, #0
 8007096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007098:	2300      	movs	r3, #0
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a0:	4b59      	ldr	r3, [pc, #356]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d00d      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0x40>
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	f200 80a1 	bhi.w	80071f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x34>
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d003      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ba:	e09b      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070bc:	4b53      	ldr	r3, [pc, #332]	; (800720c <HAL_RCC_GetSysClockFreq+0x184>)
 80070be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80070c0:	e09b      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070c2:	4b53      	ldr	r3, [pc, #332]	; (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 80070c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070c6:	e098      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070c8:	4b4f      	ldr	r3, [pc, #316]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070d2:	4b4d      	ldr	r3, [pc, #308]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d028      	beq.n	8007130 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070de:	4b4a      	ldr	r3, [pc, #296]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	2200      	movs	r2, #0
 80070e6:	623b      	str	r3, [r7, #32]
 80070e8:	627a      	str	r2, [r7, #36]	; 0x24
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80070f0:	2100      	movs	r1, #0
 80070f2:	4b47      	ldr	r3, [pc, #284]	; (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 80070f4:	fb03 f201 	mul.w	r2, r3, r1
 80070f8:	2300      	movs	r3, #0
 80070fa:	fb00 f303 	mul.w	r3, r0, r3
 80070fe:	4413      	add	r3, r2
 8007100:	4a43      	ldr	r2, [pc, #268]	; (8007210 <HAL_RCC_GetSysClockFreq+0x188>)
 8007102:	fba0 1202 	umull	r1, r2, r0, r2
 8007106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007108:	460a      	mov	r2, r1
 800710a:	62ba      	str	r2, [r7, #40]	; 0x28
 800710c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710e:	4413      	add	r3, r2
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	2200      	movs	r2, #0
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	61fa      	str	r2, [r7, #28]
 800711a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800711e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007122:	f7f9 fccf 	bl	8000ac4 <__aeabi_uldivmod>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4613      	mov	r3, r2
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800712e:	e053      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007130:	4b35      	ldr	r3, [pc, #212]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	099b      	lsrs	r3, r3, #6
 8007136:	2200      	movs	r2, #0
 8007138:	613b      	str	r3, [r7, #16]
 800713a:	617a      	str	r2, [r7, #20]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007142:	f04f 0b00 	mov.w	fp, #0
 8007146:	4652      	mov	r2, sl
 8007148:	465b      	mov	r3, fp
 800714a:	f04f 0000 	mov.w	r0, #0
 800714e:	f04f 0100 	mov.w	r1, #0
 8007152:	0159      	lsls	r1, r3, #5
 8007154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007158:	0150      	lsls	r0, r2, #5
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	ebb2 080a 	subs.w	r8, r2, sl
 8007162:	eb63 090b 	sbc.w	r9, r3, fp
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	f04f 0300 	mov.w	r3, #0
 800716e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800717a:	ebb2 0408 	subs.w	r4, r2, r8
 800717e:	eb63 0509 	sbc.w	r5, r3, r9
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	00eb      	lsls	r3, r5, #3
 800718c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007190:	00e2      	lsls	r2, r4, #3
 8007192:	4614      	mov	r4, r2
 8007194:	461d      	mov	r5, r3
 8007196:	eb14 030a 	adds.w	r3, r4, sl
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	eb45 030b 	adc.w	r3, r5, fp
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	f04f 0300 	mov.w	r3, #0
 80071aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071ae:	4629      	mov	r1, r5
 80071b0:	028b      	lsls	r3, r1, #10
 80071b2:	4621      	mov	r1, r4
 80071b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071b8:	4621      	mov	r1, r4
 80071ba:	028a      	lsls	r2, r1, #10
 80071bc:	4610      	mov	r0, r2
 80071be:	4619      	mov	r1, r3
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	2200      	movs	r2, #0
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	60fa      	str	r2, [r7, #12]
 80071c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071cc:	f7f9 fc7a 	bl	8000ac4 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4613      	mov	r3, r2
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_RCC_GetSysClockFreq+0x180>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	0c1b      	lsrs	r3, r3, #16
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	3301      	adds	r3, #1
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80071e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071f2:	e002      	b.n	80071fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <HAL_RCC_GetSysClockFreq+0x184>)
 80071f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3740      	adds	r7, #64	; 0x40
 8007200:	46bd      	mov	sp, r7
 8007202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800
 800720c:	00f42400 	.word	0x00f42400
 8007210:	017d7840 	.word	0x017d7840

08007214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007214:	b480      	push	{r7}
 8007216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007218:	4b03      	ldr	r3, [pc, #12]	; (8007228 <HAL_RCC_GetHCLKFreq+0x14>)
 800721a:	681b      	ldr	r3, [r3, #0]
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000000 	.word	0x20000000

0800722c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007230:	f7ff fff0 	bl	8007214 <HAL_RCC_GetHCLKFreq>
 8007234:	4602      	mov	r2, r0
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	0a9b      	lsrs	r3, r3, #10
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	4903      	ldr	r1, [pc, #12]	; (8007250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007242:	5ccb      	ldrb	r3, [r1, r3]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40023800 	.word	0x40023800
 8007250:	08008a34 	.word	0x08008a34

08007254 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e07b      	b.n	800735e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b00      	cmp	r3, #0
 800726c:	d108      	bne.n	8007280 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007276:	d009      	beq.n	800728c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	61da      	str	r2, [r3, #28]
 800727e:	e005      	b.n	800728c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb f914 	bl	80024d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072de:	431a      	orrs	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1b      	ldr	r3, [r3, #32]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	ea42 0103 	orr.w	r1, r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 0104 	and.w	r1, r3, #4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	f003 0210 	and.w	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800734c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007384:	2302      	movs	r3, #2
 8007386:	e0e3      	b.n	8007550 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007396:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800739e:	7dbb      	ldrb	r3, [r7, #22]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d00d      	beq.n	80073c0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073aa:	d106      	bne.n	80073ba <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d102      	bne.n	80073ba <HAL_SPI_TransmitReceive_DMA+0x52>
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	2b04      	cmp	r3, #4
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
 80073bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073be:	e0c2      	b.n	8007546 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80073cc:	887b      	ldrh	r3, [r7, #2]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073d6:	e0b6      	b.n	8007546 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d003      	beq.n	80073ec <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2205      	movs	r2, #5
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	887a      	ldrh	r2, [r7, #2]
 8007402:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	887a      	ldrh	r2, [r7, #2]
 800740e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b04      	cmp	r3, #4
 800742c:	d108      	bne.n	8007440 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007432:	4a49      	ldr	r2, [pc, #292]	; (8007558 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	4a48      	ldr	r2, [pc, #288]	; (800755c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800743c:	63da      	str	r2, [r3, #60]	; 0x3c
 800743e:	e007      	b.n	8007450 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007444:	4a46      	ldr	r2, [pc, #280]	; (8007560 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007446:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800744c:	4a45      	ldr	r2, [pc, #276]	; (8007564 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007454:	4a44      	ldr	r2, [pc, #272]	; (8007568 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800745c:	2200      	movs	r2, #0
 800745e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	330c      	adds	r3, #12
 800746a:	4619      	mov	r1, r3
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007476:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007478:	f7fc fa7c 	bl	8003974 <HAL_DMA_Start_IT>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00c      	beq.n	800749c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f043 0210 	orr.w	r2, r3, #16
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800749a:	e054      	b.n	8007546 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b0:	2200      	movs	r2, #0
 80074b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b8:	2200      	movs	r2, #0
 80074ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c0:	2200      	movs	r2, #0
 80074c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c8:	2200      	movs	r2, #0
 80074ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	4619      	mov	r1, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80074e4:	f7fc fa46 	bl	8003974 <HAL_DMA_Start_IT>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f2:	f043 0210 	orr.w	r2, r3, #16
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007506:	e01e      	b.n	8007546 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d007      	beq.n	8007526 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007524:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0220 	orr.w	r2, r2, #32
 8007534:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0202 	orr.w	r2, r2, #2
 8007544:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	080078f5 	.word	0x080078f5
 800755c:	080077bd 	.word	0x080077bd
 8007560:	08007911 	.word	0x08007911
 8007564:	08007865 	.word	0x08007865
 8007568:	0800792d 	.word	0x0800792d

0800756c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b088      	sub	sp, #32
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10f      	bne.n	80075b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	099b      	lsrs	r3, r3, #6
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	4798      	blx	r3
    return;
 80075ae:	e0d7      	b.n	8007760 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <HAL_SPI_IRQHandler+0x66>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	09db      	lsrs	r3, r3, #7
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d004      	beq.n	80075d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	4798      	blx	r3
    return;
 80075d0:	e0c6      	b.n	8007760 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	095b      	lsrs	r3, r3, #5
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10c      	bne.n	80075f8 <HAL_SPI_IRQHandler+0x8c>
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	099b      	lsrs	r3, r3, #6
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80b4 	beq.w	8007760 <HAL_SPI_IRQHandler+0x1f4>
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80ad 	beq.w	8007760 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	099b      	lsrs	r3, r3, #6
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d023      	beq.n	800765a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d011      	beq.n	8007642 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	f043 0204 	orr.w	r2, r3, #4
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	617b      	str	r3, [r7, #20]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	e00b      	b.n	800765a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007642:	2300      	movs	r3, #0
 8007644:	613b      	str	r3, [r7, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	613b      	str	r3, [r7, #16]
 8007656:	693b      	ldr	r3, [r7, #16]
        return;
 8007658:	e082      	b.n	8007760 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d014      	beq.n	8007690 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766a:	f043 0201 	orr.w	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a0:	f043 0208 	orr.w	r2, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076a8:	2300      	movs	r3, #0
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	60bb      	str	r3, [r7, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d04f      	beq.n	800775e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_SPI_IRQHandler+0x17e>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d034      	beq.n	8007754 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0203 	bic.w	r2, r2, #3
 80076f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d011      	beq.n	8007726 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <HAL_SPI_IRQHandler+0x1fc>)
 8007708:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800770e:	4618      	mov	r0, r3
 8007710:	f7fc f988 	bl	8003a24 <HAL_DMA_Abort_IT>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d005      	beq.n	8007726 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772a:	2b00      	cmp	r3, #0
 800772c:	d016      	beq.n	800775c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	4a0d      	ldr	r2, [pc, #52]	; (8007768 <HAL_SPI_IRQHandler+0x1fc>)
 8007734:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773a:	4618      	mov	r0, r3
 800773c:	f7fc f972 	bl	8003a24 <HAL_DMA_Abort_IT>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007752:	e003      	b.n	800775c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f827 	bl	80077a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800775a:	e000      	b.n	800775e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800775c:	bf00      	nop
    return;
 800775e:	bf00      	nop
  }
}
 8007760:	3720      	adds	r7, #32
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	0800796d 	.word	0x0800796d

0800776c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ca:	f7fb f9e1 	bl	8002b90 <HAL_GetTick>
 80077ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077de:	d03b      	beq.n	8007858 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0220 	bic.w	r2, r2, #32
 80077ee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10d      	bne.n	8007814 <SPI_DMAReceiveCplt+0x58>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007800:	d108      	bne.n	8007814 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0203 	bic.w	r2, r2, #3
 8007810:	605a      	str	r2, [r3, #4]
 8007812:	e007      	b.n	8007824 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0201 	bic.w	r2, r2, #1
 8007822:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	2164      	movs	r1, #100	; 0x64
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f93b 	bl	8007aa4 <SPI_EndRxTransaction>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff ffa9 	bl	80077a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007856:	e002      	b.n	800785e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff ff87 	bl	800776c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007872:	f7fb f98d 	bl	8002b90 <HAL_GetTick>
 8007876:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007886:	d02f      	beq.n	80078e8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0220 	bic.w	r2, r2, #32
 8007896:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	2164      	movs	r1, #100	; 0x64
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f000 f967 	bl	8007b70 <SPI_EndRxTxTransaction>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d005      	beq.n	80078b4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0203 	bic.w	r2, r2, #3
 80078c2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7ff ff61 	bl	80077a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078e6:	e002      	b.n	80078ee <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7fa fba1 	bl	8002030 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7ff ff3c 	bl	8007780 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007908:	bf00      	nop
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f7ff ff38 	bl	8007794 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0203 	bic.w	r2, r2, #3
 8007948:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f043 0210 	orr.w	r2, r3, #16
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff ff22 	bl	80077a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ff0e 	bl	80077a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b088      	sub	sp, #32
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4613      	mov	r3, r2
 80079a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079a4:	f7fb f8f4 	bl	8002b90 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ac:	1a9b      	subs	r3, r3, r2
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4413      	add	r3, r2
 80079b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079b4:	f7fb f8ec 	bl	8002b90 <HAL_GetTick>
 80079b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ba:	4b39      	ldr	r3, [pc, #228]	; (8007aa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	015b      	lsls	r3, r3, #5
 80079c0:	0d1b      	lsrs	r3, r3, #20
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	fb02 f303 	mul.w	r3, r2, r3
 80079c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ca:	e054      	b.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d2:	d050      	beq.n	8007a76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079d4:	f7fb f8dc 	bl	8002b90 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d902      	bls.n	80079ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d13d      	bne.n	8007a66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a02:	d111      	bne.n	8007a28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0c:	d004      	beq.n	8007a18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a16:	d107      	bne.n	8007a28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a30:	d10f      	bne.n	8007a52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a40:	601a      	str	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e017      	b.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	bf0c      	ite	eq
 8007a86:	2301      	moveq	r3, #1
 8007a88:	2300      	movne	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d19b      	bne.n	80079cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3720      	adds	r7, #32
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000000 	.word	0x20000000

08007aa4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af02      	add	r7, sp, #8
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ab8:	d111      	bne.n	8007ade <SPI_EndRxTransaction+0x3a>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac2:	d004      	beq.n	8007ace <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	d107      	bne.n	8007ade <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007adc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae6:	d12a      	bne.n	8007b3e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af0:	d012      	beq.n	8007b18 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff ff49 	bl	8007994 <SPI_WaitFlagStateUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d02d      	beq.n	8007b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b0c:	f043 0220 	orr.w	r2, r3, #32
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e026      	b.n	8007b66 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2101      	movs	r1, #1
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff ff36 	bl	8007994 <SPI_WaitFlagStateUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01a      	beq.n	8007b64 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f043 0220 	orr.w	r2, r3, #32
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e013      	b.n	8007b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2101      	movs	r1, #1
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff ff23 	bl	8007994 <SPI_WaitFlagStateUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b58:	f043 0220 	orr.w	r2, r3, #32
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e000      	b.n	8007b66 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b7c:	4b1b      	ldr	r3, [pc, #108]	; (8007bec <SPI_EndRxTxTransaction+0x7c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1b      	ldr	r2, [pc, #108]	; (8007bf0 <SPI_EndRxTxTransaction+0x80>)
 8007b82:	fba2 2303 	umull	r2, r3, r2, r3
 8007b86:	0d5b      	lsrs	r3, r3, #21
 8007b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b8c:	fb02 f303 	mul.w	r3, r2, r3
 8007b90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b9a:	d112      	bne.n	8007bc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	2180      	movs	r1, #128	; 0x80
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff fef4 	bl	8007994 <SPI_WaitFlagStateUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d016      	beq.n	8007be0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb6:	f043 0220 	orr.w	r2, r3, #32
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e00f      	b.n	8007be2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd8:	2b80      	cmp	r3, #128	; 0x80
 8007bda:	d0f2      	beq.n	8007bc2 <SPI_EndRxTxTransaction+0x52>
 8007bdc:	e000      	b.n	8007be0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bde:	bf00      	nop
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000000 	.word	0x20000000
 8007bf0:	165e9f81 	.word	0x165e9f81

08007bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e041      	b.n	8007c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa fed6 	bl	80029cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f000 fae2 	bl	80081fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
	...

08007c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d001      	beq.n	8007cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e03c      	b.n	8007d26 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <HAL_TIM_Base_Start+0xa0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d018      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x5c>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc6:	d013      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x5c>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1a      	ldr	r2, [pc, #104]	; (8007d38 <HAL_TIM_Base_Start+0xa4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00e      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x5c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <HAL_TIM_Base_Start+0xa8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x5c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a17      	ldr	r2, [pc, #92]	; (8007d40 <HAL_TIM_Base_Start+0xac>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x5c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <HAL_TIM_Base_Start+0xb0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d111      	bne.n	8007d14 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b06      	cmp	r3, #6
 8007d00:	d010      	beq.n	8007d24 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0201 	orr.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d12:	e007      	b.n	8007d24 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40014000 	.word	0x40014000

08007d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d001      	beq.n	8007d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e044      	b.n	8007dea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d018      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d013      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_TIM_Base_Start_IT+0xb4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00e      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d009      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_TIM_Base_Start_IT+0xbc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d004      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0x6c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a16      	ldr	r2, [pc, #88]	; (8007e08 <HAL_TIM_Base_Start_IT+0xc0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d111      	bne.n	8007dd8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	d010      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	e007      	b.n	8007de8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	40010000 	.word	0x40010000
 8007dfc:	40000400 	.word	0x40000400
 8007e00:	40000800 	.word	0x40000800
 8007e04:	40000c00 	.word	0x40000c00
 8007e08:	40014000 	.word	0x40014000

08007e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d122      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d11b      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0202 	mvn.w	r2, #2
 8007e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9b5 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f9a7 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f9b8 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0204 	mvn.w	r2, #4
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f98b 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f97d 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f98e 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d122      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d11b      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0208 	mvn.w	r2, #8
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f961 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f953 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f964 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d122      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d11b      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0210 	mvn.w	r2, #16
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f937 	bl	80081be <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f929 	bl	80081aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 f93a 	bl	80081d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10e      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d107      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0201 	mvn.w	r2, #1
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7f9 ff88 	bl	8001ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fab2 	bl	8008520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d10e      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b40      	cmp	r3, #64	; 0x40
 8007fd6:	d107      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8ff 	bl	80081e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	f003 0320 	and.w	r3, r3, #32
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d10e      	bne.n	8008014 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b20      	cmp	r3, #32
 8008002:	d107      	bne.n	8008014 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f06f 0220 	mvn.w	r2, #32
 800800c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa7c 	bl	800850c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_TIM_ConfigClockSource+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e0b4      	b.n	80081a2 <HAL_TIM_ConfigClockSource+0x186>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800805e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008070:	d03e      	beq.n	80080f0 <HAL_TIM_ConfigClockSource+0xd4>
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	f200 8087 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	f000 8086 	beq.w	800818e <HAL_TIM_ConfigClockSource+0x172>
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d87f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b70      	cmp	r3, #112	; 0x70
 800808a:	d01a      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0xa6>
 800808c:	2b70      	cmp	r3, #112	; 0x70
 800808e:	d87b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d050      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x11a>
 8008094:	2b60      	cmp	r3, #96	; 0x60
 8008096:	d877      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 8008098:	2b50      	cmp	r3, #80	; 0x50
 800809a:	d03c      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0xfa>
 800809c:	2b50      	cmp	r3, #80	; 0x50
 800809e:	d873      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d058      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x13a>
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d86f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d064      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x15a>
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d86b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d060      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x15a>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d867      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05c      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x15a>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d05a      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x15a>
 80080c0:	e062      	b.n	8008188 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6899      	ldr	r1, [r3, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f000 f98d 	bl	80083f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	609a      	str	r2, [r3, #8]
      break;
 80080ee:	e04f      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6899      	ldr	r1, [r3, #8]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f000 f976 	bl	80083f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008112:	609a      	str	r2, [r3, #8]
      break;
 8008114:	e03c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	461a      	mov	r2, r3
 8008124:	f000 f8ea 	bl	80082fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2150      	movs	r1, #80	; 0x50
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f943 	bl	80083ba <TIM_ITRx_SetConfig>
      break;
 8008134:	e02c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6859      	ldr	r1, [r3, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	461a      	mov	r2, r3
 8008144:	f000 f909 	bl	800835a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2160      	movs	r1, #96	; 0x60
 800814e:	4618      	mov	r0, r3
 8008150:	f000 f933 	bl	80083ba <TIM_ITRx_SetConfig>
      break;
 8008154:	e01c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	461a      	mov	r2, r3
 8008164:	f000 f8ca 	bl	80082fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f923 	bl	80083ba <TIM_ITRx_SetConfig>
      break;
 8008174:	e00c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f000 f91a 	bl	80083ba <TIM_ITRx_SetConfig>
      break;
 8008186:	e003      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
      break;
 800818c:	e000      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800818e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b083      	sub	sp, #12
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081b2:	bf00      	nop
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
	...

080081fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a34      	ldr	r2, [pc, #208]	; (80082e0 <TIM_Base_SetConfig+0xe4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00f      	beq.n	8008234 <TIM_Base_SetConfig+0x38>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d00b      	beq.n	8008234 <TIM_Base_SetConfig+0x38>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a31      	ldr	r2, [pc, #196]	; (80082e4 <TIM_Base_SetConfig+0xe8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <TIM_Base_SetConfig+0x38>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a30      	ldr	r2, [pc, #192]	; (80082e8 <TIM_Base_SetConfig+0xec>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d003      	beq.n	8008234 <TIM_Base_SetConfig+0x38>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a2f      	ldr	r2, [pc, #188]	; (80082ec <TIM_Base_SetConfig+0xf0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d108      	bne.n	8008246 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a25      	ldr	r2, [pc, #148]	; (80082e0 <TIM_Base_SetConfig+0xe4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01b      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008254:	d017      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a22      	ldr	r2, [pc, #136]	; (80082e4 <TIM_Base_SetConfig+0xe8>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d013      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a21      	ldr	r2, [pc, #132]	; (80082e8 <TIM_Base_SetConfig+0xec>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00f      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a20      	ldr	r2, [pc, #128]	; (80082ec <TIM_Base_SetConfig+0xf0>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00b      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1f      	ldr	r2, [pc, #124]	; (80082f0 <TIM_Base_SetConfig+0xf4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d007      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a1e      	ldr	r2, [pc, #120]	; (80082f4 <TIM_Base_SetConfig+0xf8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d003      	beq.n	8008286 <TIM_Base_SetConfig+0x8a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a1d      	ldr	r2, [pc, #116]	; (80082f8 <TIM_Base_SetConfig+0xfc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d108      	bne.n	8008298 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800828c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <TIM_Base_SetConfig+0xe4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d103      	bne.n	80082cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	615a      	str	r2, [r3, #20]
}
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800

080082fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f023 0201 	bic.w	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f023 030a 	bic.w	r3, r3, #10
 8008338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800835a:	b480      	push	{r7}
 800835c:	b087      	sub	sp, #28
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f023 0210 	bic.w	r2, r3, #16
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008384:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008396:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	4313      	orrs	r3, r2
 80083a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	621a      	str	r2, [r3, #32]
}
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f043 0307 	orr.w	r3, r3, #7
 80083dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	609a      	str	r2, [r3, #8]
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800840a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	021a      	lsls	r2, r3, #8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	431a      	orrs	r2, r3
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	4313      	orrs	r3, r2
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	609a      	str	r2, [r3, #8]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008444:	2302      	movs	r3, #2
 8008446:	e050      	b.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d018      	beq.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008494:	d013      	beq.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a18      	ldr	r2, [pc, #96]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00e      	beq.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a15      	ldr	r2, [pc, #84]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a13      	ldr	r2, [pc, #76]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d10c      	bne.n	80084d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40010000 	.word	0x40010000
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40000c00 	.word	0x40000c00
 8008508:	40014000 	.word	0x40014000

0800850c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <calloc>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <calloc+0xc>)
 8008536:	460a      	mov	r2, r1
 8008538:	4601      	mov	r1, r0
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	f000 b852 	b.w	80085e4 <_calloc_r>
 8008540:	2000000c 	.word	0x2000000c

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	2000000c 	.word	0x2000000c

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4d0d      	ldr	r5, [pc, #52]	; (8008588 <__libc_init_array+0x38>)
 8008554:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008556:	1b64      	subs	r4, r4, r5
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	2600      	movs	r6, #0
 800855c:	42a6      	cmp	r6, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	4d0b      	ldr	r5, [pc, #44]	; (8008590 <__libc_init_array+0x40>)
 8008562:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <__libc_init_array+0x44>)
 8008564:	f000 f952 	bl	800880c <_init>
 8008568:	1b64      	subs	r4, r4, r5
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	2600      	movs	r6, #0
 800856e:	42a6      	cmp	r6, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f855 3b04 	ldr.w	r3, [r5], #4
 8008578:	4798      	blx	r3
 800857a:	3601      	adds	r6, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008582:	4798      	blx	r3
 8008584:	3601      	adds	r6, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	08008a4c 	.word	0x08008a4c
 800858c:	08008a4c 	.word	0x08008a4c
 8008590:	08008a4c 	.word	0x08008a4c
 8008594:	08008a50 	.word	0x08008a50

08008598 <malloc>:
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <malloc+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f000 b8a3 	b.w	80086e8 <_malloc_r>
 80085a2:	bf00      	nop
 80085a4:	2000000c 	.word	0x2000000c

080085a8 <free>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <free+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f000 b82f 	b.w	8008610 <_free_r>
 80085b2:	bf00      	nop
 80085b4:	2000000c 	.word	0x2000000c

080085b8 <memcpy>:
 80085b8:	440a      	add	r2, r1
 80085ba:	4291      	cmp	r1, r2
 80085bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085c0:	d100      	bne.n	80085c4 <memcpy+0xc>
 80085c2:	4770      	bx	lr
 80085c4:	b510      	push	{r4, lr}
 80085c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ce:	4291      	cmp	r1, r2
 80085d0:	d1f9      	bne.n	80085c6 <memcpy+0xe>
 80085d2:	bd10      	pop	{r4, pc}

080085d4 <memset>:
 80085d4:	4402      	add	r2, r0
 80085d6:	4603      	mov	r3, r0
 80085d8:	4293      	cmp	r3, r2
 80085da:	d100      	bne.n	80085de <memset+0xa>
 80085dc:	4770      	bx	lr
 80085de:	f803 1b01 	strb.w	r1, [r3], #1
 80085e2:	e7f9      	b.n	80085d8 <memset+0x4>

080085e4 <_calloc_r>:
 80085e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085e6:	fba1 2402 	umull	r2, r4, r1, r2
 80085ea:	b94c      	cbnz	r4, 8008600 <_calloc_r+0x1c>
 80085ec:	4611      	mov	r1, r2
 80085ee:	9201      	str	r2, [sp, #4]
 80085f0:	f000 f87a 	bl	80086e8 <_malloc_r>
 80085f4:	9a01      	ldr	r2, [sp, #4]
 80085f6:	4605      	mov	r5, r0
 80085f8:	b930      	cbnz	r0, 8008608 <_calloc_r+0x24>
 80085fa:	4628      	mov	r0, r5
 80085fc:	b003      	add	sp, #12
 80085fe:	bd30      	pop	{r4, r5, pc}
 8008600:	220c      	movs	r2, #12
 8008602:	6002      	str	r2, [r0, #0]
 8008604:	2500      	movs	r5, #0
 8008606:	e7f8      	b.n	80085fa <_calloc_r+0x16>
 8008608:	4621      	mov	r1, r4
 800860a:	f7ff ffe3 	bl	80085d4 <memset>
 800860e:	e7f4      	b.n	80085fa <_calloc_r+0x16>

08008610 <_free_r>:
 8008610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008612:	2900      	cmp	r1, #0
 8008614:	d044      	beq.n	80086a0 <_free_r+0x90>
 8008616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861a:	9001      	str	r0, [sp, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f1a1 0404 	sub.w	r4, r1, #4
 8008622:	bfb8      	it	lt
 8008624:	18e4      	addlt	r4, r4, r3
 8008626:	f000 f8e3 	bl	80087f0 <__malloc_lock>
 800862a:	4a1e      	ldr	r2, [pc, #120]	; (80086a4 <_free_r+0x94>)
 800862c:	9801      	ldr	r0, [sp, #4]
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	b933      	cbnz	r3, 8008640 <_free_r+0x30>
 8008632:	6063      	str	r3, [r4, #4]
 8008634:	6014      	str	r4, [r2, #0]
 8008636:	b003      	add	sp, #12
 8008638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800863c:	f000 b8de 	b.w	80087fc <__malloc_unlock>
 8008640:	42a3      	cmp	r3, r4
 8008642:	d908      	bls.n	8008656 <_free_r+0x46>
 8008644:	6825      	ldr	r5, [r4, #0]
 8008646:	1961      	adds	r1, r4, r5
 8008648:	428b      	cmp	r3, r1
 800864a:	bf01      	itttt	eq
 800864c:	6819      	ldreq	r1, [r3, #0]
 800864e:	685b      	ldreq	r3, [r3, #4]
 8008650:	1949      	addeq	r1, r1, r5
 8008652:	6021      	streq	r1, [r4, #0]
 8008654:	e7ed      	b.n	8008632 <_free_r+0x22>
 8008656:	461a      	mov	r2, r3
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	b10b      	cbz	r3, 8008660 <_free_r+0x50>
 800865c:	42a3      	cmp	r3, r4
 800865e:	d9fa      	bls.n	8008656 <_free_r+0x46>
 8008660:	6811      	ldr	r1, [r2, #0]
 8008662:	1855      	adds	r5, r2, r1
 8008664:	42a5      	cmp	r5, r4
 8008666:	d10b      	bne.n	8008680 <_free_r+0x70>
 8008668:	6824      	ldr	r4, [r4, #0]
 800866a:	4421      	add	r1, r4
 800866c:	1854      	adds	r4, r2, r1
 800866e:	42a3      	cmp	r3, r4
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	d1e0      	bne.n	8008636 <_free_r+0x26>
 8008674:	681c      	ldr	r4, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	6053      	str	r3, [r2, #4]
 800867a:	4421      	add	r1, r4
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	e7da      	b.n	8008636 <_free_r+0x26>
 8008680:	d902      	bls.n	8008688 <_free_r+0x78>
 8008682:	230c      	movs	r3, #12
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	e7d6      	b.n	8008636 <_free_r+0x26>
 8008688:	6825      	ldr	r5, [r4, #0]
 800868a:	1961      	adds	r1, r4, r5
 800868c:	428b      	cmp	r3, r1
 800868e:	bf04      	itt	eq
 8008690:	6819      	ldreq	r1, [r3, #0]
 8008692:	685b      	ldreq	r3, [r3, #4]
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	bf04      	itt	eq
 8008698:	1949      	addeq	r1, r1, r5
 800869a:	6021      	streq	r1, [r4, #0]
 800869c:	6054      	str	r4, [r2, #4]
 800869e:	e7ca      	b.n	8008636 <_free_r+0x26>
 80086a0:	b003      	add	sp, #12
 80086a2:	bd30      	pop	{r4, r5, pc}
 80086a4:	20000400 	.word	0x20000400

080086a8 <sbrk_aligned>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4e0e      	ldr	r6, [pc, #56]	; (80086e4 <sbrk_aligned+0x3c>)
 80086ac:	460c      	mov	r4, r1
 80086ae:	6831      	ldr	r1, [r6, #0]
 80086b0:	4605      	mov	r5, r0
 80086b2:	b911      	cbnz	r1, 80086ba <sbrk_aligned+0x12>
 80086b4:	f000 f88c 	bl	80087d0 <_sbrk_r>
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f000 f887 	bl	80087d0 <_sbrk_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d00a      	beq.n	80086dc <sbrk_aligned+0x34>
 80086c6:	1cc4      	adds	r4, r0, #3
 80086c8:	f024 0403 	bic.w	r4, r4, #3
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d007      	beq.n	80086e0 <sbrk_aligned+0x38>
 80086d0:	1a21      	subs	r1, r4, r0
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f87c 	bl	80087d0 <_sbrk_r>
 80086d8:	3001      	adds	r0, #1
 80086da:	d101      	bne.n	80086e0 <sbrk_aligned+0x38>
 80086dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086e0:	4620      	mov	r0, r4
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	20000404 	.word	0x20000404

080086e8 <_malloc_r>:
 80086e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ec:	1ccd      	adds	r5, r1, #3
 80086ee:	f025 0503 	bic.w	r5, r5, #3
 80086f2:	3508      	adds	r5, #8
 80086f4:	2d0c      	cmp	r5, #12
 80086f6:	bf38      	it	cc
 80086f8:	250c      	movcc	r5, #12
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	4607      	mov	r7, r0
 80086fe:	db01      	blt.n	8008704 <_malloc_r+0x1c>
 8008700:	42a9      	cmp	r1, r5
 8008702:	d905      	bls.n	8008710 <_malloc_r+0x28>
 8008704:	230c      	movs	r3, #12
 8008706:	603b      	str	r3, [r7, #0]
 8008708:	2600      	movs	r6, #0
 800870a:	4630      	mov	r0, r6
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	4e2e      	ldr	r6, [pc, #184]	; (80087cc <_malloc_r+0xe4>)
 8008712:	f000 f86d 	bl	80087f0 <__malloc_lock>
 8008716:	6833      	ldr	r3, [r6, #0]
 8008718:	461c      	mov	r4, r3
 800871a:	bb34      	cbnz	r4, 800876a <_malloc_r+0x82>
 800871c:	4629      	mov	r1, r5
 800871e:	4638      	mov	r0, r7
 8008720:	f7ff ffc2 	bl	80086a8 <sbrk_aligned>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	4604      	mov	r4, r0
 8008728:	d14d      	bne.n	80087c6 <_malloc_r+0xde>
 800872a:	6834      	ldr	r4, [r6, #0]
 800872c:	4626      	mov	r6, r4
 800872e:	2e00      	cmp	r6, #0
 8008730:	d140      	bne.n	80087b4 <_malloc_r+0xcc>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	4631      	mov	r1, r6
 8008736:	4638      	mov	r0, r7
 8008738:	eb04 0803 	add.w	r8, r4, r3
 800873c:	f000 f848 	bl	80087d0 <_sbrk_r>
 8008740:	4580      	cmp	r8, r0
 8008742:	d13a      	bne.n	80087ba <_malloc_r+0xd2>
 8008744:	6821      	ldr	r1, [r4, #0]
 8008746:	3503      	adds	r5, #3
 8008748:	1a6d      	subs	r5, r5, r1
 800874a:	f025 0503 	bic.w	r5, r5, #3
 800874e:	3508      	adds	r5, #8
 8008750:	2d0c      	cmp	r5, #12
 8008752:	bf38      	it	cc
 8008754:	250c      	movcc	r5, #12
 8008756:	4629      	mov	r1, r5
 8008758:	4638      	mov	r0, r7
 800875a:	f7ff ffa5 	bl	80086a8 <sbrk_aligned>
 800875e:	3001      	adds	r0, #1
 8008760:	d02b      	beq.n	80087ba <_malloc_r+0xd2>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	442b      	add	r3, r5
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	e00e      	b.n	8008788 <_malloc_r+0xa0>
 800876a:	6822      	ldr	r2, [r4, #0]
 800876c:	1b52      	subs	r2, r2, r5
 800876e:	d41e      	bmi.n	80087ae <_malloc_r+0xc6>
 8008770:	2a0b      	cmp	r2, #11
 8008772:	d916      	bls.n	80087a2 <_malloc_r+0xba>
 8008774:	1961      	adds	r1, r4, r5
 8008776:	42a3      	cmp	r3, r4
 8008778:	6025      	str	r5, [r4, #0]
 800877a:	bf18      	it	ne
 800877c:	6059      	strne	r1, [r3, #4]
 800877e:	6863      	ldr	r3, [r4, #4]
 8008780:	bf08      	it	eq
 8008782:	6031      	streq	r1, [r6, #0]
 8008784:	5162      	str	r2, [r4, r5]
 8008786:	604b      	str	r3, [r1, #4]
 8008788:	4638      	mov	r0, r7
 800878a:	f104 060b 	add.w	r6, r4, #11
 800878e:	f000 f835 	bl	80087fc <__malloc_unlock>
 8008792:	f026 0607 	bic.w	r6, r6, #7
 8008796:	1d23      	adds	r3, r4, #4
 8008798:	1af2      	subs	r2, r6, r3
 800879a:	d0b6      	beq.n	800870a <_malloc_r+0x22>
 800879c:	1b9b      	subs	r3, r3, r6
 800879e:	50a3      	str	r3, [r4, r2]
 80087a0:	e7b3      	b.n	800870a <_malloc_r+0x22>
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	bf0c      	ite	eq
 80087a8:	6032      	streq	r2, [r6, #0]
 80087aa:	605a      	strne	r2, [r3, #4]
 80087ac:	e7ec      	b.n	8008788 <_malloc_r+0xa0>
 80087ae:	4623      	mov	r3, r4
 80087b0:	6864      	ldr	r4, [r4, #4]
 80087b2:	e7b2      	b.n	800871a <_malloc_r+0x32>
 80087b4:	4634      	mov	r4, r6
 80087b6:	6876      	ldr	r6, [r6, #4]
 80087b8:	e7b9      	b.n	800872e <_malloc_r+0x46>
 80087ba:	230c      	movs	r3, #12
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4638      	mov	r0, r7
 80087c0:	f000 f81c 	bl	80087fc <__malloc_unlock>
 80087c4:	e7a1      	b.n	800870a <_malloc_r+0x22>
 80087c6:	6025      	str	r5, [r4, #0]
 80087c8:	e7de      	b.n	8008788 <_malloc_r+0xa0>
 80087ca:	bf00      	nop
 80087cc:	20000400 	.word	0x20000400

080087d0 <_sbrk_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_sbrk_r+0x1c>)
 80087d4:	2300      	movs	r3, #0
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7f9 fff0 	bl	80027c0 <_sbrk>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_sbrk_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_sbrk_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000408 	.word	0x20000408

080087f0 <__malloc_lock>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__malloc_lock+0x8>)
 80087f2:	f000 b809 	b.w	8008808 <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	2000040c 	.word	0x2000040c

080087fc <__malloc_unlock>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__malloc_unlock+0x8>)
 80087fe:	f000 b804 	b.w	800880a <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	2000040c 	.word	0x2000040c

08008808 <__retarget_lock_acquire_recursive>:
 8008808:	4770      	bx	lr

0800880a <__retarget_lock_release_recursive>:
 800880a:	4770      	bx	lr

0800880c <_init>:
 800880c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880e:	bf00      	nop
 8008810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008812:	bc08      	pop	{r3}
 8008814:	469e      	mov	lr, r3
 8008816:	4770      	bx	lr

08008818 <_fini>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	bf00      	nop
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr
