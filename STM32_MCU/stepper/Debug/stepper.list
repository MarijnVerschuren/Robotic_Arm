
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000902c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080091c4  080091c4  000191c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e4  080091e4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091ec  080091ec  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080091f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000060  08009254  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08009254  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f91  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004689  00000000  00000000  00039054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001003  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a69  00000000  00000000  0003fbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015aed  00000000  00000000  00058624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c67f  00000000  00000000  0006e111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fd8  00000000  00000000  0010a790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000144  00000000  00000000  0010f768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000012b0  00000000  00000000  0010f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	; 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__gedf2>:
 8000934:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000938:	e006      	b.n	8000948 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__ledf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	e002      	b.n	8000948 <__cmpdf2+0x4>
 8000942:	bf00      	nop

08000944 <__cmpdf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	f84d cd04 	str.w	ip, [sp, #-4]!
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095e:	d01b      	beq.n	8000998 <__cmpdf2+0x54>
 8000960:	b001      	add	sp, #4
 8000962:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000966:	bf0c      	ite	eq
 8000968:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800096c:	ea91 0f03 	teqne	r1, r3
 8000970:	bf02      	ittt	eq
 8000972:	ea90 0f02 	teqeq	r0, r2
 8000976:	2000      	moveq	r0, #0
 8000978:	4770      	bxeq	lr
 800097a:	f110 0f00 	cmn.w	r0, #0
 800097e:	ea91 0f03 	teq	r1, r3
 8000982:	bf58      	it	pl
 8000984:	4299      	cmppl	r1, r3
 8000986:	bf08      	it	eq
 8000988:	4290      	cmpeq	r0, r2
 800098a:	bf2c      	ite	cs
 800098c:	17d8      	asrcs	r0, r3, #31
 800098e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000992:	f040 0001 	orr.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d102      	bne.n	80009a8 <__cmpdf2+0x64>
 80009a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a6:	d107      	bne.n	80009b8 <__cmpdf2+0x74>
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	d1d6      	bne.n	8000960 <__cmpdf2+0x1c>
 80009b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b6:	d0d3      	beq.n	8000960 <__cmpdf2+0x1c>
 80009b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_cdrcmple>:
 80009c0:	4684      	mov	ip, r0
 80009c2:	4610      	mov	r0, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	468c      	mov	ip, r1
 80009c8:	4619      	mov	r1, r3
 80009ca:	4663      	mov	r3, ip
 80009cc:	e000      	b.n	80009d0 <__aeabi_cdcmpeq>
 80009ce:	bf00      	nop

080009d0 <__aeabi_cdcmpeq>:
 80009d0:	b501      	push	{r0, lr}
 80009d2:	f7ff ffb7 	bl	8000944 <__cmpdf2>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	bf48      	it	mi
 80009da:	f110 0f00 	cmnmi.w	r0, #0
 80009de:	bd01      	pop	{r0, pc}

080009e0 <__aeabi_dcmpeq>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff fff4 	bl	80009d0 <__aeabi_cdcmpeq>
 80009e8:	bf0c      	ite	eq
 80009ea:	2001      	moveq	r0, #1
 80009ec:	2000      	movne	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmplt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffea 	bl	80009d0 <__aeabi_cdcmpeq>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmple>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffe0 	bl	80009d0 <__aeabi_cdcmpeq>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpge>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffce 	bl	80009c0 <__aeabi_cdrcmple>
 8000a24:	bf94      	ite	ls
 8000a26:	2001      	movls	r0, #1
 8000a28:	2000      	movhi	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmpgt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffc4 	bl	80009c0 <__aeabi_cdrcmple>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a98:	f000 b80c 	b.w	8000ab4 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f008 fa1e 	bl	8008ee4 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <deregister_tm_clones>:
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <deregister_tm_clones+0x10>)
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <deregister_tm_clones+0x14>)
 8000abc:	4283      	cmp	r3, r0
 8000abe:	d002      	beq.n	8000ac6 <deregister_tm_clones+0xe>
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <deregister_tm_clones+0x18>)
 8000ac2:	b103      	cbz	r3, 8000ac6 <deregister_tm_clones+0xe>
 8000ac4:	4718      	bx	r3
 8000ac6:	4770      	bx	lr
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	00000000 	.word	0x00000000

08000ad4 <register_tm_clones>:
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <register_tm_clones+0x18>)
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <register_tm_clones+0x1c>)
 8000ad8:	1a1b      	subs	r3, r3, r0
 8000ada:	0fd9      	lsrs	r1, r3, #31
 8000adc:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000ae0:	1049      	asrs	r1, r1, #1
 8000ae2:	d002      	beq.n	8000aea <register_tm_clones+0x16>
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <register_tm_clones+0x20>)
 8000ae6:	b103      	cbz	r3, 8000aea <register_tm_clones+0x16>
 8000ae8:	4718      	bx	r3
 8000aea:	4770      	bx	lr
 8000aec:	20000060 	.word	0x20000060
 8000af0:	20000060 	.word	0x20000060
 8000af4:	00000000 	.word	0x00000000

08000af8 <__do_global_dtors_aux>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4c06      	ldr	r4, [pc, #24]	; (8000b14 <__do_global_dtors_aux+0x1c>)
 8000afc:	7823      	ldrb	r3, [r4, #0]
 8000afe:	b943      	cbnz	r3, 8000b12 <__do_global_dtors_aux+0x1a>
 8000b00:	f7ff ffda 	bl	8000ab8 <deregister_tm_clones>
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__do_global_dtors_aux+0x20>)
 8000b06:	b113      	cbz	r3, 8000b0e <__do_global_dtors_aux+0x16>
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <__do_global_dtors_aux+0x24>)
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	2301      	movs	r3, #1
 8000b10:	7023      	strb	r3, [r4, #0]
 8000b12:	bd10      	pop	{r4, pc}
 8000b14:	20000060 	.word	0x20000060
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	080091ac 	.word	0x080091ac

08000b20 <frame_dummy>:
 8000b20:	b508      	push	{r3, lr}
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <frame_dummy+0x18>)
 8000b24:	b11b      	cbz	r3, 8000b2e <frame_dummy+0xe>
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <frame_dummy+0x1c>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <frame_dummy+0x20>)
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b32:	f7ff bfcf 	b.w	8000ad4 <register_tm_clones>
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	20000064 	.word	0x20000064
 8000b40:	080091ac 	.word	0x080091ac

08000b44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <MX_ADC1_Init+0x9c>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <MX_ADC1_Init+0xa0>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba6:	f002 fafb 	bl	80031a0 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f001 ff66 	bl	8002a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000bc6:	f002 fd57 	bl	8003678 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f001 ff56 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000007c 	.word	0x2000007c
 8000be0:	40012000 	.word	0x40012000
 8000be4:	0f000001 	.word	0x0f000001

08000be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_ADC_MspInit+0xfc>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d168      	bne.n	8000cdc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_ADC_MspInit+0x104>)
 8000c56:	f003 fc7b 	bl	8004550 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x10c>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cb2:	f003 f8ad 	bl	8003e10 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000cbc:	f001 fee0 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f003 f866 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f003 f87f 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200000c4 	.word	0x200000c4
 8000cf4:	40026470 	.word	0x40026470

08000cf8 <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	2118      	movs	r1, #24
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f008 f810 	bl	8008d24 <calloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <AS5600_init+0x16>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7b9b      	ldrb	r3, [r3, #14]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <AS5600_init+0x24>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7bdb      	ldrb	r3, [r3, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <AS5600_init+0x32>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7c1b      	ldrb	r3, [r3, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <AS5600_init+0x40>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7c5b      	ldrb	r3, [r3, #17]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <AS5600_init+0x4e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7c9b      	ldrb	r3, [r3, #18]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <AS5600_init+0x5c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7cdb      	ldrb	r3, [r3, #19]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <AS5600_init+0x6a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7d1b      	ldrb	r3, [r3, #20]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <AS5600_init+0x78>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7d5b      	ldrb	r3, [r3, #21]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <AS5600_init+0x86>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7bdb      	ldrb	r3, [r3, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f86a 	bl	8000e70 <AS5600_set_low_power_mode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <AS5600_init+0x9c>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e05f      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7c1b      	ldrb	r3, [r3, #16]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8b3 	bl	8000f18 <AS5600_set_hysteresis>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <AS5600_init+0xb2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e054      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7c59      	ldrb	r1, [r3, #17]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c9b      	ldrb	r3, [r3, #18]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f8fa 	bl	8000fc0 <AS5600_set_output_mode>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <AS5600_init+0xcc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e047      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7cdb      	ldrb	r3, [r3, #19]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f983 	bl	80010e8 <AS5600_set_slow_filter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <AS5600_init+0xe2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e03c      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f9cc 	bl	8001190 <AS5600_set_fast_filter_threshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <AS5600_init+0xf8>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e031      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7d5b      	ldrb	r3, [r3, #21]
 8000e06:	4619      	mov	r1, r3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa61 	bl	80012d0 <AS5600_set_watchdog_timer>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <AS5600_init+0x10e>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e026      	b.n	8000e66 <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fa80 	bl	800131e <AS5600_write_config_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <AS5600_init+0x11e>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e01e      	b.n	8000e66 <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000e2c:	f107 030f 	add.w	r3, r7, #15
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fab2 	bl	800139c <AS5600_get_magnet_status>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <AS5600_init+0x138>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e011      	b.n	8000e66 <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <AS5600_init+0x15a>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <AS5600_init+0x15c>
	return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d83f      	bhi.n	8000f04 <AS5600_set_low_power_mode+0x94>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <AS5600_set_low_power_mode+0x1c>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eaf 	.word	0x08000eaf
 8000e94:	08000ed1 	.word	0x08000ed1
 8000e98:	08000ef3 	.word	0x08000ef3
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7ddb      	ldrb	r3, [r3, #23]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	75da      	strb	r2, [r3, #23]
		break;
 8000eac:	e02c      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7ddb      	ldrb	r3, [r3, #23]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7ddb      	ldrb	r3, [r3, #23]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	75da      	strb	r2, [r3, #23]
	break;
 8000ece:	e01b      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7ddb      	ldrb	r3, [r3, #23]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7ddb      	ldrb	r3, [r3, #23]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	75da      	strb	r2, [r3, #23]
		break;
 8000ef0:	e00a      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7ddb      	ldrb	r3, [r3, #23]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f043 0303 	orr.w	r3, r3, #3
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	75da      	strb	r2, [r3, #23]
		break;
 8000f02:	e001      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d83f      	bhi.n	8000fac <AS5600_set_hysteresis+0x94>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <AS5600_set_hysteresis+0x1c>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f57 	.word	0x08000f57
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f9b 	.word	0x08000f9b
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7ddb      	ldrb	r3, [r3, #23]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f023 030c 	bic.w	r3, r3, #12
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	75da      	strb	r2, [r3, #23]
		break;
 8000f54:	e02c      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7ddb      	ldrb	r3, [r3, #23]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7ddb      	ldrb	r3, [r3, #23]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f023 0308 	bic.w	r3, r3, #8
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	75da      	strb	r2, [r3, #23]
		break;
 8000f76:	e01b      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7ddb      	ldrb	r3, [r3, #23]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7ddb      	ldrb	r3, [r3, #23]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	75da      	strb	r2, [r3, #23]
		break;
 8000f98:	e00a      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7ddb      	ldrb	r3, [r3, #23]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 030c 	orr.w	r3, r3, #12
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	75da      	strb	r2, [r3, #23]
		break;
 8000faa:	e001      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d020      	beq.n	800101c <AS5600_set_output_mode+0x5c>
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	dc31      	bgt.n	8001042 <AS5600_set_output_mode+0x82>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d002      	beq.n	8000fe8 <AS5600_set_output_mode+0x28>
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d009      	beq.n	8000ffa <AS5600_set_output_mode+0x3a>
 8000fe6:	e02c      	b.n	8001042 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7ddb      	ldrb	r3, [r3, #23]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	75da      	strb	r2, [r3, #23]
		break;
 8000ff8:	e025      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7ddb      	ldrb	r3, [r3, #23]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7ddb      	ldrb	r3, [r3, #23]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f023 0320 	bic.w	r3, r3, #32
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	75da      	strb	r2, [r3, #23]
		break;
 800101a:	e014      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7ddb      	ldrb	r3, [r3, #23]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7ddb      	ldrb	r3, [r3, #23]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8001042:	2301      	movs	r3, #1
 8001044:	e049      	b.n	80010da <AS5600_set_output_mode+0x11a>
	}
	if (pwm) {
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d045      	beq.n	80010d8 <AS5600_set_output_mode+0x118>
		switch (frequency) {
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3b01      	subs	r3, #1
 8001050:	2b03      	cmp	r3, #3
 8001052:	d83f      	bhi.n	80010d4 <AS5600_set_output_mode+0x114>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <AS5600_set_output_mode+0x9c>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	0800107f 	.word	0x0800107f
 8001064:	080010a1 	.word	0x080010a1
 8001068:	080010c3 	.word	0x080010c3
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7ddb      	ldrb	r3, [r3, #23]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	75da      	strb	r2, [r3, #23]
			break;
 800107c:	e02c      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7ddb      	ldrb	r3, [r3, #23]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7ddb      	ldrb	r3, [r3, #23]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	75da      	strb	r2, [r3, #23]
			break;
 800109e:	e01b      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7ddb      	ldrb	r3, [r3, #23]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	75da      	strb	r2, [r3, #23]
			break;
 80010c0:	e00a      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7ddb      	ldrb	r3, [r3, #23]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	75da      	strb	r2, [r3, #23]
			break;
 80010d2:	e001      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		default: return HAL_ERROR;	// invalid PWM frequency
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <AS5600_set_output_mode+0x11a>
		}
	}
	return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d83f      	bhi.n	800117c <AS5600_set_slow_filter+0x94>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <AS5600_set_slow_filter+0x1c>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	08001127 	.word	0x08001127
 800110c:	08001149 	.word	0x08001149
 8001110:	0800116b 	.word	0x0800116b
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7d9b      	ldrb	r3, [r3, #22]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	b2da      	uxtb	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	759a      	strb	r2, [r3, #22]
		break;
 8001124:	e02c      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7d9b      	ldrb	r3, [r3, #22]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d9b      	ldrb	r3, [r3, #22]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	759a      	strb	r2, [r3, #22]
		break;
 8001146:	e01b      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7d9b      	ldrb	r3, [r3, #22]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	759a      	strb	r2, [r3, #22]
		break;
 8001168:	e00a      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7d9b      	ldrb	r3, [r3, #22]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f043 0303 	orr.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	759a      	strb	r2, [r3, #22]
		break;
 800117a:	e001      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	3b01      	subs	r3, #1
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	f200 808b 	bhi.w	80012bc <AS5600_set_fast_filter_threshold+0x12c>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <AS5600_set_fast_filter_threshold+0x1c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011df 	.word	0x080011df
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001223 	.word	0x08001223
 80011bc:	08001245 	.word	0x08001245
 80011c0:	08001267 	.word	0x08001267
 80011c4:	08001289 	.word	0x08001289
 80011c8:	080012ab 	.word	0x080012ab
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d9b      	ldrb	r3, [r3, #22]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f023 031c 	bic.w	r3, r3, #28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	759a      	strb	r2, [r3, #22]
		break;
 80011dc:	e070      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7d9b      	ldrb	r3, [r3, #22]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f023 0318 	bic.w	r3, r3, #24
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7d9b      	ldrb	r3, [r3, #22]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	759a      	strb	r2, [r3, #22]
		break;
 80011fe:	e05f      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d9b      	ldrb	r3, [r3, #22]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f023 0314 	bic.w	r3, r3, #20
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7d9b      	ldrb	r3, [r3, #22]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	759a      	strb	r2, [r3, #22]
		break;
 8001220:	e04e      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7d9b      	ldrb	r3, [r3, #22]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	b2da      	uxtb	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d9b      	ldrb	r3, [r3, #22]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 030c 	orr.w	r3, r3, #12
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	759a      	strb	r2, [r3, #22]
		break;
 8001242:	e03d      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7d9b      	ldrb	r3, [r3, #22]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f023 030c 	bic.w	r3, r3, #12
 800124e:	b2da      	uxtb	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7d9b      	ldrb	r3, [r3, #22]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	759a      	strb	r2, [r3, #22]
		break;
 8001264:	e02c      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7d9b      	ldrb	r3, [r3, #22]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f023 0308 	bic.w	r3, r3, #8
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7d9b      	ldrb	r3, [r3, #22]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0314 	orr.w	r3, r3, #20
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	759a      	strb	r2, [r3, #22]
		break;
 8001286:	e01b      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7d9b      	ldrb	r3, [r3, #22]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7d9b      	ldrb	r3, [r3, #22]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f043 0318 	orr.w	r3, r3, #24
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	759a      	strb	r2, [r3, #22]
		break;
 80012a8:	e00a      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 031c 	orr.w	r3, r3, #28
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	759a      	strb	r2, [r3, #22]
		break;
 80012ba:	e001      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <AS5600_set_watchdog_timer+0x18>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d009      	beq.n	80012fa <AS5600_set_watchdog_timer+0x2a>
 80012e6:	e011      	b.n	800130c <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	759a      	strb	r2, [r3, #22]
		break;
 80012f8:	e00a      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7d9b      	ldrb	r3, [r3, #22]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	759a      	strb	r2, [r3, #22]
		break;
 800130a:	e001      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af04      	add	r7, sp, #16
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3316      	adds	r3, #22
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	9202      	str	r2, [sp, #8]
 8001334:	2202      	movs	r2, #2
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2207      	movs	r2, #7
 800133e:	216c      	movs	r1, #108	; 0x6c
 8001340:	f003 fbe8 	bl	8004b14 <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b088      	sub	sp, #32
 8001352:	af04      	add	r7, sp, #16
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2302      	movs	r3, #2
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	220e      	movs	r2, #14
 8001374:	216c      	movs	r1, #108	; 0x6c
 8001376:	f003 fcc7 	bl	8004d08 <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	801a      	strh	r2, [r3, #0]
	return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	220b      	movs	r2, #11
 80013bc:	216c      	movs	r1, #108	; 0x6c
 80013be:	f003 fca3 	bl	8004d08 <HAL_I2C_Mem_Read>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_DMA_Init+0x5c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_DMA_Init+0x5c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_DMA_Init+0x5c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	; 0x38
 80013f4:	f002 fcd5 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	; 0x38
 80013fa:	f002 fcee 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	203b      	movs	r0, #59	; 0x3b
 8001404:	f002 fccd 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001408:	203b      	movs	r0, #59	; 0x3b
 800140a:	f002 fce6 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	203c      	movs	r0, #60	; 0x3c
 8001414:	f002 fcc5 	bl	8003da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001418:	203c      	movs	r0, #60	; 0x3c
 800141a:	f002 fcde 	bl	8003dda <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <MX_GPIO_Init+0x17c>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b4e      	ldr	r3, [pc, #312]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a49      	ldr	r2, [pc, #292]	; (80015a8 <MX_GPIO_Init+0x17c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b47      	ldr	r3, [pc, #284]	; (80015a8 <MX_GPIO_Init+0x17c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7141 	mov.w	r1, #772	; 0x304
 800149c:	4843      	ldr	r0, [pc, #268]	; (80015ac <MX_GPIO_Init+0x180>)
 800149e:	f003 f9db 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	4841      	ldr	r0, [pc, #260]	; (80015b0 <MX_GPIO_Init+0x184>)
 80014aa:	f003 f9d5 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f24e 0120 	movw	r1, #57376	; 0xe020
 80014b4:	483e      	ldr	r0, [pc, #248]	; (80015b0 <MX_GPIO_Init+0x184>)
 80014b6:	f003 f9cf 	bl	8004858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 80014ba:	2304      	movs	r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4836      	ldr	r0, [pc, #216]	; (80015ac <MX_GPIO_Init+0x180>)
 80014d2:	f003 f83d 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 80014d6:	2308      	movs	r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <MX_GPIO_Init+0x180>)
 80014ec:	f003 f830 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80014f0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014f6:	2311      	movs	r3, #17
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4829      	ldr	r0, [pc, #164]	; (80015b0 <MX_GPIO_Init+0x184>)
 800150a:	f003 f821 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001514:	2311      	movs	r3, #17
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_GPIO_Init+0x184>)
 8001528:	f003 f812 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 800152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001532:	2311      	movs	r3, #17
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	481a      	ldr	r0, [pc, #104]	; (80015b0 <MX_GPIO_Init+0x184>)
 8001546:	f003 f803 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001550:	2311      	movs	r3, #17
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	4812      	ldr	r0, [pc, #72]	; (80015ac <MX_GPIO_Init+0x180>)
 8001564:	f002 fff4 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001568:	2320      	movs	r3, #32
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800156c:	2311      	movs	r3, #17
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_GPIO_Init+0x184>)
 8001580:	f002 ffe6 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 8001584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001588:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_GPIO_Init+0x184>)
 800159a:	f002 ffd9 	bl	8004550 <HAL_GPIO_Init>

}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400

080015b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	; (8001608 <MX_I2C1_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	; (800160c <MX_I2C1_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <MX_I2C1_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <MX_I2C1_Init+0x50>)
 80015f2:	f003 f94b 	bl	800488c <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f001 fa40 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000124 	.word	0x20000124
 8001608:	40005400 	.word	0x40005400
 800160c:	000186a0 	.word	0x000186a0

08001610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a21      	ldr	r2, [pc, #132]	; (80016b4 <HAL_I2C_MspInit+0xa4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d13b      	bne.n	80016aa <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 800164e:	23c0      	movs	r3, #192	; 0xc0
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165e:	2304      	movs	r3, #4
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4814      	ldr	r0, [pc, #80]	; (80016bc <HAL_I2C_MspInit+0xac>)
 800166a:	f002 ff71 	bl	8004550 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 8001678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_I2C_MspInit+0xa8>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201f      	movs	r0, #31
 8001690:	f002 fb87 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001694:	201f      	movs	r0, #31
 8001696:	f002 fba0 	bl	8003dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2020      	movs	r0, #32
 80016a0:	f002 fb7f 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016a4:	2020      	movs	r0, #32
 80016a6:	f002 fb98 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	; 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016cc:	2200      	movs	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24
 80016d0:	bf00      	nop
 80016d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d8f9      	bhi.n	80016d2 <delay_us+0x12>
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <set_motor_setting+0x84>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	491d      	ldr	r1, [pc, #116]	; (8001770 <set_motor_setting+0x84>)
 80016fa:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 80016fe:	4013      	ands	r3, r2
 8001700:	614b      	str	r3, [r1, #20]
	switch(instruction->micro_step) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e1b      	ldrb	r3, [r3, #24]
 8001706:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b03      	cmp	r3, #3
 800170e:	d018      	beq.n	8001742 <set_motor_setting+0x56>
 8001710:	2b03      	cmp	r3, #3
 8001712:	dc03      	bgt.n	800171c <set_motor_setting+0x30>
 8001714:	2b01      	cmp	r3, #1
 8001716:	d008      	beq.n	800172a <set_motor_setting+0x3e>
 8001718:	2b02      	cmp	r3, #2
 800171a:	d00d      	beq.n	8001738 <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <set_motor_setting+0x84>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <set_motor_setting+0x84>)
 8001722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001726:	6153      	str	r3, [r2, #20]
 8001728:	e012      	b.n	8001750 <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <set_motor_setting+0x84>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <set_motor_setting+0x84>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	e00b      	b.n	8001750 <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <set_motor_setting+0x84>)
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <set_motor_setting+0x84>)
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	6153      	str	r3, [r2, #20]
 8001740:	e006      	b.n	8001750 <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <set_motor_setting+0x84>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <set_motor_setting+0x84>)
 8001748:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800174c:	6153      	str	r3, [r2, #20]
 800174e:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->srd_mode);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e1b      	ldrb	r3, [r3, #24]
 8001754:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <set_motor_setting+0x88>)
 8001762:	f003 f879 	bl	8004858 <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40020000 	.word	0x40020000
 8001774:	40020400 	.word	0x40020400

08001778 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 8001778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800177c:	af00      	add	r7, sp, #0
	register uint16_t raw = ACD_RANGE_CONV * (state.raw_angle - MIN_ADC_IN);
 800177e:	4b6e      	ldr	r3, [pc, #440]	; (8001938 <euler_method+0x1c0>)
 8001780:	8b1b      	ldrh	r3, [r3, #24]
 8001782:	b29b      	uxth	r3, r3
 8001784:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001788:	b29e      	uxth	r6, r3
	register uint16_t pos_diff = (AS5600_pos_f64 - raw);  // rotation detection
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <euler_method+0x1c4>)
 800178c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001790:	4633      	mov	r3, r6
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe52 	bl	800043c <__aeabi_i2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fcfe 	bl	80001a0 <__aeabi_dsub>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f94a 	bl	8000a44 <__aeabi_d2uiz>
 80017b0:	4603      	mov	r3, r0
 80017b2:	b29c      	uxth	r4, r3
	state.pos.rotation += pos_diff > 2048; state.pos.rotation -= pos_diff < -2048;
 80017b4:	4b60      	ldr	r3, [pc, #384]	; (8001938 <euler_method+0x1c0>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	f343 0313 	sbfx	r3, r3, #0, #20
 80017bc:	461a      	mov	r2, r3
 80017be:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80017c2:	bf8c      	ite	hi
 80017c4:	2301      	movhi	r3, #1
 80017c6:	2300      	movls	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	031a      	lsls	r2, r3, #12
 80017ce:	1312      	asrs	r2, r2, #12
 80017d0:	4959      	ldr	r1, [pc, #356]	; (8001938 <euler_method+0x1c0>)
 80017d2:	690b      	ldr	r3, [r1, #16]
 80017d4:	f362 0313 	bfi	r3, r2, #0, #20
 80017d8:	610b      	str	r3, [r1, #16]
 80017da:	4b57      	ldr	r3, [pc, #348]	; (8001938 <euler_method+0x1c0>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	f343 0113 	sbfx	r1, r3, #0, #20
 80017e2:	4a55      	ldr	r2, [pc, #340]	; (8001938 <euler_method+0x1c0>)
 80017e4:	6913      	ldr	r3, [r2, #16]
 80017e6:	f361 0313 	bfi	r3, r1, #0, #20
 80017ea:	6113      	str	r3, [r2, #16]
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 80017ec:	4b54      	ldr	r3, [pc, #336]	; (8001940 <euler_method+0x1c8>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fe13 	bl	800041c <__aeabi_ui2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	a149      	add	r1, pc, #292	; (adr r1, 8001920 <euler_method+0x1a8>)
 80017fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001800:	f7fe ffb0 	bl	8000764 <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <euler_method+0x1cc>)
 8001812:	f7fe fcc7 	bl	80001a4 <__adddf3>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	4949      	ldr	r1, [pc, #292]	; (8001944 <euler_method+0x1cc>)
 8001820:	f7fe ffa0 	bl	8000764 <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
	AS5600_pos_f64 = (raw * alpha) + ((1 - alpha) * AS5600_pos_f64);
 800182c:	4633      	mov	r3, r6
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe04 	bl	800043c <__aeabi_i2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fe68 	bl	8000510 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4690      	mov	r8, r2
 8001846:	4699      	mov	r9, r3
 8001848:	4622      	mov	r2, r4
 800184a:	462b      	mov	r3, r5
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	493c      	ldr	r1, [pc, #240]	; (8001944 <euler_method+0x1cc>)
 8001852:	f7fe fca5 	bl	80001a0 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	4b37      	ldr	r3, [pc, #220]	; (800193c <euler_method+0x1c4>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fe54 	bl	8000510 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4640      	mov	r0, r8
 800186e:	4649      	mov	r1, r9
 8001870:	f7fe fc98 	bl	80001a4 <__adddf3>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4930      	ldr	r1, [pc, #192]	; (800193c <euler_method+0x1c4>)
 800187a:	e9c1 2300 	strd	r2, r3, [r1]
	state.vel = (1e6 / TIM5->CNT) * ((uint16_t)AS5600_pos_f64 - state.pos.angle) * AS5600_RAD_CONV;  // rad / s
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <euler_method+0x1c8>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fdca 	bl	800041c <__aeabi_ui2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	a126      	add	r1, pc, #152	; (adr r1, 8001928 <euler_method+0x1b0>)
 800188e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001892:	f7fe ff67 	bl	8000764 <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4614      	mov	r4, r2
 800189c:	461d      	mov	r5, r3
 800189e:	4b27      	ldr	r3, [pc, #156]	; (800193c <euler_method+0x1c4>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f8cc 	bl	8000a44 <__aeabi_d2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <euler_method+0x1c0>)
 80018b4:	8a5b      	ldrh	r3, [r3, #18]
 80018b6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fdbc 	bl	800043c <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe fe20 	bl	8000510 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	a315      	add	r3, pc, #84	; (adr r3, 8001930 <euler_method+0x1b8>)
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fe17 	bl	8000510 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4914      	ldr	r1, [pc, #80]	; (8001938 <euler_method+0x1c0>)
 80018e8:	e9c1 2300 	strd	r2, r3, [r1]
	state.pos.angle = (uint16_t)AS5600_pos_f64;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <euler_method+0x1c4>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f8a5 	bl	8000a44 <__aeabi_d2uiz>
 80018fa:	4603      	mov	r3, r0
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001902:	b299      	uxth	r1, r3
 8001904:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <euler_method+0x1c0>)
 8001906:	8a53      	ldrh	r3, [r2, #18]
 8001908:	f361 130f 	bfi	r3, r1, #4, #12
 800190c:	8253      	strh	r3, [r2, #18]
	TIM5->CNT = 0;
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <euler_method+0x1c8>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001914:	bf00      	nop
 8001916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800191a:	bf00      	nop
 800191c:	f3af 8000 	nop.w
 8001920:	66666666 	.word	0x66666666
 8001924:	40026666 	.word	0x40026666
 8001928:	00000000 	.word	0x00000000
 800192c:	412e8480 	.word	0x412e8480
 8001930:	5798a5fb 	.word	0x5798a5fb
 8001934:	3f5921fb 	.word	0x3f5921fb
 8001938:	20000178 	.word	0x20000178
 800193c:	200005c0 	.word	0x200005c0
 8001940:	40000c00 	.word	0x40000c00
 8001944:	3ff00000 	.word	0x3ff00000

08001948 <get_next_empty_queue_ptr>:
void* get_next_empty_queue_ptr() {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
	if (state.queue_size == MAX_QUEUE_SIZE) { return 0; }  // nullptr if full
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <get_next_empty_queue_ptr+0x38>)
 8001950:	7f9b      	ldrb	r3, [r3, #30]
 8001952:	2b20      	cmp	r3, #32
 8001954:	d101      	bne.n	800195a <get_next_empty_queue_ptr+0x12>
 8001956:	2300      	movs	r3, #0
 8001958:	e00c      	b.n	8001974 <get_next_empty_queue_ptr+0x2c>
	void* ptr = &queue[(state.queue_index + state.queue_size) % MAX_QUEUE_SIZE];
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <get_next_empty_queue_ptr+0x38>)
 800195c:	7fda      	ldrb	r2, [r3, #31]
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <get_next_empty_queue_ptr+0x38>)
 8001960:	7f9b      	ldrb	r3, [r3, #30]
 8001962:	4413      	add	r3, r2
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	4a05      	ldr	r2, [pc, #20]	; (8001984 <get_next_empty_queue_ptr+0x3c>)
 800196e:	4413      	add	r3, r2
 8001970:	607b      	str	r3, [r7, #4]
	return ptr;
 8001972:	687b      	ldr	r3, [r7, #4]
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	20000178 	.word	0x20000178
 8001984:	20000198 	.word	0x20000198

08001988 <get_next_queue_ptr>:
void* get_next_queue_ptr() {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	if (!state.queue_size) { return 0; }  // nullptr if queue is empty
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <get_next_queue_ptr+0x4c>)
 800198e:	7f9b      	ldrb	r3, [r3, #30]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <get_next_queue_ptr+0x10>
 8001994:	2300      	movs	r3, #0
 8001996:	e017      	b.n	80019c8 <get_next_queue_ptr+0x40>
	state.queue_index = (state.queue_index + 1) % MAX_QUEUE_SIZE;
 8001998:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <get_next_queue_ptr+0x4c>)
 800199a:	7fdb      	ldrb	r3, [r3, #31]
 800199c:	3301      	adds	r3, #1
 800199e:	425a      	negs	r2, r3
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	f002 021f 	and.w	r2, r2, #31
 80019a8:	bf58      	it	pl
 80019aa:	4253      	negpl	r3, r2
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <get_next_queue_ptr+0x4c>)
 80019b0:	77da      	strb	r2, [r3, #31]
	state.queue_size--;  // flag last instruction as overwriteable
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <get_next_queue_ptr+0x4c>)
 80019b4:	7f9b      	ldrb	r3, [r3, #30]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <get_next_queue_ptr+0x4c>)
 80019bc:	779a      	strb	r2, [r3, #30]
	return &queue[state.queue_index];
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <get_next_queue_ptr+0x4c>)
 80019c0:	7fdb      	ldrb	r3, [r3, #31]
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <get_next_queue_ptr+0x50>)
 80019c6:	4413      	add	r3, r2
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000178 	.word	0x20000178
 80019d8:	20000198 	.word	0x20000198

080019dc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b09c      	sub	sp, #112	; 0x70
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6678      	str	r0, [r7, #100]	; 0x64
	if (htim != &htim10) { return; }
 80019e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019e8:	4bb7      	ldr	r3, [pc, #732]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 80019ea:	429a      	cmp	r2, r3
 80019ec:	f040 86c0 	bne.w	8002770 <HAL_TIM_PeriodElapsedCallback+0xd94>
	if (state.queue_size == 0) { return; }
 80019f0:	4bb6      	ldr	r3, [pc, #728]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80019f2:	7f9b      	ldrb	r3, [r3, #30]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 86bd 	beq.w	8002774 <HAL_TIM_PeriodElapsedCallback+0xd98>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update state.pos.angle, AS5600_delta_pos using the selected mode
 80019fa:	f7ff febd 	bl	8001778 <euler_method>
	double target_delta = instruction->target - state.pos.angle;
 80019fe:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a06:	4bb1      	ldr	r3, [pc, #708]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a08:	8a5b      	ldrh	r3, [r3, #18]
 8001a0a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd13 	bl	800043c <__aeabi_i2d>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe fbbf 	bl	80001a0 <__aeabi_dsub>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a36:	f7fe fffb 	bl	8000a30 <__aeabi_dcmpgt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001a40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a44:	e052      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x110>
 8001a46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	4b9f      	ldr	r3, [pc, #636]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a5c:	f7fe fba0 	bl	80001a0 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	f7fe ffde 	bl	8000a30 <__aeabi_dcmpgt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001a7a:	f04f 0000 	mov.w	r0, #0
 8001a7e:	4996      	ldr	r1, [pc, #600]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001a80:	e003      	b.n	8001a8a <HAL_TIM_PeriodElapsedCallback+0xae>
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a8e:	f7fe ffcf 	bl	8000a30 <__aeabi_dcmpgt>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001aa2:	f7fe fb7d 	bl	80001a0 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	e01f      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x110>
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001ab2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ab6:	f7fe fb73 	bl	80001a0 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f7fe ff89 	bl	80009e0 <__aeabi_dcmpeq>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b7e      	ldr	r3, [pc, #504]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001ada:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ade:	f7fe fb5f 	bl	80001a0 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e001      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x110>
 8001ae8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001aec:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	// TODO: add defining rotation dir with SPI (this is obviously implicated with the previous TODO)
	// TODO: re-do: ease-in ease-out function
	// TODO: delete / re-do: pathfinding code
	// TODO: tune interrupt timing

	if (ABS(target_delta) > 10) {  // ~1 deg
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001afc:	f7fe ff98 	bl	8000a30 <__aeabi_dcmpgt>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001b06:	2301      	movs	r3, #1
 8001b08:	461c      	mov	r4, r3
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b16:	f7fe ff63 	bl	80009e0 <__aeabi_dcmpeq>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001b20:	2300      	movs	r3, #0
 8001b22:	461c      	mov	r4, r3
 8001b24:	b2e3      	uxtb	r3, r4
 8001b26:	e00e      	b.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	461c      	mov	r4, r3
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001b32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b36:	f7fe ff5d 	bl	80009f4 <__aeabi_dcmplt>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001b40:	2300      	movs	r3, #0
 8001b42:	461c      	mov	r4, r3
 8001b44:	b2e3      	uxtb	r3, r4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 85f4 	beq.w	8002734 <HAL_TIM_PeriodElapsedCallback+0xd58>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	461c      	mov	r4, r3
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b5c:	f7fe ff4a 	bl	80009f4 <__aeabi_dcmplt>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x18e>
 8001b66:	2300      	movs	r3, #0
 8001b68:	461c      	mov	r4, r3
 8001b6a:	b2e3      	uxtb	r3, r4
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b72:	485b      	ldr	r0, [pc, #364]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001b74:	f002 fe70 	bl	8004858 <HAL_GPIO_WritePin>
		step_gain = MIN(1, MIN(ABS(target_delta / 1024), MIN(ABS((target_delta + 1024) / 1024), ABS((target_delta - 1024) / 1024))));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001b82:	f7fe fdef 	bl	8000764 <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	f7fe ff4b 	bl	8000a30 <__aeabi_dcmpgt>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ba6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001baa:	f7fe fddb 	bl	8000764 <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001bb6:	e00c      	b.n	8001bd2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001bbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bc2:	f7fe fdcf 	bl	8000764 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	653a      	str	r2, [r7, #80]	; 0x50
 8001bcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bd0:	657b      	str	r3, [r7, #84]	; 0x54
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	4b43      	ldr	r3, [pc, #268]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001bd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001bdc:	f7fe fae2 	bl	80001a4 <__adddf3>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001bee:	f7fe fdb9 	bl	8000764 <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f7fe ff15 	bl	8000a30 <__aeabi_dcmpgt>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d014      	beq.n	8001c36 <HAL_TIM_PeriodElapsedCallback+0x25a>
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c16:	f7fe fac5 	bl	80001a4 <__adddf3>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c28:	f7fe fd9c 	bl	8000764 <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001c34:	e015      	b.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x286>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c40:	f7fe fab0 	bl	80001a4 <__adddf3>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c52:	f7fe fd87 	bl	8000764 <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8001c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c6c:	f7fe fa98 	bl	80001a0 <__aeabi_dsub>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c7e:	f7fe fd71 	bl	8000764 <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	f7fe fecd 	bl	8000a30 <__aeabi_dcmpgt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d025      	beq.n	8001ce8 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ca2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ca6:	f7fe fa7b 	bl	80001a0 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001cb8:	f7fe fd54 	bl	8000764 <__aeabi_ddiv>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001cc4:	e026      	b.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x338>
 8001cc6:	bf00      	nop
 8001cc8:	2000077c 	.word	0x2000077c
 8001ccc:	20000178 	.word	0x20000178
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	40b00000 	.word	0x40b00000
 8001cd8:	3ff00000 	.word	0x3ff00000
 8001cdc:	c0240000 	.word	0xc0240000
 8001ce0:	40020400 	.word	0x40020400
 8001ce4:	40900000 	.word	0x40900000
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4bba      	ldr	r3, [pc, #744]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001cee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001cf2:	f7fe fa55 	bl	80001a0 <__aeabi_dsub>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4bb5      	ldr	r3, [pc, #724]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d04:	f7fe fd2e 	bl	8000764 <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	643a      	str	r2, [r7, #64]	; 0x40
 8001d0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
 8001d14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d18:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d1c:	f7fe fe6a 	bl	80009f4 <__aeabi_dcmplt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d047      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x3da>
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4bab      	ldr	r3, [pc, #684]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d30:	f7fe fa38 	bl	80001a4 <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4ba5      	ldr	r3, [pc, #660]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d42:	f7fe fd0f 	bl	8000764 <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f7fe fe6b 	bl	8000a30 <__aeabi_dcmpgt>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d014      	beq.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x3ae>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b9c      	ldr	r3, [pc, #624]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d6a:	f7fe fa1b 	bl	80001a4 <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b97      	ldr	r3, [pc, #604]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d7c:	f7fe fcf2 	bl	8000764 <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4690      	mov	r8, r2
 8001d86:	4699      	mov	r9, r3
 8001d88:	e05c      	b.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x468>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b92      	ldr	r3, [pc, #584]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d94:	f7fe fa06 	bl	80001a4 <__adddf3>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 0200 	mov.w	r2, #0
 8001da4:	4b8c      	ldr	r3, [pc, #560]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001da6:	f7fe fcdd 	bl	8000764 <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4690      	mov	r8, r2
 8001db0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001db4:	e046      	b.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x468>
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b87      	ldr	r3, [pc, #540]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001dbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dc0:	f7fe f9ee 	bl	80001a0 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b81      	ldr	r3, [pc, #516]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001dd2:	f7fe fcc7 	bl	8000764 <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f7fe fe23 	bl	8000a30 <__aeabi_dcmpgt>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d014      	beq.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x43e>
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	4b78      	ldr	r3, [pc, #480]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dfa:	f7fe f9d1 	bl	80001a0 <__aeabi_dsub>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001e0c:	f7fe fcaa 	bl	8000764 <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4690      	mov	r8, r2
 8001e16:	4699      	mov	r9, r3
 8001e18:	e014      	b.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x468>
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001e20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e24:	f7fe f9bc 	bl	80001a0 <__aeabi_dsub>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	4b68      	ldr	r3, [pc, #416]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001e36:	f7fe fc95 	bl	8000764 <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4690      	mov	r8, r2
 8001e40:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e44:	4642      	mov	r2, r8
 8001e46:	464b      	mov	r3, r9
 8001e48:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e4c:	f7fe fdd2 	bl	80009f4 <__aeabi_dcmplt>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d045      	beq.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x506>
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001e5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e60:	f7fe fc80 	bl	8000764 <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	f7fe fddc 	bl	8000a30 <__aeabi_dcmpgt>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d018      	beq.n	8001eb0 <HAL_TIM_PeriodElapsedCallback+0x4d4>
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4b55      	ldr	r3, [pc, #340]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001e84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e88:	f7fe fc6c 	bl	8000764 <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	2301      	movs	r3, #1
 8001e96:	461c      	mov	r4, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001e9e:	f7fe fdc7 	bl	8000a30 <__aeabi_dcmpgt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	461c      	mov	r4, r3
 8001eac:	b2e3      	uxtb	r3, r4
 8001eae:	e179      	b.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eba:	f7fe fc53 	bl	8000764 <__aeabi_ddiv>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	461c      	mov	r4, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001ed0:	f7fe fd90 	bl	80009f4 <__aeabi_dcmplt>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x502>
 8001eda:	2300      	movs	r3, #0
 8001edc:	461c      	mov	r4, r3
 8001ede:	b2e3      	uxtb	r3, r4
 8001ee0:	e160      	b.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ee8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eec:	f7fe f95a 	bl	80001a4 <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001efe:	f7fe fc31 	bl	8000764 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f7fe fd8d 	bl	8000a30 <__aeabi_dcmpgt>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d014      	beq.n	8001f46 <HAL_TIM_PeriodElapsedCallback+0x56a>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f26:	f7fe f93d 	bl	80001a4 <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f38:	f7fe fc14 	bl	8000764 <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001f44:	e015      	b.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x596>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f50:	f7fe f928 	bl	80001a4 <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f62:	f7fe fbff 	bl	8000764 <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f7c:	f7fe f910 	bl	80001a0 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001f8e:	f7fe fbe9 	bl	8000764 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	f7fe fd45 	bl	8000a30 <__aeabi_dcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <HAL_TIM_PeriodElapsedCallback+0x608>
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fb6:	f7fe f8f3 	bl	80001a0 <__aeabi_dsub>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001fc8:	f7fe fbcc 	bl	8000764 <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001fd4:	e01c      	b.n	8002010 <HAL_TIM_PeriodElapsedCallback+0x634>
 8001fd6:	bf00      	nop
 8001fd8:	40900000 	.word	0x40900000
 8001fdc:	3ff00000 	.word	0x3ff00000
 8001fe0:	bff00000 	.word	0xbff00000
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	4bc5      	ldr	r3, [pc, #788]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8001fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fee:	f7fe f8d7 	bl	80001a0 <__aeabi_dsub>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4bc0      	ldr	r3, [pc, #768]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002000:	f7fe fbb0 	bl	8000764 <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	633a      	str	r2, [r7, #48]	; 0x30
 800200a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
 8002010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002014:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002018:	f7fe fcec 	bl	80009f4 <__aeabi_dcmplt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d060      	beq.n	80020e4 <HAL_TIM_PeriodElapsedCallback+0x708>
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4bb6      	ldr	r3, [pc, #728]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800202c:	f7fe f8ba 	bl	80001a4 <__adddf3>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800203e:	f7fe fb91 	bl	8000764 <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	f7fe fced 	bl	8000a30 <__aeabi_dcmpgt>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d021      	beq.n	80020a0 <HAL_TIM_PeriodElapsedCallback+0x6c4>
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4ba7      	ldr	r3, [pc, #668]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002062:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002066:	f7fe f89d 	bl	80001a4 <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4ba2      	ldr	r3, [pc, #648]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002078:	f7fe fb74 	bl	8000764 <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	2301      	movs	r3, #1
 8002086:	461c      	mov	r4, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800208e:	f7fe fccf 	bl	8000a30 <__aeabi_dcmpgt>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6c0>
 8002098:	2300      	movs	r3, #0
 800209a:	461c      	mov	r4, r3
 800209c:	b2e3      	uxtb	r3, r4
 800209e:	e081      	b.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b96      	ldr	r3, [pc, #600]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80020a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020aa:	f7fe f87b 	bl	80001a4 <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4b91      	ldr	r3, [pc, #580]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80020bc:	f7fe fb52 	bl	8000764 <__aeabi_ddiv>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	2301      	movs	r3, #1
 80020ca:	461c      	mov	r4, r3
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	4b8d      	ldr	r3, [pc, #564]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 80020d2:	f7fe fc8f 	bl	80009f4 <__aeabi_dcmplt>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_TIM_PeriodElapsedCallback+0x704>
 80020dc:	2300      	movs	r3, #0
 80020de:	461c      	mov	r4, r3
 80020e0:	b2e3      	uxtb	r3, r4
 80020e2:	e05f      	b.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80020ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020ee:	f7fe f857 	bl	80001a0 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	4b80      	ldr	r3, [pc, #512]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002100:	f7fe fb30 	bl	8000764 <__aeabi_ddiv>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	f04f 0300 	mov.w	r3, #0
 8002114:	f7fe fc8c 	bl	8000a30 <__aeabi_dcmpgt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d021      	beq.n	8002162 <HAL_TIM_PeriodElapsedCallback+0x786>
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b77      	ldr	r3, [pc, #476]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002124:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002128:	f7fe f83a 	bl	80001a0 <__aeabi_dsub>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b71      	ldr	r3, [pc, #452]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800213a:	f7fe fb13 	bl	8000764 <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	2301      	movs	r3, #1
 8002148:	461c      	mov	r4, r3
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8002150:	f7fe fc6e 	bl	8000a30 <__aeabi_dcmpgt>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_PeriodElapsedCallback+0x782>
 800215a:	2300      	movs	r3, #0
 800215c:	461c      	mov	r4, r3
 800215e:	b2e3      	uxtb	r3, r4
 8002160:	e020      	b.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002168:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800216c:	f7fe f818 	bl	80001a0 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800217e:	f7fe faf1 	bl	8000764 <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	2301      	movs	r3, #1
 800218c:	461c      	mov	r4, r3
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 8002194:	f7fe fc2e 	bl	80009f4 <__aeabi_dcmplt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_TIM_PeriodElapsedCallback+0x7c6>
 800219e:	2300      	movs	r3, #0
 80021a0:	461c      	mov	r4, r3
 80021a2:	b2e3      	uxtb	r3, r4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_TIM_PeriodElapsedCallback+0x7d6>
 80021a8:	f04f 0a00 	mov.w	sl, #0
 80021ac:	f8df b154 	ldr.w	fp, [pc, #340]	; 8002304 <HAL_TIM_PeriodElapsedCallback+0x928>
 80021b0:	e2bc      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	4b52      	ldr	r3, [pc, #328]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80021b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021bc:	f7fe fad2 	bl	8000764 <__aeabi_ddiv>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	f7fe fc2e 	bl	8000a30 <__aeabi_dcmpgt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x816>
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80021e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021e4:	f7fe fabe 	bl	8000764 <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80021f0:	e00c      	b.n	800220c <HAL_TIM_PeriodElapsedCallback+0x830>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b42      	ldr	r3, [pc, #264]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80021f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021fc:	f7fe fab2 	bl	8000764 <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	62ba      	str	r2, [r7, #40]	; 0x28
 8002206:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002216:	f7fd ffc5 	bl	80001a4 <__adddf3>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002228:	f7fe fa9c 	bl	8000764 <__aeabi_ddiv>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	f7fe fbf8 	bl	8000a30 <__aeabi_dcmpgt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d014      	beq.n	8002270 <HAL_TIM_PeriodElapsedCallback+0x894>
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800224c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002250:	f7fd ffa8 	bl	80001a4 <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002262:	f7fe fa7f 	bl	8000764 <__aeabi_ddiv>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800226e:	e015      	b.n	800229c <HAL_TIM_PeriodElapsedCallback+0x8c0>
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	4b22      	ldr	r3, [pc, #136]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002276:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800227a:	f7fd ff93 	bl	80001a4 <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800228c:	f7fe fa6a 	bl	8000764 <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	623a      	str	r2, [r7, #32]
 8002296:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80022a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022a6:	f7fd ff7b 	bl	80001a0 <__aeabi_dsub>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80022b8:	f7fe fa54 	bl	8000764 <__aeabi_ddiv>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	f7fe fbb0 	bl	8000a30 <__aeabi_dcmpgt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01a      	beq.n	800230c <HAL_TIM_PeriodElapsedCallback+0x930>
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80022dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022e0:	f7fd ff5e 	bl	80001a0 <__aeabi_dsub>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80022f2:	f7fe fa37 	bl	8000764 <__aeabi_ddiv>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80022fe:	e01b      	b.n	8002338 <HAL_TIM_PeriodElapsedCallback+0x95c>
 8002300:	40900000 	.word	0x40900000
 8002304:	3ff00000 	.word	0x3ff00000
 8002308:	bff00000 	.word	0xbff00000
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4bae      	ldr	r3, [pc, #696]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002316:	f7fd ff43 	bl	80001a0 <__aeabi_dsub>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4ba9      	ldr	r3, [pc, #676]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002328:	f7fe fa1c 	bl	8000764 <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	61ba      	str	r2, [r7, #24]
 8002332:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800233c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002340:	f7fe fb58 	bl	80009f4 <__aeabi_dcmplt>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d048      	beq.n	80023dc <HAL_TIM_PeriodElapsedCallback+0xa00>
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	4b9f      	ldr	r3, [pc, #636]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002350:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002354:	f7fd ff26 	bl	80001a4 <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002366:	f7fe f9fd 	bl	8000764 <__aeabi_ddiv>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	f7fe fb59 	bl	8000a30 <__aeabi_dcmpgt>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d014      	beq.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x9d2>
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b90      	ldr	r3, [pc, #576]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800238a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800238e:	f7fd ff09 	bl	80001a4 <__adddf3>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f04f 0200 	mov.w	r2, #0
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023a0:	f7fe f9e0 	bl	8000764 <__aeabi_ddiv>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80023ac:	e05e      	b.n	800246c <HAL_TIM_PeriodElapsedCallback+0xa90>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b86      	ldr	r3, [pc, #536]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023b8:	f7fd fef4 	bl	80001a4 <__adddf3>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b80      	ldr	r3, [pc, #512]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023ca:	f7fe f9cb 	bl	8000764 <__aeabi_ddiv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80023d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023da:	e047      	b.n	800246c <HAL_TIM_PeriodElapsedCallback+0xa90>
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b7a      	ldr	r3, [pc, #488]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023e6:	f7fd fedb 	bl	80001a0 <__aeabi_dsub>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80023f8:	f7fe f9b4 	bl	8000764 <__aeabi_ddiv>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	f7fe fb10 	bl	8000a30 <__aeabi_dcmpgt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d014      	beq.n	8002440 <HAL_TIM_PeriodElapsedCallback+0xa64>
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800241c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002420:	f7fd febe 	bl	80001a0 <__aeabi_dsub>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002432:	f7fe f997 	bl	8000764 <__aeabi_ddiv>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800243e:	e015      	b.n	800246c <HAL_TIM_PeriodElapsedCallback+0xa90>
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	4b61      	ldr	r3, [pc, #388]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002446:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800244a:	f7fd fea9 	bl	80001a0 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800245c:	f7fe f982 	bl	8000764 <__aeabi_ddiv>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	65ba      	str	r2, [r7, #88]	; 0x58
 8002466:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800246a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800246c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002470:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002474:	f7fe fabe 	bl	80009f4 <__aeabi_dcmplt>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d02c      	beq.n	80024d8 <HAL_TIM_PeriodElapsedCallback+0xafc>
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	4b52      	ldr	r3, [pc, #328]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002484:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002488:	f7fe f96c 	bl	8000764 <__aeabi_ddiv>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f7fe fac8 	bl	8000a30 <__aeabi_dcmpgt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_TIM_PeriodElapsedCallback+0xae2>
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80024ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024b0:	f7fe f958 	bl	8000764 <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4692      	mov	sl, r2
 80024ba:	469b      	mov	fp, r3
 80024bc:	e136      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80024c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024c8:	f7fe f94c 	bl	8000764 <__aeabi_ddiv>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4692      	mov	sl, r2
 80024d2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80024d6:	e129      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80024de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024e2:	f7fd fe5f 	bl	80001a4 <__adddf3>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80024f4:	f7fe f936 	bl	8000764 <__aeabi_ddiv>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4610      	mov	r0, r2
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f7fe fa92 	bl	8000a30 <__aeabi_dcmpgt>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d014      	beq.n	800253c <HAL_TIM_PeriodElapsedCallback+0xb60>
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002518:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800251c:	f7fd fe42 	bl	80001a4 <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4610      	mov	r0, r2
 8002526:	4619      	mov	r1, r3
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800252e:	f7fe f919 	bl	8000764 <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800253a:	e015      	b.n	8002568 <HAL_TIM_PeriodElapsedCallback+0xb8c>
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002546:	f7fd fe2d 	bl	80001a4 <__adddf3>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002558:	f7fe f904 	bl	8000764 <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	613a      	str	r2, [r7, #16]
 8002562:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800256e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002572:	f7fd fe15 	bl	80001a0 <__aeabi_dsub>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4610      	mov	r0, r2
 800257c:	4619      	mov	r1, r3
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002584:	f7fe f8ee 	bl	8000764 <__aeabi_ddiv>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	f7fe fa4a 	bl	8000a30 <__aeabi_dcmpgt>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_TIM_PeriodElapsedCallback+0xbf4>
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80025a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025ac:	f7fd fdf8 	bl	80001a0 <__aeabi_dsub>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80025be:	f7fe f8d1 	bl	8000764 <__aeabi_ddiv>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80025ca:	e017      	b.n	80025fc <HAL_TIM_PeriodElapsedCallback+0xc20>
 80025cc:	40900000 	.word	0x40900000
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80025d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025da:	f7fd fde1 	bl	80001a0 <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80025ec:	f7fe f8ba 	bl	8000764 <__aeabi_ddiv>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002600:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002604:	f7fe f9f6 	bl	80009f4 <__aeabi_dcmplt>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d047      	beq.n	800269e <HAL_TIM_PeriodElapsedCallback+0xcc2>
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002614:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002618:	f7fd fdc4 	bl	80001a4 <__adddf3>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800262a:	f7fe f89b 	bl	8000764 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f7fe f9f7 	bl	8000a30 <__aeabi_dcmpgt>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d014      	beq.n	8002672 <HAL_TIM_PeriodElapsedCallback+0xc96>
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800264e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002652:	f7fd fda7 	bl	80001a4 <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002664:	f7fe f87e 	bl	8000764 <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4692      	mov	sl, r2
 800266e:	469b      	mov	fp, r3
 8002670:	e05c      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002678:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800267c:	f7fd fd92 	bl	80001a4 <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800268e:	f7fe f869 	bl	8000764 <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4692      	mov	sl, r2
 8002698:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800269c:	e046      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80026a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026a8:	f7fd fd7a 	bl	80001a0 <__aeabi_dsub>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80026ba:	f7fe f853 	bl	8000764 <__aeabi_ddiv>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	f7fe f9af 	bl	8000a30 <__aeabi_dcmpgt>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d014      	beq.n	8002702 <HAL_TIM_PeriodElapsedCallback+0xd26>
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80026de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026e2:	f7fd fd5d 	bl	80001a0 <__aeabi_dsub>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80026f4:	f7fe f836 	bl	8000764 <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4692      	mov	sl, r2
 80026fe:	469b      	mov	fp, r3
 8002700:	e014      	b.n	800272c <HAL_TIM_PeriodElapsedCallback+0xd50>
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002708:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800270c:	f7fd fd48 	bl	80001a0 <__aeabi_dsub>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800271e:	f7fe f821 	bl	8000764 <__aeabi_ddiv>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4692      	mov	sl, r2
 8002728:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 800272e:	e9c3 ab00 	strd	sl, fp, [r3]
		set_motor_setting(instruction);
		step_gain = 0;
		state.lock = 1;
		// TODO: build variables for stepper function here to call in div above
	}
	return;
 8002732:	e021      	b.n	8002778 <HAL_TIM_PeriodElapsedCallback+0xd9c>
	} else if (!state.lock) {
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8002736:	7f5b      	ldrb	r3, [r3, #29]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11a      	bne.n	8002778 <HAL_TIM_PeriodElapsedCallback+0xd9c>
		instruction = get_next_queue_ptr();  // decrements queue_size and increments queue_index
 8002742:	f7ff f921 	bl	8001988 <get_next_queue_ptr>
 8002746:	4603      	mov	r3, r0
 8002748:	4a11      	ldr	r2, [pc, #68]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 800274a:	6013      	str	r3, [r2, #0]
		set_motor_setting(instruction);
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe ffcb 	bl	80016ec <set_motor_setting>
		step_gain = 0;
 8002756:	490c      	ldr	r1, [pc, #48]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9c1 2300 	strd	r2, r3, [r1]
		state.lock = 1;
 8002764:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8002766:	7f53      	ldrb	r3, [r2, #29]
 8002768:	f043 0304 	orr.w	r3, r3, #4
 800276c:	7753      	strb	r3, [r2, #29]
	return;
 800276e:	e003      	b.n	8002778 <HAL_TIM_PeriodElapsedCallback+0xd9c>
	if (htim != &htim10) { return; }
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <HAL_TIM_PeriodElapsedCallback+0xd9e>
	if (state.queue_size == 0) { return; }
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_TIM_PeriodElapsedCallback+0xd9e>
	return;
 8002778:	bf00      	nop
}
 800277a:	3770      	adds	r7, #112	; 0x70
 800277c:	46bd      	mov	sp, r7
 800277e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002782:	bf00      	nop
 8002784:	40900000 	.word	0x40900000
 8002788:	200005c8 	.word	0x200005c8
 800278c:	20000178 	.word	0x20000178
 8002790:	20000000 	.word	0x20000000

08002794 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	// only hspi1 is used so there is no need to check
	void* dst = get_next_empty_queue_ptr();  // increments queue_size
 800279c:	f7ff f8d4 	bl	8001948 <get_next_empty_queue_ptr>
 80027a0:	60f8      	str	r0, [r7, #12]
	if (!dst) { return; }  // exit if queue is full
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_SPI_TxRxCpltCallback+0x2c>
	memcpy(dst, &instruction_input, sizeof(MCU_Instruction));
 80027a8:	2220      	movs	r2, #32
 80027aa:	4907      	ldr	r1, [pc, #28]	; (80027c8 <HAL_SPI_TxRxCpltCallback+0x34>)
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f006 faab 	bl	8008d08 <memcpy>
	state.queue_size++;
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_SPI_TxRxCpltCallback+0x38>)
 80027b4:	7f9b      	ldrb	r3, [r3, #30]
 80027b6:	3301      	adds	r3, #1
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_SPI_TxRxCpltCallback+0x38>)
 80027bc:	779a      	strb	r2, [r3, #30]
 80027be:	e000      	b.n	80027c2 <HAL_SPI_TxRxCpltCallback+0x2e>
	if (!dst) { return; }  // exit if queue is full
 80027c0:	bf00      	nop
}
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000598 	.word	0x20000598
 80027cc:	20000178 	.word	0x20000178

080027d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027d0:	b598      	push	{r3, r4, r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 80027d4:	f7fe fa90 	bl	8000cf8 <AS5600_new>
 80027d8:	4603      	mov	r3, r0
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <main+0x1a8>)
 80027dc:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 80027de:	4b66      	ldr	r3, [pc, #408]	; (8002978 <main+0x1a8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a66      	ldr	r2, [pc, #408]	; (800297c <main+0x1ac>)
 80027e4:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 80027e6:	4b64      	ldr	r3, [pc, #400]	; (8002978 <main+0x1a8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a65      	ldr	r2, [pc, #404]	; (8002980 <main+0x1b0>)
 80027ec:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 80027ee:	4b62      	ldr	r3, [pc, #392]	; (8002978 <main+0x1a8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2220      	movs	r2, #32
 80027f4:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 80027f6:	4b60      	ldr	r3, [pc, #384]	; (8002978 <main+0x1a8>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fe:	f000 fc5d 	bl	80030bc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002802:	f000 f8d5 	bl	80029b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002806:	f7fe fe11 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 800280a:	f7fe fddf 	bl	80013cc <MX_DMA_Init>
  MX_SPI1_Init();
 800280e:	f000 f93f 	bl	8002a90 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002812:	f7fe fecf 	bl	80015b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002816:	f7fe f995 	bl	8000b44 <MX_ADC1_Init>
  MX_TIM2_Init();
 800281a:	f000 fb17 	bl	8002e4c <MX_TIM2_Init>
  MX_TIM5_Init();
 800281e:	f000 fb61 	bl	8002ee4 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002822:	f000 fbad 	bl	8002f80 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// disable motor driver
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 8002826:	2201      	movs	r2, #1
 8002828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800282c:	4854      	ldr	r0, [pc, #336]	; (8002980 <main+0x1b0>)
 800282e:	f002 f813 	bl	8004858 <HAL_GPIO_WritePin>

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 8002832:	bf00      	nop
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <main+0x1a8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fa66 	bl	8000d0a <AS5600_init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f7      	bne.n	8002834 <main+0x64>

	state.vel = 0.0;
 8002844:	494f      	ldr	r1, [pc, #316]	; (8002984 <main+0x1b4>)
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9c1 2300 	strd	r2, r3, [r1]
	state.acc = 0.0;
 8002852:	494c      	ldr	r1, [pc, #304]	; (8002984 <main+0x1b4>)
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	state.instrution_id = 0;
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <main+0x1b4>)
 8002862:	2200      	movs	r2, #0
 8002864:	835a      	strh	r2, [r3, #26]
	state.queue_size = 0;
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <main+0x1b4>)
 8002868:	2200      	movs	r2, #0
 800286a:	779a      	strb	r2, [r3, #30]
	state.queue_index = 0;
 800286c:	4b45      	ldr	r3, [pc, #276]	; (8002984 <main+0x1b4>)
 800286e:	2200      	movs	r2, #0
 8002870:	77da      	strb	r2, [r3, #31]
	state.micro_step = 0;
 8002872:	4a44      	ldr	r2, [pc, #272]	; (8002984 <main+0x1b4>)
 8002874:	7f13      	ldrb	r3, [r2, #28]
 8002876:	f36f 0301 	bfc	r3, #0, #2
 800287a:	7713      	strb	r3, [r2, #28]
	state.srd_mode = 0;
 800287c:	4a41      	ldr	r2, [pc, #260]	; (8002984 <main+0x1b4>)
 800287e:	7f13      	ldrb	r3, [r2, #28]
 8002880:	f36f 0382 	bfc	r3, #2, #1
 8002884:	7713      	strb	r3, [r2, #28]
	state.lock = 0;  // TODO: reset this from within the GO_INTERRUPT
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <main+0x1b4>)
 8002888:	7f53      	ldrb	r3, [r2, #29]
 800288a:	f36f 0382 	bfc	r3, #2, #1
 800288e:	7753      	strb	r3, [r2, #29]
	// initialize the state struct using AS5600 position values
	AS5600_get_angle(sensor, &state.raw_angle);
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <main+0x1a8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	493c      	ldr	r1, [pc, #240]	; (8002988 <main+0x1b8>)
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fd59 	bl	800134e <AS5600_get_angle>
	state.pos.angle =	state.raw_angle;
 800289c:	4b39      	ldr	r3, [pc, #228]	; (8002984 <main+0x1b4>)
 800289e:	8b1b      	ldrh	r3, [r3, #24]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	b299      	uxth	r1, r3
 80028a8:	4a36      	ldr	r2, [pc, #216]	; (8002984 <main+0x1b4>)
 80028aa:	8a53      	ldrh	r3, [r2, #18]
 80028ac:	f361 130f 	bfi	r3, r1, #4, #12
 80028b0:	8253      	strh	r3, [r2, #18]
	AS5600_pos_f64 =	state.raw_angle;  // set the current angle to the most accurate value for the euler method
 80028b2:	4b34      	ldr	r3, [pc, #208]	; (8002984 <main+0x1b4>)
 80028b4:	8b1b      	ldrh	r3, [r3, #24]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fdaf 	bl	800041c <__aeabi_ui2d>
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	4932      	ldr	r1, [pc, #200]	; (800298c <main+0x1bc>)
 80028c4:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// TODO: use flag pin to tell CTRL where MCU is in initialization cycle
	// start communication with CTRL
	HAL_TIM_Base_Start(&htim2);  // start timer_2 (for delays)
 80028c8:	4831      	ldr	r0, [pc, #196]	; (8002990 <main+0x1c0>)
 80028ca:	f005 fda9 	bl	8008420 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5 (for simulation time keeping)
 80028ce:	4831      	ldr	r0, [pc, #196]	; (8002994 <main+0x1c4>)
 80028d0:	f005 fda6 	bl	8008420 <HAL_TIM_Base_Start>

	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*)&state, (uint8_t*)&instruction_input, 32);
 80028d4:	2320      	movs	r3, #32
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <main+0x1c8>)
 80028d8:	492a      	ldr	r1, [pc, #168]	; (8002984 <main+0x1b4>)
 80028da:	4830      	ldr	r0, [pc, #192]	; (800299c <main+0x1cc>)
 80028dc:	f005 f916 	bl	8007b0c <HAL_SPI_TransmitReceive_DMA>

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&state.raw_angle, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	4929      	ldr	r1, [pc, #164]	; (8002988 <main+0x1b8>)
 80028e4:	482e      	ldr	r0, [pc, #184]	; (80029a0 <main+0x1d0>)
 80028e6:	f000 fdaf 	bl	8003448 <HAL_ADC_Start_DMA>

	//instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function
	// TODO: FIX ADC NOW IT STARTS FROM 500 AND HANGS ON 4096
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f0:	4823      	ldr	r0, [pc, #140]	; (8002980 <main+0x1b0>)
 80028f2:	f001 ffb1 	bl	8004858 <HAL_GPIO_WritePin>
	TIM5->CNT = 0;
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <main+0x1d4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt) [100Hz]
 80028fc:	482a      	ldr	r0, [pc, #168]	; (80029a8 <main+0x1d8>)
 80028fe:	f005 fde9 	bl	80084d4 <HAL_TIM_Base_Start_IT>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <main+0x1dc>)
 8002904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002908:	a317      	add	r3, pc, #92	; (adr r3, 8002968 <main+0x198>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f7fe f871 	bl	80009f4 <__aeabi_dcmplt>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d124      	bne.n	8002962 <main+0x192>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <main+0x1dc>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	a114      	add	r1, pc, #80	; (adr r1, 8002970 <main+0x1a0>)
 8002920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002924:	f7fd ff1e 	bl	8000764 <__aeabi_ddiv>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f888 	bl	8000a44 <__aeabi_d2uiz>
 8002934:	4603      	mov	r3, r0
 8002936:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800293e:	4810      	ldr	r0, [pc, #64]	; (8002980 <main+0x1b0>)
 8002940:	f001 ff8a 	bl	8004858 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002944:	4623      	mov	r3, r4
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe feba 	bl	80016c0 <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002952:	480b      	ldr	r0, [pc, #44]	; (8002980 <main+0x1b0>)
 8002954:	f001 ff80 	bl	8004858 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002958:	4623      	mov	r3, r4
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe feb0 	bl	80016c0 <delay_us>
 8002960:	e7cf      	b.n	8002902 <main+0x132>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8002962:	bf00      	nop
	while (1) {
 8002964:	e7cd      	b.n	8002902 <main+0x132>
 8002966:	bf00      	nop
 8002968:	eb1c432d 	.word	0xeb1c432d
 800296c:	3f1a36e2 	.word	0x3f1a36e2
 8002970:	00000000 	.word	0x00000000
 8002974:	4052c000 	.word	0x4052c000
 8002978:	200005b8 	.word	0x200005b8
 800297c:	20000124 	.word	0x20000124
 8002980:	40020400 	.word	0x40020400
 8002984:	20000178 	.word	0x20000178
 8002988:	20000190 	.word	0x20000190
 800298c:	200005c0 	.word	0x200005c0
 8002990:	200006ec 	.word	0x200006ec
 8002994:	20000734 	.word	0x20000734
 8002998:	20000598 	.word	0x20000598
 800299c:	200005d0 	.word	0x200005d0
 80029a0:	2000007c 	.word	0x2000007c
 80029a4:	40000c00 	.word	0x40000c00
 80029a8:	2000077c 	.word	0x2000077c
 80029ac:	200005c8 	.word	0x200005c8

080029b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b094      	sub	sp, #80	; 0x50
 80029b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029b6:	f107 0320 	add.w	r3, r7, #32
 80029ba:	2230      	movs	r2, #48	; 0x30
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f006 f9d4 	bl	8008d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029c4:	f107 030c 	add.w	r3, r7, #12
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <SystemClock_Config+0xc8>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	4a26      	ldr	r2, [pc, #152]	; (8002a78 <SystemClock_Config+0xc8>)
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <SystemClock_Config+0xc8>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <SystemClock_Config+0xcc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <SystemClock_Config+0xcc>)
 80029fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <SystemClock_Config+0xcc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a08:	607b      	str	r3, [r7, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a14:	2310      	movs	r3, #16
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a20:	2310      	movs	r3, #16
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002a24:	23c0      	movs	r3, #192	; 0xc0
 8002a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fb9b 	bl	8007170 <HAL_RCC_OscConfig>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a40:	f000 f81e 	bl	8002a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a44:	230f      	movs	r3, #15
 8002a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2103      	movs	r1, #3
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fdfd 	bl	8007660 <HAL_RCC_ClockConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002a6c:	f000 f808 	bl	8002a80 <Error_Handler>
  }
}
 8002a70:	bf00      	nop
 8002a72:	3750      	adds	r7, #80	; 0x50
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40007000 	.word	0x40007000

08002a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002a96:	4a16      	ldr	r2, [pc, #88]	; (8002af0 <MX_SPI1_Init+0x60>)
 8002a98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002ad2:	220a      	movs	r2, #10
 8002ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ad6:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_SPI1_Init+0x5c>)
 8002ad8:	f004 ff8e 	bl	80079f8 <HAL_SPI_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002ae2:	f7ff ffcd 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200005d0 	.word	0x200005d0
 8002af0:	40013000 	.word	0x40013000

08002af4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_SPI_MspInit+0x168>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	f040 809d 	bne.w	8002c52 <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b26:	6453      	str	r3, [r2, #68]	; 0x44
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4a48      	ldr	r2, [pc, #288]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	; 0x30
 8002b44:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <HAL_SPI_MspInit+0x16c>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 8002b50:	23f0      	movs	r3, #240	; 0xf0
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b60:	2305      	movs	r3, #5
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4619      	mov	r1, r3
 8002b6a:	483e      	ldr	r0, [pc, #248]	; (8002c64 <HAL_SPI_MspInit+0x170>)
 8002b6c:	f001 fcf0 	bl	8004550 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002b70:	4b3d      	ldr	r3, [pc, #244]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b72:	4a3e      	ldr	r2, [pc, #248]	; (8002c6c <HAL_SPI_MspInit+0x178>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002b76:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b33      	ldr	r3, [pc, #204]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ba4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ba6:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002ba8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bae:	4b2e      	ldr	r3, [pc, #184]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002bb4:	482c      	ldr	r0, [pc, #176]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002bb6:	f001 f92b 	bl	8003e10 <HAL_DMA_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002bc0:	f7ff ff5e 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a28      	ldr	r2, [pc, #160]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002bc8:	649a      	str	r2, [r3, #72]	; 0x48
 8002bca:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_SPI_MspInit+0x174>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002bd2:	4a28      	ldr	r2, [pc, #160]	; (8002c74 <HAL_SPI_MspInit+0x180>)
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002bd6:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002bdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be4:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bea:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bf0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf8:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c04:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c0c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c10:	2204      	movs	r2, #4
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c16:	2203      	movs	r2, #3
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c26:	4812      	ldr	r0, [pc, #72]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c28:	f001 f8f2 	bl	8003e10 <HAL_DMA_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 8002c32:	f7ff ff25 	bl	8002a80 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c3a:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c3c:	4a0c      	ldr	r2, [pc, #48]	; (8002c70 <HAL_SPI_MspInit+0x17c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2023      	movs	r0, #35	; 0x23
 8002c48:	f001 f8ab 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c4c:	2023      	movs	r0, #35	; 0x23
 8002c4e:	f001 f8c4 	bl	8003dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40013000 	.word	0x40013000
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000
 8002c68:	20000628 	.word	0x20000628
 8002c6c:	40026458 	.word	0x40026458
 8002c70:	20000688 	.word	0x20000688
 8002c74:	40026410 	.word	0x40026410

08002c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_MspInit+0x4c>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <NMI_Handler+0x4>

08002cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <HardFault_Handler+0x4>

08002cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <MemManage_Handler+0x4>

08002cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cde:	e7fe      	b.n	8002cde <BusFault_Handler+0x4>

08002ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce4:	e7fe      	b.n	8002ce4 <UsageFault_Handler+0x4>

08002ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d14:	f000 fa24 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d20:	4802      	ldr	r0, [pc, #8]	; (8002d2c <ADC_IRQHandler+0x10>)
 8002d22:	f000 fa80 	bl	8003226 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000007c 	.word	0x2000007c

08002d30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002d34:	4802      	ldr	r0, [pc, #8]	; (8002d40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d36:	f005 fc2f 	bl	8008598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000077c 	.word	0x2000077c

08002d44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d48:	4802      	ldr	r0, [pc, #8]	; (8002d54 <I2C1_EV_IRQHandler+0x10>)
 8002d4a:	f002 fa03 	bl	8005154 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000124 	.word	0x20000124

08002d58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002d5c:	4802      	ldr	r0, [pc, #8]	; (8002d68 <I2C1_ER_IRQHandler+0x10>)
 8002d5e:	f002 fb4c 	bl	80053fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000124 	.word	0x20000124

08002d6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002d70:	4802      	ldr	r0, [pc, #8]	; (8002d7c <SPI1_IRQHandler+0x10>)
 8002d72:	f004 ffcd 	bl	8007d10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	200005d0 	.word	0x200005d0

08002d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <DMA2_Stream0_IRQHandler+0x10>)
 8002d86:	f001 f96b 	bl	8004060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000688 	.word	0x20000688

08002d94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d98:	4802      	ldr	r0, [pc, #8]	; (8002da4 <DMA2_Stream3_IRQHandler+0x10>)
 8002d9a:	f001 f961 	bl	8004060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000628 	.word	0x20000628

08002da8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <DMA2_Stream4_IRQHandler+0x10>)
 8002dae:	f001 f957 	bl	8004060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200000c4 	.word	0x200000c4

08002dbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <_sbrk+0x5c>)
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <_sbrk+0x60>)
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <_sbrk+0x64>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <_sbrk+0x64>)
 8002dda:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <_sbrk+0x68>)
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <_sbrk+0x64>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d207      	bcs.n	8002dfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dec:	f005 ffb8 	bl	8008d60 <__errno>
 8002df0:	4603      	mov	r3, r0
 8002df2:	220c      	movs	r2, #12
 8002df4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dfa:	e009      	b.n	8002e10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <_sbrk+0x64>)
 8002e0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20020000 	.word	0x20020000
 8002e1c:	00000400 	.word	0x00000400
 8002e20:	200006e8 	.word	0x200006e8
 8002e24:	20000910 	.word	0x20000910

08002e28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <SystemInit+0x20>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <SystemInit+0x20>)
 8002e34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e60:	463b      	mov	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e72:	225f      	movs	r2, #95	; 0x5f
 8002e74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e84:	4b16      	ldr	r3, [pc, #88]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e90:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002e92:	f005 fa75 	bl	8008380 <HAL_TIM_Base_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e9c:	f7ff fdf0 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ea6:	f107 0308 	add.w	r3, r7, #8
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002eae:	f005 fc7b 	bl	80087a8 <HAL_TIM_ConfigClockSource>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eb8:	f7ff fde2 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4805      	ldr	r0, [pc, #20]	; (8002ee0 <MX_TIM2_Init+0x94>)
 8002eca:	f005 fe77 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ed4:	f7ff fdd4 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200006ec 	.word	0x200006ec

08002ee4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef8:	463b      	mov	r3, r7
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <MX_TIM5_Init+0x98>)
 8002f04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f08:	225f      	movs	r2, #95	; 0x5f
 8002f0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f26:	4814      	ldr	r0, [pc, #80]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f28:	f005 fa2a 	bl	8008380 <HAL_TIM_Base_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002f32:	f7ff fda5 	bl	8002a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4619      	mov	r1, r3
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f44:	f005 fc30 	bl	80087a8 <HAL_TIM_ConfigClockSource>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002f4e:	f7ff fd97 	bl	8002a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <MX_TIM5_Init+0x94>)
 8002f60:	f005 fe2c 	bl	8008bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002f6a:	f7ff fd89 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000734 	.word	0x20000734
 8002f7c:	40000c00 	.word	0x40000c00

08002f80 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <MX_TIM10_Init+0x40>)
 8002f88:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002f8c:	225f      	movs	r2, #95	; 0x5f
 8002f8e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002f98:	2264      	movs	r2, #100	; 0x64
 8002f9a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002fa8:	4804      	ldr	r0, [pc, #16]	; (8002fbc <MX_TIM10_Init+0x3c>)
 8002faa:	f005 f9e9 	bl	8008380 <HAL_TIM_Base_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002fb4:	f7ff fd64 	bl	8002a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	2000077c 	.word	0x2000077c
 8002fc0:	40014400 	.word	0x40014400

08002fc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b20      	ldr	r3, [pc, #128]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a1f      	ldr	r2, [pc, #124]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b1d      	ldr	r3, [pc, #116]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002ff2:	e02e      	b.n	8003052 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_TIM_Base_MspInit+0x9c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b13      	ldr	r3, [pc, #76]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	693b      	ldr	r3, [r7, #16]
}
 800301a:	e01a      	b.n	8003052 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a10      	ldr	r2, [pc, #64]	; (8003064 <HAL_TIM_Base_MspInit+0xa0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d115      	bne.n	8003052 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_TIM_Base_MspInit+0x98>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	2019      	movs	r0, #25
 8003048:	f000 feab 	bl	8003da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800304c:	2019      	movs	r0, #25
 800304e:	f000 fec4 	bl	8003dda <HAL_NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40014400 	.word	0x40014400

08003068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800306c:	480d      	ldr	r0, [pc, #52]	; (80030a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800306e:	490e      	ldr	r1, [pc, #56]	; (80030a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003074:	e002      	b.n	800307c <LoopCopyDataInit>

08003076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307a:	3304      	adds	r3, #4

0800307c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800307c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003080:	d3f9      	bcc.n	8003076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003084:	4c0b      	ldr	r4, [pc, #44]	; (80030b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003088:	e001      	b.n	800308e <LoopFillZerobss>

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800308c:	3204      	adds	r2, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003092:	f7ff fec9 	bl	8002e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003096:	f005 fe13 	bl	8008cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309a:	f7ff fb99 	bl	80027d0 <main>
  bx  lr    
 800309e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80030ac:	080091f4 	.word	0x080091f4
  ldr r2, =_sbss
 80030b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80030b4:	20000910 	.word	0x20000910

080030b8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <DMA1_Stream0_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_Init+0x40>)
 80030c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_Init+0x40>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_Init+0x40>)
 80030d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_Init+0x40>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_Init+0x40>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e4:	2003      	movs	r0, #3
 80030e6:	f000 fe51 	bl	8003d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ea:	200f      	movs	r0, #15
 80030ec:	f000 f808 	bl	8003100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030f0:	f7ff fdc2 	bl	8002c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023c00 	.word	0x40023c00

08003100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <HAL_InitTick+0x54>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_InitTick+0x58>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003116:	fbb3 f3f1 	udiv	r3, r3, r1
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fe69 	bl	8003df6 <HAL_SYSTICK_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00e      	b.n	800314c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b0f      	cmp	r3, #15
 8003132:	d80a      	bhi.n	800314a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003134:	2200      	movs	r2, #0
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313c:	f000 fe31 	bl	8003da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_InitTick+0x5c>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	e000      	b.n	800314c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000004 	.word	0x20000004
 8003158:	2000000c 	.word	0x2000000c
 800315c:	20000008 	.word	0x20000008

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000000c 	.word	0x2000000c
 8003184:	200007c4 	.word	0x200007c4

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	200007c4 	.word	0x200007c4

080031a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e033      	b.n	800321e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fd12 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031e6:	f023 0302 	bic.w	r3, r3, #2
 80031ea:	f043 0202 	orr.w	r2, r3, #2
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fb72 	bl	80038dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
 800320e:	e001      	b.n	8003214 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d049      	beq.n	80032f0 <HAL_ADC_IRQHandler+0xca>
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d046      	beq.n	80032f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d127      	bne.n	80032e0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d119      	bne.n	80032e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0220 	bic.w	r2, r2, #32
 80032ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f9a1 	bl	8003628 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 0212 	mvn.w	r2, #18
 80032ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d057      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x190>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d054      	beq.n	80033b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d139      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800334a:	2b00      	cmp	r3, #0
 800334c:	d12b      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d124      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11d      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800336e:	2b00      	cmp	r3, #0
 8003370:	d119      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003380:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fc16 	bl	8003bd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 020c 	mvn.w	r2, #12
 80033b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d017      	beq.n	80033fc <HAL_ADC_IRQHandler+0x1d6>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10d      	bne.n	80033fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f92f 	bl	8003650 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0201 	mvn.w	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800340a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_ADC_IRQHandler+0x218>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	f043 0202 	orr.w	r2, r3, #2
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0220 	mvn.w	r2, #32
 800342c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f918 	bl	8003664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0220 	mvn.w	r2, #32
 800343c:	601a      	str	r2, [r3, #0]
  }
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Start_DMA+0x1e>
 8003462:	2302      	movs	r3, #2
 8003464:	e0ce      	b.n	8003604 <HAL_ADC_Start_DMA+0x1bc>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d018      	beq.n	80034ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800348c:	4b5f      	ldr	r3, [pc, #380]	; (800360c <HAL_ADC_Start_DMA+0x1c4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a5f      	ldr	r2, [pc, #380]	; (8003610 <HAL_ADC_Start_DMA+0x1c8>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0c9a      	lsrs	r2, r3, #18
 8003498:	4613      	mov	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	4413      	add	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034a0:	e002      	b.n	80034a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f9      	bne.n	80034a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d107      	bne.n	80034ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 8086 	bne.w	80035ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003508:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351c:	d106      	bne.n	800352c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f023 0206 	bic.w	r2, r3, #6
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
 800352a:	e002      	b.n	8003532 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_ADC_Start_DMA+0x1cc>)
 800353c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	4a35      	ldr	r2, [pc, #212]	; (8003618 <HAL_ADC_Start_DMA+0x1d0>)
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354a:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_ADC_Start_DMA+0x1d4>)
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	4a33      	ldr	r2, [pc, #204]	; (8003620 <HAL_ADC_Start_DMA+0x1d8>)
 8003554:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800355e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800356e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	334c      	adds	r3, #76	; 0x4c
 800358a:	4619      	mov	r1, r3
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f000 fcec 	bl	8003f6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d129      	bne.n	8003602 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	e020      	b.n	8003602 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_ADC_Start_DMA+0x1dc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11b      	bne.n	8003602 <HAL_ADC_Start_DMA+0x1ba>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d114      	bne.n	8003602 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	e00b      	b.n	8003602 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20000004 	.word	0x20000004
 8003610:	431bde83 	.word	0x431bde83
 8003614:	40012300 	.word	0x40012300
 8003618:	08003ad5 	.word	0x08003ad5
 800361c:	08003b8f 	.word	0x08003b8f
 8003620:	08003bab 	.word	0x08003bab
 8003624:	40012000 	.word	0x40012000

08003628 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x1c>
 8003690:	2302      	movs	r3, #2
 8003692:	e113      	b.n	80038bc <HAL_ADC_ConfigChannel+0x244>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b09      	cmp	r3, #9
 80036a2:	d925      	bls.n	80036f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68d9      	ldr	r1, [r3, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	3b1e      	subs	r3, #30
 80036ba:	2207      	movs	r2, #7
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43da      	mvns	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	400a      	ands	r2, r1
 80036c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68d9      	ldr	r1, [r3, #12]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4618      	mov	r0, r3
 80036dc:	4603      	mov	r3, r0
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	4403      	add	r3, r0
 80036e2:	3b1e      	subs	r3, #30
 80036e4:	409a      	lsls	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e022      	b.n	8003736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6919      	ldr	r1, [r3, #16]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	2207      	movs	r2, #7
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	400a      	ands	r2, r1
 8003712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6919      	ldr	r1, [r3, #16]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	b29b      	uxth	r3, r3
 8003724:	4618      	mov	r0, r3
 8003726:	4603      	mov	r3, r0
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4403      	add	r3, r0
 800372c:	409a      	lsls	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b06      	cmp	r3, #6
 800373c:	d824      	bhi.n	8003788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	3b05      	subs	r3, #5
 8003750:	221f      	movs	r2, #31
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43da      	mvns	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	400a      	ands	r2, r1
 800375e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	4618      	mov	r0, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	3b05      	subs	r3, #5
 800377a:	fa00 f203 	lsl.w	r2, r0, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	635a      	str	r2, [r3, #52]	; 0x34
 8003786:	e04c      	b.n	8003822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b0c      	cmp	r3, #12
 800378e:	d824      	bhi.n	80037da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	3b23      	subs	r3, #35	; 0x23
 80037a2:	221f      	movs	r2, #31
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43da      	mvns	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	400a      	ands	r2, r1
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	3b23      	subs	r3, #35	; 0x23
 80037cc:	fa00 f203 	lsl.w	r2, r0, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
 80037d8:	e023      	b.n	8003822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	3b41      	subs	r3, #65	; 0x41
 80037ec:	221f      	movs	r2, #31
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	4618      	mov	r0, r3
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	3b41      	subs	r3, #65	; 0x41
 8003816:	fa00 f203 	lsl.w	r2, r0, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <HAL_ADC_ConfigChannel+0x250>)
 8003824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a28      	ldr	r2, [pc, #160]	; (80038cc <HAL_ADC_ConfigChannel+0x254>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d10f      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x1d8>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b12      	cmp	r3, #18
 8003836:	d10b      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1d      	ldr	r2, [pc, #116]	; (80038cc <HAL_ADC_ConfigChannel+0x254>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d12b      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x23a>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_ADC_ConfigChannel+0x258>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <HAL_ADC_ConfigChannel+0x1f4>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b11      	cmp	r3, #17
 800386a:	d122      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a11      	ldr	r2, [pc, #68]	; (80038d0 <HAL_ADC_ConfigChannel+0x258>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d111      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <HAL_ADC_ConfigChannel+0x25c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a11      	ldr	r2, [pc, #68]	; (80038d8 <HAL_ADC_ConfigChannel+0x260>)
 8003894:	fba2 2303 	umull	r2, r3, r2, r3
 8003898:	0c9a      	lsrs	r2, r3, #18
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038a4:	e002      	b.n	80038ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f9      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40012300 	.word	0x40012300
 80038cc:	40012000 	.word	0x40012000
 80038d0:	10000012 	.word	0x10000012
 80038d4:	20000004 	.word	0x20000004
 80038d8:	431bde83 	.word	0x431bde83

080038dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038e4:	4b79      	ldr	r3, [pc, #484]	; (8003acc <ADC_Init+0x1f0>)
 80038e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6899      	ldr	r1, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	4a58      	ldr	r2, [pc, #352]	; (8003ad0 <ADC_Init+0x1f4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6899      	ldr	r1, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e00f      	b.n	80039da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0202 	bic.w	r2, r2, #2
 80039e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7e1b      	ldrb	r3, [r3, #24]
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6859      	ldr	r1, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	3b01      	subs	r3, #1
 8003a34:	035a      	lsls	r2, r3, #13
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	e007      	b.n	8003a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	051a      	lsls	r2, r3, #20
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a92:	025a      	lsls	r2, r3, #9
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	029a      	lsls	r2, r3, #10
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40012300 	.word	0x40012300
 8003ad0:	0f000001 	.word	0x0f000001

08003ad4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d13c      	bne.n	8003b68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d12b      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d127      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d119      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0220 	bic.w	r2, r2, #32
 8003b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff fd61 	bl	8003628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b66:	e00e      	b.n	8003b86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fd75 	bl	8003664 <HAL_ADC_ErrorCallback>
}
 8003b7a:	e004      	b.n	8003b86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fd4d 	bl	800363c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2240      	movs	r2, #64	; 0x40
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7ff fd4a 	bl	8003664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1e:	4a04      	ldr	r2, [pc, #16]	; (8003c30 <__NVIC_SetPriorityGrouping+0x44>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	60d3      	str	r3, [r2, #12]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__NVIC_GetPriorityGrouping+0x18>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 0307 	and.w	r3, r3, #7
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	db0b      	blt.n	8003c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4907      	ldr	r1, [pc, #28]	; (8003c88 <__NVIC_EnableIRQ+0x38>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2001      	movs	r0, #1
 8003c72:	fa00 f202 	lsl.w	r2, r0, r2
 8003c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000e100 	.word	0xe000e100

08003c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f1c3 0307 	rsb	r3, r3, #7
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf28      	it	cs
 8003cfe:	2304      	movcs	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d902      	bls.n	8003d10 <NVIC_EncodePriority+0x30>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3b03      	subs	r3, #3
 8003d0e:	e000      	b.n	8003d12 <NVIC_EncodePriority+0x32>
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	4313      	orrs	r3, r2
         );
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d58:	d301      	bcc.n	8003d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00f      	b.n	8003d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <SysTick_Config+0x40>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d66:	210f      	movs	r1, #15
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d6c:	f7ff ff8e 	bl	8003c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <SysTick_Config+0x40>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <SysTick_Config+0x40>)
 8003d78:	2207      	movs	r2, #7
 8003d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	e000e010 	.word	0xe000e010

08003d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f7ff ff29 	bl	8003bec <__NVIC_SetPriorityGrouping>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db4:	f7ff ff3e 	bl	8003c34 <__NVIC_GetPriorityGrouping>
 8003db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68b9      	ldr	r1, [r7, #8]
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7ff ff8e 	bl	8003ce0 <NVIC_EncodePriority>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff5d 	bl	8003c8c <__NVIC_SetPriority>
}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	4603      	mov	r3, r0
 8003de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff31 	bl	8003c50 <__NVIC_EnableIRQ>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ffa2 	bl	8003d48 <SysTick_Config>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e1c:	f7ff f9b4 	bl	8003188 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e099      	b.n	8003f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e4c:	e00f      	b.n	8003e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e4e:	f7ff f99b 	bl	8003188 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d908      	bls.n	8003e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2203      	movs	r2, #3
 8003e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e078      	b.n	8003f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e8      	bne.n	8003e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4b38      	ldr	r3, [pc, #224]	; (8003f68 <HAL_DMA_Init+0x158>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f023 0307 	bic.w	r3, r3, #7
 8003eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d117      	bne.n	8003f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fa9f 	bl	8004458 <DMA_CheckFifoParam>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2240      	movs	r2, #64	; 0x40
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e016      	b.n	8003f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa56 	bl	80043ec <DMA_CalcBaseAndBitshift>
 8003f40:	4603      	mov	r3, r0
 8003f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	223f      	movs	r2, #63	; 0x3f
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	f010803f 	.word	0xf010803f

08003f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Start_IT+0x26>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e040      	b.n	8004014 <HAL_DMA_Start_IT+0xa8>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d12f      	bne.n	8004006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 f9e8 	bl	8004390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	223f      	movs	r2, #63	; 0x3f
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0216 	orr.w	r2, r2, #22
 8003fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0208 	orr.w	r2, r2, #8
 8003ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e005      	b.n	8004012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004012:	7dfb      	ldrb	r3, [r7, #23]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d004      	beq.n	800403a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e00c      	b.n	8004054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2205      	movs	r2, #5
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800406c:	4b8e      	ldr	r3, [pc, #568]	; (80042a8 <HAL_DMA_IRQHandler+0x248>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a8e      	ldr	r2, [pc, #568]	; (80042ac <HAL_DMA_IRQHandler+0x24c>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408a:	2208      	movs	r2, #8
 800408c:	409a      	lsls	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d01a      	beq.n	80040cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0204 	bic.w	r2, r2, #4
 80040b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b8:	2208      	movs	r2, #8
 80040ba:	409a      	lsls	r2, r3
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	2201      	movs	r2, #1
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d012      	beq.n	8004102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	2204      	movs	r2, #4
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d012      	beq.n	8004138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	2204      	movs	r2, #4
 8004126:	409a      	lsls	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f043 0204 	orr.w	r2, r3, #4
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413c:	2210      	movs	r2, #16
 800413e:	409a      	lsls	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d043      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d03c      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2210      	movs	r2, #16
 800415c:	409a      	lsls	r2, r3
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d018      	beq.n	80041a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d108      	bne.n	8004190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d024      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e01f      	b.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
 80041a0:	e016      	b.n	80041d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0208 	bic.w	r2, r2, #8
 80041be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	2220      	movs	r2, #32
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 808f 	beq.w	8004300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8087 	beq.w	8004300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2220      	movs	r2, #32
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b05      	cmp	r3, #5
 8004208:	d136      	bne.n	8004278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0216 	bic.w	r2, r2, #22
 8004218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d103      	bne.n	800423a <HAL_DMA_IRQHandler+0x1da>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0208 	bic.w	r2, r2, #8
 8004248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	223f      	movs	r2, #63	; 0x3f
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	2b00      	cmp	r3, #0
 800426c:	d07e      	beq.n	800436c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	4798      	blx	r3
        }
        return;
 8004276:	e079      	b.n	800436c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d01d      	beq.n	80042c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10d      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	2b00      	cmp	r3, #0
 800429a:	d031      	beq.n	8004300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	4798      	blx	r3
 80042a4:	e02c      	b.n	8004300 <HAL_DMA_IRQHandler+0x2a0>
 80042a6:	bf00      	nop
 80042a8:	20000004 	.word	0x20000004
 80042ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d023      	beq.n	8004300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	4798      	blx	r3
 80042c0:	e01e      	b.n	8004300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10f      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0210 	bic.w	r2, r2, #16
 80042de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004304:	2b00      	cmp	r3, #0
 8004306:	d032      	beq.n	800436e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d022      	beq.n	800435a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2205      	movs	r2, #5
 8004318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3301      	adds	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	429a      	cmp	r2, r3
 8004336:	d307      	bcc.n	8004348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f2      	bne.n	800432c <HAL_DMA_IRQHandler+0x2cc>
 8004346:	e000      	b.n	800434a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e000      	b.n	800436e <HAL_DMA_IRQHandler+0x30e>
        return;
 800436c:	bf00      	nop
    }
  }
}
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004382:	b2db      	uxtb	r3, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d108      	bne.n	80043d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043ce:	e007      	b.n	80043e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	60da      	str	r2, [r3, #12]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	3b10      	subs	r3, #16
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <DMA_CalcBaseAndBitshift+0x64>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	091b      	lsrs	r3, r3, #4
 8004404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <DMA_CalcBaseAndBitshift+0x68>)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b03      	cmp	r3, #3
 8004418:	d909      	bls.n	800442e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	1d1a      	adds	r2, r3, #4
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	659a      	str	r2, [r3, #88]	; 0x58
 800442c:	e007      	b.n	800443e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	aaaaaaab 	.word	0xaaaaaaab
 8004454:	080091dc 	.word	0x080091dc

08004458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11f      	bne.n	80044b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d856      	bhi.n	8004526 <DMA_CheckFifoParam+0xce>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <DMA_CheckFifoParam+0x28>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	08004491 	.word	0x08004491
 8004484:	080044a3 	.word	0x080044a3
 8004488:	08004491 	.word	0x08004491
 800448c:	08004527 	.word	0x08004527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d046      	beq.n	800452a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a0:	e043      	b.n	800452a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044aa:	d140      	bne.n	800452e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b0:	e03d      	b.n	800452e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ba:	d121      	bne.n	8004500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d837      	bhi.n	8004532 <DMA_CheckFifoParam+0xda>
 80044c2:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <DMA_CheckFifoParam+0x70>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044df 	.word	0x080044df
 80044d0:	080044d9 	.word	0x080044d9
 80044d4:	080044f1 	.word	0x080044f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e030      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d025      	beq.n	8004536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ee:	e022      	b.n	8004536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044f8:	d11f      	bne.n	800453a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044fe:	e01c      	b.n	800453a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d903      	bls.n	800450e <DMA_CheckFifoParam+0xb6>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d003      	beq.n	8004514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800450c:	e018      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	73fb      	strb	r3, [r7, #15]
      break;
 8004512:	e015      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e00b      	b.n	800453e <DMA_CheckFifoParam+0xe6>
      break;
 8004526:	bf00      	nop
 8004528:	e00a      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;
 800452a:	bf00      	nop
 800452c:	e008      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;
 800452e:	bf00      	nop
 8004530:	e006      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;
 8004532:	bf00      	nop
 8004534:	e004      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;
 8004536:	bf00      	nop
 8004538:	e002      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;   
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <DMA_CheckFifoParam+0xe8>
      break;
 800453e:	bf00      	nop
    }
  } 
  
  return status; 
 8004540:	7bfb      	ldrb	r3, [r7, #15]
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e159      	b.n	8004820 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800456c:	2201      	movs	r2, #1
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	f040 8148 	bne.w	800481a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b01      	cmp	r3, #1
 8004594:	d005      	beq.n	80045a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d130      	bne.n	8004604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	2203      	movs	r2, #3
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045d8:	2201      	movs	r2, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 0201 	and.w	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 0303 	and.w	r3, r3, #3
 800460c:	2b03      	cmp	r3, #3
 800460e:	d017      	beq.n	8004640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2203      	movs	r2, #3
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d123      	bne.n	8004694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	220f      	movs	r2, #15
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	08da      	lsrs	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3208      	adds	r2, #8
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	2203      	movs	r2, #3
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0203 	and.w	r2, r3, #3
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a2 	beq.w	800481a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_GPIO_Init+0x2e8>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_GPIO_Init+0x2e8>)
 80046e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	4b54      	ldr	r3, [pc, #336]	; (8004838 <HAL_GPIO_Init+0x2e8>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f2:	4a52      	ldr	r2, [pc, #328]	; (800483c <HAL_GPIO_Init+0x2ec>)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a49      	ldr	r2, [pc, #292]	; (8004840 <HAL_GPIO_Init+0x2f0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d019      	beq.n	8004752 <HAL_GPIO_Init+0x202>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a48      	ldr	r2, [pc, #288]	; (8004844 <HAL_GPIO_Init+0x2f4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d013      	beq.n	800474e <HAL_GPIO_Init+0x1fe>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a47      	ldr	r2, [pc, #284]	; (8004848 <HAL_GPIO_Init+0x2f8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00d      	beq.n	800474a <HAL_GPIO_Init+0x1fa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a46      	ldr	r2, [pc, #280]	; (800484c <HAL_GPIO_Init+0x2fc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <HAL_GPIO_Init+0x1f6>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a45      	ldr	r2, [pc, #276]	; (8004850 <HAL_GPIO_Init+0x300>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <HAL_GPIO_Init+0x1f2>
 800473e:	2304      	movs	r3, #4
 8004740:	e008      	b.n	8004754 <HAL_GPIO_Init+0x204>
 8004742:	2307      	movs	r3, #7
 8004744:	e006      	b.n	8004754 <HAL_GPIO_Init+0x204>
 8004746:	2303      	movs	r3, #3
 8004748:	e004      	b.n	8004754 <HAL_GPIO_Init+0x204>
 800474a:	2302      	movs	r3, #2
 800474c:	e002      	b.n	8004754 <HAL_GPIO_Init+0x204>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_GPIO_Init+0x204>
 8004752:	2300      	movs	r3, #0
 8004754:	69fa      	ldr	r2, [r7, #28]
 8004756:	f002 0203 	and.w	r2, r2, #3
 800475a:	0092      	lsls	r2, r2, #2
 800475c:	4093      	lsls	r3, r2
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004764:	4935      	ldr	r1, [pc, #212]	; (800483c <HAL_GPIO_Init+0x2ec>)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	089b      	lsrs	r3, r3, #2
 800476a:	3302      	adds	r3, #2
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004772:	4b38      	ldr	r3, [pc, #224]	; (8004854 <HAL_GPIO_Init+0x304>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004796:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <HAL_GPIO_Init+0x304>)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800479c:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <HAL_GPIO_Init+0x304>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c0:	4a24      	ldr	r2, [pc, #144]	; (8004854 <HAL_GPIO_Init+0x304>)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <HAL_GPIO_Init+0x304>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ea:	4a1a      	ldr	r2, [pc, #104]	; (8004854 <HAL_GPIO_Init+0x304>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047f0:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_GPIO_Init+0x304>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004814:	4a0f      	ldr	r2, [pc, #60]	; (8004854 <HAL_GPIO_Init+0x304>)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3301      	adds	r3, #1
 800481e:	61fb      	str	r3, [r7, #28]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	f67f aea2 	bls.w	800456c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004828:	bf00      	nop
 800482a:	bf00      	nop
 800482c:	3724      	adds	r7, #36	; 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	40013800 	.word	0x40013800
 8004840:	40020000 	.word	0x40020000
 8004844:	40020400 	.word	0x40020400
 8004848:	40020800 	.word	0x40020800
 800484c:	40020c00 	.word	0x40020c00
 8004850:	40021000 	.word	0x40021000
 8004854:	40013c00 	.word	0x40013c00

08004858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
 8004864:	4613      	mov	r3, r2
 8004866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004868:	787b      	ldrb	r3, [r7, #1]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004874:	e003      	b.n	800487e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004876:	887b      	ldrh	r3, [r7, #2]
 8004878:	041a      	lsls	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	619a      	str	r2, [r3, #24]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e12b      	b.n	8004af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7fc feac 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2224      	movs	r2, #36	; 0x24
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0201 	bic.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048f0:	f003 f86e 	bl	80079d0 <HAL_RCC_GetPCLK1Freq>
 80048f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4a81      	ldr	r2, [pc, #516]	; (8004b00 <HAL_I2C_Init+0x274>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d807      	bhi.n	8004910 <HAL_I2C_Init+0x84>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a80      	ldr	r2, [pc, #512]	; (8004b04 <HAL_I2C_Init+0x278>)
 8004904:	4293      	cmp	r3, r2
 8004906:	bf94      	ite	ls
 8004908:	2301      	movls	r3, #1
 800490a:	2300      	movhi	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e006      	b.n	800491e <HAL_I2C_Init+0x92>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a7d      	ldr	r2, [pc, #500]	; (8004b08 <HAL_I2C_Init+0x27c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	bf94      	ite	ls
 8004918:	2301      	movls	r3, #1
 800491a:	2300      	movhi	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0e7      	b.n	8004af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a78      	ldr	r2, [pc, #480]	; (8004b0c <HAL_I2C_Init+0x280>)
 800492a:	fba2 2303 	umull	r2, r3, r2, r3
 800492e:	0c9b      	lsrs	r3, r3, #18
 8004930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	430a      	orrs	r2, r1
 8004944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	4a6a      	ldr	r2, [pc, #424]	; (8004b00 <HAL_I2C_Init+0x274>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d802      	bhi.n	8004960 <HAL_I2C_Init+0xd4>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3301      	adds	r3, #1
 800495e:	e009      	b.n	8004974 <HAL_I2C_Init+0xe8>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	4a69      	ldr	r2, [pc, #420]	; (8004b10 <HAL_I2C_Init+0x284>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	099b      	lsrs	r3, r3, #6
 8004972:	3301      	adds	r3, #1
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	430b      	orrs	r3, r1
 800497a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	495c      	ldr	r1, [pc, #368]	; (8004b00 <HAL_I2C_Init+0x274>)
 8004990:	428b      	cmp	r3, r1
 8004992:	d819      	bhi.n	80049c8 <HAL_I2C_Init+0x13c>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1e59      	subs	r1, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fbb1 f3f3 	udiv	r3, r1, r3
 80049a2:	1c59      	adds	r1, r3, #1
 80049a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049a8:	400b      	ands	r3, r1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_I2C_Init+0x138>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1e59      	subs	r1, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049bc:	3301      	adds	r3, #1
 80049be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c2:	e051      	b.n	8004a68 <HAL_I2C_Init+0x1dc>
 80049c4:	2304      	movs	r3, #4
 80049c6:	e04f      	b.n	8004a68 <HAL_I2C_Init+0x1dc>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d111      	bne.n	80049f4 <HAL_I2C_Init+0x168>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e58      	subs	r0, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6859      	ldr	r1, [r3, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e012      	b.n	8004a1a <HAL_I2C_Init+0x18e>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1e58      	subs	r0, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	0099      	lsls	r1, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Init+0x196>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e022      	b.n	8004a68 <HAL_I2C_Init+0x1dc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10e      	bne.n	8004a48 <HAL_I2C_Init+0x1bc>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1e58      	subs	r0, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	460b      	mov	r3, r1
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	440b      	add	r3, r1
 8004a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a46:	e00f      	b.n	8004a68 <HAL_I2C_Init+0x1dc>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1e58      	subs	r0, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	0099      	lsls	r1, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	6809      	ldr	r1, [r1, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6911      	ldr	r1, [r2, #16]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	68d2      	ldr	r2, [r2, #12]
 8004aa2:	4311      	orrs	r1, r2
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	000186a0 	.word	0x000186a0
 8004b04:	001e847f 	.word	0x001e847f
 8004b08:	003d08ff 	.word	0x003d08ff
 8004b0c:	431bde83 	.word	0x431bde83
 8004b10:	10624dd3 	.word	0x10624dd3

08004b14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b2e:	f7fe fb2b 	bl	8003188 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	f040 80d9 	bne.w	8004cf4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2319      	movs	r3, #25
 8004b48:	2201      	movs	r2, #1
 8004b4a:	496d      	ldr	r1, [pc, #436]	; (8004d00 <HAL_I2C_Mem_Write+0x1ec>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f002 f8e5 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e0cc      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_I2C_Mem_Write+0x56>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0c5      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d007      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2221      	movs	r2, #33	; 0x21
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2240      	movs	r2, #64	; 0x40
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <HAL_I2C_Mem_Write+0x1f0>)
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd2:	88f8      	ldrh	r0, [r7, #6]
 8004bd4:	893a      	ldrh	r2, [r7, #8]
 8004bd6:	8979      	ldrh	r1, [r7, #10]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4603      	mov	r3, r0
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f001 fe74 	bl	80068d0 <I2C_RequestMemoryWrite>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d052      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e081      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f002 f966 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d107      	bne.n	8004c1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e06b      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d11b      	bne.n	8004c94 <HAL_I2C_Mem_Write+0x180>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d017      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1aa      	bne.n	8004bf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f002 f952 	bl	8006f4a <I2C_WaitOnBTFFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00d      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d107      	bne.n	8004cc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e016      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e000      	b.n	8004cf6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cf4:	2302      	movs	r3, #2
  }
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	00100002 	.word	0x00100002
 8004d04:	ffff0000 	.word	0xffff0000

08004d08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08c      	sub	sp, #48	; 0x30
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	461a      	mov	r2, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	817b      	strh	r3, [r7, #10]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	813b      	strh	r3, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d22:	f7fe fa31 	bl	8003188 <HAL_GetTick>
 8004d26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	f040 8208 	bne.w	8005146 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	2319      	movs	r3, #25
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	497b      	ldr	r1, [pc, #492]	; (8004f2c <HAL_I2C_Mem_Read+0x224>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f001 ffeb 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e1fb      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_I2C_Mem_Read+0x56>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e1f4      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d007      	beq.n	8004d84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2222      	movs	r2, #34	; 0x22
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004db4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a5b      	ldr	r2, [pc, #364]	; (8004f30 <HAL_I2C_Mem_Read+0x228>)
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dc6:	88f8      	ldrh	r0, [r7, #6]
 8004dc8:	893a      	ldrh	r2, [r7, #8]
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f001 fe10 	bl	80069fc <I2C_RequestMemoryRead>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e1b0      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d113      	bne.n	8004e16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	2300      	movs	r3, #0
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e184      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d11b      	bne.n	8004e56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e164      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11b      	bne.n	8004e96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	e144      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004eac:	e138      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	f200 80f1 	bhi.w	800509a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d123      	bne.n	8004f08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f002 f8b3 	bl	8007030 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e139      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f06:	e10b      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d14e      	bne.n	8004fae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2200      	movs	r2, #0
 8004f18:	4906      	ldr	r1, [pc, #24]	; (8004f34 <HAL_I2C_Mem_Read+0x22c>)
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f001 fefe 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e10e      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
 8004f2a:	bf00      	nop
 8004f2c:	00100002 	.word	0x00100002
 8004f30:	ffff0000 	.word	0xffff0000
 8004f34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fac:	e0b8      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4966      	ldr	r1, [pc, #408]	; (8005150 <HAL_I2C_Mem_Read+0x448>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f001 feaf 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0bf      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2200      	movs	r2, #0
 8005012:	494f      	ldr	r1, [pc, #316]	; (8005150 <HAL_I2C_Mem_Read+0x448>)
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f001 fe81 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e091      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	b2d2      	uxtb	r2, r2
 8005040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005098:	e042      	b.n	8005120 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f001 ffc6 	bl	8007030 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e04c      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d118      	bne.n	8005120 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	b2d2      	uxtb	r2, r2
 80050fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f aec2 	bne.w	8004eae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	00010004 	.word	0x00010004

08005154 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005174:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d003      	beq.n	800518c <HAL_I2C_EV_IRQHandler+0x38>
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	f040 80b1 	bne.w	80052ee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80051ac:	d003      	beq.n	80051b6 <HAL_I2C_EV_IRQHandler+0x62>
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80051b4:	d101      	bne.n	80051ba <HAL_I2C_EV_IRQHandler+0x66>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_I2C_EV_IRQHandler+0x68>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f000 8114 	beq.w	80053ea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00b      	beq.n	80051e4 <HAL_I2C_EV_IRQHandler+0x90>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d006      	beq.n	80051e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f001 ffaf 	bl	800713a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fd5e 	bl	8005c9e <I2C_Master_SB>
 80051e2:	e083      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d008      	beq.n	8005200 <HAL_I2C_EV_IRQHandler+0xac>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fdd6 	bl	8005daa <I2C_Master_ADD10>
 80051fe:	e075      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_I2C_EV_IRQHandler+0xc8>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fdf2 	bl	8005dfe <I2C_Master_ADDR>
 800521a:	e067      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005234:	f000 80db 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x10a>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_I2C_EV_IRQHandler+0x10a>
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f9d6 	bl	8005608 <I2C_MasterTransmit_TXE>
 800525c:	e046      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80c2 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80bc 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005276:	7bbb      	ldrb	r3, [r7, #14]
 8005278:	2b21      	cmp	r3, #33	; 0x21
 800527a:	d103      	bne.n	8005284 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fa5f 	bl	8005740 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005282:	e0b4      	b.n	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b40      	cmp	r3, #64	; 0x40
 8005288:	f040 80b1 	bne.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 facd 	bl	800582c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005292:	e0ac      	b.n	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a2:	f000 80a4 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00d      	beq.n	80052cc <HAL_I2C_EV_IRQHandler+0x178>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d008      	beq.n	80052cc <HAL_I2C_EV_IRQHandler+0x178>
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d103      	bne.n	80052cc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb45 	bl	8005954 <I2C_MasterReceive_RXNE>
 80052ca:	e00f      	b.n	80052ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 808b 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8085 	beq.w	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fbf0 	bl	8005aca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ea:	e080      	b.n	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
 80052ec:	e07f      	b.n	80053ee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	e007      	b.n	8005310 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d011      	beq.n	800533e <HAL_I2C_EV_IRQHandler+0x1ea>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 ffb0 	bl	800629c <I2C_Slave_ADDR>
 800533c:	e05a      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b00      	cmp	r3, #0
 8005346:	d008      	beq.n	800535a <HAL_I2C_EV_IRQHandler+0x206>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 ffea 	bl	800632c <I2C_Slave_STOPF>
 8005358:	e04c      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	2b21      	cmp	r3, #33	; 0x21
 800535e:	d002      	beq.n	8005366 <HAL_I2C_EV_IRQHandler+0x212>
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	2b29      	cmp	r3, #41	; 0x29
 8005364:	d120      	bne.n	80053a8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <HAL_I2C_EV_IRQHandler+0x238>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_I2C_EV_IRQHandler+0x238>
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d103      	bne.n	800538c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fecb 	bl	8006120 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800538a:	e032      	b.n	80053f2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02d      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0x29e>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539c:	2b00      	cmp	r3, #0
 800539e:	d028      	beq.n	80053f2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fefa 	bl	800619a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053a6:	e024      	b.n	80053f2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00d      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x27a>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x27a>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d103      	bne.n	80053ce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 ff08 	bl	80061dc <I2C_SlaveReceive_RXNE>
 80053cc:	e012      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 ff38 	bl	8006258 <I2C_SlaveReceive_BTF>
 80053e8:	e004      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80053ea:	bf00      	nop
 80053ec:	e002      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08a      	sub	sp, #40	; 0x28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005412:	2300      	movs	r3, #0
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <HAL_I2C_ER_IRQHandler+0x4a>
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d008      	beq.n	8005444 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005442:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <HAL_I2C_ER_IRQHandler+0x70>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005468:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005470:	2b00      	cmp	r3, #0
 8005472:	d03e      	beq.n	80054f2 <HAL_I2C_ER_IRQHandler+0xf8>
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d039      	beq.n	80054f2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800547e:	7efb      	ldrb	r3, [r7, #27]
 8005480:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005498:	7ebb      	ldrb	r3, [r7, #26]
 800549a:	2b20      	cmp	r3, #32
 800549c:	d112      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xca>
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10f      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xca>
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	2b21      	cmp	r3, #33	; 0x21
 80054a8:	d008      	beq.n	80054bc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80054aa:	7cfb      	ldrb	r3, [r7, #19]
 80054ac:	2b29      	cmp	r3, #41	; 0x29
 80054ae:	d005      	beq.n	80054bc <HAL_I2C_ER_IRQHandler+0xc2>
 80054b0:	7cfb      	ldrb	r3, [r7, #19]
 80054b2:	2b28      	cmp	r3, #40	; 0x28
 80054b4:	d106      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b21      	cmp	r3, #33	; 0x21
 80054ba:	d103      	bne.n	80054c4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 f865 	bl	800658c <I2C_Slave_AF>
 80054c2:	e016      	b.n	80054f2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d002      	beq.n	80054e2 <HAL_I2C_ER_IRQHandler+0xe8>
 80054dc:	7efb      	ldrb	r3, [r7, #27]
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_I2C_ER_IRQHandler+0x11e>
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d008      	beq.n	8005518 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005516:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d008      	beq.n	8005530 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 f89e 	bl	800666c <I2C_ITError>
  }
}
 8005530:	bf00      	nop
 8005532:	3728      	adds	r7, #40	; 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]
 8005594:	4613      	mov	r3, r2
 8005596:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005616:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d150      	bne.n	80056d0 <I2C_MasterTransmit_TXE+0xc8>
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b21      	cmp	r3, #33	; 0x21
 8005632:	d14d      	bne.n	80056d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b08      	cmp	r3, #8
 8005638:	d01d      	beq.n	8005676 <I2C_MasterTransmit_TXE+0x6e>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b20      	cmp	r3, #32
 800563e:	d01a      	beq.n	8005676 <I2C_MasterTransmit_TXE+0x6e>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005646:	d016      	beq.n	8005676 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005656:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2211      	movs	r2, #17
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff ff62 	bl	8005538 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005674:	e060      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005684:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005694:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d107      	bne.n	80056c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff7d 	bl	80055b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056be:	e03b      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff35 	bl	8005538 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056ce:	e033      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b21      	cmp	r3, #33	; 0x21
 80056d4:	d005      	beq.n	80056e2 <I2C_MasterTransmit_TXE+0xda>
 80056d6:	7bbb      	ldrb	r3, [r7, #14]
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d12d      	bne.n	8005738 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	2b22      	cmp	r3, #34	; 0x22
 80056e0:	d12a      	bne.n	8005738 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d108      	bne.n	80056fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80056fc:	e01c      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d103      	bne.n	8005712 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f88e 	bl	800582c <I2C_MemoryTransmit_TXE_BTF>
}
 8005710:	e012      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005736:	e7ff      	b.n	8005738 <I2C_MasterTransmit_TXE+0x130>
 8005738:	bf00      	nop
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b21      	cmp	r3, #33	; 0x21
 8005758:	d164      	bne.n	8005824 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005788:	e04c      	b.n	8005824 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d01d      	beq.n	80057cc <I2C_MasterTransmit_BTF+0x8c>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b20      	cmp	r3, #32
 8005794:	d01a      	beq.n	80057cc <I2C_MasterTransmit_BTF+0x8c>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800579c:	d016      	beq.n	80057cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2211      	movs	r2, #17
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff feb7 	bl	8005538 <HAL_I2C_MasterTxCpltCallback>
}
 80057ca:	e02b      	b.n	8005824 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d107      	bne.n	8005816 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff fed2 	bl	80055b8 <HAL_I2C_MemTxCpltCallback>
}
 8005814:	e006      	b.n	8005824 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7ff fe8a 	bl	8005538 <HAL_I2C_MasterTxCpltCallback>
}
 8005824:	bf00      	nop
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	2b00      	cmp	r3, #0
 8005842:	d11d      	bne.n	8005880 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10b      	bne.n	8005864 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005850:	b2da      	uxtb	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005862:	e073      	b.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005868:	b29b      	uxth	r3, r3
 800586a:	121b      	asrs	r3, r3, #8
 800586c:	b2da      	uxtb	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800587e:	e065      	b.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10b      	bne.n	80058a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588c:	b2da      	uxtb	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800589e:	e055      	b.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d151      	bne.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b22      	cmp	r3, #34	; 0x22
 80058ac:	d10d      	bne.n	80058ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058c8:	e040      	b.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b21      	cmp	r3, #33	; 0x21
 80058d8:	d112      	bne.n	8005900 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	781a      	ldrb	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058fe:	e025      	b.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d120      	bne.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b21      	cmp	r3, #33	; 0x21
 800590e:	d11d      	bne.n	800594c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800591e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff fe36 	bl	80055b8 <HAL_I2C_MemTxCpltCallback>
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b22      	cmp	r3, #34	; 0x22
 8005966:	f040 80ac 	bne.w	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d921      	bls.n	80059bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691a      	ldr	r2, [r3, #16]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	f040 808c 	bne.w	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80059ba:	e082      	b.n	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d075      	beq.n	8005ab0 <I2C_MasterReceive_RXNE+0x15c>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d002      	beq.n	80059d0 <I2C_MasterReceive_RXNE+0x7c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d16f      	bne.n	8005ab0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 fafb 	bl	8006fcc <I2C_WaitOnSTOPRequestThroughIT>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d142      	bne.n	8005a62 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d10a      	bne.n	8005a4c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7ff fdc1 	bl	80055cc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a4a:	e03a      	b.n	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2212      	movs	r2, #18
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff fd76 	bl	800554c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005a60:	e02f      	b.n	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fd99 	bl	80055e0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005aae:	e008      	b.n	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abe:	605a      	str	r2, [r3, #4]
}
 8005ac0:	e7ff      	b.n	8005ac2 <I2C_MasterReceive_RXNE+0x16e>
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d11b      	bne.n	8005b1a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005b18:	e0bd      	b.n	8005c96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d129      	bne.n	8005b78 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b32:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d00a      	beq.n	8005b50 <I2C_MasterReceive_BTF+0x86>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d007      	beq.n	8005b50 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b76:	e08e      	b.n	8005c96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d176      	bne.n	8005c70 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d002      	beq.n	8005b8e <I2C_MasterReceive_BTF+0xc4>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d108      	bne.n	8005ba0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e019      	b.n	8005bd4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d002      	beq.n	8005bac <I2C_MasterReceive_BTF+0xe2>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d108      	bne.n	8005bbe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e00a      	b.n	8005bd4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d007      	beq.n	8005bd4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d10a      	bne.n	8005c5a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fcba 	bl	80055cc <HAL_I2C_MemRxCpltCallback>
}
 8005c58:	e01d      	b.n	8005c96 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2212      	movs	r2, #18
 8005c66:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fc6f 	bl	800554c <HAL_I2C_MasterRxCpltCallback>
}
 8005c6e:	e012      	b.n	8005c96 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d117      	bne.n	8005ce2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d109      	bne.n	8005cce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ccc:	e067      	b.n	8005d9e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	f043 0301 	orr.w	r3, r3, #1
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	611a      	str	r2, [r3, #16]
}
 8005ce0:	e05d      	b.n	8005d9e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cea:	d133      	bne.n	8005d54 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b21      	cmp	r3, #33	; 0x21
 8005cf6:	d109      	bne.n	8005d0c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d08:	611a      	str	r2, [r3, #16]
 8005d0a:	e008      	b.n	8005d1e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d004      	beq.n	8005d30 <I2C_Master_SB+0x92>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d108      	bne.n	8005d42 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d032      	beq.n	8005d9e <I2C_Master_SB+0x100>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d02d      	beq.n	8005d9e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d50:	605a      	str	r2, [r3, #4]
}
 8005d52:	e024      	b.n	8005d9e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10e      	bne.n	8005d7a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	11db      	asrs	r3, r3, #7
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	f003 0306 	and.w	r3, r3, #6
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f063 030f 	orn	r3, r3, #15
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
}
 8005d78:	e011      	b.n	8005d9e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d10d      	bne.n	8005d9e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	11db      	asrs	r3, r3, #7
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0306 	and.w	r3, r3, #6
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f063 030e 	orn	r3, r3, #14
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	611a      	str	r2, [r3, #16]
}
 8005d9e:	bf00      	nop
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d004      	beq.n	8005dd0 <I2C_Master_ADD10+0x26>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d108      	bne.n	8005de2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <I2C_Master_ADD10+0x48>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d007      	beq.n	8005df2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df0:	605a      	str	r2, [r3, #4]
  }
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b091      	sub	sp, #68	; 0x44
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e14:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b22      	cmp	r3, #34	; 0x22
 8005e26:	f040 8169 	bne.w	80060fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <I2C_Master_ADDR+0x54>
 8005e32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d10b      	bne.n	8005e52 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	633b      	str	r3, [r7, #48]	; 0x30
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	e160      	b.n	8006114 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d11d      	bne.n	8005e96 <I2C_Master_ADDR+0x98>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e62:	d118      	bne.n	8005e96 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e64:	2300      	movs	r3, #0
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e88:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	651a      	str	r2, [r3, #80]	; 0x50
 8005e94:	e13e      	b.n	8006114 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d113      	bne.n	8005ec8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e115      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	f040 808a 	bne.w	8005fe8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eda:	d137      	bne.n	8005f4c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efa:	d113      	bne.n	8005f24 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f0a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	e0e7      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f24:	2300      	movs	r3, #0
 8005f26:	623b      	str	r3, [r7, #32]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e0d3      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d02e      	beq.n	8005fb0 <I2C_Master_ADDR+0x1b2>
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d02b      	beq.n	8005fb0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5a:	2b12      	cmp	r3, #18
 8005f5c:	d102      	bne.n	8005f64 <I2C_Master_ADDR+0x166>
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d125      	bne.n	8005fb0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00e      	beq.n	8005f88 <I2C_Master_ADDR+0x18a>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d00b      	beq.n	8005f88 <I2C_Master_ADDR+0x18a>
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d008      	beq.n	8005f88 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e007      	b.n	8005f98 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f96:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	e0a1      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fbe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	61bb      	str	r3, [r7, #24]
 8005fd4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e085      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d14d      	bne.n	800608e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d016      	beq.n	8006026 <I2C_Master_ADDR+0x228>
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d013      	beq.n	8006026 <I2C_Master_ADDR+0x228>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	2b10      	cmp	r3, #16
 8006002:	d010      	beq.n	8006026 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006012:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e007      	b.n	8006036 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006044:	d117      	bne.n	8006076 <I2C_Master_ADDR+0x278>
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800604c:	d00b      	beq.n	8006066 <I2C_Master_ADDR+0x268>
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	2b01      	cmp	r3, #1
 8006052:	d008      	beq.n	8006066 <I2C_Master_ADDR+0x268>
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	2b08      	cmp	r3, #8
 8006058:	d005      	beq.n	8006066 <I2C_Master_ADDR+0x268>
 800605a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605c:	2b10      	cmp	r3, #16
 800605e:	d002      	beq.n	8006066 <I2C_Master_ADDR+0x268>
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	2b20      	cmp	r3, #32
 8006064:	d107      	bne.n	8006076 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006074:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006076:	2300      	movs	r3, #0
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	e032      	b.n	80060f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800609c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ac:	d117      	bne.n	80060de <I2C_Master_ADDR+0x2e0>
 80060ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060b4:	d00b      	beq.n	80060ce <I2C_Master_ADDR+0x2d0>
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d008      	beq.n	80060ce <I2C_Master_ADDR+0x2d0>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d005      	beq.n	80060ce <I2C_Master_ADDR+0x2d0>
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d002      	beq.n	80060ce <I2C_Master_ADDR+0x2d0>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d107      	bne.n	80060de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060fa:	e00b      	b.n	8006114 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	e7ff      	b.n	8006114 <I2C_Master_ADDR+0x316>
 8006114:	bf00      	nop
 8006116:	3744      	adds	r7, #68	; 0x44
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d02b      	beq.n	8006192 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d114      	bne.n	8006192 <I2C_SlaveTransmit_TXE+0x72>
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	2b29      	cmp	r3, #41	; 0x29
 800616c:	d111      	bne.n	8006192 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2221      	movs	r2, #33	; 0x21
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2228      	movs	r2, #40	; 0x28
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff f9e7 	bl	8005560 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d011      	beq.n	80061d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02c      	beq.n	8006250 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d114      	bne.n	8006250 <I2C_SlaveReceive_RXNE+0x74>
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	2b2a      	cmp	r3, #42	; 0x2a
 800622a:	d111      	bne.n	8006250 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2222      	movs	r2, #34	; 0x22
 8006240:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2228      	movs	r2, #40	; 0x28
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff f992 	bl	8005574 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d012      	beq.n	8006290 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062b6:	2b28      	cmp	r3, #40	; 0x28
 80062b8:	d125      	bne.n	8006306 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d103      	bne.n	80062ea <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	81bb      	strh	r3, [r7, #12]
 80062e8:	e002      	b.n	80062f0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062f8:	89ba      	ldrh	r2, [r7, #12]
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff f942 	bl	8005588 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006304:	e00e      	b.n	8006324 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800634a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800634c:	2300      	movs	r3, #0
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006378:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006388:	d172      	bne.n	8006470 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	2b22      	cmp	r3, #34	; 0x22
 800638e:	d002      	beq.n	8006396 <I2C_Slave_STOPF+0x6a>
 8006390:	7bfb      	ldrb	r3, [r7, #15]
 8006392:	2b2a      	cmp	r3, #42	; 0x2a
 8006394:	d135      	bne.n	8006402 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fd ffd0 	bl	8004374 <HAL_DMA_GetState>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d049      	beq.n	800646e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	4a69      	ldr	r2, [pc, #420]	; (8006584 <I2C_Slave_STOPF+0x258>)
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fd fe18 	bl	800401c <HAL_DMA_Abort_IT>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d03d      	beq.n	800646e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006400:	e035      	b.n	800646e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006434:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	4618      	mov	r0, r3
 800643c:	f7fd ff9a 	bl	8004374 <HAL_DMA_GetState>
 8006440:	4603      	mov	r3, r0
 8006442:	2b01      	cmp	r3, #1
 8006444:	d014      	beq.n	8006470 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	4a4e      	ldr	r2, [pc, #312]	; (8006584 <I2C_Slave_STOPF+0x258>)
 800644c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006452:	4618      	mov	r0, r3
 8006454:	f7fd fde2 	bl	800401c <HAL_DMA_Abort_IT>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006468:	4610      	mov	r0, r2
 800646a:	4798      	blx	r3
 800646c:	e000      	b.n	8006470 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800646e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d03e      	beq.n	80064f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b04      	cmp	r3, #4
 8006486:	d112      	bne.n	80064ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d112      	bne.n	80064e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f0:	f043 0204 	orr.w	r2, r3, #4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f8b3 	bl	800666c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006506:	e039      	b.n	800657c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2b2a      	cmp	r3, #42	; 0x2a
 800650c:	d109      	bne.n	8006522 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2228      	movs	r2, #40	; 0x28
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff f829 	bl	8005574 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b28      	cmp	r3, #40	; 0x28
 800652c:	d111      	bne.n	8006552 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <I2C_Slave_STOPF+0x25c>)
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2220      	movs	r2, #32
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff f82a 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
}
 8006550:	e014      	b.n	800657c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	2b22      	cmp	r3, #34	; 0x22
 8006558:	d002      	beq.n	8006560 <I2C_Slave_STOPF+0x234>
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b22      	cmp	r3, #34	; 0x22
 800655e:	d10d      	bne.n	800657c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fe fffc 	bl	8005574 <HAL_I2C_SlaveRxCpltCallback>
}
 800657c:	bf00      	nop
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	08006bcd 	.word	0x08006bcd
 8006588:	ffff0000 	.word	0xffff0000

0800658c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d002      	beq.n	80065ae <I2C_Slave_AF+0x22>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d129      	bne.n	8006602 <I2C_Slave_AF+0x76>
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b28      	cmp	r3, #40	; 0x28
 80065b2:	d126      	bne.n	8006602 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <I2C_Slave_AF+0xdc>)
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fe ffd2 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006600:	e02e      	b.n	8006660 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b21      	cmp	r3, #33	; 0x21
 8006606:	d126      	bne.n	8006656 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a17      	ldr	r2, [pc, #92]	; (8006668 <I2C_Slave_AF+0xdc>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2221      	movs	r2, #33	; 0x21
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2220      	movs	r2, #32
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006632:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800663c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe ff86 	bl	8005560 <HAL_I2C_SlaveTxCpltCallback>
}
 8006654:	e004      	b.n	8006660 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800665e:	615a      	str	r2, [r3, #20]
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	ffff0000 	.word	0xffff0000

0800666c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006682:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b10      	cmp	r3, #16
 8006688:	d002      	beq.n	8006690 <I2C_ITError+0x24>
 800668a:	7bbb      	ldrb	r3, [r7, #14]
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d10a      	bne.n	80066a6 <I2C_ITError+0x3a>
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	2b22      	cmp	r3, #34	; 0x22
 8006694:	d107      	bne.n	80066a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066ac:	2b28      	cmp	r3, #40	; 0x28
 80066ae:	d107      	bne.n	80066c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2228      	movs	r2, #40	; 0x28
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066be:	e015      	b.n	80066ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ce:	d00a      	beq.n	80066e6 <I2C_ITError+0x7a>
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b60      	cmp	r3, #96	; 0x60
 80066d4:	d007      	beq.n	80066e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066fa:	d162      	bne.n	80067c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800670a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b01      	cmp	r3, #1
 8006718:	d020      	beq.n	800675c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671e:	4a6a      	ldr	r2, [pc, #424]	; (80068c8 <I2C_ITError+0x25c>)
 8006720:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006726:	4618      	mov	r0, r3
 8006728:	f7fd fc78 	bl	800401c <HAL_DMA_Abort_IT>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8089 	beq.w	8006846 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006756:	4610      	mov	r0, r2
 8006758:	4798      	blx	r3
 800675a:	e074      	b.n	8006846 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <I2C_ITError+0x25c>)
 8006762:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	4618      	mov	r0, r3
 800676a:	f7fd fc57 	bl	800401c <HAL_DMA_Abort_IT>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d068      	beq.n	8006846 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d10b      	bne.n	800679a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067bc:	4610      	mov	r0, r2
 80067be:	4798      	blx	r3
 80067c0:	e041      	b.n	8006846 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b60      	cmp	r3, #96	; 0x60
 80067cc:	d125      	bne.n	800681a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d10b      	bne.n	8006802 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fe feee 	bl	80055f4 <HAL_I2C_AbortCpltCallback>
 8006818:	e015      	b.n	8006846 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d10b      	bne.n	8006840 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691a      	ldr	r2, [r3, #16]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fe fecd 	bl	80055e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10e      	bne.n	8006874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006866:	2b00      	cmp	r3, #0
 8006868:	d104      	bne.n	8006874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006882:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800688a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b04      	cmp	r3, #4
 8006896:	d113      	bne.n	80068c0 <I2C_ITError+0x254>
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	2b28      	cmp	r3, #40	; 0x28
 800689c:	d110      	bne.n	80068c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a0a      	ldr	r2, [pc, #40]	; (80068cc <I2C_ITError+0x260>)
 80068a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fe fe72 	bl	80055a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	08006bcd 	.word	0x08006bcd
 80068cc:	ffff0000 	.word	0xffff0000

080068d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	817b      	strh	r3, [r7, #10]
 80068e2:	460b      	mov	r3, r1
 80068e4:	813b      	strh	r3, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	2200      	movs	r2, #0
 8006902:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 fa08 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006920:	d103      	bne.n	800692a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e05f      	b.n	80069ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800692e:	897b      	ldrh	r3, [r7, #10]
 8006930:	b2db      	uxtb	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800693c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	492d      	ldr	r1, [pc, #180]	; (80069f8 <I2C_RequestMemoryWrite+0x128>)
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fa40 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e04c      	b.n	80069ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800696a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696c:	6a39      	ldr	r1, [r7, #32]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 faaa 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00d      	beq.n	8006996 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b04      	cmp	r3, #4
 8006980:	d107      	bne.n	8006992 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006990:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e02b      	b.n	80069ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d105      	bne.n	80069a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800699c:	893b      	ldrh	r3, [r7, #8]
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	611a      	str	r2, [r3, #16]
 80069a6:	e021      	b.n	80069ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069a8:	893b      	ldrh	r3, [r7, #8]
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	6a39      	ldr	r1, [r7, #32]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fa84 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00d      	beq.n	80069e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d107      	bne.n	80069de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e005      	b.n	80069ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069e2:	893b      	ldrh	r3, [r7, #8]
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	00010002 	.word	0x00010002

080069fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af02      	add	r7, sp, #8
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	817b      	strh	r3, [r7, #10]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	813b      	strh	r3, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f96a 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5c:	d103      	bne.n	8006a66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e0aa      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a6a:	897b      	ldrh	r3, [r7, #10]
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	6a3a      	ldr	r2, [r7, #32]
 8006a7e:	4952      	ldr	r1, [pc, #328]	; (8006bc8 <I2C_RequestMemoryRead+0x1cc>)
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f9a2 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e097      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa8:	6a39      	ldr	r1, [r7, #32]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fa0c 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d107      	bne.n	8006ace <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006acc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e076      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ad2:	88fb      	ldrh	r3, [r7, #6]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d105      	bne.n	8006ae4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ad8:	893b      	ldrh	r3, [r7, #8]
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	611a      	str	r2, [r3, #16]
 8006ae2:	e021      	b.n	8006b28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	0a1b      	lsrs	r3, r3, #8
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af4:	6a39      	ldr	r1, [r7, #32]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 f9e6 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d107      	bne.n	8006b1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e050      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b1e:	893b      	ldrh	r3, [r7, #8]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	6a39      	ldr	r1, [r7, #32]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f9cb 	bl	8006ec8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00d      	beq.n	8006b54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	d107      	bne.n	8006b50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e035      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f8d3 	bl	8006d1c <I2C_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00d      	beq.n	8006b98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8a:	d103      	bne.n	8006b94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e013      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b98:	897b      	ldrh	r3, [r7, #10]
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	4906      	ldr	r1, [pc, #24]	; (8006bc8 <I2C_RequestMemoryRead+0x1cc>)
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f90b 	bl	8006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	00010002 	.word	0x00010002

08006bcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006be6:	4b4b      	ldr	r3, [pc, #300]	; (8006d14 <I2C_DMAAbort+0x148>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	08db      	lsrs	r3, r3, #3
 8006bec:	4a4a      	ldr	r2, [pc, #296]	; (8006d18 <I2C_DMAAbort+0x14c>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	0a1a      	lsrs	r2, r3, #8
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00da      	lsls	r2, r3, #3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f043 0220 	orr.w	r2, r3, #32
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006c12:	e00a      	b.n	8006c2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d0ea      	beq.n	8006c00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c36:	2200      	movs	r2, #0
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	2200      	movs	r2, #0
 8006c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d10e      	bne.n	8006cba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f7fe fc9e 	bl	80055f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cb8:	e027      	b.n	8006d0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cba:	7cfb      	ldrb	r3, [r7, #19]
 8006cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006cc0:	2b28      	cmp	r3, #40	; 0x28
 8006cc2:	d117      	bne.n	8006cf4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ce2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2228      	movs	r2, #40	; 0x28
 8006cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cf2:	e007      	b.n	8006d04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006d04:	6978      	ldr	r0, [r7, #20]
 8006d06:	f7fe fc6b 	bl	80055e0 <HAL_I2C_ErrorCallback>
}
 8006d0a:	bf00      	nop
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000004 	.word	0x20000004
 8006d18:	14f8b589 	.word	0x14f8b589

08006d1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2c:	e025      	b.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d34:	d021      	beq.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d36:	f7fc fa27 	bl	8003188 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d302      	bcc.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d116      	bne.n	8006d7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e023      	b.n	8006dc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d10d      	bne.n	8006da0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	43da      	mvns	r2, r3
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	bf0c      	ite	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	2300      	movne	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	e00c      	b.n	8006dba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	bf0c      	ite	eq
 8006db2:	2301      	moveq	r3, #1
 8006db4:	2300      	movne	r3, #0
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d0b6      	beq.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
 8006dd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dd8:	e051      	b.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de8:	d123      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006df8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f043 0204 	orr.w	r2, r3, #4
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e046      	b.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e38:	d021      	beq.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3a:	f7fc f9a5 	bl	8003188 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d302      	bcc.n	8006e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d116      	bne.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e020      	b.n	8006ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10c      	bne.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	43da      	mvns	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	e00b      	b.n	8006eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	43da      	mvns	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d18d      	bne.n	8006dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed4:	e02d      	b.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f900 	bl	80070dc <I2C_IsAcknowledgeFailed>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e02d      	b.n	8006f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eec:	d021      	beq.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eee:	f7fc f94b 	bl	8003188 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d302      	bcc.n	8006f04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d116      	bne.n	8006f32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f043 0220 	orr.w	r2, r3, #32
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e007      	b.n	8006f42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b80      	cmp	r3, #128	; 0x80
 8006f3e:	d1ca      	bne.n	8006ed6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b084      	sub	sp, #16
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f56:	e02d      	b.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f8bf 	bl	80070dc <I2C_IsAcknowledgeFailed>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e02d      	b.n	8006fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d021      	beq.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f70:	f7fc f90a 	bl	8003188 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d302      	bcc.n	8006f86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d116      	bne.n	8006fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	f043 0220 	orr.w	r2, r3, #32
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e007      	b.n	8006fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d1ca      	bne.n	8006f58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fd8:	4b13      	ldr	r3, [pc, #76]	; (8007028 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	08db      	lsrs	r3, r3, #3
 8006fde:	4a13      	ldr	r2, [pc, #76]	; (800702c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe4:	0a1a      	lsrs	r2, r3, #8
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d107      	bne.n	800700a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0220 	orr.w	r2, r3, #32
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e008      	b.n	800701c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d0e9      	beq.n	8006fee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	20000004 	.word	0x20000004
 800702c:	14f8b589 	.word	0x14f8b589

08007030 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800703c:	e042      	b.n	80070c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	f003 0310 	and.w	r3, r3, #16
 8007048:	2b10      	cmp	r3, #16
 800704a:	d119      	bne.n	8007080 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0210 	mvn.w	r2, #16
 8007054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e029      	b.n	80070d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007080:	f7fc f882 	bl	8003188 <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	d302      	bcc.n	8007096 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	f043 0220 	orr.w	r2, r3, #32
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e007      	b.n	80070d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d1b5      	bne.n	800703e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f2:	d11b      	bne.n	800712c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	f043 0204 	orr.w	r2, r3, #4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800714a:	d103      	bne.n	8007154 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007152:	e007      	b.n	8007164 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800715c:	d102      	bne.n	8007164 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e267      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d075      	beq.n	800727a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800718e:	4b88      	ldr	r3, [pc, #544]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 030c 	and.w	r3, r3, #12
 8007196:	2b04      	cmp	r3, #4
 8007198:	d00c      	beq.n	80071b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800719a:	4b85      	ldr	r3, [pc, #532]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071a2:	2b08      	cmp	r3, #8
 80071a4:	d112      	bne.n	80071cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071a6:	4b82      	ldr	r3, [pc, #520]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b2:	d10b      	bne.n	80071cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	4b7e      	ldr	r3, [pc, #504]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d05b      	beq.n	8007278 <HAL_RCC_OscConfig+0x108>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d157      	bne.n	8007278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e242      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d4:	d106      	bne.n	80071e4 <HAL_RCC_OscConfig+0x74>
 80071d6:	4b76      	ldr	r3, [pc, #472]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a75      	ldr	r2, [pc, #468]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	e01d      	b.n	8007220 <HAL_RCC_OscConfig+0xb0>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071ec:	d10c      	bne.n	8007208 <HAL_RCC_OscConfig+0x98>
 80071ee:	4b70      	ldr	r3, [pc, #448]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a6f      	ldr	r2, [pc, #444]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	4b6d      	ldr	r3, [pc, #436]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a6c      	ldr	r2, [pc, #432]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	e00b      	b.n	8007220 <HAL_RCC_OscConfig+0xb0>
 8007208:	4b69      	ldr	r3, [pc, #420]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800720e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	4b66      	ldr	r3, [pc, #408]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a65      	ldr	r2, [pc, #404]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800721a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800721e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d013      	beq.n	8007250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007228:	f7fb ffae 	bl	8003188 <HAL_GetTick>
 800722c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007230:	f7fb ffaa 	bl	8003188 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b64      	cmp	r3, #100	; 0x64
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e207      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007242:	4b5b      	ldr	r3, [pc, #364]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCC_OscConfig+0xc0>
 800724e:	e014      	b.n	800727a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007250:	f7fb ff9a 	bl	8003188 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007258:	f7fb ff96 	bl	8003188 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b64      	cmp	r3, #100	; 0x64
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e1f3      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800726a:	4b51      	ldr	r3, [pc, #324]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0xe8>
 8007276:	e000      	b.n	800727a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d063      	beq.n	800734e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007286:	4b4a      	ldr	r3, [pc, #296]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00b      	beq.n	80072aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007292:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800729a:	2b08      	cmp	r3, #8
 800729c:	d11c      	bne.n	80072d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800729e:	4b44      	ldr	r3, [pc, #272]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d116      	bne.n	80072d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072aa:	4b41      	ldr	r3, [pc, #260]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_RCC_OscConfig+0x152>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d001      	beq.n	80072c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e1c7      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c2:	4b3b      	ldr	r3, [pc, #236]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	4937      	ldr	r1, [pc, #220]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072d6:	e03a      	b.n	800734e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d020      	beq.n	8007322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072e0:	4b34      	ldr	r3, [pc, #208]	; (80073b4 <HAL_RCC_OscConfig+0x244>)
 80072e2:	2201      	movs	r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e6:	f7fb ff4f 	bl	8003188 <HAL_GetTick>
 80072ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ec:	e008      	b.n	8007300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ee:	f7fb ff4b 	bl	8003188 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d901      	bls.n	8007300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e1a8      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007300:	4b2b      	ldr	r3, [pc, #172]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0f0      	beq.n	80072ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800730c:	4b28      	ldr	r3, [pc, #160]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	4925      	ldr	r1, [pc, #148]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 800731c:	4313      	orrs	r3, r2
 800731e:	600b      	str	r3, [r1, #0]
 8007320:	e015      	b.n	800734e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007322:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <HAL_RCC_OscConfig+0x244>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007328:	f7fb ff2e 	bl	8003188 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007330:	f7fb ff2a 	bl	8003188 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e187      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007342:	4b1b      	ldr	r3, [pc, #108]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1f0      	bne.n	8007330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d036      	beq.n	80073c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007362:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <HAL_RCC_OscConfig+0x248>)
 8007364:	2201      	movs	r2, #1
 8007366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007368:	f7fb ff0e 	bl	8003188 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007370:	f7fb ff0a 	bl	8003188 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e167      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_OscConfig+0x240>)
 8007384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0f0      	beq.n	8007370 <HAL_RCC_OscConfig+0x200>
 800738e:	e01b      	b.n	80073c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007390:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <HAL_RCC_OscConfig+0x248>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007396:	f7fb fef7 	bl	8003188 <HAL_GetTick>
 800739a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800739c:	e00e      	b.n	80073bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800739e:	f7fb fef3 	bl	8003188 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d907      	bls.n	80073bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e150      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
 80073b0:	40023800 	.word	0x40023800
 80073b4:	42470000 	.word	0x42470000
 80073b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073bc:	4b88      	ldr	r3, [pc, #544]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80073be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1ea      	bne.n	800739e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0304 	and.w	r3, r3, #4
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8097 	beq.w	8007504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073da:	4b81      	ldr	r3, [pc, #516]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10f      	bne.n	8007406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	4b7d      	ldr	r3, [pc, #500]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	4a7c      	ldr	r2, [pc, #496]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6413      	str	r3, [r2, #64]	; 0x40
 80073f6:	4b7a      	ldr	r3, [pc, #488]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007402:	2301      	movs	r3, #1
 8007404:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007406:	4b77      	ldr	r3, [pc, #476]	; (80075e4 <HAL_RCC_OscConfig+0x474>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800740e:	2b00      	cmp	r3, #0
 8007410:	d118      	bne.n	8007444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007412:	4b74      	ldr	r3, [pc, #464]	; (80075e4 <HAL_RCC_OscConfig+0x474>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a73      	ldr	r2, [pc, #460]	; (80075e4 <HAL_RCC_OscConfig+0x474>)
 8007418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800741c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800741e:	f7fb feb3 	bl	8003188 <HAL_GetTick>
 8007422:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007426:	f7fb feaf 	bl	8003188 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e10c      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007438:	4b6a      	ldr	r3, [pc, #424]	; (80075e4 <HAL_RCC_OscConfig+0x474>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0f0      	beq.n	8007426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d106      	bne.n	800745a <HAL_RCC_OscConfig+0x2ea>
 800744c:	4b64      	ldr	r3, [pc, #400]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 800744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007450:	4a63      	ldr	r2, [pc, #396]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	6713      	str	r3, [r2, #112]	; 0x70
 8007458:	e01c      	b.n	8007494 <HAL_RCC_OscConfig+0x324>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b05      	cmp	r3, #5
 8007460:	d10c      	bne.n	800747c <HAL_RCC_OscConfig+0x30c>
 8007462:	4b5f      	ldr	r3, [pc, #380]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	4a5e      	ldr	r2, [pc, #376]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	6713      	str	r3, [r2, #112]	; 0x70
 800746e:	4b5c      	ldr	r3, [pc, #368]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	4a5b      	ldr	r2, [pc, #364]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007474:	f043 0301 	orr.w	r3, r3, #1
 8007478:	6713      	str	r3, [r2, #112]	; 0x70
 800747a:	e00b      	b.n	8007494 <HAL_RCC_OscConfig+0x324>
 800747c:	4b58      	ldr	r3, [pc, #352]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	4a57      	ldr	r2, [pc, #348]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007482:	f023 0301 	bic.w	r3, r3, #1
 8007486:	6713      	str	r3, [r2, #112]	; 0x70
 8007488:	4b55      	ldr	r3, [pc, #340]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	4a54      	ldr	r2, [pc, #336]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 800748e:	f023 0304 	bic.w	r3, r3, #4
 8007492:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d015      	beq.n	80074c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749c:	f7fb fe74 	bl	8003188 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a2:	e00a      	b.n	80074ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a4:	f7fb fe70 	bl	8003188 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e0cb      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ba:	4b49      	ldr	r3, [pc, #292]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0ee      	beq.n	80074a4 <HAL_RCC_OscConfig+0x334>
 80074c6:	e014      	b.n	80074f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c8:	f7fb fe5e 	bl	8003188 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074ce:	e00a      	b.n	80074e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d0:	f7fb fe5a 	bl	8003188 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	f241 3288 	movw	r2, #5000	; 0x1388
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e0b5      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e6:	4b3e      	ldr	r3, [pc, #248]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1ee      	bne.n	80074d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d105      	bne.n	8007504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074f8:	4b39      	ldr	r3, [pc, #228]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	4a38      	ldr	r2, [pc, #224]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80074fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007502:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80a1 	beq.w	8007650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800750e:	4b34      	ldr	r3, [pc, #208]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 030c 	and.w	r3, r3, #12
 8007516:	2b08      	cmp	r3, #8
 8007518:	d05c      	beq.n	80075d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	2b02      	cmp	r3, #2
 8007520:	d141      	bne.n	80075a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007522:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <HAL_RCC_OscConfig+0x478>)
 8007524:	2200      	movs	r2, #0
 8007526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007528:	f7fb fe2e 	bl	8003188 <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007530:	f7fb fe2a 	bl	8003188 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e087      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007542:	4b27      	ldr	r3, [pc, #156]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69da      	ldr	r2, [r3, #28]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	019b      	lsls	r3, r3, #6
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	085b      	lsrs	r3, r3, #1
 8007566:	3b01      	subs	r3, #1
 8007568:	041b      	lsls	r3, r3, #16
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	061b      	lsls	r3, r3, #24
 8007572:	491b      	ldr	r1, [pc, #108]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 8007574:	4313      	orrs	r3, r2
 8007576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <HAL_RCC_OscConfig+0x478>)
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800757e:	f7fb fe03 	bl	8003188 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007586:	f7fb fdff 	bl	8003188 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e05c      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007598:	4b11      	ldr	r3, [pc, #68]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_OscConfig+0x416>
 80075a4:	e054      	b.n	8007650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <HAL_RCC_OscConfig+0x478>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ac:	f7fb fdec 	bl	8003188 <HAL_GetTick>
 80075b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b2:	e008      	b.n	80075c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075b4:	f7fb fde8 	bl	8003188 <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d901      	bls.n	80075c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e045      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <HAL_RCC_OscConfig+0x470>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f0      	bne.n	80075b4 <HAL_RCC_OscConfig+0x444>
 80075d2:	e03d      	b.n	8007650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d107      	bne.n	80075ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e038      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
 80075e0:	40023800 	.word	0x40023800
 80075e4:	40007000 	.word	0x40007000
 80075e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ec:	4b1b      	ldr	r3, [pc, #108]	; (800765c <HAL_RCC_OscConfig+0x4ec>)
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d028      	beq.n	800764c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007604:	429a      	cmp	r2, r3
 8007606:	d121      	bne.n	800764c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007612:	429a      	cmp	r2, r3
 8007614:	d11a      	bne.n	800764c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800761c:	4013      	ands	r3, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007624:	4293      	cmp	r3, r2
 8007626:	d111      	bne.n	800764c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	3b01      	subs	r3, #1
 8007636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007638:	429a      	cmp	r2, r3
 800763a:	d107      	bne.n	800764c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40023800 	.word	0x40023800

08007660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0cc      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007674:	4b68      	ldr	r3, [pc, #416]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d90c      	bls.n	800769c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007682:	4b65      	ldr	r3, [pc, #404]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800768a:	4b63      	ldr	r3, [pc, #396]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d001      	beq.n	800769c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e0b8      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d020      	beq.n	80076ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076b4:	4b59      	ldr	r3, [pc, #356]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	4a58      	ldr	r2, [pc, #352]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d005      	beq.n	80076d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076cc:	4b53      	ldr	r3, [pc, #332]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	4a52      	ldr	r2, [pc, #328]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d8:	4b50      	ldr	r3, [pc, #320]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	494d      	ldr	r1, [pc, #308]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d044      	beq.n	8007780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d107      	bne.n	800770e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fe:	4b47      	ldr	r3, [pc, #284]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d119      	bne.n	800773e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e07f      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d003      	beq.n	800771e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800771a:	2b03      	cmp	r3, #3
 800771c:	d107      	bne.n	800772e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800771e:	4b3f      	ldr	r3, [pc, #252]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d109      	bne.n	800773e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e06f      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772e:	4b3b      	ldr	r3, [pc, #236]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e067      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800773e:	4b37      	ldr	r3, [pc, #220]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f023 0203 	bic.w	r2, r3, #3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	4934      	ldr	r1, [pc, #208]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 800774c:	4313      	orrs	r3, r2
 800774e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007750:	f7fb fd1a 	bl	8003188 <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007756:	e00a      	b.n	800776e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007758:	f7fb fd16 	bl	8003188 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	f241 3288 	movw	r2, #5000	; 0x1388
 8007766:	4293      	cmp	r3, r2
 8007768:	d901      	bls.n	800776e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e04f      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800776e:	4b2b      	ldr	r3, [pc, #172]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 020c 	and.w	r2, r3, #12
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	429a      	cmp	r2, r3
 800777e:	d1eb      	bne.n	8007758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007780:	4b25      	ldr	r3, [pc, #148]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d20c      	bcs.n	80077a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800778e:	4b22      	ldr	r3, [pc, #136]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	b2d2      	uxtb	r2, r2
 8007794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007796:	4b20      	ldr	r3, [pc, #128]	; (8007818 <HAL_RCC_ClockConfig+0x1b8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d001      	beq.n	80077a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e032      	b.n	800780e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0304 	and.w	r3, r3, #4
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077b4:	4b19      	ldr	r3, [pc, #100]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4916      	ldr	r1, [pc, #88]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077d2:	4b12      	ldr	r3, [pc, #72]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	00db      	lsls	r3, r3, #3
 80077e0:	490e      	ldr	r1, [pc, #56]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077e6:	f000 f821 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80077ea:	4602      	mov	r2, r0
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_RCC_ClockConfig+0x1bc>)
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	091b      	lsrs	r3, r3, #4
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	490a      	ldr	r1, [pc, #40]	; (8007820 <HAL_RCC_ClockConfig+0x1c0>)
 80077f8:	5ccb      	ldrb	r3, [r1, r3]
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	4a09      	ldr	r2, [pc, #36]	; (8007824 <HAL_RCC_ClockConfig+0x1c4>)
 8007800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_RCC_ClockConfig+0x1c8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4618      	mov	r0, r3
 8007808:	f7fb fc7a 	bl	8003100 <HAL_InitTick>

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40023c00 	.word	0x40023c00
 800781c:	40023800 	.word	0x40023800
 8007820:	080091c4 	.word	0x080091c4
 8007824:	20000004 	.word	0x20000004
 8007828:	20000008 	.word	0x20000008

0800782c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800782c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007830:	b090      	sub	sp, #64	; 0x40
 8007832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	637b      	str	r3, [r7, #52]	; 0x34
 8007838:	2300      	movs	r3, #0
 800783a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800783c:	2300      	movs	r3, #0
 800783e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007844:	4b59      	ldr	r3, [pc, #356]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b08      	cmp	r3, #8
 800784e:	d00d      	beq.n	800786c <HAL_RCC_GetSysClockFreq+0x40>
 8007850:	2b08      	cmp	r3, #8
 8007852:	f200 80a1 	bhi.w	8007998 <HAL_RCC_GetSysClockFreq+0x16c>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0x34>
 800785a:	2b04      	cmp	r3, #4
 800785c:	d003      	beq.n	8007866 <HAL_RCC_GetSysClockFreq+0x3a>
 800785e:	e09b      	b.n	8007998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007860:	4b53      	ldr	r3, [pc, #332]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007862:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007864:	e09b      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007866:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800786a:	e098      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800786c:	4b4f      	ldr	r3, [pc, #316]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007876:	4b4d      	ldr	r3, [pc, #308]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d028      	beq.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007882:	4b4a      	ldr	r3, [pc, #296]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	099b      	lsrs	r3, r3, #6
 8007888:	2200      	movs	r2, #0
 800788a:	623b      	str	r3, [r7, #32]
 800788c:	627a      	str	r2, [r7, #36]	; 0x24
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007894:	2100      	movs	r1, #0
 8007896:	4b47      	ldr	r3, [pc, #284]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007898:	fb03 f201 	mul.w	r2, r3, r1
 800789c:	2300      	movs	r3, #0
 800789e:	fb00 f303 	mul.w	r3, r0, r3
 80078a2:	4413      	add	r3, r2
 80078a4:	4a43      	ldr	r2, [pc, #268]	; (80079b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078a6:	fba0 1202 	umull	r1, r2, r0, r2
 80078aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ac:	460a      	mov	r2, r1
 80078ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80078b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b2:	4413      	add	r3, r2
 80078b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	2200      	movs	r2, #0
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	61fa      	str	r2, [r7, #28]
 80078be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80078c6:	f7f9 f8dd 	bl	8000a84 <__aeabi_uldivmod>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4613      	mov	r3, r2
 80078d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d2:	e053      	b.n	800797c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d4:	4b35      	ldr	r3, [pc, #212]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	099b      	lsrs	r3, r3, #6
 80078da:	2200      	movs	r2, #0
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	617a      	str	r2, [r7, #20]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80078e6:	f04f 0b00 	mov.w	fp, #0
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	f04f 0000 	mov.w	r0, #0
 80078f2:	f04f 0100 	mov.w	r1, #0
 80078f6:	0159      	lsls	r1, r3, #5
 80078f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078fc:	0150      	lsls	r0, r2, #5
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	ebb2 080a 	subs.w	r8, r2, sl
 8007906:	eb63 090b 	sbc.w	r9, r3, fp
 800790a:	f04f 0200 	mov.w	r2, #0
 800790e:	f04f 0300 	mov.w	r3, #0
 8007912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800791a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800791e:	ebb2 0408 	subs.w	r4, r2, r8
 8007922:	eb63 0509 	sbc.w	r5, r3, r9
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	f04f 0300 	mov.w	r3, #0
 800792e:	00eb      	lsls	r3, r5, #3
 8007930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007934:	00e2      	lsls	r2, r4, #3
 8007936:	4614      	mov	r4, r2
 8007938:	461d      	mov	r5, r3
 800793a:	eb14 030a 	adds.w	r3, r4, sl
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	eb45 030b 	adc.w	r3, r5, fp
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007952:	4629      	mov	r1, r5
 8007954:	028b      	lsls	r3, r1, #10
 8007956:	4621      	mov	r1, r4
 8007958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800795c:	4621      	mov	r1, r4
 800795e:	028a      	lsls	r2, r1, #10
 8007960:	4610      	mov	r0, r2
 8007962:	4619      	mov	r1, r3
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	2200      	movs	r2, #0
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	60fa      	str	r2, [r7, #12]
 800796c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007970:	f7f9 f888 	bl	8000a84 <__aeabi_uldivmod>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4613      	mov	r3, r2
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800797c:	4b0b      	ldr	r3, [pc, #44]	; (80079ac <HAL_RCC_GetSysClockFreq+0x180>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	0c1b      	lsrs	r3, r3, #16
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	3301      	adds	r3, #1
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800798c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007996:	e002      	b.n	800799e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007998:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800799a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800799c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3740      	adds	r7, #64	; 0x40
 80079a4:	46bd      	mov	sp, r7
 80079a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079aa:	bf00      	nop
 80079ac:	40023800 	.word	0x40023800
 80079b0:	00f42400 	.word	0x00f42400
 80079b4:	017d7840 	.word	0x017d7840

080079b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079bc:	4b03      	ldr	r3, [pc, #12]	; (80079cc <HAL_RCC_GetHCLKFreq+0x14>)
 80079be:	681b      	ldr	r3, [r3, #0]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000004 	.word	0x20000004

080079d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80079d4:	f7ff fff0 	bl	80079b8 <HAL_RCC_GetHCLKFreq>
 80079d8:	4602      	mov	r2, r0
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	0a9b      	lsrs	r3, r3, #10
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	4903      	ldr	r1, [pc, #12]	; (80079f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079e6:	5ccb      	ldrb	r3, [r1, r3]
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	40023800 	.word	0x40023800
 80079f4:	080091d4 	.word	0x080091d4

080079f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e07b      	b.n	8007b02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d108      	bne.n	8007a24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a1a:	d009      	beq.n	8007a30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	61da      	str	r2, [r3, #28]
 8007a22:	e005      	b.n	8007a30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fb f852 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab4:	ea42 0103 	orr.w	r1, r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007abc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	f003 0104 	and.w	r1, r3, #4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 0210 	and.w	r2, r3, #16
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d101      	bne.n	8007b2c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e0e3      	b.n	8007cf4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007b42:	7dbb      	ldrb	r3, [r7, #22]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d00d      	beq.n	8007b64 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b4e:	d106      	bne.n	8007b5e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d102      	bne.n	8007b5e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007b58:	7dbb      	ldrb	r3, [r7, #22]
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d002      	beq.n	8007b64 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b62:	e0c2      	b.n	8007cea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d005      	beq.n	8007b76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007b70:	887b      	ldrh	r3, [r7, #2]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b7a:	e0b6      	b.n	8007cea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d003      	beq.n	8007b90 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	887a      	ldrh	r2, [r7, #2]
 8007ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	887a      	ldrh	r2, [r7, #2]
 8007ba6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	887a      	ldrh	r2, [r7, #2]
 8007bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	887a      	ldrh	r2, [r7, #2]
 8007bb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d108      	bne.n	8007be4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd6:	4a49      	ldr	r2, [pc, #292]	; (8007cfc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007bd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bde:	4a48      	ldr	r2, [pc, #288]	; (8007d00 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007be0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007be2:	e007      	b.n	8007bf4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be8:	4a46      	ldr	r2, [pc, #280]	; (8007d04 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf0:	4a45      	ldr	r2, [pc, #276]	; (8007d08 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf8:	4a44      	ldr	r2, [pc, #272]	; (8007d0c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	2200      	movs	r2, #0
 8007c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	4619      	mov	r1, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c1c:	f7fc f9a6 	bl	8003f6c <HAL_DMA_Start_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00c      	beq.n	8007c40 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f043 0210 	orr.w	r2, r3, #16
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007c3e:	e054      	b.n	8007cea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c54:	2200      	movs	r2, #0
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	2200      	movs	r2, #0
 8007c66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	4619      	mov	r1, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	330c      	adds	r3, #12
 8007c80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c88:	f7fc f970 	bl	8003f6c <HAL_DMA_Start_IT>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00c      	beq.n	8007cac <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c96:	f043 0210 	orr.w	r2, r3, #16
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007caa:	e01e      	b.n	8007cea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d007      	beq.n	8007cca <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0220 	orr.w	r2, r2, #32
 8007cd8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f042 0202 	orr.w	r2, r2, #2
 8007ce8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3718      	adds	r7, #24
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	08008081 	.word	0x08008081
 8007d00:	08007f49 	.word	0x08007f49
 8007d04:	0800809d 	.word	0x0800809d
 8007d08:	08007ff1 	.word	0x08007ff1
 8007d0c:	080080b9 	.word	0x080080b9

08007d10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10e      	bne.n	8007d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
    return;
 8007d4e:	e0ce      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x5e>
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
    return;
 8007d6c:	e0bf      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	f003 0320 	and.w	r3, r3, #32
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10a      	bne.n	8007d8e <HAL_SPI_IRQHandler+0x7e>
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d105      	bne.n	8007d8e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80b0 	beq.w	8007eee <HAL_SPI_IRQHandler+0x1de>
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f003 0320 	and.w	r3, r3, #32
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80aa 	beq.w	8007eee <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d023      	beq.n	8007dec <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b03      	cmp	r3, #3
 8007dae:	d011      	beq.n	8007dd4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	f043 0204 	orr.w	r2, r3, #4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	e00b      	b.n	8007dec <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	613b      	str	r3, [r7, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	613b      	str	r3, [r7, #16]
 8007de8:	693b      	ldr	r3, [r7, #16]
        return;
 8007dea:	e080      	b.n	8007eee <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d014      	beq.n	8007e20 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e02:	2300      	movs	r3, #0
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00c      	beq.n	8007e44 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	f043 0208 	orr.w	r2, r3, #8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d04f      	beq.n	8007eec <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d104      	bne.n	8007e78 <HAL_SPI_IRQHandler+0x168>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d034      	beq.n	8007ee2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e94:	4a17      	ldr	r2, [pc, #92]	; (8007ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8007e96:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fc f8bd 	bl	800401c <HAL_DMA_Abort_IT>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <HAL_SPI_IRQHandler+0x1e4>)
 8007ec2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fc f8a7 	bl	800401c <HAL_DMA_Abort_IT>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007ee0:	e003      	b.n	8007eea <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f826 	bl	8007f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ee8:	e000      	b.n	8007eec <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007eea:	bf00      	nop
    return;
 8007eec:	bf00      	nop
  }
}
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	080080f9 	.word	0x080080f9

08007ef8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f56:	f7fb f917 	bl	8003188 <HAL_GetTick>
 8007f5a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6a:	d03b      	beq.n	8007fe4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f022 0220 	bic.w	r2, r2, #32
 8007f7a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10d      	bne.n	8007fa0 <SPI_DMAReceiveCplt+0x58>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f8c:	d108      	bne.n	8007fa0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0203 	bic.w	r2, r2, #3
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	e007      	b.n	8007fb0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	2164      	movs	r1, #100	; 0x64
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 f93b 	bl	8008230 <SPI_EndRxTransaction>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ffa9 	bl	8007f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007fe2:	e002      	b.n	8007fea <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f7ff ff87 	bl	8007ef8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ffe:	f7fb f8c3 	bl	8003188 <HAL_GetTick>
 8008002:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008012:	d02f      	beq.n	8008074 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685a      	ldr	r2, [r3, #4]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0220 	bic.w	r2, r2, #32
 8008022:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	2164      	movs	r1, #100	; 0x64
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f967 	bl	80082fc <SPI_EndRxTxTransaction>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0203 	bic.w	r2, r2, #3
 800804e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7ff ff61 	bl	8007f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008072:	e002      	b.n	800807a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f7fa fb8d 	bl	8002794 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff ff3c 	bl	8007f0c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff ff38 	bl	8007f20 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0203 	bic.w	r2, r2, #3
 80080d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f043 0210 	orr.w	r2, r3, #16
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff ff22 	bl	8007f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080f0:	bf00      	nop
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff ff0e 	bl	8007f34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008130:	f7fb f82a 	bl	8003188 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	4413      	add	r3, r2
 800813e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008140:	f7fb f822 	bl	8003188 <HAL_GetTick>
 8008144:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008146:	4b39      	ldr	r3, [pc, #228]	; (800822c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	015b      	lsls	r3, r3, #5
 800814c:	0d1b      	lsrs	r3, r3, #20
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008156:	e054      	b.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815e:	d050      	beq.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008160:	f7fb f812 	bl	8003188 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	69fa      	ldr	r2, [r7, #28]
 800816c:	429a      	cmp	r2, r3
 800816e:	d902      	bls.n	8008176 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d13d      	bne.n	80081f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800818e:	d111      	bne.n	80081b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d004      	beq.n	80081a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081a2:	d107      	bne.n	80081b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d10f      	bne.n	80081de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e017      	b.n	8008222 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	3b01      	subs	r3, #1
 8008200:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689a      	ldr	r2, [r3, #8]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4013      	ands	r3, r2
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	bf0c      	ite	eq
 8008212:	2301      	moveq	r3, #1
 8008214:	2300      	movne	r3, #0
 8008216:	b2db      	uxtb	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	429a      	cmp	r2, r3
 800821e:	d19b      	bne.n	8008158 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3720      	adds	r7, #32
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000004 	.word	0x20000004

08008230 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af02      	add	r7, sp, #8
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008244:	d111      	bne.n	800826a <SPI_EndRxTransaction+0x3a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800824e:	d004      	beq.n	800825a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008258:	d107      	bne.n	800826a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008268:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008272:	d12a      	bne.n	80082ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d012      	beq.n	80082a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	2200      	movs	r2, #0
 8008286:	2180      	movs	r1, #128	; 0x80
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f7ff ff49 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d02d      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e026      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	2101      	movs	r1, #1
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f7ff ff36 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d01a      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082be:	f043 0220 	orr.w	r2, r3, #32
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e013      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2101      	movs	r1, #1
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff ff23 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e4:	f043 0220 	orr.w	r2, r3, #32
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e000      	b.n	80082f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008308:	4b1b      	ldr	r3, [pc, #108]	; (8008378 <SPI_EndRxTxTransaction+0x7c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1b      	ldr	r2, [pc, #108]	; (800837c <SPI_EndRxTxTransaction+0x80>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	0d5b      	lsrs	r3, r3, #21
 8008314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008318:	fb02 f303 	mul.w	r3, r2, r3
 800831c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008326:	d112      	bne.n	800834e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	9300      	str	r3, [sp, #0]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	2200      	movs	r2, #0
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fef4 	bl	8008120 <SPI_WaitFlagStateUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d016      	beq.n	800836c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e00f      	b.n	800836e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	3b01      	subs	r3, #1
 8008358:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d0f2      	beq.n	800834e <SPI_EndRxTxTransaction+0x52>
 8008368:	e000      	b.n	800836c <SPI_EndRxTxTransaction+0x70>
        break;
 800836a:	bf00      	nop
  }

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000004 	.word	0x20000004
 800837c:	165e9f81 	.word	0x165e9f81

08008380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e041      	b.n	8008416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fa fe0c 	bl	8002fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f000 fae2 	bl	8008988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e03c      	b.n	80084b2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a1e      	ldr	r2, [pc, #120]	; (80084c0 <HAL_TIM_Base_Start+0xa0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008452:	d013      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <HAL_TIM_Base_Start+0xa4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a19      	ldr	r2, [pc, #100]	; (80084c8 <HAL_TIM_Base_Start+0xa8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a17      	ldr	r2, [pc, #92]	; (80084cc <HAL_TIM_Base_Start+0xac>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIM_Base_Start+0x5c>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a16      	ldr	r2, [pc, #88]	; (80084d0 <HAL_TIM_Base_Start+0xb0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d111      	bne.n	80084a0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b06      	cmp	r3, #6
 800848c:	d010      	beq.n	80084b0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f042 0201 	orr.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849e:	e007      	b.n	80084b0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40010000 	.word	0x40010000
 80084c4:	40000400 	.word	0x40000400
 80084c8:	40000800 	.word	0x40000800
 80084cc:	40000c00 	.word	0x40000c00
 80084d0:	40014000 	.word	0x40014000

080084d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d001      	beq.n	80084ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e044      	b.n	8008576 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <HAL_TIM_Base_Start_IT+0xb0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d018      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x6c>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008516:	d013      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x6c>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <HAL_TIM_Base_Start_IT+0xb4>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00e      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x6c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a19      	ldr	r2, [pc, #100]	; (800858c <HAL_TIM_Base_Start_IT+0xb8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d009      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x6c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a17      	ldr	r2, [pc, #92]	; (8008590 <HAL_TIM_Base_Start_IT+0xbc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d004      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x6c>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a16      	ldr	r2, [pc, #88]	; (8008594 <HAL_TIM_Base_Start_IT+0xc0>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d111      	bne.n	8008564 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2b06      	cmp	r3, #6
 8008550:	d010      	beq.n	8008574 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0201 	orr.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008562:	e007      	b.n	8008574 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3714      	adds	r7, #20
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	40010000 	.word	0x40010000
 8008588:	40000400 	.word	0x40000400
 800858c:	40000800 	.word	0x40000800
 8008590:	40000c00 	.word	0x40000c00
 8008594:	40014000 	.word	0x40014000

08008598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d122      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11b      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0202 	mvn.w	r2, #2
 80085c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f9b5 	bl	800894a <HAL_TIM_IC_CaptureCallback>
 80085e0:	e005      	b.n	80085ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9a7 	bl	8008936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f9b8 	bl	800895e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d122      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b04      	cmp	r3, #4
 800860e:	d11b      	bne.n	8008648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0204 	mvn.w	r2, #4
 8008618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f98b 	bl	800894a <HAL_TIM_IC_CaptureCallback>
 8008634:	e005      	b.n	8008642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f97d 	bl	8008936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f98e 	bl	800895e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b08      	cmp	r3, #8
 8008654:	d122      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b08      	cmp	r3, #8
 8008662:	d11b      	bne.n	800869c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f06f 0208 	mvn.w	r2, #8
 800866c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2204      	movs	r2, #4
 8008672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f961 	bl	800894a <HAL_TIM_IC_CaptureCallback>
 8008688:	e005      	b.n	8008696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f953 	bl	8008936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f964 	bl	800895e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	f003 0310 	and.w	r3, r3, #16
 80086a6:	2b10      	cmp	r3, #16
 80086a8:	d122      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d11b      	bne.n	80086f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0210 	mvn.w	r2, #16
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2208      	movs	r2, #8
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f937 	bl	800894a <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f929 	bl	8008936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 f93a 	bl	800895e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d10e      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d107      	bne.n	800871c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0201 	mvn.w	r2, #1
 8008714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7f9 f960 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008726:	2b80      	cmp	r3, #128	; 0x80
 8008728:	d10e      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b80      	cmp	r3, #128	; 0x80
 8008736:	d107      	bne.n	8008748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fab2 	bl	8008cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d10e      	bne.n	8008774 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	d107      	bne.n	8008774 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800876c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8ff 	bl	8008972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b20      	cmp	r3, #32
 8008780:	d10e      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0320 	and.w	r3, r3, #32
 800878c:	2b20      	cmp	r3, #32
 800878e:	d107      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0220 	mvn.w	r2, #32
 8008798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa7c 	bl	8008c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_TIM_ConfigClockSource+0x1c>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e0b4      	b.n	800892e <HAL_TIM_ConfigClockSource+0x186>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087fc:	d03e      	beq.n	800887c <HAL_TIM_ConfigClockSource+0xd4>
 80087fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008802:	f200 8087 	bhi.w	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 8008806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880a:	f000 8086 	beq.w	800891a <HAL_TIM_ConfigClockSource+0x172>
 800880e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008812:	d87f      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 8008814:	2b70      	cmp	r3, #112	; 0x70
 8008816:	d01a      	beq.n	800884e <HAL_TIM_ConfigClockSource+0xa6>
 8008818:	2b70      	cmp	r3, #112	; 0x70
 800881a:	d87b      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 800881c:	2b60      	cmp	r3, #96	; 0x60
 800881e:	d050      	beq.n	80088c2 <HAL_TIM_ConfigClockSource+0x11a>
 8008820:	2b60      	cmp	r3, #96	; 0x60
 8008822:	d877      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 8008824:	2b50      	cmp	r3, #80	; 0x50
 8008826:	d03c      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0xfa>
 8008828:	2b50      	cmp	r3, #80	; 0x50
 800882a:	d873      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 800882c:	2b40      	cmp	r3, #64	; 0x40
 800882e:	d058      	beq.n	80088e2 <HAL_TIM_ConfigClockSource+0x13a>
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d86f      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d064      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x15a>
 8008838:	2b30      	cmp	r3, #48	; 0x30
 800883a:	d86b      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d060      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x15a>
 8008840:	2b20      	cmp	r3, #32
 8008842:	d867      	bhi.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05c      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x15a>
 8008848:	2b10      	cmp	r3, #16
 800884a:	d05a      	beq.n	8008902 <HAL_TIM_ConfigClockSource+0x15a>
 800884c:	e062      	b.n	8008914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6899      	ldr	r1, [r3, #8]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685a      	ldr	r2, [r3, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f000 f98d 	bl	8008b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	609a      	str	r2, [r3, #8]
      break;
 800887a:	e04f      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6818      	ldr	r0, [r3, #0]
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	6899      	ldr	r1, [r3, #8]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f000 f976 	bl	8008b7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689a      	ldr	r2, [r3, #8]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800889e:	609a      	str	r2, [r3, #8]
      break;
 80088a0:	e03c      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6859      	ldr	r1, [r3, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f000 f8ea 	bl	8008a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2150      	movs	r1, #80	; 0x50
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f943 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 80088c0:	e02c      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6818      	ldr	r0, [r3, #0]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	6859      	ldr	r1, [r3, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f000 f909 	bl	8008ae6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2160      	movs	r1, #96	; 0x60
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f933 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 80088e0:	e01c      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6859      	ldr	r1, [r3, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f000 f8ca 	bl	8008a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2140      	movs	r1, #64	; 0x40
 80088fa:	4618      	mov	r0, r3
 80088fc:	f000 f923 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 8008900:	e00c      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f000 f91a 	bl	8008b46 <TIM_ITRx_SetConfig>
      break;
 8008912:	e003      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	73fb      	strb	r3, [r7, #15]
      break;
 8008918:	e000      	b.n	800891c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800891a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800892c:	7bfb      	ldrb	r3, [r7, #15]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a34      	ldr	r2, [pc, #208]	; (8008a6c <TIM_Base_SetConfig+0xe4>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d00f      	beq.n	80089c0 <TIM_Base_SetConfig+0x38>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a6:	d00b      	beq.n	80089c0 <TIM_Base_SetConfig+0x38>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a31      	ldr	r2, [pc, #196]	; (8008a70 <TIM_Base_SetConfig+0xe8>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d007      	beq.n	80089c0 <TIM_Base_SetConfig+0x38>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a30      	ldr	r2, [pc, #192]	; (8008a74 <TIM_Base_SetConfig+0xec>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d003      	beq.n	80089c0 <TIM_Base_SetConfig+0x38>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a2f      	ldr	r2, [pc, #188]	; (8008a78 <TIM_Base_SetConfig+0xf0>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d108      	bne.n	80089d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a25      	ldr	r2, [pc, #148]	; (8008a6c <TIM_Base_SetConfig+0xe4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d01b      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e0:	d017      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <TIM_Base_SetConfig+0xe8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d013      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <TIM_Base_SetConfig+0xec>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00f      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <TIM_Base_SetConfig+0xf0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00b      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a1f      	ldr	r2, [pc, #124]	; (8008a7c <TIM_Base_SetConfig+0xf4>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d007      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a1e      	ldr	r2, [pc, #120]	; (8008a80 <TIM_Base_SetConfig+0xf8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d003      	beq.n	8008a12 <TIM_Base_SetConfig+0x8a>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <TIM_Base_SetConfig+0xfc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d108      	bne.n	8008a24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a08      	ldr	r2, [pc, #32]	; (8008a6c <TIM_Base_SetConfig+0xe4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d103      	bne.n	8008a58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	615a      	str	r2, [r3, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40000c00 	.word	0x40000c00
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a1b      	ldr	r3, [r3, #32]
 8008a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	f023 0201 	bic.w	r2, r3, #1
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f023 030a 	bic.w	r3, r3, #10
 8008ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	621a      	str	r2, [r3, #32]
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b087      	sub	sp, #28
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f023 0210 	bic.w	r2, r3, #16
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	031b      	lsls	r3, r3, #12
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	621a      	str	r2, [r3, #32]
}
 8008b3a:	bf00      	nop
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f043 0307 	orr.w	r3, r3, #7
 8008b68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	609a      	str	r2, [r3, #8]
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
 8008b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	021a      	lsls	r2, r3, #8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	609a      	str	r2, [r3, #8]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e050      	b.n	8008c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d018      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c20:	d013      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d00e      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a16      	ldr	r2, [pc, #88]	; (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d009      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d004      	beq.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a13      	ldr	r2, [pc, #76]	; (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d10c      	bne.n	8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3714      	adds	r7, #20
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40010000 	.word	0x40010000
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800
 8008c90:	40000c00 	.word	0x40000c00
 8008c94:	40014000 	.word	0x40014000

08008c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <__libc_init_array>:
 8008cc0:	b570      	push	{r4, r5, r6, lr}
 8008cc2:	4d0d      	ldr	r5, [pc, #52]	; (8008cf8 <__libc_init_array+0x38>)
 8008cc4:	4c0d      	ldr	r4, [pc, #52]	; (8008cfc <__libc_init_array+0x3c>)
 8008cc6:	1b64      	subs	r4, r4, r5
 8008cc8:	10a4      	asrs	r4, r4, #2
 8008cca:	2600      	movs	r6, #0
 8008ccc:	42a6      	cmp	r6, r4
 8008cce:	d109      	bne.n	8008ce4 <__libc_init_array+0x24>
 8008cd0:	4d0b      	ldr	r5, [pc, #44]	; (8008d00 <__libc_init_array+0x40>)
 8008cd2:	4c0c      	ldr	r4, [pc, #48]	; (8008d04 <__libc_init_array+0x44>)
 8008cd4:	f000 fa6a 	bl	80091ac <_init>
 8008cd8:	1b64      	subs	r4, r4, r5
 8008cda:	10a4      	asrs	r4, r4, #2
 8008cdc:	2600      	movs	r6, #0
 8008cde:	42a6      	cmp	r6, r4
 8008ce0:	d105      	bne.n	8008cee <__libc_init_array+0x2e>
 8008ce2:	bd70      	pop	{r4, r5, r6, pc}
 8008ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce8:	4798      	blx	r3
 8008cea:	3601      	adds	r6, #1
 8008cec:	e7ee      	b.n	8008ccc <__libc_init_array+0xc>
 8008cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf2:	4798      	blx	r3
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	e7f2      	b.n	8008cde <__libc_init_array+0x1e>
 8008cf8:	080091ec 	.word	0x080091ec
 8008cfc:	080091ec 	.word	0x080091ec
 8008d00:	080091ec 	.word	0x080091ec
 8008d04:	080091f0 	.word	0x080091f0

08008d08 <memcpy>:
 8008d08:	440a      	add	r2, r1
 8008d0a:	4291      	cmp	r1, r2
 8008d0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008d10:	d100      	bne.n	8008d14 <memcpy+0xc>
 8008d12:	4770      	bx	lr
 8008d14:	b510      	push	{r4, lr}
 8008d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d1e:	4291      	cmp	r1, r2
 8008d20:	d1f9      	bne.n	8008d16 <memcpy+0xe>
 8008d22:	bd10      	pop	{r4, pc}

08008d24 <calloc>:
 8008d24:	4b02      	ldr	r3, [pc, #8]	; (8008d30 <calloc+0xc>)
 8008d26:	460a      	mov	r2, r1
 8008d28:	4601      	mov	r1, r0
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	f000 b802 	b.w	8008d34 <_calloc_r>
 8008d30:	2000005c 	.word	0x2000005c

08008d34 <_calloc_r>:
 8008d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d36:	fba1 2402 	umull	r2, r4, r1, r2
 8008d3a:	b94c      	cbnz	r4, 8008d50 <_calloc_r+0x1c>
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	9201      	str	r2, [sp, #4]
 8008d40:	f000 f83e 	bl	8008dc0 <_malloc_r>
 8008d44:	9a01      	ldr	r2, [sp, #4]
 8008d46:	4605      	mov	r5, r0
 8008d48:	b930      	cbnz	r0, 8008d58 <_calloc_r+0x24>
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	b003      	add	sp, #12
 8008d4e:	bd30      	pop	{r4, r5, pc}
 8008d50:	220c      	movs	r2, #12
 8008d52:	6002      	str	r2, [r0, #0]
 8008d54:	2500      	movs	r5, #0
 8008d56:	e7f8      	b.n	8008d4a <_calloc_r+0x16>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	f000 f807 	bl	8008d6c <memset>
 8008d5e:	e7f4      	b.n	8008d4a <_calloc_r+0x16>

08008d60 <__errno>:
 8008d60:	4b01      	ldr	r3, [pc, #4]	; (8008d68 <__errno+0x8>)
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	2000005c 	.word	0x2000005c

08008d6c <memset>:
 8008d6c:	4402      	add	r2, r0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d100      	bne.n	8008d76 <memset+0xa>
 8008d74:	4770      	bx	lr
 8008d76:	f803 1b01 	strb.w	r1, [r3], #1
 8008d7a:	e7f9      	b.n	8008d70 <memset+0x4>

08008d7c <__retarget_lock_acquire_recursive>:
 8008d7c:	4770      	bx	lr

08008d7e <__retarget_lock_release_recursive>:
 8008d7e:	4770      	bx	lr

08008d80 <sbrk_aligned>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4e0e      	ldr	r6, [pc, #56]	; (8008dbc <sbrk_aligned+0x3c>)
 8008d84:	460c      	mov	r4, r1
 8008d86:	6831      	ldr	r1, [r6, #0]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	b911      	cbnz	r1, 8008d92 <sbrk_aligned+0x12>
 8008d8c:	f000 f89a 	bl	8008ec4 <_sbrk_r>
 8008d90:	6030      	str	r0, [r6, #0]
 8008d92:	4621      	mov	r1, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	f000 f895 	bl	8008ec4 <_sbrk_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	d00a      	beq.n	8008db4 <sbrk_aligned+0x34>
 8008d9e:	1cc4      	adds	r4, r0, #3
 8008da0:	f024 0403 	bic.w	r4, r4, #3
 8008da4:	42a0      	cmp	r0, r4
 8008da6:	d007      	beq.n	8008db8 <sbrk_aligned+0x38>
 8008da8:	1a21      	subs	r1, r4, r0
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f88a 	bl	8008ec4 <_sbrk_r>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d101      	bne.n	8008db8 <sbrk_aligned+0x38>
 8008db4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008db8:	4620      	mov	r0, r4
 8008dba:	bd70      	pop	{r4, r5, r6, pc}
 8008dbc:	2000090c 	.word	0x2000090c

08008dc0 <_malloc_r>:
 8008dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc4:	1ccd      	adds	r5, r1, #3
 8008dc6:	f025 0503 	bic.w	r5, r5, #3
 8008dca:	3508      	adds	r5, #8
 8008dcc:	2d0c      	cmp	r5, #12
 8008dce:	bf38      	it	cc
 8008dd0:	250c      	movcc	r5, #12
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	db01      	blt.n	8008ddc <_malloc_r+0x1c>
 8008dd8:	42a9      	cmp	r1, r5
 8008dda:	d905      	bls.n	8008de8 <_malloc_r+0x28>
 8008ddc:	230c      	movs	r3, #12
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	2600      	movs	r6, #0
 8008de2:	4630      	mov	r0, r6
 8008de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de8:	4e2f      	ldr	r6, [pc, #188]	; (8008ea8 <_malloc_r+0xe8>)
 8008dea:	f000 f85f 	bl	8008eac <__malloc_lock>
 8008dee:	6833      	ldr	r3, [r6, #0]
 8008df0:	461c      	mov	r4, r3
 8008df2:	bb44      	cbnz	r4, 8008e46 <_malloc_r+0x86>
 8008df4:	4629      	mov	r1, r5
 8008df6:	4638      	mov	r0, r7
 8008df8:	f7ff ffc2 	bl	8008d80 <sbrk_aligned>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	4604      	mov	r4, r0
 8008e00:	d14f      	bne.n	8008ea2 <_malloc_r+0xe2>
 8008e02:	6834      	ldr	r4, [r6, #0]
 8008e04:	4626      	mov	r6, r4
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	d142      	bne.n	8008e90 <_malloc_r+0xd0>
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d043      	beq.n	8008e96 <_malloc_r+0xd6>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	4631      	mov	r1, r6
 8008e12:	4638      	mov	r0, r7
 8008e14:	eb04 0803 	add.w	r8, r4, r3
 8008e18:	f000 f854 	bl	8008ec4 <_sbrk_r>
 8008e1c:	4580      	cmp	r8, r0
 8008e1e:	d13a      	bne.n	8008e96 <_malloc_r+0xd6>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	3503      	adds	r5, #3
 8008e24:	1aed      	subs	r5, r5, r3
 8008e26:	f025 0503 	bic.w	r5, r5, #3
 8008e2a:	3508      	adds	r5, #8
 8008e2c:	2d0c      	cmp	r5, #12
 8008e2e:	bf38      	it	cc
 8008e30:	250c      	movcc	r5, #12
 8008e32:	4629      	mov	r1, r5
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff ffa3 	bl	8008d80 <sbrk_aligned>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d02b      	beq.n	8008e96 <_malloc_r+0xd6>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	442b      	add	r3, r5
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	e00e      	b.n	8008e64 <_malloc_r+0xa4>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	1b52      	subs	r2, r2, r5
 8008e4a:	d41e      	bmi.n	8008e8a <_malloc_r+0xca>
 8008e4c:	2a0b      	cmp	r2, #11
 8008e4e:	d916      	bls.n	8008e7e <_malloc_r+0xbe>
 8008e50:	1961      	adds	r1, r4, r5
 8008e52:	42a3      	cmp	r3, r4
 8008e54:	6025      	str	r5, [r4, #0]
 8008e56:	bf18      	it	ne
 8008e58:	6059      	strne	r1, [r3, #4]
 8008e5a:	6863      	ldr	r3, [r4, #4]
 8008e5c:	bf08      	it	eq
 8008e5e:	6031      	streq	r1, [r6, #0]
 8008e60:	5162      	str	r2, [r4, r5]
 8008e62:	604b      	str	r3, [r1, #4]
 8008e64:	4638      	mov	r0, r7
 8008e66:	f104 060b 	add.w	r6, r4, #11
 8008e6a:	f000 f825 	bl	8008eb8 <__malloc_unlock>
 8008e6e:	f026 0607 	bic.w	r6, r6, #7
 8008e72:	1d23      	adds	r3, r4, #4
 8008e74:	1af2      	subs	r2, r6, r3
 8008e76:	d0b4      	beq.n	8008de2 <_malloc_r+0x22>
 8008e78:	1b9b      	subs	r3, r3, r6
 8008e7a:	50a3      	str	r3, [r4, r2]
 8008e7c:	e7b1      	b.n	8008de2 <_malloc_r+0x22>
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	bf0c      	ite	eq
 8008e84:	6032      	streq	r2, [r6, #0]
 8008e86:	605a      	strne	r2, [r3, #4]
 8008e88:	e7ec      	b.n	8008e64 <_malloc_r+0xa4>
 8008e8a:	4623      	mov	r3, r4
 8008e8c:	6864      	ldr	r4, [r4, #4]
 8008e8e:	e7b0      	b.n	8008df2 <_malloc_r+0x32>
 8008e90:	4634      	mov	r4, r6
 8008e92:	6876      	ldr	r6, [r6, #4]
 8008e94:	e7b7      	b.n	8008e06 <_malloc_r+0x46>
 8008e96:	230c      	movs	r3, #12
 8008e98:	603b      	str	r3, [r7, #0]
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	f000 f80c 	bl	8008eb8 <__malloc_unlock>
 8008ea0:	e79f      	b.n	8008de2 <_malloc_r+0x22>
 8008ea2:	6025      	str	r5, [r4, #0]
 8008ea4:	e7de      	b.n	8008e64 <_malloc_r+0xa4>
 8008ea6:	bf00      	nop
 8008ea8:	20000908 	.word	0x20000908

08008eac <__malloc_lock>:
 8008eac:	4801      	ldr	r0, [pc, #4]	; (8008eb4 <__malloc_lock+0x8>)
 8008eae:	f7ff bf65 	b.w	8008d7c <__retarget_lock_acquire_recursive>
 8008eb2:	bf00      	nop
 8008eb4:	20000900 	.word	0x20000900

08008eb8 <__malloc_unlock>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	; (8008ec0 <__malloc_unlock+0x8>)
 8008eba:	f7ff bf60 	b.w	8008d7e <__retarget_lock_release_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	20000900 	.word	0x20000900

08008ec4 <_sbrk_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4d06      	ldr	r5, [pc, #24]	; (8008ee0 <_sbrk_r+0x1c>)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	4604      	mov	r4, r0
 8008ecc:	4608      	mov	r0, r1
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	f7f9 ff74 	bl	8002dbc <_sbrk>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_sbrk_r+0x1a>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_sbrk_r+0x1a>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20000904 	.word	0x20000904

08008ee4 <__udivmoddi4>:
 8008ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee8:	9e08      	ldr	r6, [sp, #32]
 8008eea:	460d      	mov	r5, r1
 8008eec:	4604      	mov	r4, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d14a      	bne.n	8008f8a <__udivmoddi4+0xa6>
 8008ef4:	428a      	cmp	r2, r1
 8008ef6:	4694      	mov	ip, r2
 8008ef8:	d965      	bls.n	8008fc6 <__udivmoddi4+0xe2>
 8008efa:	fab2 f382 	clz	r3, r2
 8008efe:	b143      	cbz	r3, 8008f12 <__udivmoddi4+0x2e>
 8008f00:	fa02 fc03 	lsl.w	ip, r2, r3
 8008f04:	f1c3 0220 	rsb	r2, r3, #32
 8008f08:	409f      	lsls	r7, r3
 8008f0a:	fa20 f202 	lsr.w	r2, r0, r2
 8008f0e:	4317      	orrs	r7, r2
 8008f10:	409c      	lsls	r4, r3
 8008f12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008f16:	fa1f f58c 	uxth.w	r5, ip
 8008f1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8008f1e:	0c22      	lsrs	r2, r4, #16
 8008f20:	fb0e 7711 	mls	r7, lr, r1, r7
 8008f24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008f28:	fb01 f005 	mul.w	r0, r1, r5
 8008f2c:	4290      	cmp	r0, r2
 8008f2e:	d90a      	bls.n	8008f46 <__udivmoddi4+0x62>
 8008f30:	eb1c 0202 	adds.w	r2, ip, r2
 8008f34:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8008f38:	f080 811c 	bcs.w	8009174 <__udivmoddi4+0x290>
 8008f3c:	4290      	cmp	r0, r2
 8008f3e:	f240 8119 	bls.w	8009174 <__udivmoddi4+0x290>
 8008f42:	3902      	subs	r1, #2
 8008f44:	4462      	add	r2, ip
 8008f46:	1a12      	subs	r2, r2, r0
 8008f48:	b2a4      	uxth	r4, r4
 8008f4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8008f4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008f52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008f56:	fb00 f505 	mul.w	r5, r0, r5
 8008f5a:	42a5      	cmp	r5, r4
 8008f5c:	d90a      	bls.n	8008f74 <__udivmoddi4+0x90>
 8008f5e:	eb1c 0404 	adds.w	r4, ip, r4
 8008f62:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008f66:	f080 8107 	bcs.w	8009178 <__udivmoddi4+0x294>
 8008f6a:	42a5      	cmp	r5, r4
 8008f6c:	f240 8104 	bls.w	8009178 <__udivmoddi4+0x294>
 8008f70:	4464      	add	r4, ip
 8008f72:	3802      	subs	r0, #2
 8008f74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008f78:	1b64      	subs	r4, r4, r5
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	b11e      	cbz	r6, 8008f86 <__udivmoddi4+0xa2>
 8008f7e:	40dc      	lsrs	r4, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	e9c6 4300 	strd	r4, r3, [r6]
 8008f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8a:	428b      	cmp	r3, r1
 8008f8c:	d908      	bls.n	8008fa0 <__udivmoddi4+0xbc>
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	f000 80ed 	beq.w	800916e <__udivmoddi4+0x28a>
 8008f94:	2100      	movs	r1, #0
 8008f96:	e9c6 0500 	strd	r0, r5, [r6]
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa0:	fab3 f183 	clz	r1, r3
 8008fa4:	2900      	cmp	r1, #0
 8008fa6:	d149      	bne.n	800903c <__udivmoddi4+0x158>
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	d302      	bcc.n	8008fb2 <__udivmoddi4+0xce>
 8008fac:	4282      	cmp	r2, r0
 8008fae:	f200 80f8 	bhi.w	80091a2 <__udivmoddi4+0x2be>
 8008fb2:	1a84      	subs	r4, r0, r2
 8008fb4:	eb65 0203 	sbc.w	r2, r5, r3
 8008fb8:	2001      	movs	r0, #1
 8008fba:	4617      	mov	r7, r2
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d0e2      	beq.n	8008f86 <__udivmoddi4+0xa2>
 8008fc0:	e9c6 4700 	strd	r4, r7, [r6]
 8008fc4:	e7df      	b.n	8008f86 <__udivmoddi4+0xa2>
 8008fc6:	b902      	cbnz	r2, 8008fca <__udivmoddi4+0xe6>
 8008fc8:	deff      	udf	#255	; 0xff
 8008fca:	fab2 f382 	clz	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f040 8090 	bne.w	80090f4 <__udivmoddi4+0x210>
 8008fd4:	1a8a      	subs	r2, r1, r2
 8008fd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008fda:	fa1f fe8c 	uxth.w	lr, ip
 8008fde:	2101      	movs	r1, #1
 8008fe0:	fbb2 f5f7 	udiv	r5, r2, r7
 8008fe4:	fb07 2015 	mls	r0, r7, r5, r2
 8008fe8:	0c22      	lsrs	r2, r4, #16
 8008fea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008fee:	fb0e f005 	mul.w	r0, lr, r5
 8008ff2:	4290      	cmp	r0, r2
 8008ff4:	d908      	bls.n	8009008 <__udivmoddi4+0x124>
 8008ff6:	eb1c 0202 	adds.w	r2, ip, r2
 8008ffa:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008ffe:	d202      	bcs.n	8009006 <__udivmoddi4+0x122>
 8009000:	4290      	cmp	r0, r2
 8009002:	f200 80cb 	bhi.w	800919c <__udivmoddi4+0x2b8>
 8009006:	4645      	mov	r5, r8
 8009008:	1a12      	subs	r2, r2, r0
 800900a:	b2a4      	uxth	r4, r4
 800900c:	fbb2 f0f7 	udiv	r0, r2, r7
 8009010:	fb07 2210 	mls	r2, r7, r0, r2
 8009014:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009018:	fb0e fe00 	mul.w	lr, lr, r0
 800901c:	45a6      	cmp	lr, r4
 800901e:	d908      	bls.n	8009032 <__udivmoddi4+0x14e>
 8009020:	eb1c 0404 	adds.w	r4, ip, r4
 8009024:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009028:	d202      	bcs.n	8009030 <__udivmoddi4+0x14c>
 800902a:	45a6      	cmp	lr, r4
 800902c:	f200 80bb 	bhi.w	80091a6 <__udivmoddi4+0x2c2>
 8009030:	4610      	mov	r0, r2
 8009032:	eba4 040e 	sub.w	r4, r4, lr
 8009036:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800903a:	e79f      	b.n	8008f7c <__udivmoddi4+0x98>
 800903c:	f1c1 0720 	rsb	r7, r1, #32
 8009040:	408b      	lsls	r3, r1
 8009042:	fa22 fc07 	lsr.w	ip, r2, r7
 8009046:	ea4c 0c03 	orr.w	ip, ip, r3
 800904a:	fa05 f401 	lsl.w	r4, r5, r1
 800904e:	fa20 f307 	lsr.w	r3, r0, r7
 8009052:	40fd      	lsrs	r5, r7
 8009054:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8009058:	4323      	orrs	r3, r4
 800905a:	fbb5 f8f9 	udiv	r8, r5, r9
 800905e:	fa1f fe8c 	uxth.w	lr, ip
 8009062:	fb09 5518 	mls	r5, r9, r8, r5
 8009066:	0c1c      	lsrs	r4, r3, #16
 8009068:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800906c:	fb08 f50e 	mul.w	r5, r8, lr
 8009070:	42a5      	cmp	r5, r4
 8009072:	fa02 f201 	lsl.w	r2, r2, r1
 8009076:	fa00 f001 	lsl.w	r0, r0, r1
 800907a:	d90b      	bls.n	8009094 <__udivmoddi4+0x1b0>
 800907c:	eb1c 0404 	adds.w	r4, ip, r4
 8009080:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009084:	f080 8088 	bcs.w	8009198 <__udivmoddi4+0x2b4>
 8009088:	42a5      	cmp	r5, r4
 800908a:	f240 8085 	bls.w	8009198 <__udivmoddi4+0x2b4>
 800908e:	f1a8 0802 	sub.w	r8, r8, #2
 8009092:	4464      	add	r4, ip
 8009094:	1b64      	subs	r4, r4, r5
 8009096:	b29d      	uxth	r5, r3
 8009098:	fbb4 f3f9 	udiv	r3, r4, r9
 800909c:	fb09 4413 	mls	r4, r9, r3, r4
 80090a0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80090a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80090a8:	45a6      	cmp	lr, r4
 80090aa:	d908      	bls.n	80090be <__udivmoddi4+0x1da>
 80090ac:	eb1c 0404 	adds.w	r4, ip, r4
 80090b0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80090b4:	d26c      	bcs.n	8009190 <__udivmoddi4+0x2ac>
 80090b6:	45a6      	cmp	lr, r4
 80090b8:	d96a      	bls.n	8009190 <__udivmoddi4+0x2ac>
 80090ba:	3b02      	subs	r3, #2
 80090bc:	4464      	add	r4, ip
 80090be:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80090c2:	fba3 9502 	umull	r9, r5, r3, r2
 80090c6:	eba4 040e 	sub.w	r4, r4, lr
 80090ca:	42ac      	cmp	r4, r5
 80090cc:	46c8      	mov	r8, r9
 80090ce:	46ae      	mov	lr, r5
 80090d0:	d356      	bcc.n	8009180 <__udivmoddi4+0x29c>
 80090d2:	d053      	beq.n	800917c <__udivmoddi4+0x298>
 80090d4:	b156      	cbz	r6, 80090ec <__udivmoddi4+0x208>
 80090d6:	ebb0 0208 	subs.w	r2, r0, r8
 80090da:	eb64 040e 	sbc.w	r4, r4, lr
 80090de:	fa04 f707 	lsl.w	r7, r4, r7
 80090e2:	40ca      	lsrs	r2, r1
 80090e4:	40cc      	lsrs	r4, r1
 80090e6:	4317      	orrs	r7, r2
 80090e8:	e9c6 7400 	strd	r7, r4, [r6]
 80090ec:	4618      	mov	r0, r3
 80090ee:	2100      	movs	r1, #0
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	f1c3 0120 	rsb	r1, r3, #32
 80090f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80090fc:	fa20 f201 	lsr.w	r2, r0, r1
 8009100:	fa25 f101 	lsr.w	r1, r5, r1
 8009104:	409d      	lsls	r5, r3
 8009106:	432a      	orrs	r2, r5
 8009108:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800910c:	fa1f fe8c 	uxth.w	lr, ip
 8009110:	fbb1 f0f7 	udiv	r0, r1, r7
 8009114:	fb07 1510 	mls	r5, r7, r0, r1
 8009118:	0c11      	lsrs	r1, r2, #16
 800911a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800911e:	fb00 f50e 	mul.w	r5, r0, lr
 8009122:	428d      	cmp	r5, r1
 8009124:	fa04 f403 	lsl.w	r4, r4, r3
 8009128:	d908      	bls.n	800913c <__udivmoddi4+0x258>
 800912a:	eb1c 0101 	adds.w	r1, ip, r1
 800912e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8009132:	d22f      	bcs.n	8009194 <__udivmoddi4+0x2b0>
 8009134:	428d      	cmp	r5, r1
 8009136:	d92d      	bls.n	8009194 <__udivmoddi4+0x2b0>
 8009138:	3802      	subs	r0, #2
 800913a:	4461      	add	r1, ip
 800913c:	1b49      	subs	r1, r1, r5
 800913e:	b292      	uxth	r2, r2
 8009140:	fbb1 f5f7 	udiv	r5, r1, r7
 8009144:	fb07 1115 	mls	r1, r7, r5, r1
 8009148:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800914c:	fb05 f10e 	mul.w	r1, r5, lr
 8009150:	4291      	cmp	r1, r2
 8009152:	d908      	bls.n	8009166 <__udivmoddi4+0x282>
 8009154:	eb1c 0202 	adds.w	r2, ip, r2
 8009158:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800915c:	d216      	bcs.n	800918c <__udivmoddi4+0x2a8>
 800915e:	4291      	cmp	r1, r2
 8009160:	d914      	bls.n	800918c <__udivmoddi4+0x2a8>
 8009162:	3d02      	subs	r5, #2
 8009164:	4462      	add	r2, ip
 8009166:	1a52      	subs	r2, r2, r1
 8009168:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800916c:	e738      	b.n	8008fe0 <__udivmoddi4+0xfc>
 800916e:	4631      	mov	r1, r6
 8009170:	4630      	mov	r0, r6
 8009172:	e708      	b.n	8008f86 <__udivmoddi4+0xa2>
 8009174:	4639      	mov	r1, r7
 8009176:	e6e6      	b.n	8008f46 <__udivmoddi4+0x62>
 8009178:	4610      	mov	r0, r2
 800917a:	e6fb      	b.n	8008f74 <__udivmoddi4+0x90>
 800917c:	4548      	cmp	r0, r9
 800917e:	d2a9      	bcs.n	80090d4 <__udivmoddi4+0x1f0>
 8009180:	ebb9 0802 	subs.w	r8, r9, r2
 8009184:	eb65 0e0c 	sbc.w	lr, r5, ip
 8009188:	3b01      	subs	r3, #1
 800918a:	e7a3      	b.n	80090d4 <__udivmoddi4+0x1f0>
 800918c:	4645      	mov	r5, r8
 800918e:	e7ea      	b.n	8009166 <__udivmoddi4+0x282>
 8009190:	462b      	mov	r3, r5
 8009192:	e794      	b.n	80090be <__udivmoddi4+0x1da>
 8009194:	4640      	mov	r0, r8
 8009196:	e7d1      	b.n	800913c <__udivmoddi4+0x258>
 8009198:	46d0      	mov	r8, sl
 800919a:	e77b      	b.n	8009094 <__udivmoddi4+0x1b0>
 800919c:	3d02      	subs	r5, #2
 800919e:	4462      	add	r2, ip
 80091a0:	e732      	b.n	8009008 <__udivmoddi4+0x124>
 80091a2:	4608      	mov	r0, r1
 80091a4:	e70a      	b.n	8008fbc <__udivmoddi4+0xd8>
 80091a6:	4464      	add	r4, ip
 80091a8:	3802      	subs	r0, #2
 80091aa:	e742      	b.n	8009032 <__udivmoddi4+0x14e>

080091ac <_init>:
 80091ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ae:	bf00      	nop
 80091b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b2:	bc08      	pop	{r3}
 80091b4:	469e      	mov	lr, r3
 80091b6:	4770      	bx	lr

080091b8 <_fini>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr
