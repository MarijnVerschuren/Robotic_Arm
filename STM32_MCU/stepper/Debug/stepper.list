
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007278  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007410  08007410  00017410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007430  08007430  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007438  08007438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000070  080074b0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  080074b0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013aa9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d72  00000000  00000000  00033b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  00037a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c6  00000000  00000000  00038ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163f7  00000000  00000000  00051496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abc7  00000000  00000000  0006788d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00102454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cbc  00000000  00000000  001024a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080073f8 	.word	0x080073f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080073f8 	.word	0x080073f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_uldivmod>:
 8000974:	b953      	cbnz	r3, 800098c <__aeabi_uldivmod+0x18>
 8000976:	b94a      	cbnz	r2, 800098c <__aeabi_uldivmod+0x18>
 8000978:	2900      	cmp	r1, #0
 800097a:	bf08      	it	eq
 800097c:	2800      	cmpeq	r0, #0
 800097e:	bf1c      	itt	ne
 8000980:	f04f 31ff 	movne.w	r1, #4294967295
 8000984:	f04f 30ff 	movne.w	r0, #4294967295
 8000988:	f000 b974 	b.w	8000c74 <__aeabi_idiv0>
 800098c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000990:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000994:	f000 f806 	bl	80009a4 <__udivmoddi4>
 8000998:	f8dd e004 	ldr.w	lr, [sp, #4]
 800099c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a0:	b004      	add	sp, #16
 80009a2:	4770      	bx	lr

080009a4 <__udivmoddi4>:
 80009a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a8:	9d08      	ldr	r5, [sp, #32]
 80009aa:	4604      	mov	r4, r0
 80009ac:	468e      	mov	lr, r1
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d14d      	bne.n	8000a4e <__udivmoddi4+0xaa>
 80009b2:	428a      	cmp	r2, r1
 80009b4:	4694      	mov	ip, r2
 80009b6:	d969      	bls.n	8000a8c <__udivmoddi4+0xe8>
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	b152      	cbz	r2, 80009d4 <__udivmoddi4+0x30>
 80009be:	fa01 f302 	lsl.w	r3, r1, r2
 80009c2:	f1c2 0120 	rsb	r1, r2, #32
 80009c6:	fa20 f101 	lsr.w	r1, r0, r1
 80009ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ce:	ea41 0e03 	orr.w	lr, r1, r3
 80009d2:	4094      	lsls	r4, r2
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	0c21      	lsrs	r1, r4, #16
 80009da:	fbbe f6f8 	udiv	r6, lr, r8
 80009de:	fa1f f78c 	uxth.w	r7, ip
 80009e2:	fb08 e316 	mls	r3, r8, r6, lr
 80009e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ea:	fb06 f107 	mul.w	r1, r6, r7
 80009ee:	4299      	cmp	r1, r3
 80009f0:	d90a      	bls.n	8000a08 <__udivmoddi4+0x64>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009fa:	f080 811f 	bcs.w	8000c3c <__udivmoddi4+0x298>
 80009fe:	4299      	cmp	r1, r3
 8000a00:	f240 811c 	bls.w	8000c3c <__udivmoddi4+0x298>
 8000a04:	3e02      	subs	r6, #2
 8000a06:	4463      	add	r3, ip
 8000a08:	1a5b      	subs	r3, r3, r1
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a10:	fb08 3310 	mls	r3, r8, r0, r3
 8000a14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a18:	fb00 f707 	mul.w	r7, r0, r7
 8000a1c:	42a7      	cmp	r7, r4
 8000a1e:	d90a      	bls.n	8000a36 <__udivmoddi4+0x92>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a28:	f080 810a 	bcs.w	8000c40 <__udivmoddi4+0x29c>
 8000a2c:	42a7      	cmp	r7, r4
 8000a2e:	f240 8107 	bls.w	8000c40 <__udivmoddi4+0x29c>
 8000a32:	4464      	add	r4, ip
 8000a34:	3802      	subs	r0, #2
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	1be4      	subs	r4, r4, r7
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	b11d      	cbz	r5, 8000a48 <__udivmoddi4+0xa4>
 8000a40:	40d4      	lsrs	r4, r2
 8000a42:	2300      	movs	r3, #0
 8000a44:	e9c5 4300 	strd	r4, r3, [r5]
 8000a48:	4631      	mov	r1, r6
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d909      	bls.n	8000a66 <__udivmoddi4+0xc2>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	f000 80ef 	beq.w	8000c36 <__udivmoddi4+0x292>
 8000a58:	2600      	movs	r6, #0
 8000a5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5e:	4630      	mov	r0, r6
 8000a60:	4631      	mov	r1, r6
 8000a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a66:	fab3 f683 	clz	r6, r3
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d14a      	bne.n	8000b04 <__udivmoddi4+0x160>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d302      	bcc.n	8000a78 <__udivmoddi4+0xd4>
 8000a72:	4282      	cmp	r2, r0
 8000a74:	f200 80f9 	bhi.w	8000c6a <__udivmoddi4+0x2c6>
 8000a78:	1a84      	subs	r4, r0, r2
 8000a7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a7e:	2001      	movs	r0, #1
 8000a80:	469e      	mov	lr, r3
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	d0e0      	beq.n	8000a48 <__udivmoddi4+0xa4>
 8000a86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a8a:	e7dd      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000a8c:	b902      	cbnz	r2, 8000a90 <__udivmoddi4+0xec>
 8000a8e:	deff      	udf	#255	; 0xff
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	f040 8092 	bne.w	8000bbe <__udivmoddi4+0x21a>
 8000a9a:	eba1 010c 	sub.w	r1, r1, ip
 8000a9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa2:	fa1f fe8c 	uxth.w	lr, ip
 8000aa6:	2601      	movs	r6, #1
 8000aa8:	0c20      	lsrs	r0, r4, #16
 8000aaa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aae:	fb07 1113 	mls	r1, r7, r3, r1
 8000ab2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab6:	fb0e f003 	mul.w	r0, lr, r3
 8000aba:	4288      	cmp	r0, r1
 8000abc:	d908      	bls.n	8000ad0 <__udivmoddi4+0x12c>
 8000abe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ac2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac6:	d202      	bcs.n	8000ace <__udivmoddi4+0x12a>
 8000ac8:	4288      	cmp	r0, r1
 8000aca:	f200 80cb 	bhi.w	8000c64 <__udivmoddi4+0x2c0>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	1a09      	subs	r1, r1, r0
 8000ad2:	b2a4      	uxth	r4, r4
 8000ad4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad8:	fb07 1110 	mls	r1, r7, r0, r1
 8000adc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ae0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae4:	45a6      	cmp	lr, r4
 8000ae6:	d908      	bls.n	8000afa <__udivmoddi4+0x156>
 8000ae8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000af0:	d202      	bcs.n	8000af8 <__udivmoddi4+0x154>
 8000af2:	45a6      	cmp	lr, r4
 8000af4:	f200 80bb 	bhi.w	8000c6e <__udivmoddi4+0x2ca>
 8000af8:	4608      	mov	r0, r1
 8000afa:	eba4 040e 	sub.w	r4, r4, lr
 8000afe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x9a>
 8000b04:	f1c6 0720 	rsb	r7, r6, #32
 8000b08:	40b3      	lsls	r3, r6
 8000b0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b12:	fa20 f407 	lsr.w	r4, r0, r7
 8000b16:	fa01 f306 	lsl.w	r3, r1, r6
 8000b1a:	431c      	orrs	r4, r3
 8000b1c:	40f9      	lsrs	r1, r7
 8000b1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b22:	fa00 f306 	lsl.w	r3, r0, r6
 8000b26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b2a:	0c20      	lsrs	r0, r4, #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fb09 1118 	mls	r1, r9, r8, r1
 8000b34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b38:	fb08 f00e 	mul.w	r0, r8, lr
 8000b3c:	4288      	cmp	r0, r1
 8000b3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b42:	d90b      	bls.n	8000b5c <__udivmoddi4+0x1b8>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b4c:	f080 8088 	bcs.w	8000c60 <__udivmoddi4+0x2bc>
 8000b50:	4288      	cmp	r0, r1
 8000b52:	f240 8085 	bls.w	8000c60 <__udivmoddi4+0x2bc>
 8000b56:	f1a8 0802 	sub.w	r8, r8, #2
 8000b5a:	4461      	add	r1, ip
 8000b5c:	1a09      	subs	r1, r1, r0
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b64:	fb09 1110 	mls	r1, r9, r0, r1
 8000b68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b70:	458e      	cmp	lr, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x1e2>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b7c:	d26c      	bcs.n	8000c58 <__udivmoddi4+0x2b4>
 8000b7e:	458e      	cmp	lr, r1
 8000b80:	d96a      	bls.n	8000c58 <__udivmoddi4+0x2b4>
 8000b82:	3802      	subs	r0, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8e:	eba1 010e 	sub.w	r1, r1, lr
 8000b92:	42a1      	cmp	r1, r4
 8000b94:	46c8      	mov	r8, r9
 8000b96:	46a6      	mov	lr, r4
 8000b98:	d356      	bcc.n	8000c48 <__udivmoddi4+0x2a4>
 8000b9a:	d053      	beq.n	8000c44 <__udivmoddi4+0x2a0>
 8000b9c:	b15d      	cbz	r5, 8000bb6 <__udivmoddi4+0x212>
 8000b9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000ba2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ba6:	fa01 f707 	lsl.w	r7, r1, r7
 8000baa:	fa22 f306 	lsr.w	r3, r2, r6
 8000bae:	40f1      	lsrs	r1, r6
 8000bb0:	431f      	orrs	r7, r3
 8000bb2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	f1c2 0320 	rsb	r3, r2, #32
 8000bc2:	40d8      	lsrs	r0, r3
 8000bc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	4301      	orrs	r1, r0
 8000bd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd4:	fa1f fe8c 	uxth.w	lr, ip
 8000bd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bdc:	fb07 3610 	mls	r6, r7, r0, r3
 8000be0:	0c0b      	lsrs	r3, r1, #16
 8000be2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000be6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bea:	429e      	cmp	r6, r3
 8000bec:	fa04 f402 	lsl.w	r4, r4, r2
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x260>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bfa:	d22f      	bcs.n	8000c5c <__udivmoddi4+0x2b8>
 8000bfc:	429e      	cmp	r6, r3
 8000bfe:	d92d      	bls.n	8000c5c <__udivmoddi4+0x2b8>
 8000c00:	3802      	subs	r0, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	1b9b      	subs	r3, r3, r6
 8000c06:	b289      	uxth	r1, r1
 8000c08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c14:	fb06 f30e 	mul.w	r3, r6, lr
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	d908      	bls.n	8000c2e <__udivmoddi4+0x28a>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c24:	d216      	bcs.n	8000c54 <__udivmoddi4+0x2b0>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d914      	bls.n	8000c54 <__udivmoddi4+0x2b0>
 8000c2a:	3e02      	subs	r6, #2
 8000c2c:	4461      	add	r1, ip
 8000c2e:	1ac9      	subs	r1, r1, r3
 8000c30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c34:	e738      	b.n	8000aa8 <__udivmoddi4+0x104>
 8000c36:	462e      	mov	r6, r5
 8000c38:	4628      	mov	r0, r5
 8000c3a:	e705      	b.n	8000a48 <__udivmoddi4+0xa4>
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	e6e3      	b.n	8000a08 <__udivmoddi4+0x64>
 8000c40:	4618      	mov	r0, r3
 8000c42:	e6f8      	b.n	8000a36 <__udivmoddi4+0x92>
 8000c44:	454b      	cmp	r3, r9
 8000c46:	d2a9      	bcs.n	8000b9c <__udivmoddi4+0x1f8>
 8000c48:	ebb9 0802 	subs.w	r8, r9, r2
 8000c4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c50:	3801      	subs	r0, #1
 8000c52:	e7a3      	b.n	8000b9c <__udivmoddi4+0x1f8>
 8000c54:	4646      	mov	r6, r8
 8000c56:	e7ea      	b.n	8000c2e <__udivmoddi4+0x28a>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	e794      	b.n	8000b86 <__udivmoddi4+0x1e2>
 8000c5c:	4640      	mov	r0, r8
 8000c5e:	e7d1      	b.n	8000c04 <__udivmoddi4+0x260>
 8000c60:	46d0      	mov	r8, sl
 8000c62:	e77b      	b.n	8000b5c <__udivmoddi4+0x1b8>
 8000c64:	3b02      	subs	r3, #2
 8000c66:	4461      	add	r1, ip
 8000c68:	e732      	b.n	8000ad0 <__udivmoddi4+0x12c>
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	e709      	b.n	8000a82 <__udivmoddi4+0xde>
 8000c6e:	4464      	add	r4, ip
 8000c70:	3802      	subs	r0, #2
 8000c72:	e742      	b.n	8000afa <__udivmoddi4+0x156>

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <MX_ADC1_Init+0x9c>)
 8000c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cba:	4a17      	ldr	r2, [pc, #92]	; (8000d18 <MX_ADC1_Init+0xa0>)
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cda:	f001 f995 	bl	8002008 <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ce4:	f000 fe88 	bl	80019f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_ADC1_Init+0x98>)
 8000cfa:	f001 fbf1 	bl	80024e0 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d04:	f000 fe78 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000008c 	.word	0x2000008c
 8000d14:	40012000 	.word	0x40012000
 8000d18:	0f000001 	.word	0x0f000001

08000d1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <HAL_ADC_MspInit+0x100>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d169      	bne.n	8000e12 <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a36      	ldr	r2, [pc, #216]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b34      	ldr	r3, [pc, #208]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_ADC_MspInit+0x104>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4826      	ldr	r0, [pc, #152]	; (8000e24 <HAL_ADC_MspInit+0x108>)
 8000d8a:	f002 fb15 	bl	80033b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000d90:	4a26      	ldr	r2, [pc, #152]	; (8000e2c <HAL_ADC_MspInit+0x110>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dae:	4b1e      	ldr	r3, [pc, #120]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000db4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000db8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dcc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de6:	4810      	ldr	r0, [pc, #64]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000de8:	f001 ff46 	bl	8002c78 <HAL_DMA_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 8000df2:	f000 fe01 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_ADC_MspInit+0x10c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2012      	movs	r0, #18
 8000e08:	f001 feff 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e0c:	2012      	movs	r0, #18
 8000e0e:	f001 ff18 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	200000d4 	.word	0x200000d4
 8000e2c:	40026470 	.word	0x40026470

08000e30 <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	2118      	movs	r1, #24
 8000e36:	2001      	movs	r0, #1
 8000e38:	f006 f9dc 	bl	80071f4 <calloc>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <AS5600_init+0x16>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	220a      	movs	r2, #10
 8000e56:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	7b9b      	ldrb	r3, [r3, #14]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <AS5600_init+0x24>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7bdb      	ldrb	r3, [r3, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <AS5600_init+0x32>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7c1b      	ldrb	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <AS5600_init+0x40>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7c5b      	ldrb	r3, [r3, #17]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <AS5600_init+0x4e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	7c9b      	ldrb	r3, [r3, #18]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <AS5600_init+0x5c>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7cdb      	ldrb	r3, [r3, #19]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <AS5600_init+0x6a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7d1b      	ldrb	r3, [r3, #20]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <AS5600_init+0x78>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7d5b      	ldrb	r3, [r3, #21]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d102      	bne.n	8000ec8 <AS5600_init+0x86>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7bdb      	ldrb	r3, [r3, #15]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f86a 	bl	8000fa8 <AS5600_set_low_power_mode>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <AS5600_init+0x9c>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e05f      	b.n	8000f9e <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7c1b      	ldrb	r3, [r3, #16]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f8b3 	bl	8001050 <AS5600_set_hysteresis>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <AS5600_init+0xb2>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e054      	b.n	8000f9e <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7c59      	ldrb	r1, [r3, #17]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7c9b      	ldrb	r3, [r3, #18]
 8000efc:	461a      	mov	r2, r3
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f8fa 	bl	80010f8 <AS5600_set_output_mode>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <AS5600_init+0xcc>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e047      	b.n	8000f9e <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7cdb      	ldrb	r3, [r3, #19]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f983 	bl	8001220 <AS5600_set_slow_filter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <AS5600_init+0xe2>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e03c      	b.n	8000f9e <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7d1b      	ldrb	r3, [r3, #20]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f9cc 	bl	80012c8 <AS5600_set_fast_filter_threshold>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <AS5600_init+0xf8>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e031      	b.n	8000f9e <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7d5b      	ldrb	r3, [r3, #21]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 fa61 	bl	8001408 <AS5600_set_watchdog_timer>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <AS5600_init+0x10e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e026      	b.n	8000f9e <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fa80 	bl	8001456 <AS5600_write_config_register>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <AS5600_init+0x11e>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e01e      	b.n	8000f9e <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000f64:	f107 030f 	add.w	r3, r7, #15
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 fab2 	bl	80014d4 <AS5600_get_magnet_status>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <AS5600_init+0x138>
 8000f76:	2301      	movs	r3, #1
 8000f78:	e011      	b.n	8000f9e <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	f003 0320 	and.w	r3, r3, #32
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d104      	bne.n	8000f98 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <AS5600_init+0x15a>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <AS5600_init+0x15c>
	return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d83f      	bhi.n	800103c <AS5600_set_low_power_mode+0x94>
 8000fbc:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <AS5600_set_low_power_mode+0x1c>)
 8000fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc2:	bf00      	nop
 8000fc4:	08000fd5 	.word	0x08000fd5
 8000fc8:	08000fe7 	.word	0x08000fe7
 8000fcc:	08001009 	.word	0x08001009
 8000fd0:	0800102b 	.word	0x0800102b
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7ddb      	ldrb	r3, [r3, #23]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	75da      	strb	r2, [r3, #23]
		break;
 8000fe4:	e02c      	b.n	8001040 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7ddb      	ldrb	r3, [r3, #23]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7ddb      	ldrb	r3, [r3, #23]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f023 0302 	bic.w	r3, r3, #2
 8001000:	b2da      	uxtb	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	75da      	strb	r2, [r3, #23]
	break;
 8001006:	e01b      	b.n	8001040 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	7ddb      	ldrb	r3, [r3, #23]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	b2da      	uxtb	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7ddb      	ldrb	r3, [r3, #23]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	75da      	strb	r2, [r3, #23]
		break;
 8001028:	e00a      	b.n	8001040 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7ddb      	ldrb	r3, [r3, #23]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f043 0303 	orr.w	r3, r3, #3
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	75da      	strb	r2, [r3, #23]
		break;
 800103a:	e001      	b.n	8001040 <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	3b01      	subs	r3, #1
 8001060:	2b03      	cmp	r3, #3
 8001062:	d83f      	bhi.n	80010e4 <AS5600_set_hysteresis+0x94>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <AS5600_set_hysteresis+0x1c>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	0800107d 	.word	0x0800107d
 8001070:	0800108f 	.word	0x0800108f
 8001074:	080010b1 	.word	0x080010b1
 8001078:	080010d3 	.word	0x080010d3
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7ddb      	ldrb	r3, [r3, #23]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	f023 030c 	bic.w	r3, r3, #12
 8001086:	b2da      	uxtb	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	75da      	strb	r2, [r3, #23]
		break;
 800108c:	e02c      	b.n	80010e8 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7ddb      	ldrb	r3, [r3, #23]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7ddb      	ldrb	r3, [r3, #23]
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f023 0308 	bic.w	r3, r3, #8
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	75da      	strb	r2, [r3, #23]
		break;
 80010ae:	e01b      	b.n	80010e8 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f023 0304 	bic.w	r3, r3, #4
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7ddb      	ldrb	r3, [r3, #23]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	75da      	strb	r2, [r3, #23]
		break;
 80010d0:	e00a      	b.n	80010e8 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7ddb      	ldrb	r3, [r3, #23]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f043 030c 	orr.w	r3, r3, #12
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	75da      	strb	r2, [r3, #23]
		break;
 80010e2:	e001      	b.n	80010e8 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d020      	beq.n	8001154 <AS5600_set_output_mode+0x5c>
 8001112:	2b03      	cmp	r3, #3
 8001114:	dc31      	bgt.n	800117a <AS5600_set_output_mode+0x82>
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <AS5600_set_output_mode+0x28>
 800111a:	2b02      	cmp	r3, #2
 800111c:	d009      	beq.n	8001132 <AS5600_set_output_mode+0x3a>
 800111e:	e02c      	b.n	800117a <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7ddb      	ldrb	r3, [r3, #23]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	75da      	strb	r2, [r3, #23]
		break;
 8001130:	e025      	b.n	800117e <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7ddb      	ldrb	r3, [r3, #23]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7ddb      	ldrb	r3, [r3, #23]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f023 0320 	bic.w	r3, r3, #32
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	75da      	strb	r2, [r3, #23]
		break;
 8001152:	e014      	b.n	800117e <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7ddb      	ldrb	r3, [r3, #23]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7ddb      	ldrb	r3, [r3, #23]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 800117a:	2301      	movs	r3, #1
 800117c:	e04a      	b.n	8001214 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d045      	beq.n	8001210 <AS5600_set_output_mode+0x118>
		switch (frequency) {
 8001184:	78bb      	ldrb	r3, [r7, #2]
 8001186:	3b01      	subs	r3, #1
 8001188:	2b03      	cmp	r3, #3
 800118a:	d83f      	bhi.n	800120c <AS5600_set_output_mode+0x114>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <AS5600_set_output_mode+0x9c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a5 	.word	0x080011a5
 8001198:	080011b7 	.word	0x080011b7
 800119c:	080011d9 	.word	0x080011d9
 80011a0:	080011fb 	.word	0x080011fb
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7ddb      	ldrb	r3, [r3, #23]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	75da      	strb	r2, [r3, #23]
			break;
 80011b4:	e02d      	b.n	8001212 <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7ddb      	ldrb	r3, [r3, #23]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7ddb      	ldrb	r3, [r3, #23]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	75da      	strb	r2, [r3, #23]
			break;
 80011d6:	e01c      	b.n	8001212 <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7ddb      	ldrb	r3, [r3, #23]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7ddb      	ldrb	r3, [r3, #23]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	75da      	strb	r2, [r3, #23]
			break;
 80011f8:	e00b      	b.n	8001212 <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7ddb      	ldrb	r3, [r3, #23]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	75da      	strb	r2, [r3, #23]
			break;
 800120a:	e002      	b.n	8001212 <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 800120c:	2301      	movs	r3, #1
 800120e:	e001      	b.n	8001214 <AS5600_set_output_mode+0x11c>
		}
	}
 8001210:	bf00      	nop
	return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	3b01      	subs	r3, #1
 8001230:	2b03      	cmp	r3, #3
 8001232:	d83f      	bhi.n	80012b4 <AS5600_set_slow_filter+0x94>
 8001234:	a201      	add	r2, pc, #4	; (adr r2, 800123c <AS5600_set_slow_filter+0x1c>)
 8001236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123a:	bf00      	nop
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800125f 	.word	0x0800125f
 8001244:	08001281 	.word	0x08001281
 8001248:	080012a3 	.word	0x080012a3
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	7d9b      	ldrb	r3, [r3, #22]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f023 0303 	bic.w	r3, r3, #3
 8001256:	b2da      	uxtb	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	759a      	strb	r2, [r3, #22]
		break;
 800125c:	e02c      	b.n	80012b8 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7d9b      	ldrb	r3, [r3, #22]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7d9b      	ldrb	r3, [r3, #22]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f023 0302 	bic.w	r3, r3, #2
 8001278:	b2da      	uxtb	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	759a      	strb	r2, [r3, #22]
		break;
 800127e:	e01b      	b.n	80012b8 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7d9b      	ldrb	r3, [r3, #22]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7d9b      	ldrb	r3, [r3, #22]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	b2da      	uxtb	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	759a      	strb	r2, [r3, #22]
		break;
 80012a0:	e00a      	b.n	80012b8 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7d9b      	ldrb	r3, [r3, #22]
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f043 0303 	orr.w	r3, r3, #3
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	759a      	strb	r2, [r3, #22]
		break;
 80012b2:	e001      	b.n	80012b8 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	2b07      	cmp	r3, #7
 80012da:	f200 808b 	bhi.w	80013f4 <AS5600_set_fast_filter_threshold+0x12c>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <AS5600_set_fast_filter_threshold+0x1c>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	08001305 	.word	0x08001305
 80012e8:	08001317 	.word	0x08001317
 80012ec:	08001339 	.word	0x08001339
 80012f0:	0800135b 	.word	0x0800135b
 80012f4:	0800137d 	.word	0x0800137d
 80012f8:	0800139f 	.word	0x0800139f
 80012fc:	080013c1 	.word	0x080013c1
 8001300:	080013e3 	.word	0x080013e3
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	7d9b      	ldrb	r3, [r3, #22]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f023 031c 	bic.w	r3, r3, #28
 800130e:	b2da      	uxtb	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	759a      	strb	r2, [r3, #22]
		break;
 8001314:	e070      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7d9b      	ldrb	r3, [r3, #22]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	f023 0318 	bic.w	r3, r3, #24
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7d9b      	ldrb	r3, [r3, #22]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	759a      	strb	r2, [r3, #22]
		break;
 8001336:	e05f      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7d9b      	ldrb	r3, [r3, #22]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f023 0314 	bic.w	r3, r3, #20
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7d9b      	ldrb	r3, [r3, #22]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0308 	orr.w	r3, r3, #8
 8001352:	b2da      	uxtb	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	759a      	strb	r2, [r3, #22]
		break;
 8001358:	e04e      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7d9b      	ldrb	r3, [r3, #22]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f023 0310 	bic.w	r3, r3, #16
 8001364:	b2da      	uxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7d9b      	ldrb	r3, [r3, #22]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f043 030c 	orr.w	r3, r3, #12
 8001374:	b2da      	uxtb	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	759a      	strb	r2, [r3, #22]
		break;
 800137a:	e03d      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7d9b      	ldrb	r3, [r3, #22]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	f023 030c 	bic.w	r3, r3, #12
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	7d9b      	ldrb	r3, [r3, #22]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0310 	orr.w	r3, r3, #16
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	759a      	strb	r2, [r3, #22]
		break;
 800139c:	e02c      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7d9b      	ldrb	r3, [r3, #22]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f023 0308 	bic.w	r3, r3, #8
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7d9b      	ldrb	r3, [r3, #22]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	f043 0314 	orr.w	r3, r3, #20
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	759a      	strb	r2, [r3, #22]
		break;
 80013be:	e01b      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7d9b      	ldrb	r3, [r3, #22]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f023 0304 	bic.w	r3, r3, #4
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7d9b      	ldrb	r3, [r3, #22]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f043 0318 	orr.w	r3, r3, #24
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	759a      	strb	r2, [r3, #22]
		break;
 80013e0:	e00a      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7d9b      	ldrb	r3, [r3, #22]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f043 031c 	orr.w	r3, r3, #28
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	759a      	strb	r2, [r3, #22]
		break;
 80013f2:	e001      	b.n	80013f8 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001414:	78fb      	ldrb	r3, [r7, #3]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d002      	beq.n	8001420 <AS5600_set_watchdog_timer+0x18>
 800141a:	2b02      	cmp	r3, #2
 800141c:	d009      	beq.n	8001432 <AS5600_set_watchdog_timer+0x2a>
 800141e:	e011      	b.n	8001444 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7d9b      	ldrb	r3, [r3, #22]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	759a      	strb	r2, [r3, #22]
		break;
 8001430:	e00a      	b.n	8001448 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7d9b      	ldrb	r3, [r3, #22]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	759a      	strb	r2, [r3, #22]
		break;
 8001442:	e001      	b.n	8001448 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af04      	add	r7, sp, #16
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3316      	adds	r3, #22
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6892      	ldr	r2, [r2, #8]
 800146a:	9202      	str	r2, [sp, #8]
 800146c:	2202      	movs	r2, #2
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	2207      	movs	r2, #7
 8001476:	216c      	movs	r1, #108	; 0x6c
 8001478:	f002 fa80 	bl	800397c <HAL_I2C_Mem_Write>
 800147c:	4603      	mov	r3, r0
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 8001486:	b580      	push	{r7, lr}
 8001488:	b088      	sub	sp, #32
 800148a:	af04      	add	r7, sp, #16
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 8001490:	2300      	movs	r3, #0
 8001492:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	2302      	movs	r3, #2
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	220e      	movs	r2, #14
 80014ac:	216c      	movs	r1, #108	; 0x6c
 80014ae:	f002 fb5f 	bl	8003b70 <HAL_I2C_Mem_Read>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 80014b6:	7b3b      	ldrb	r3, [r7, #12]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	801a      	strh	r2, [r3, #0]
	return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af04      	add	r7, sp, #16
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	220b      	movs	r2, #11
 80014f4:	216c      	movs	r1, #108	; 0x6c
 80014f6:	f002 fb3b 	bl	8003b70 <HAL_I2C_Mem_Read>
 80014fa:	4603      	mov	r3, r0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_DMA_Init+0x5c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a13      	ldr	r2, [pc, #76]	; (8001560 <MX_DMA_Init+0x5c>)
 8001514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_DMA_Init+0x5c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2038      	movs	r0, #56	; 0x38
 800152c:	f001 fb6d 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001530:	2038      	movs	r0, #56	; 0x38
 8001532:	f001 fb86 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	203b      	movs	r0, #59	; 0x3b
 800153c:	f001 fb65 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001540:	203b      	movs	r0, #59	; 0x3b
 8001542:	f001 fb7e 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2100      	movs	r1, #0
 800154a:	203c      	movs	r0, #60	; 0x3c
 800154c:	f001 fb5d 	bl	8002c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001550:	203c      	movs	r0, #60	; 0x3c
 8001552:	f001 fb76 	bl	8002c42 <HAL_NVIC_EnableIRQ>

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40023800 	.word	0x40023800

08001564 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <MX_GPIO_Init+0x128>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a42      	ldr	r2, [pc, #264]	; (800168c <MX_GPIO_Init+0x128>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <MX_GPIO_Init+0x128>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <MX_GPIO_Init+0x128>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a3b      	ldr	r2, [pc, #236]	; (800168c <MX_GPIO_Init+0x128>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <MX_GPIO_Init+0x128>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b8:	4835      	ldr	r0, [pc, #212]	; (8001690 <MX_GPIO_Init+0x12c>)
 80015ba:	f002 f881 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f24e 0120 	movw	r1, #57376	; 0xe020
 80015c4:	4832      	ldr	r0, [pc, #200]	; (8001690 <MX_GPIO_Init+0x12c>)
 80015c6:	f002 f87b 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015d0:	4830      	ldr	r0, [pc, #192]	; (8001694 <MX_GPIO_Init+0x130>)
 80015d2:	f002 f875 	bl	80036c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80015d6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80015da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015dc:	2311      	movs	r3, #17
 80015de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	4619      	mov	r1, r3
 80015ee:	4828      	ldr	r0, [pc, #160]	; (8001690 <MX_GPIO_Init+0x12c>)
 80015f0:	f001 fee2 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 80015f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015fa:	2311      	movs	r3, #17
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	4820      	ldr	r0, [pc, #128]	; (8001690 <MX_GPIO_Init+0x12c>)
 800160e:	f001 fed3 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 8001612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001618:	2311      	movs	r3, #17
 800161a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	4619      	mov	r1, r3
 800162a:	4819      	ldr	r0, [pc, #100]	; (8001690 <MX_GPIO_Init+0x12c>)
 800162c:	f001 fec4 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 8001630:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001636:	2311      	movs	r3, #17
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	4812      	ldr	r0, [pc, #72]	; (8001694 <MX_GPIO_Init+0x130>)
 800164a:	f001 feb5 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 800164e:	2320      	movs	r3, #32
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001652:	2311      	movs	r3, #17
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	; (8001690 <MX_GPIO_Init+0x12c>)
 8001666:	f001 fea7 	bl	80033b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 800166a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_GPIO_Init+0x12c>)
 8001680:	f001 fe9a 	bl	80033b8 <HAL_GPIO_Init>

}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400
 8001694:	40020000 	.word	0x40020000

08001698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_I2C1_Init+0x50>)
 800169e:	4a13      	ldr	r2, [pc, #76]	; (80016ec <MX_I2C1_Init+0x54>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016a4:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x58>)
 80016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <MX_I2C1_Init+0x50>)
 80016d6:	f002 f80d 	bl	80036f4 <HAL_I2C_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016e0:	f000 f98a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000134 	.word	0x20000134
 80016ec:	40005400 	.word	0x40005400
 80016f0:	000186a0 	.word	0x000186a0

080016f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_I2C_MspInit+0xa4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d13b      	bne.n	800178e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b20      	ldr	r3, [pc, #128]	; (800179c <HAL_I2C_MspInit+0xa8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_I2C_MspInit+0xa8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_I2C_MspInit+0xa8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4814      	ldr	r0, [pc, #80]	; (80017a0 <HAL_I2C_MspInit+0xac>)
 800174e:	f001 fe33 	bl	80033b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_I2C_MspInit+0xa8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_I2C_MspInit+0xa8>)
 800175c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_I2C_MspInit+0xa8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	201f      	movs	r0, #31
 8001774:	f001 fa49 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001778:	201f      	movs	r0, #31
 800177a:	f001 fa62 	bl	8002c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2020      	movs	r0, #32
 8001784:	f001 fa41 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001788:	2020      	movs	r0, #32
 800178a:	f001 fa5a 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <euler_integration>:
	}
	*pos_integrator = pos;
	return (uint16_t)pos;
}
*/
double euler_integration(double register pos) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	ec55 4b10 	vmov	r4, r5, d0
	for (uint32_t i = 0; i < AS5600_ADC_BUF_SIZE; i++) {
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	e020      	b.n	80017f6 <euler_integration+0x52>
		pos += (AS5600_analog_pos[i] - pos) / AS5600_EULER_DELTA_T_DIV_TAU;
 80017b4:	4a17      	ldr	r2, [pc, #92]	; (8001814 <euler_integration+0x70>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe5d 	bl	800047c <__aeabi_i2d>
 80017c2:	4622      	mov	r2, r4
 80017c4:	462b      	mov	r3, r5
 80017c6:	f7fe fd0b 	bl	80001e0 <__aeabi_dsub>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <euler_integration+0x74>)
 80017d8:	f7fe ffe4 	bl	80007a4 <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fcfe 	bl	80001e4 <__adddf3>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	461d      	mov	r5, r3
	for (uint32_t i = 0; i < AS5600_ADC_BUF_SIZE; i++) {
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3301      	adds	r3, #1
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b12      	cmp	r3, #18
 80017fa:	d9db      	bls.n	80017b4 <euler_integration+0x10>
	}
	return pos;
 80017fc:	4622      	mov	r2, r4
 80017fe:	462b      	mov	r3, r5
 8001800:	ec43 2b17 	vmov	d7, r2, r3
}
 8001804:	eeb0 0a47 	vmov.f32	s0, s14
 8001808:	eef0 0a67 	vmov.f32	s1, s15
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bdb0      	pop	{r4, r5, r7, pc}
 8001812:	bf00      	nop
 8001814:	2000018c 	.word	0x2000018c
 8001818:	40080000 	.word	0x40080000

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8001822:	f7ff fb05 	bl	8000e30 <AS5600_new>
 8001826:	4603      	mov	r3, r0
 8001828:	4a37      	ldr	r2, [pc, #220]	; (8001908 <main+0xec>)
 800182a:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <main+0xec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <main+0xf0>)
 8001832:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8001834:	4b34      	ldr	r3, [pc, #208]	; (8001908 <main+0xec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a35      	ldr	r2, [pc, #212]	; (8001910 <main+0xf4>)
 800183a:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <main+0xec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2220      	movs	r2, #32
 8001842:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CCW;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <main+0xec>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2202      	movs	r2, #2
 800184a:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f000 fb46 	bl	8001edc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 f86a 	bl	8001928 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f7ff fe86 	bl	8001564 <MX_GPIO_Init>
  MX_DMA_Init();
 8001858:	f7ff fe54 	bl	8001504 <MX_DMA_Init>
  MX_SPI1_Init();
 800185c:	f000 f8d4 	bl	8001a08 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001860:	f7ff ff1a 	bl	8001698 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001864:	f7ff fa08 	bl	8000c78 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001868:	f000 faa2 	bl	8001db0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);  // start timer_2
 800186c:	4829      	ldr	r0, [pc, #164]	; (8001914 <main+0xf8>)
 800186e:	f005 fa17 	bl	8006ca0 <HAL_TIM_Base_Start>

	// buffers
	uint64_t	iter			= 0;
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	int8_t		mult			= 0;
 800187e:	2300      	movs	r3, #0
 8001880:	77fb      	strb	r3, [r7, #31]
	uint64_t	pulse_delay_us	= 0;
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {
 800188e:	e002      	b.n	8001896 <main+0x7a>
		  HAL_Delay(50);
 8001890:	2032      	movs	r0, #50	; 0x32
 8001892:	f000 fb95 	bl	8001fc0 <HAL_Delay>
	while (AS5600_init(sensor) != HAL_OK) {
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <main+0xec>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fad1 	bl	8000e42 <AS5600_init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f4      	bne.n	8001890 <main+0x74>
	}  // the sensor has to be on for the code to work

	// initialize the AS5600 position variable
	AS5600_get_angle(sensor, &AS5600_pos);
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <main+0xec>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	491b      	ldr	r1, [pc, #108]	; (8001918 <main+0xfc>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fdea 	bl	8001486 <AS5600_get_angle>
	AS5600_pos_integrator = AS5600_pos;
 80018b2:	4b19      	ldr	r3, [pc, #100]	; (8001918 <main+0xfc>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdd0 	bl	800045c <__aeabi_ui2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <main+0x100>)
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]
	/*  DISABLED FOR STEPPER DRIVER TESTING
	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*)&instruction, 16);  // start data receiving loop
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/
	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AS5600_analog_pos, AS5600_ADC_BUF_SIZE);
 80018c6:	2213      	movs	r2, #19
 80018c8:	4915      	ldr	r1, [pc, #84]	; (8001920 <main+0x104>)
 80018ca:	4816      	ldr	r0, [pc, #88]	; (8001924 <main+0x108>)
 80018cc:	f000 fcf0 	bl	80022b0 <HAL_ADC_Start_DMA>

	uint16_t target = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	80fb      	strh	r3, [r7, #6]
	uint16_t delta;
	uint32_t proc_time;
	while (1) {
		TIM2->CNT = 0;
 80018d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
		AS5600_pos_integrator = euler_integration(AS5600_pos_integrator);
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <main+0x100>)
 80018de:	ed93 7b00 	vldr	d7, [r3]
 80018e2:	eeb0 0a47 	vmov.f32	s0, s14
 80018e6:	eef0 0a67 	vmov.f32	s1, s15
 80018ea:	f7ff ff5b 	bl	80017a4 <euler_integration>
 80018ee:	eeb0 7a40 	vmov.f32	s14, s0
 80018f2:	eef0 7a60 	vmov.f32	s15, s1
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <main+0x100>)
 80018f8:	ed83 7b00 	vstr	d7, [r3]
		proc_time = TIM2->CNT;
 80018fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	603b      	str	r3, [r7, #0]
		TIM2->CNT = 0;
 8001904:	e7e6      	b.n	80018d4 <main+0xb8>
 8001906:	bf00      	nop
 8001908:	20000188 	.word	0x20000188
 800190c:	20000134 	.word	0x20000134
 8001910:	40020400 	.word	0x40020400
 8001914:	200002e0 	.word	0x200002e0
 8001918:	200001c0 	.word	0x200001c0
 800191c:	200001b8 	.word	0x200001b8
 8001920:	2000018c 	.word	0x2000018c
 8001924:	2000008c 	.word	0x2000008c

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	; 0x50
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	2230      	movs	r2, #48	; 0x30
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f005 fc8e 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <SystemClock_Config+0xc8>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a26      	ldr	r2, [pc, #152]	; (80019f0 <SystemClock_Config+0xc8>)
 8001956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <SystemClock_Config+0xc8>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001968:	2300      	movs	r3, #0
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <SystemClock_Config+0xcc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <SystemClock_Config+0xcc>)
 8001972:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <SystemClock_Config+0xcc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800198c:	2310      	movs	r3, #16
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001990:	2302      	movs	r3, #2
 8001992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001994:	2300      	movs	r3, #0
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001998:	2310      	movs	r3, #16
 800199a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a0:	2302      	movs	r3, #2
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019a4:	2304      	movs	r3, #4
 80019a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019a8:	f107 0320 	add.w	r3, r7, #32
 80019ac:	4618      	mov	r0, r3
 80019ae:	f004 fb3b 	bl	8006028 <HAL_RCC_OscConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019b8:	f000 f81e 	bl	80019f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019bc:	230f      	movs	r3, #15
 80019be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019c0:	2302      	movs	r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2103      	movs	r1, #3
 80019d8:	4618      	mov	r0, r3
 80019da:	f004 fd9d 	bl	8006518 <HAL_RCC_ClockConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019e4:	f000 f808 	bl	80019f8 <Error_Handler>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3750      	adds	r7, #80	; 0x50
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40007000 	.word	0x40007000

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <MX_SPI1_Init+0x60>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_SPI1_Init+0x5c>)
 8001a50:	f004 ff2e 	bl	80068b0 <HAL_SPI_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8001a5a:	f7ff ffcd 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200001c4 	.word	0x200001c4
 8001a68:	40013000 	.word	0x40013000

08001a6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_SPI_MspInit+0x168>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	f040 809d 	bne.w	8001bca <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	4b49      	ldr	r3, [pc, #292]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <HAL_SPI_MspInit+0x16c>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 8001ac8:	23f0      	movs	r3, #240	; 0xf0
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	483e      	ldr	r0, [pc, #248]	; (8001bdc <HAL_SPI_MspInit+0x170>)
 8001ae4:	f001 fc68 	bl	80033b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001aea:	4a3e      	ldr	r2, [pc, #248]	; (8001be4 <HAL_SPI_MspInit+0x178>)
 8001aec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001af0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001af4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af6:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001af8:	2240      	movs	r2, #64	; 0x40
 8001afa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afc:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b08:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001b16:	4b32      	ldr	r3, [pc, #200]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b24:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b2c:	482c      	ldr	r0, [pc, #176]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b2e:	f001 f8a3 	bl	8002c78 <HAL_DMA_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001b38:	f7ff ff5e 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b40:	649a      	str	r2, [r3, #72]	; 0x48
 8001b42:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <HAL_SPI_MspInit+0x174>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b4a:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_SPI_MspInit+0x180>)
 8001b4c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b50:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b54:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b62:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b68:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6a:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b70:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b88:	2204      	movs	r2, #4
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b8e:	2203      	movs	r2, #3
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b9e:	4812      	ldr	r0, [pc, #72]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001ba0:	f001 f86a 	bl	8002c78 <HAL_DMA_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 8001baa:	f7ff ff25 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001bb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <HAL_SPI_MspInit+0x17c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2023      	movs	r0, #35	; 0x23
 8001bc0:	f001 f823 	bl	8002c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bc4:	2023      	movs	r0, #35	; 0x23
 8001bc6:	f001 f83c 	bl	8002c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40013000 	.word	0x40013000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	2000021c 	.word	0x2000021c
 8001be4:	40026458 	.word	0x40026458
 8001be8:	2000027c 	.word	0x2000027c
 8001bec:	40026410 	.word	0x40026410

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_MspInit+0x4c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_MspInit+0x4c>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <NMI_Handler+0x4>

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f978 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <ADC_IRQHandler+0x10>)
 8001c9a:	f000 f9f8 	bl	800208e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000008c 	.word	0x2000008c

08001ca8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <I2C1_EV_IRQHandler+0x10>)
 8001cae:	f002 f985 	bl	8003fbc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000134 	.word	0x20000134

08001cbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <I2C1_ER_IRQHandler+0x10>)
 8001cc2:	f002 faec 	bl	800429e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000134 	.word	0x20000134

08001cd0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <SPI1_IRQHandler+0x10>)
 8001cd6:	f004 fe75 	bl	80069c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200001c4 	.word	0x200001c4

08001ce4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cea:	f001 f8ed 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000027c 	.word	0x2000027c

08001cf8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <DMA2_Stream3_IRQHandler+0x10>)
 8001cfe:	f001 f8e3 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000021c 	.word	0x2000021c

08001d0c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <DMA2_Stream4_IRQHandler+0x10>)
 8001d12:	f001 f8d9 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200000d4 	.word	0x200000d4

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f005 fa58 	bl	8007204 <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	220c      	movs	r2, #12
 8001d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20020000 	.word	0x20020000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	200002dc 	.word	0x200002dc
 8001d88:	20000340 	.word	0x20000340

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <SystemInit+0x20>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemInit+0x20>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed00 	.word	0xe000ed00

08001db0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db6:	f107 0308 	add.w	r3, r7, #8
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dd6:	225f      	movs	r2, #95	; 0x5f
 8001dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001de2:	f04f 32ff 	mov.w	r2, #4294967295
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df4:	4813      	ldr	r0, [pc, #76]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001df6:	f004 ff03 	bl	8006c00 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e00:	f7ff fdfa 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e0a:	f107 0308 	add.w	r3, r7, #8
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001e12:	f004 ff9f 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e1c:	f7ff fdec 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e28:	463b      	mov	r3, r7
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_TIM2_Init+0x94>)
 8001e2e:	f005 f973 	bl	8007118 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e38:	f7ff fdde 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	200002e0 	.word	0x200002e0

08001e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d10d      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_TIM_Base_MspInit+0x3c>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_TIM_Base_MspInit+0x3c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_TIM_Base_MspInit+0x3c>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea4:	4c0b      	ldr	r4, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb2:	f7ff ff6b 	bl	8001d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f005 f9ab 	bl	8007210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff fcaf 	bl	800181c <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ecc:	08007440 	.word	0x08007440
  ldr r2, =_sbss
 8001ed0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ed4:	2000033c 	.word	0x2000033c

08001ed8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <DMA1_Stream0_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fe75 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fe6e 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fe8d 	bl	8002c5e <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 fe55 	bl	8002c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000328 	.word	0x20000328

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000328 	.word	0x20000328

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008

08002008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e033      	b.n	8002086 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fe78 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800204e:	f023 0302 	bic.w	r3, r3, #2
 8002052:	f043 0202 	orr.w	r2, r3, #2
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fb72 	bl	8002744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
 8002076:	e001      	b.n	800207c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002084:	7bfb      	ldrb	r3, [r7, #15]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d049      	beq.n	8002158 <HAL_ADC_IRQHandler+0xca>
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d046      	beq.n	8002158 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12b      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d127      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002110:	2b00      	cmp	r3, #0
 8002112:	d119      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0220 	bic.w	r2, r2, #32
 8002122:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9a1 	bl	8002490 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f06f 0212 	mvn.w	r2, #18
 8002156:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d057      	beq.n	800221e <HAL_ADC_IRQHandler+0x190>
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d054      	beq.n	800221e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d139      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d124      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11d      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fc16 	bl	8002a40 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 020c 	mvn.w	r2, #12
 800221c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d017      	beq.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f92f 	bl	80024b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f06f 0201 	mvn.w	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002272:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d015      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x218>
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d012      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	f043 0202 	orr.w	r2, r3, #2
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0220 	mvn.w	r2, #32
 8002294:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f918 	bl	80024cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0220 	mvn.w	r2, #32
 80022a4:	601a      	str	r2, [r3, #0]
  }
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_ADC_Start_DMA+0x1e>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0ce      	b.n	800246c <HAL_ADC_Start_DMA+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d018      	beq.n	8002316 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f4:	4b5f      	ldr	r3, [pc, #380]	; (8002474 <HAL_ADC_Start_DMA+0x1c4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <HAL_ADC_Start_DMA+0x1c8>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9a      	lsrs	r2, r3, #18
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002308:	e002      	b.n	8002310 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	3b01      	subs	r3, #1
 800230e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f9      	bne.n	800230a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002324:	d107      	bne.n	8002336 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 8086 	bne.w	8002452 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d007      	beq.n	8002378 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002370:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002384:	d106      	bne.n	8002394 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	f023 0206 	bic.w	r2, r3, #6
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
 8002392:	e002      	b.n	800239a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_ADC_Start_DMA+0x1cc>)
 80023a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a35      	ldr	r2, [pc, #212]	; (8002480 <HAL_ADC_Start_DMA+0x1d0>)
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_ADC_Start_DMA+0x1d4>)
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <HAL_ADC_Start_DMA+0x1d8>)
 80023bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	334c      	adds	r3, #76	; 0x4c
 80023f2:	4619      	mov	r1, r3
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f000 fcec 	bl	8002dd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d129      	bne.n	800246a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	e020      	b.n	800246a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_ADC_Start_DMA+0x1dc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d11b      	bne.n	800246a <HAL_ADC_Start_DMA+0x1ba>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d114      	bne.n	800246a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e00b      	b.n	800246a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000000 	.word	0x20000000
 8002478:	431bde83 	.word	0x431bde83
 800247c:	40012300 	.word	0x40012300
 8002480:	0800293d 	.word	0x0800293d
 8002484:	080029f7 	.word	0x080029f7
 8002488:	08002a13 	.word	0x08002a13
 800248c:	40012000 	.word	0x40012000

08002490 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e113      	b.n	8002724 <HAL_ADC_ConfigChannel+0x244>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b09      	cmp	r3, #9
 800250a:	d925      	bls.n	8002558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68d9      	ldr	r1, [r3, #12]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	3b1e      	subs	r3, #30
 8002522:	2207      	movs	r2, #7
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43da      	mvns	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	400a      	ands	r2, r1
 8002530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68d9      	ldr	r1, [r3, #12]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	4603      	mov	r3, r0
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4403      	add	r3, r0
 800254a:	3b1e      	subs	r3, #30
 800254c:	409a      	lsls	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	e022      	b.n	800259e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6919      	ldr	r1, [r3, #16]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	2207      	movs	r2, #7
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	4603      	mov	r3, r0
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4403      	add	r3, r0
 8002594:	409a      	lsls	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d824      	bhi.n	80025f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b05      	subs	r3, #5
 80025b8:	221f      	movs	r2, #31
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	400a      	ands	r2, r1
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b05      	subs	r3, #5
 80025e2:	fa00 f203 	lsl.w	r2, r0, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	; 0x34
 80025ee:	e04c      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	d824      	bhi.n	8002642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3b23      	subs	r3, #35	; 0x23
 800260a:	221f      	movs	r2, #31
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43da      	mvns	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	400a      	ands	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b23      	subs	r3, #35	; 0x23
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
 8002640:	e023      	b.n	800268a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b41      	subs	r3, #65	; 0x41
 8002654:	221f      	movs	r2, #31
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	400a      	ands	r2, r1
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b41      	subs	r3, #65	; 0x41
 800267e:	fa00 f203 	lsl.w	r2, r0, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <HAL_ADC_ConfigChannel+0x250>)
 800268c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a28      	ldr	r2, [pc, #160]	; (8002734 <HAL_ADC_ConfigChannel+0x254>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d10f      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1d8>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d10b      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1d      	ldr	r2, [pc, #116]	; (8002734 <HAL_ADC_ConfigChannel+0x254>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d12b      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_ADC_ConfigChannel+0x258>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <HAL_ADC_ConfigChannel+0x1f4>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b11      	cmp	r3, #17
 80026d2:	d122      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <HAL_ADC_ConfigChannel+0x258>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d111      	bne.n	800271a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_ADC_ConfigChannel+0x25c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_ADC_ConfigChannel+0x260>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	0c9a      	lsrs	r2, r3, #18
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800270c:	e002      	b.n	8002714 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3b01      	subs	r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f9      	bne.n	800270e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40012300 	.word	0x40012300
 8002734:	40012000 	.word	0x40012000
 8002738:	10000012 	.word	0x10000012
 800273c:	20000000 	.word	0x20000000
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <ADC_Init+0x1f0>)
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800279c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	4a58      	ldr	r2, [pc, #352]	; (8002938 <ADC_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800280c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e00f      	b.n	8002842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0202 	bic.w	r2, r2, #2
 8002850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800288e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	3b01      	subs	r3, #1
 800289c:	035a      	lsls	r2, r3, #13
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e007      	b.n	80028b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051a      	lsls	r2, r3, #20
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fa:	025a      	lsls	r2, r3, #9
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	029a      	lsls	r2, r3, #10
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012300 	.word	0x40012300
 8002938:	0f000001 	.word	0x0f000001

0800293c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13c      	bne.n	80029d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d12b      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d127      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002990:	2b00      	cmp	r3, #0
 8002992:	d119      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff fd61 	bl	8002490 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ce:	e00e      	b.n	80029ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fd75 	bl	80024cc <HAL_ADC_ErrorCallback>
}
 80029e2:	e004      	b.n	80029ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff fd4d 	bl	80024a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fd4a 	bl	80024cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a86:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <__NVIC_SetPriorityGrouping+0x44>)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60d3      	str	r3, [r2, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00

08002a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	0a1b      	lsrs	r3, r3, #8
 8002aa6:	f003 0307 	and.w	r3, r3, #7
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000ed00 	.word	0xe000ed00

08002ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	db0b      	blt.n	8002ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	4907      	ldr	r1, [pc, #28]	; (8002af0 <__NVIC_EnableIRQ+0x38>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	095b      	lsrs	r3, r3, #5
 8002ad8:	2001      	movs	r0, #1
 8002ada:	fa00 f202 	lsl.w	r2, r0, r2
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000e100 	.word	0xe000e100

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	; (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	; (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f7ff ff8e 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff29 	bl	8002a54 <__NVIC_SetPriorityGrouping>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1c:	f7ff ff3e 	bl	8002a9c <__NVIC_GetPriorityGrouping>
 8002c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ff8e 	bl	8002b48 <NVIC_EncodePriority>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff5d 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff31 	bl	8002ab8 <__NVIC_EnableIRQ>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ffa2 	bl	8002bb0 <SysTick_Config>
 8002c6c:	4603      	mov	r3, r0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff f990 	bl	8001fa8 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e099      	b.n	8002dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0201 	bic.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb4:	e00f      	b.n	8002cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb6:	f7ff f977 	bl	8001fa8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d908      	bls.n	8002cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e078      	b.n	8002dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e8      	bne.n	8002cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <HAL_DMA_Init+0x158>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2b04      	cmp	r3, #4
 8002d2e:	d107      	bne.n	8002d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0307 	bic.w	r3, r3, #7
 8002d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d117      	bne.n	8002d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa9f 	bl	80032c0 <DMA_CheckFifoParam>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d96:	2301      	movs	r3, #1
 8002d98:	e016      	b.n	8002dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 fa56 	bl	8003254 <DMA_CalcBaseAndBitshift>
 8002da8:	4603      	mov	r3, r0
 8002daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	223f      	movs	r2, #63	; 0x3f
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	f010803f 	.word	0xf010803f

08002dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Start_IT+0x26>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e040      	b.n	8002e7c <HAL_DMA_Start_IT+0xa8>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d12f      	bne.n	8002e6e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f9e8 	bl	80031f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	223f      	movs	r2, #63	; 0x3f
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0216 	orr.w	r2, r2, #22
 8002e42:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0208 	orr.w	r2, r2, #8
 8002e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	e005      	b.n	8002e7a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
 8002e78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d004      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e00c      	b.n	8002ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2205      	movs	r2, #5
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed4:	4b8e      	ldr	r3, [pc, #568]	; (8003110 <HAL_DMA_IRQHandler+0x248>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a8e      	ldr	r2, [pc, #568]	; (8003114 <HAL_DMA_IRQHandler+0x24c>)
 8002eda:	fba2 2303 	umull	r2, r3, r2, r3
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0204 	bic.w	r2, r2, #4
 8002f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f20:	2208      	movs	r2, #8
 8002f22:	409a      	lsls	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d012      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	2201      	movs	r2, #1
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f043 0202 	orr.w	r2, r3, #2
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	2204      	movs	r2, #4
 8002f70:	409a      	lsls	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d012      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0204 	orr.w	r2, r3, #4
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d043      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d03c      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d018      	beq.n	800300a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e01f      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
 8003008:	e016      	b.n	8003038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0208 	bic.w	r2, r2, #8
 8003026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	2220      	movs	r2, #32
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 808f 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8087 	beq.w	8003168 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	2220      	movs	r2, #32
 8003060:	409a      	lsls	r2, r3
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b05      	cmp	r3, #5
 8003070:	d136      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0216 	bic.w	r2, r2, #22
 8003080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x1da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d007      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0208 	bic.w	r2, r2, #8
 80030b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	223f      	movs	r2, #63	; 0x3f
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d07e      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
        }
        return;
 80030de:	e079      	b.n	80031d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01d      	beq.n	800312a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d031      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
 800310c:	e02c      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
 800310e:	bf00      	nop
 8003110:	20000000 	.word	0x20000000
 8003114:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d023      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e01e      	b.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10f      	bne.n	8003158 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316c:	2b00      	cmp	r3, #0
 800316e:	d032      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d022      	beq.n	80031c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2205      	movs	r2, #5
 8003180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	3301      	adds	r3, #1
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	429a      	cmp	r2, r3
 800319e:	d307      	bcc.n	80031b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f2      	bne.n	8003194 <HAL_DMA_IRQHandler+0x2cc>
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
 80031d2:	e000      	b.n	80031d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80031d4:	bf00      	nop
    }
  }
}
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ea:	b2db      	uxtb	r3, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d108      	bne.n	8003238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003236:	e007      	b.n	8003248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	3b10      	subs	r3, #16
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800326e:	4a13      	ldr	r2, [pc, #76]	; (80032bc <DMA_CalcBaseAndBitshift+0x68>)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d909      	bls.n	8003296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	1d1a      	adds	r2, r3, #4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58
 8003294:	e007      	b.n	80032a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	aaaaaaab 	.word	0xaaaaaaab
 80032bc:	08007428 	.word	0x08007428

080032c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d11f      	bne.n	800331a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d856      	bhi.n	800338e <DMA_CheckFifoParam+0xce>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <DMA_CheckFifoParam+0x28>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	0800330b 	.word	0x0800330b
 80032f0:	080032f9 	.word	0x080032f9
 80032f4:	0800338f 	.word	0x0800338f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d046      	beq.n	8003392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003308:	e043      	b.n	8003392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003312:	d140      	bne.n	8003396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003318:	e03d      	b.n	8003396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d121      	bne.n	8003368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d837      	bhi.n	800339a <DMA_CheckFifoParam+0xda>
 800332a:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <DMA_CheckFifoParam+0x70>)
 800332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003330:	08003341 	.word	0x08003341
 8003334:	08003347 	.word	0x08003347
 8003338:	08003341 	.word	0x08003341
 800333c:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e030      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d025      	beq.n	800339e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003356:	e022      	b.n	800339e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003360:	d11f      	bne.n	80033a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003366:	e01c      	b.n	80033a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d903      	bls.n	8003376 <DMA_CheckFifoParam+0xb6>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d003      	beq.n	800337c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003374:	e018      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      break;
 800337a:	e015      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      break;
 800338c:	e00b      	b.n	80033a6 <DMA_CheckFifoParam+0xe6>
      break;
 800338e:	bf00      	nop
 8003390:	e00a      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
 8003394:	e008      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003396:	bf00      	nop
 8003398:	e006      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 800339a:	bf00      	nop
 800339c:	e004      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <DMA_CheckFifoParam+0xe8>
      break;
 80033a6:	bf00      	nop
    }
  } 
  
  return status; 
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop

080033b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e159      	b.n	8003688 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 8148 	bne.w	8003682 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d005      	beq.n	800340a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	2b02      	cmp	r3, #2
 8003408:	d130      	bne.n	800346c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	2203      	movs	r2, #3
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003440:	2201      	movs	r2, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	091b      	lsrs	r3, r3, #4
 8003456:	f003 0201 	and.w	r2, r3, #1
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b03      	cmp	r3, #3
 8003476:	d017      	beq.n	80034a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0303 	and.w	r3, r3, #3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d123      	bne.n	80034fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	08da      	lsrs	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3208      	adds	r2, #8
 80034bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	220f      	movs	r2, #15
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	08da      	lsrs	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3208      	adds	r2, #8
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0203 	and.w	r2, r3, #3
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a2 	beq.w	8003682 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4b57      	ldr	r3, [pc, #348]	; (80036a0 <HAL_GPIO_Init+0x2e8>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a56      	ldr	r2, [pc, #344]	; (80036a0 <HAL_GPIO_Init+0x2e8>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b54      	ldr	r3, [pc, #336]	; (80036a0 <HAL_GPIO_Init+0x2e8>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800355a:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <HAL_GPIO_Init+0x2ec>)
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	3302      	adds	r3, #2
 8003562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a49      	ldr	r2, [pc, #292]	; (80036a8 <HAL_GPIO_Init+0x2f0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x202>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a48      	ldr	r2, [pc, #288]	; (80036ac <HAL_GPIO_Init+0x2f4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x1fe>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a47      	ldr	r2, [pc, #284]	; (80036b0 <HAL_GPIO_Init+0x2f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x1fa>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a46      	ldr	r2, [pc, #280]	; (80036b4 <HAL_GPIO_Init+0x2fc>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x1f6>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a45      	ldr	r2, [pc, #276]	; (80036b8 <HAL_GPIO_Init+0x300>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x1f2>
 80035a6:	2304      	movs	r3, #4
 80035a8:	e008      	b.n	80035bc <HAL_GPIO_Init+0x204>
 80035aa:	2307      	movs	r3, #7
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x204>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e004      	b.n	80035bc <HAL_GPIO_Init+0x204>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e002      	b.n	80035bc <HAL_GPIO_Init+0x204>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <HAL_GPIO_Init+0x204>
 80035ba:	2300      	movs	r3, #0
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	f002 0203 	and.w	r2, r2, #3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4093      	lsls	r3, r2
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035cc:	4935      	ldr	r1, [pc, #212]	; (80036a4 <HAL_GPIO_Init+0x2ec>)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035da:	4b38      	ldr	r3, [pc, #224]	; (80036bc <HAL_GPIO_Init+0x304>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <HAL_GPIO_Init+0x304>)
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003604:	4b2d      	ldr	r3, [pc, #180]	; (80036bc <HAL_GPIO_Init+0x304>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	43db      	mvns	r3, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003628:	4a24      	ldr	r2, [pc, #144]	; (80036bc <HAL_GPIO_Init+0x304>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_GPIO_Init+0x304>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003652:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_GPIO_Init+0x304>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <HAL_GPIO_Init+0x304>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	43db      	mvns	r3, r3
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	4013      	ands	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800367c:	4a0f      	ldr	r2, [pc, #60]	; (80036bc <HAL_GPIO_Init+0x304>)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	f67f aea2 	bls.w	80033d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
	...

080036f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e12b      	b.n	800395e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fd ffea 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003746:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003756:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003758:	f003 f896 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 800375c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4a81      	ldr	r2, [pc, #516]	; (8003968 <HAL_I2C_Init+0x274>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d807      	bhi.n	8003778 <HAL_I2C_Init+0x84>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4a80      	ldr	r2, [pc, #512]	; (800396c <HAL_I2C_Init+0x278>)
 800376c:	4293      	cmp	r3, r2
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e006      	b.n	8003786 <HAL_I2C_Init+0x92>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a7d      	ldr	r2, [pc, #500]	; (8003970 <HAL_I2C_Init+0x27c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	bf94      	ite	ls
 8003780:	2301      	movls	r3, #1
 8003782:	2300      	movhi	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e0e7      	b.n	800395e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a78      	ldr	r2, [pc, #480]	; (8003974 <HAL_I2C_Init+0x280>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	0c9b      	lsrs	r3, r3, #18
 8003798:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <HAL_I2C_Init+0x274>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d802      	bhi.n	80037c8 <HAL_I2C_Init+0xd4>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3301      	adds	r3, #1
 80037c6:	e009      	b.n	80037dc <HAL_I2C_Init+0xe8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ce:	fb02 f303 	mul.w	r3, r2, r3
 80037d2:	4a69      	ldr	r2, [pc, #420]	; (8003978 <HAL_I2C_Init+0x284>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	099b      	lsrs	r3, r3, #6
 80037da:	3301      	adds	r3, #1
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	495c      	ldr	r1, [pc, #368]	; (8003968 <HAL_I2C_Init+0x274>)
 80037f8:	428b      	cmp	r3, r1
 80037fa:	d819      	bhi.n	8003830 <HAL_I2C_Init+0x13c>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e59      	subs	r1, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	fbb1 f3f3 	udiv	r3, r1, r3
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003810:	400b      	ands	r3, r1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_I2C_Init+0x138>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e59      	subs	r1, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fbb1 f3f3 	udiv	r3, r1, r3
 8003824:	3301      	adds	r3, #1
 8003826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382a:	e051      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800382c:	2304      	movs	r3, #4
 800382e:	e04f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d111      	bne.n	800385c <HAL_I2C_Init+0x168>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e012      	b.n	8003882 <HAL_I2C_Init+0x18e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e58      	subs	r0, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6859      	ldr	r1, [r3, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	0099      	lsls	r1, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003872:	3301      	adds	r3, #1
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf0c      	ite	eq
 800387c:	2301      	moveq	r3, #1
 800387e:	2300      	movne	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Init+0x196>
 8003886:	2301      	movs	r3, #1
 8003888:	e022      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10e      	bne.n	80038b0 <HAL_I2C_Init+0x1bc>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	1e58      	subs	r0, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	440b      	add	r3, r1
 80038a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ae:	e00f      	b.n	80038d0 <HAL_I2C_Init+0x1dc>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	0099      	lsls	r1, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c6:	3301      	adds	r3, #1
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	6809      	ldr	r1, [r1, #0]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6911      	ldr	r1, [r2, #16]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68d2      	ldr	r2, [r2, #12]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	000186a0 	.word	0x000186a0
 800396c:	001e847f 	.word	0x001e847f
 8003970:	003d08ff 	.word	0x003d08ff
 8003974:	431bde83 	.word	0x431bde83
 8003978:	10624dd3 	.word	0x10624dd3

0800397c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	461a      	mov	r2, r3
 800398a:	4603      	mov	r3, r0
 800398c:	817b      	strh	r3, [r7, #10]
 800398e:	460b      	mov	r3, r1
 8003990:	813b      	strh	r3, [r7, #8]
 8003992:	4613      	mov	r3, r2
 8003994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003996:	f7fe fb07 	bl	8001fa8 <HAL_GetTick>
 800399a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	f040 80d9 	bne.w	8003b5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2319      	movs	r3, #25
 80039b0:	2201      	movs	r2, #1
 80039b2:	496d      	ldr	r1, [pc, #436]	; (8003b68 <HAL_I2C_Mem_Write+0x1ec>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f002 f90d 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0cc      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Mem_Write+0x56>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0c5      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d007      	beq.n	80039f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2221      	movs	r2, #33	; 0x21
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2240      	movs	r2, #64	; 0x40
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a3a      	ldr	r2, [r7, #32]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a4d      	ldr	r2, [pc, #308]	; (8003b6c <HAL_I2C_Mem_Write+0x1f0>)
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3a:	88f8      	ldrh	r0, [r7, #6]
 8003a3c:	893a      	ldrh	r2, [r7, #8]
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4603      	mov	r3, r0
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f001 fe9c 	bl	8005788 <I2C_RequestMemoryWrite>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d052      	beq.n	8003afc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e081      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f002 f98e 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d107      	bne.n	8003a82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06b      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	781a      	ldrb	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d11b      	bne.n	8003afc <HAL_I2C_Mem_Write+0x180>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d017      	beq.n	8003afc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	781a      	ldrb	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1aa      	bne.n	8003a5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f002 f97a 	bl	8005e02 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00d      	beq.n	8003b30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d107      	bne.n	8003b2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e016      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	00100002 	.word	0x00100002
 8003b6c:	ffff0000 	.word	0xffff0000

08003b70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	4608      	mov	r0, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	817b      	strh	r3, [r7, #10]
 8003b82:	460b      	mov	r3, r1
 8003b84:	813b      	strh	r3, [r7, #8]
 8003b86:	4613      	mov	r3, r2
 8003b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b8a:	f7fe fa0d 	bl	8001fa8 <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b20      	cmp	r3, #32
 8003b9a:	f040 8208 	bne.w	8003fae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2319      	movs	r3, #25
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	497b      	ldr	r1, [pc, #492]	; (8003d94 <HAL_I2C_Mem_Read+0x224>)
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f002 f813 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e1fb      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2C_Mem_Read+0x56>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e1f4      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d007      	beq.n	8003bec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2222      	movs	r2, #34	; 0x22
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_I2C_Mem_Read+0x228>)
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c2e:	88f8      	ldrh	r0, [r7, #6]
 8003c30:	893a      	ldrh	r2, [r7, #8]
 8003c32:	8979      	ldrh	r1, [r7, #10]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f001 fe38 	bl	80058b4 <I2C_RequestMemoryRead>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1b0      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	e184      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11b      	bne.n	8003cbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	e164      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d11b      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	e144      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d14:	e138      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	f200 80f1 	bhi.w	8003f02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d123      	bne.n	8003d70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f002 f8db 	bl	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e139      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d6e:	e10b      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d14e      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4906      	ldr	r1, [pc, #24]	; (8003d9c <HAL_I2C_Mem_Read+0x22c>)
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f001 ff26 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e10e      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
 8003d92:	bf00      	nop
 8003d94:	00100002 	.word	0x00100002
 8003d98:	ffff0000 	.word	0xffff0000
 8003d9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e0b8      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4966      	ldr	r1, [pc, #408]	; (8003fb8 <HAL_I2C_Mem_Read+0x448>)
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f001 fed7 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0bf      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e78:	2200      	movs	r2, #0
 8003e7a:	494f      	ldr	r1, [pc, #316]	; (8003fb8 <HAL_I2C_Mem_Read+0x448>)
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f001 fea9 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e091      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691a      	ldr	r2, [r3, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f00:	e042      	b.n	8003f88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f001 ffee 	bl	8005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e04c      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d118      	bne.n	8003f88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	691a      	ldr	r2, [r3, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f47f aec2 	bne.w	8003d16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	; 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00010004 	.word	0x00010004

08003fbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fdc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d003      	beq.n	8003ff4 <HAL_I2C_EV_IRQHandler+0x38>
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b40      	cmp	r3, #64	; 0x40
 8003ff0:	f040 80c1 	bne.w	8004176 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <HAL_I2C_EV_IRQHandler+0x6e>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004014:	d003      	beq.n	800401e <HAL_I2C_EV_IRQHandler+0x62>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800401c:	d101      	bne.n	8004022 <HAL_I2C_EV_IRQHandler+0x66>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_I2C_EV_IRQHandler+0x68>
 8004022:	2300      	movs	r3, #0
 8004024:	2b01      	cmp	r3, #1
 8004026:	f000 8132 	beq.w	800428e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00c      	beq.n	800404e <HAL_I2C_EV_IRQHandler+0x92>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	0a5b      	lsrs	r3, r3, #9
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f001 ffd6 	bl	8005ff2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fd83 	bl	8004b52 <I2C_Master_SB>
 800404c:	e092      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d009      	beq.n	800406e <HAL_I2C_EV_IRQHandler+0xb2>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	0a5b      	lsrs	r3, r3, #9
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fdf9 	bl	8004c5e <I2C_Master_ADD10>
 800406c:	e082      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0xd2>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	0a5b      	lsrs	r3, r3, #9
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fe13 	bl	8004cb2 <I2C_Master_ADDR>
 800408c:	e072      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	089b      	lsrs	r3, r3, #2
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03b      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a8:	f000 80f3 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	09db      	lsrs	r3, r3, #7
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	0a9b      	lsrs	r3, r3, #10
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f9f3 	bl	80044bc <I2C_MasterTransmit_TXE>
 80040d6:	e04d      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80d6 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	0a5b      	lsrs	r3, r3, #9
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80cf 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040f4:	7bbb      	ldrb	r3, [r7, #14]
 80040f6:	2b21      	cmp	r3, #33	; 0x21
 80040f8:	d103      	bne.n	8004102 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa7a 	bl	80045f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004100:	e0c7      	b.n	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	f040 80c4 	bne.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fae8 	bl	80046e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004110:	e0bf      	b.n	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004120:	f000 80b7 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00f      	beq.n	8004150 <HAL_I2C_EV_IRQHandler+0x194>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d009      	beq.n	8004150 <HAL_I2C_EV_IRQHandler+0x194>
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d103      	bne.n	8004150 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fb5d 	bl	8004808 <I2C_MasterReceive_RXNE>
 800414e:	e011      	b.n	8004174 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 809a 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	0a5b      	lsrs	r3, r3, #9
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8093 	beq.w	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fc06 	bl	800497e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004172:	e08e      	b.n	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004174:	e08d      	b.n	8004292 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e007      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0x20e>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	0a5b      	lsrs	r3, r3, #9
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00c      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 ffc4 	bl	8005150 <I2C_Slave_ADDR>
 80041c8:	e066      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_I2C_EV_IRQHandler+0x22e>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	0a5b      	lsrs	r3, r3, #9
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fffe 	bl	80051e4 <I2C_Slave_STOPF>
 80041e8:	e056      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041ea:	7bbb      	ldrb	r3, [r7, #14]
 80041ec:	2b21      	cmp	r3, #33	; 0x21
 80041ee:	d002      	beq.n	80041f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b29      	cmp	r3, #41	; 0x29
 80041f4:	d125      	bne.n	8004242 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	09db      	lsrs	r3, r3, #7
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00f      	beq.n	8004222 <HAL_I2C_EV_IRQHandler+0x266>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	0a9b      	lsrs	r3, r3, #10
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_I2C_EV_IRQHandler+0x266>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d103      	bne.n	8004222 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 feda 	bl	8004fd4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004220:	e039      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d033      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2da>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	0a5b      	lsrs	r3, r3, #9
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d02d      	beq.n	8004296 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 ff07 	bl	800504e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004240:	e029      	b.n	8004296 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00f      	beq.n	800426e <HAL_I2C_EV_IRQHandler+0x2b2>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	0a9b      	lsrs	r3, r3, #10
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_I2C_EV_IRQHandler+0x2b2>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 ff12 	bl	8005090 <I2C_SlaveReceive_RXNE>
 800426c:	e014      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	089b      	lsrs	r3, r3, #2
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00e      	beq.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	0a5b      	lsrs	r3, r3, #9
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 ff40 	bl	800510c <I2C_SlaveReceive_BTF>
 800428c:	e004      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004296:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08a      	sub	sp, #40	; 0x28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	0a1b      	lsrs	r3, r3, #8
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00e      	beq.n	80042ec <HAL_I2C_ER_IRQHandler+0x4e>
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	0a5b      	lsrs	r3, r3, #9
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <HAL_I2C_ER_IRQHandler+0x78>
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f043 0302 	orr.w	r3, r3, #2
 800430a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004314:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	0a9b      	lsrs	r3, r3, #10
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d03f      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x104>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d039      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800432e:	7efb      	ldrb	r3, [r7, #27]
 8004330:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004348:	7ebb      	ldrb	r3, [r7, #26]
 800434a:	2b20      	cmp	r3, #32
 800434c:	d112      	bne.n	8004374 <HAL_I2C_ER_IRQHandler+0xd6>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <HAL_I2C_ER_IRQHandler+0xd6>
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	2b21      	cmp	r3, #33	; 0x21
 8004358:	d008      	beq.n	800436c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b29      	cmp	r3, #41	; 0x29
 800435e:	d005      	beq.n	800436c <HAL_I2C_ER_IRQHandler+0xce>
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b28      	cmp	r3, #40	; 0x28
 8004364:	d106      	bne.n	8004374 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b21      	cmp	r3, #33	; 0x21
 800436a:	d103      	bne.n	8004374 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f001 f869 	bl	8005444 <I2C_Slave_AF>
 8004372:	e016      	b.n	80043a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800437c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f043 0304 	orr.w	r3, r3, #4
 8004384:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004386:	7efb      	ldrb	r3, [r7, #27]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d002      	beq.n	8004392 <HAL_I2C_ER_IRQHandler+0xf4>
 800438c:	7efb      	ldrb	r3, [r7, #27]
 800438e:	2b40      	cmp	r3, #64	; 0x40
 8004390:	d107      	bne.n	80043a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	0adb      	lsrs	r3, r3, #11
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00e      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x12e>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	0a1b      	lsrs	r3, r3, #8
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d008      	beq.n	80043cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80043ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 f8a0 	bl	8005524 <I2C_ITError>
  }
}
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	4613      	mov	r3, r2
 800444a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d150      	bne.n	8004584 <I2C_MasterTransmit_TXE+0xc8>
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
 80044e4:	2b21      	cmp	r3, #33	; 0x21
 80044e6:	d14d      	bne.n	8004584 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d01d      	beq.n	800452a <I2C_MasterTransmit_TXE+0x6e>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d01a      	beq.n	800452a <I2C_MasterTransmit_TXE+0x6e>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044fa:	d016      	beq.n	800452a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800450a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2211      	movs	r2, #17
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff62 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004528:	e060      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004538:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004548:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b40      	cmp	r3, #64	; 0x40
 8004562:	d107      	bne.n	8004574 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff7d 	bl	800446c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004572:	e03b      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff35 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004582:	e033      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b21      	cmp	r3, #33	; 0x21
 8004588:	d005      	beq.n	8004596 <I2C_MasterTransmit_TXE+0xda>
 800458a:	7bbb      	ldrb	r3, [r7, #14]
 800458c:	2b40      	cmp	r3, #64	; 0x40
 800458e:	d12d      	bne.n	80045ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b22      	cmp	r3, #34	; 0x22
 8004594:	d12a      	bne.n	80045ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d108      	bne.n	80045b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045b0:	e01c      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d103      	bne.n	80045c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f88e 	bl	80046e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80045c4:	e012      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045ea:	e7ff      	b.n	80045ec <I2C_MasterTransmit_TXE+0x130>
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b21      	cmp	r3, #33	; 0x21
 800460c:	d164      	bne.n	80046d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d012      	beq.n	800463e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800463c:	e04c      	b.n	80046d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d01d      	beq.n	8004680 <I2C_MasterTransmit_BTF+0x8c>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b20      	cmp	r3, #32
 8004648:	d01a      	beq.n	8004680 <I2C_MasterTransmit_BTF+0x8c>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004650:	d016      	beq.n	8004680 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004660:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2211      	movs	r2, #17
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff feb7 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
}
 800467e:	e02b      	b.n	80046d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800468e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d107      	bne.n	80046ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fed2 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 80046c8:	e006      	b.n	80046d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7ff fe8a 	bl	80043ec <HAL_I2C_MasterTxCpltCallback>
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11d      	bne.n	8004734 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d10b      	bne.n	8004718 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004704:	b2da      	uxtb	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004716:	e073      	b.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471c:	b29b      	uxth	r3, r3
 800471e:	121b      	asrs	r3, r3, #8
 8004720:	b2da      	uxtb	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004732:	e065      	b.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10b      	bne.n	8004754 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004740:	b2da      	uxtb	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004752:	e055      	b.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	2b02      	cmp	r3, #2
 800475a:	d151      	bne.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b22      	cmp	r3, #34	; 0x22
 8004760:	d10d      	bne.n	800477e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004770:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800477c:	e040      	b.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d112      	bne.n	80047b4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047b2:	e025      	b.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d120      	bne.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b21      	cmp	r3, #33	; 0x21
 80047c2:	d11d      	bne.n	8004800 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fe36 	bl	800446c <HAL_I2C_MemTxCpltCallback>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b22      	cmp	r3, #34	; 0x22
 800481a:	f040 80ac 	bne.w	8004976 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d921      	bls.n	8004870 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b03      	cmp	r3, #3
 800485a:	f040 808c 	bne.w	8004976 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800486e:	e082      	b.n	8004976 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	2b02      	cmp	r3, #2
 8004876:	d075      	beq.n	8004964 <I2C_MasterReceive_RXNE+0x15c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d002      	beq.n	8004884 <I2C_MasterReceive_RXNE+0x7c>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d16f      	bne.n	8004964 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 fafd 	bl	8005e84 <I2C_WaitOnSTOPRequestThroughIT>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d142      	bne.n	8004916 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d10a      	bne.n	8004900 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fdc1 	bl	8004480 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048fe:	e03a      	b.n	8004976 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2212      	movs	r2, #18
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff fd76 	bl	8004400 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004914:	e02f      	b.n	8004976 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004924:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff fd99 	bl	8004494 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004962:	e008      	b.n	8004976 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004972:	605a      	str	r2, [r3, #4]
}
 8004974:	e7ff      	b.n	8004976 <I2C_MasterReceive_RXNE+0x16e>
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b04      	cmp	r3, #4
 8004994:	d11b      	bne.n	80049ce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049cc:	e0bd      	b.n	8004b4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d129      	bne.n	8004a2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d00a      	beq.n	8004a04 <I2C_MasterReceive_BTF+0x86>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d007      	beq.n	8004a04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a2a:	e08e      	b.n	8004b4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d176      	bne.n	8004b24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <I2C_MasterReceive_BTF+0xc4>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d108      	bne.n	8004a54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e019      	b.n	8004a88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d002      	beq.n	8004a60 <I2C_MasterReceive_BTF+0xe2>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d108      	bne.n	8004a72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e00a      	b.n	8004a88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d007      	beq.n	8004a88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ae2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d10a      	bne.n	8004b0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fcba 	bl	8004480 <HAL_I2C_MemRxCpltCallback>
}
 8004b0c:	e01d      	b.n	8004b4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2212      	movs	r2, #18
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff fc6f 	bl	8004400 <HAL_I2C_MasterRxCpltCallback>
}
 8004b22:	e012      	b.n	8004b4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d117      	bne.n	8004b96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b80:	e067      	b.n	8004c52 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
}
 8004b94:	e05d      	b.n	8004c52 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b9e:	d133      	bne.n	8004c08 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b21      	cmp	r3, #33	; 0x21
 8004baa:	d109      	bne.n	8004bc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bbc:	611a      	str	r2, [r3, #16]
 8004bbe:	e008      	b.n	8004bd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <I2C_Master_SB+0x92>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d032      	beq.n	8004c52 <I2C_Master_SB+0x100>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02d      	beq.n	8004c52 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c04:	605a      	str	r2, [r3, #4]
}
 8004c06:	e024      	b.n	8004c52 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10e      	bne.n	8004c2e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	11db      	asrs	r3, r3, #7
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0306 	and.w	r3, r3, #6
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f063 030f 	orn	r3, r3, #15
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]
}
 8004c2c:	e011      	b.n	8004c52 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10d      	bne.n	8004c52 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	11db      	asrs	r3, r3, #7
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f003 0306 	and.w	r3, r3, #6
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f063 030e 	orn	r3, r3, #14
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d004      	beq.n	8004c84 <I2C_Master_ADD10+0x26>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <I2C_Master_ADD10+0x48>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca4:	605a      	str	r2, [r3, #4]
  }
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b091      	sub	sp, #68	; 0x44
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b22      	cmp	r3, #34	; 0x22
 8004cda:	f040 8169 	bne.w	8004fb0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10f      	bne.n	8004d06 <I2C_Master_ADDR+0x54>
 8004ce6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d10b      	bne.n	8004d06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cee:	2300      	movs	r3, #0
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	633b      	str	r3, [r7, #48]	; 0x30
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	e160      	b.n	8004fc8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11d      	bne.n	8004d4a <I2C_Master_ADDR+0x98>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d16:	d118      	bne.n	8004d4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	651a      	str	r2, [r3, #80]	; 0x50
 8004d48:	e13e      	b.n	8004fc8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d113      	bne.n	8004d7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e115      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	f040 808a 	bne.w	8004e9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d8e:	d137      	bne.n	8004e00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dae:	d113      	bne.n	8004dd8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	e0e7      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	623b      	str	r3, [r7, #32]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	623b      	str	r3, [r7, #32]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	623b      	str	r3, [r7, #32]
 8004dec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e0d3      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d02e      	beq.n	8004e64 <I2C_Master_ADDR+0x1b2>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	2b20      	cmp	r3, #32
 8004e0a:	d02b      	beq.n	8004e64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	2b12      	cmp	r3, #18
 8004e10:	d102      	bne.n	8004e18 <I2C_Master_ADDR+0x166>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d125      	bne.n	8004e64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d00e      	beq.n	8004e3c <I2C_Master_ADDR+0x18a>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d00b      	beq.n	8004e3c <I2C_Master_ADDR+0x18a>
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d008      	beq.n	8004e3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e007      	b.n	8004e4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	e0a1      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e085      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d14d      	bne.n	8004f42 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d016      	beq.n	8004eda <I2C_Master_ADDR+0x228>
 8004eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d013      	beq.n	8004eda <I2C_Master_ADDR+0x228>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d010      	beq.n	8004eda <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e007      	b.n	8004eea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ee8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d117      	bne.n	8004f2a <I2C_Master_ADDR+0x278>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f00:	d00b      	beq.n	8004f1a <I2C_Master_ADDR+0x268>
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d008      	beq.n	8004f1a <I2C_Master_ADDR+0x268>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d005      	beq.n	8004f1a <I2C_Master_ADDR+0x268>
 8004f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d002      	beq.n	8004f1a <I2C_Master_ADDR+0x268>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d107      	bne.n	8004f2a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e032      	b.n	8004fa8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f50:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f60:	d117      	bne.n	8004f92 <I2C_Master_ADDR+0x2e0>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f68:	d00b      	beq.n	8004f82 <I2C_Master_ADDR+0x2d0>
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d008      	beq.n	8004f82 <I2C_Master_ADDR+0x2d0>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d005      	beq.n	8004f82 <I2C_Master_ADDR+0x2d0>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d002      	beq.n	8004f82 <I2C_Master_ADDR+0x2d0>
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d107      	bne.n	8004f92 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f90:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f92:	2300      	movs	r3, #0
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fae:	e00b      	b.n	8004fc8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
}
 8004fc6:	e7ff      	b.n	8004fc8 <I2C_Master_ADDR+0x316>
 8004fc8:	bf00      	nop
 8004fca:	3744      	adds	r7, #68	; 0x44
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02b      	beq.n	8005046 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	781a      	ldrb	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d114      	bne.n	8005046 <I2C_SlaveTransmit_TXE+0x72>
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b29      	cmp	r3, #41	; 0x29
 8005020:	d111      	bne.n	8005046 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2221      	movs	r2, #33	; 0x21
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2228      	movs	r2, #40	; 0x28
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff f9e7 	bl	8004414 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d011      	beq.n	8005084 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	781a      	ldrb	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d02c      	beq.n	8005104 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d114      	bne.n	8005104 <I2C_SlaveReceive_RXNE+0x74>
 80050da:	7bfb      	ldrb	r3, [r7, #15]
 80050dc:	2b2a      	cmp	r3, #42	; 0x2a
 80050de:	d111      	bne.n	8005104 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2222      	movs	r2, #34	; 0x22
 80050f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2228      	movs	r2, #40	; 0x28
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff f992 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d012      	beq.n	8005144 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800515a:	2300      	movs	r3, #0
 800515c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800516a:	2b28      	cmp	r3, #40	; 0x28
 800516c:	d127      	bne.n	80051be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	089b      	lsrs	r3, r3, #2
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800518a:	2301      	movs	r3, #1
 800518c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	09db      	lsrs	r3, r3, #7
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	81bb      	strh	r3, [r7, #12]
 80051a0:	e002      	b.n	80051a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051b0:	89ba      	ldrh	r2, [r7, #12]
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	4619      	mov	r1, r3
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff f940 	bl	800443c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051bc:	e00e      	b.n	80051dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005202:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005230:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005240:	d172      	bne.n	8005328 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b22      	cmp	r3, #34	; 0x22
 8005246:	d002      	beq.n	800524e <I2C_Slave_STOPF+0x6a>
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b2a      	cmp	r3, #42	; 0x2a
 800524c:	d135      	bne.n	80052ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f043 0204 	orr.w	r2, r3, #4
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005280:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	4618      	mov	r0, r3
 8005288:	f7fd ffa8 	bl	80031dc <HAL_DMA_GetState>
 800528c:	4603      	mov	r3, r0
 800528e:	2b01      	cmp	r3, #1
 8005290:	d049      	beq.n	8005326 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	4a69      	ldr	r2, [pc, #420]	; (800543c <I2C_Slave_STOPF+0x258>)
 8005298:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fdf0 	bl	8002e84 <HAL_DMA_Abort_IT>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d03d      	beq.n	8005326 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052b4:	4610      	mov	r0, r2
 80052b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052b8:	e035      	b.n	8005326 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f043 0204 	orr.w	r2, r3, #4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd ff72 	bl	80031dc <HAL_DMA_GetState>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d014      	beq.n	8005328 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	4a4e      	ldr	r2, [pc, #312]	; (800543c <I2C_Slave_STOPF+0x258>)
 8005304:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd fdba 	bl	8002e84 <HAL_DMA_Abort_IT>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005320:	4610      	mov	r0, r2
 8005322:	4798      	blx	r3
 8005324:	e000      	b.n	8005328 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005326:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d03e      	beq.n	80053b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b04      	cmp	r3, #4
 800533e:	d112      	bne.n	8005366 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005370:	2b40      	cmp	r3, #64	; 0x40
 8005372:	d112      	bne.n	800539a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	f043 0204 	orr.w	r2, r3, #4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8b3 	bl	8005524 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053be:	e039      	b.n	8005434 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b2a      	cmp	r3, #42	; 0x2a
 80053c4:	d109      	bne.n	80053da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2228      	movs	r2, #40	; 0x28
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7ff f827 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b28      	cmp	r3, #40	; 0x28
 80053e4:	d111      	bne.n	800540a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	; (8005440 <I2C_Slave_STOPF+0x25c>)
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff f828 	bl	8004458 <HAL_I2C_ListenCpltCallback>
}
 8005408:	e014      	b.n	8005434 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	2b22      	cmp	r3, #34	; 0x22
 8005410:	d002      	beq.n	8005418 <I2C_Slave_STOPF+0x234>
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b22      	cmp	r3, #34	; 0x22
 8005416:	d10d      	bne.n	8005434 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fe fffa 	bl	8004428 <HAL_I2C_SlaveRxCpltCallback>
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	08005a85 	.word	0x08005a85
 8005440:	ffff0000 	.word	0xffff0000

08005444 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005452:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005458:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d002      	beq.n	8005466 <I2C_Slave_AF+0x22>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b20      	cmp	r3, #32
 8005464:	d129      	bne.n	80054ba <I2C_Slave_AF+0x76>
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	2b28      	cmp	r3, #40	; 0x28
 800546a:	d126      	bne.n	80054ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2c      	ldr	r2, [pc, #176]	; (8005520 <I2C_Slave_AF+0xdc>)
 8005470:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005480:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800548a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fe ffd0 	bl	8004458 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80054b8:	e02e      	b.n	8005518 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b21      	cmp	r3, #33	; 0x21
 80054be:	d126      	bne.n	800550e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a17      	ldr	r2, [pc, #92]	; (8005520 <I2C_Slave_AF+0xdc>)
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2221      	movs	r2, #33	; 0x21
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005504:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fe ff84 	bl	8004414 <HAL_I2C_SlaveTxCpltCallback>
}
 800550c:	e004      	b.n	8005518 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005516:	615a      	str	r2, [r3, #20]
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	ffff0000 	.word	0xffff0000

08005524 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	2b10      	cmp	r3, #16
 8005540:	d002      	beq.n	8005548 <I2C_ITError+0x24>
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d10a      	bne.n	800555e <I2C_ITError+0x3a>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b22      	cmp	r3, #34	; 0x22
 800554c:	d107      	bne.n	800555e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005564:	2b28      	cmp	r3, #40	; 0x28
 8005566:	d107      	bne.n	8005578 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2228      	movs	r2, #40	; 0x28
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005576:	e015      	b.n	80055a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005586:	d00a      	beq.n	800559e <I2C_ITError+0x7a>
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	2b60      	cmp	r3, #96	; 0x60
 800558c:	d007      	beq.n	800559e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b2:	d162      	bne.n	800567a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d020      	beq.n	8005614 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	4a6a      	ldr	r2, [pc, #424]	; (8005780 <I2C_ITError+0x25c>)
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fd fc50 	bl	8002e84 <HAL_DMA_Abort_IT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 8089 	beq.w	80056fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800560e:	4610      	mov	r0, r2
 8005610:	4798      	blx	r3
 8005612:	e074      	b.n	80056fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	4a59      	ldr	r2, [pc, #356]	; (8005780 <I2C_ITError+0x25c>)
 800561a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fc2f 	bl	8002e84 <HAL_DMA_Abort_IT>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d068      	beq.n	80056fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b40      	cmp	r3, #64	; 0x40
 8005638:	d10b      	bne.n	8005652 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	e041      	b.n	80056fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b60      	cmp	r3, #96	; 0x60
 8005684:	d125      	bne.n	80056d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d10b      	bne.n	80056ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7fe feec 	bl	80044a8 <HAL_I2C_AbortCpltCallback>
 80056d0:	e015      	b.n	80056fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056dc:	2b40      	cmp	r3, #64	; 0x40
 80056de:	d10b      	bne.n	80056f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fe fecb 	bl	8004494 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10e      	bne.n	800572c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800571e:	2b00      	cmp	r3, #0
 8005720:	d104      	bne.n	800572c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d113      	bne.n	8005778 <I2C_ITError+0x254>
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b28      	cmp	r3, #40	; 0x28
 8005754:	d110      	bne.n	8005778 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <I2C_ITError+0x260>)
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fe fe70 	bl	8004458 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005778:	bf00      	nop
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	08005a85 	.word	0x08005a85
 8005784:	ffff0000 	.word	0xffff0000

08005788 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	4608      	mov	r0, r1
 8005792:	4611      	mov	r1, r2
 8005794:	461a      	mov	r2, r3
 8005796:	4603      	mov	r3, r0
 8005798:	817b      	strh	r3, [r7, #10]
 800579a:	460b      	mov	r3, r1
 800579c:	813b      	strh	r3, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fa08 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	d103      	bne.n	80057e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e05f      	b.n	80058a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	492d      	ldr	r1, [pc, #180]	; (80058b0 <I2C_RequestMemoryWrite+0x128>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fa40 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e04c      	b.n	80058a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 faaa 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b04      	cmp	r3, #4
 8005838:	d107      	bne.n	800584a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e02b      	b.n	80058a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d105      	bne.n	8005860 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]
 800585e:	e021      	b.n	80058a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005860:	893b      	ldrh	r3, [r7, #8]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	b29b      	uxth	r3, r3
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	6a39      	ldr	r1, [r7, #32]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fa84 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b04      	cmp	r3, #4
 8005884:	d107      	bne.n	8005896 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e005      	b.n	80058a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800589a:	893b      	ldrh	r3, [r7, #8]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	00010002 	.word	0x00010002

080058b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	461a      	mov	r2, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	817b      	strh	r3, [r7, #10]
 80058c6:	460b      	mov	r3, r1
 80058c8:	813b      	strh	r3, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f96a 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00d      	beq.n	8005922 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005914:	d103      	bne.n	800591e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e0aa      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005930:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	4952      	ldr	r1, [pc, #328]	; (8005a80 <I2C_RequestMemoryRead+0x1cc>)
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 f9a2 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e097      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005960:	6a39      	ldr	r1, [r7, #32]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fa0c 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00d      	beq.n	800598a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005972:	2b04      	cmp	r3, #4
 8005974:	d107      	bne.n	8005986 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005984:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e076      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d105      	bne.n	800599c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005990:	893b      	ldrh	r3, [r7, #8]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	611a      	str	r2, [r3, #16]
 800599a:	e021      	b.n	80059e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	6a39      	ldr	r1, [r7, #32]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f9e6 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00d      	beq.n	80059d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d107      	bne.n	80059d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e050      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059d6:	893b      	ldrh	r3, [r7, #8]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e2:	6a39      	ldr	r1, [r7, #32]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f9cb 	bl	8005d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d107      	bne.n	8005a08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e035      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f8d3 	bl	8005bd4 <I2C_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00d      	beq.n	8005a50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a42:	d103      	bne.n	8005a4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e013      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a50:	897b      	ldrh	r3, [r7, #10]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	4906      	ldr	r1, [pc, #24]	; (8005a80 <I2C_RequestMemoryRead+0x1cc>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f90b 	bl	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e000      	b.n	8005a78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	00010002 	.word	0x00010002

08005a84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005a9e:	4b4b      	ldr	r3, [pc, #300]	; (8005bcc <I2C_DMAAbort+0x148>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	08db      	lsrs	r3, r3, #3
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	; (8005bd0 <I2C_DMAAbort+0x14c>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	0a1a      	lsrs	r2, r3, #8
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00da      	lsls	r2, r3, #3
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	f043 0220 	orr.w	r2, r3, #32
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005aca:	e00a      	b.n	8005ae2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae0:	d0ea      	beq.n	8005ab8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aee:	2200      	movs	r2, #0
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	2200      	movs	r2, #0
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	2200      	movs	r2, #0
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0201 	bic.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b60      	cmp	r3, #96	; 0x60
 8005b52:	d10e      	bne.n	8005b72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2200      	movs	r2, #0
 8005b68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f7fe fc9c 	bl	80044a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b70:	e027      	b.n	8005bc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b72:	7cfb      	ldrb	r3, [r7, #19]
 8005b74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b78:	2b28      	cmp	r3, #40	; 0x28
 8005b7a:	d117      	bne.n	8005bac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2228      	movs	r2, #40	; 0x28
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005baa:	e007      	b.n	8005bbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f7fe fc69 	bl	8004494 <HAL_I2C_ErrorCallback>
}
 8005bc2:	bf00      	nop
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	14f8b589 	.word	0x14f8b589

08005bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be4:	e025      	b.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d021      	beq.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bee:	f7fc f9db 	bl	8001fa8 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d302      	bcc.n	8005c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d116      	bne.n	8005c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f043 0220 	orr.w	r2, r3, #32
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e023      	b.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10d      	bne.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	43da      	mvns	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	4013      	ands	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2301      	moveq	r3, #1
 8005c50:	2300      	movne	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	e00c      	b.n	8005c72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d0b6      	beq.n	8005be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	607a      	str	r2, [r7, #4]
 8005c8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c90:	e051      	b.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca0:	d123      	bne.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e046      	b.n	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf0:	d021      	beq.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fc f959 	bl	8001fa8 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d116      	bne.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2220      	movs	r2, #32
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e020      	b.n	8005d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d10c      	bne.n	8005d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	43da      	mvns	r2, r3
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	e00b      	b.n	8005d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	43da      	mvns	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d18d      	bne.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d8c:	e02d      	b.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f900 	bl	8005f94 <I2C_IsAcknowledgeFailed>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e02d      	b.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d021      	beq.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fc f8ff 	bl	8001fa8 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d116      	bne.n	8005dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e007      	b.n	8005dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b80      	cmp	r3, #128	; 0x80
 8005df6:	d1ca      	bne.n	8005d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e0e:	e02d      	b.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f8bf 	bl	8005f94 <I2C_IsAcknowledgeFailed>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e02d      	b.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d021      	beq.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e28:	f7fc f8be 	bl	8001fa8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d302      	bcc.n	8005e3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d116      	bne.n	8005e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0220 	orr.w	r2, r3, #32
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e007      	b.n	8005e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d1ca      	bne.n	8005e10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e90:	4b13      	ldr	r3, [pc, #76]	; (8005ee0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e98:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9c:	0a1a      	lsrs	r2, r3, #8
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d107      	bne.n	8005ec2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e008      	b.n	8005ed4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed0:	d0e9      	beq.n	8005ea6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000000 	.word	0x20000000
 8005ee4:	14f8b589 	.word	0x14f8b589

08005ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ef4:	e042      	b.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d119      	bne.n	8005f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0210 	mvn.w	r2, #16
 8005f0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e029      	b.n	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f38:	f7fc f836 	bl	8001fa8 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d302      	bcc.n	8005f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d116      	bne.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e007      	b.n	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	d1b5      	bne.n	8005ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d11b      	bne.n	8005fe4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	f043 0204 	orr.w	r2, r3, #4
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006002:	d103      	bne.n	800600c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800600a:	e007      	b.n	800601c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006014:	d102      	bne.n	800601c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2208      	movs	r2, #8
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e267      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d075      	beq.n	8006132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006046:	4b88      	ldr	r3, [pc, #544]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f003 030c 	and.w	r3, r3, #12
 800604e:	2b04      	cmp	r3, #4
 8006050:	d00c      	beq.n	800606c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006052:	4b85      	ldr	r3, [pc, #532]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800605a:	2b08      	cmp	r3, #8
 800605c:	d112      	bne.n	8006084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800605e:	4b82      	ldr	r3, [pc, #520]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800606a:	d10b      	bne.n	8006084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800606c:	4b7e      	ldr	r3, [pc, #504]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d05b      	beq.n	8006130 <HAL_RCC_OscConfig+0x108>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d157      	bne.n	8006130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e242      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d106      	bne.n	800609c <HAL_RCC_OscConfig+0x74>
 800608e:	4b76      	ldr	r3, [pc, #472]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a75      	ldr	r2, [pc, #468]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	e01d      	b.n	80060d8 <HAL_RCC_OscConfig+0xb0>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060a4:	d10c      	bne.n	80060c0 <HAL_RCC_OscConfig+0x98>
 80060a6:	4b70      	ldr	r3, [pc, #448]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a6f      	ldr	r2, [pc, #444]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	4b6d      	ldr	r3, [pc, #436]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a6c      	ldr	r2, [pc, #432]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	e00b      	b.n	80060d8 <HAL_RCC_OscConfig+0xb0>
 80060c0:	4b69      	ldr	r3, [pc, #420]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a68      	ldr	r2, [pc, #416]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b66      	ldr	r3, [pc, #408]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a65      	ldr	r2, [pc, #404]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d013      	beq.n	8006108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7fb ff62 	bl	8001fa8 <HAL_GetTick>
 80060e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e8:	f7fb ff5e 	bl	8001fa8 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b64      	cmp	r3, #100	; 0x64
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e207      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fa:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0xc0>
 8006106:	e014      	b.n	8006132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fb ff4e 	bl	8001fa8 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006110:	f7fb ff4a 	bl	8001fa8 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	; 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e1f3      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006122:	4b51      	ldr	r3, [pc, #324]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f0      	bne.n	8006110 <HAL_RCC_OscConfig+0xe8>
 800612e:	e000      	b.n	8006132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d063      	beq.n	8006206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 030c 	and.w	r3, r3, #12
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800614a:	4b47      	ldr	r3, [pc, #284]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006152:	2b08      	cmp	r3, #8
 8006154:	d11c      	bne.n	8006190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006156:	4b44      	ldr	r3, [pc, #272]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d116      	bne.n	8006190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006162:	4b41      	ldr	r3, [pc, #260]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_RCC_OscConfig+0x152>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d001      	beq.n	800617a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e1c7      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800617a:	4b3b      	ldr	r3, [pc, #236]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4937      	ldr	r1, [pc, #220]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 800618a:	4313      	orrs	r3, r2
 800618c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800618e:	e03a      	b.n	8006206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d020      	beq.n	80061da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006198:	4b34      	ldr	r3, [pc, #208]	; (800626c <HAL_RCC_OscConfig+0x244>)
 800619a:	2201      	movs	r2, #1
 800619c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619e:	f7fb ff03 	bl	8001fa8 <HAL_GetTick>
 80061a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061a4:	e008      	b.n	80061b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a6:	f7fb feff 	bl	8001fa8 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e1a8      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b8:	4b2b      	ldr	r3, [pc, #172]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f0      	beq.n	80061a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c4:	4b28      	ldr	r3, [pc, #160]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	4925      	ldr	r1, [pc, #148]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	600b      	str	r3, [r1, #0]
 80061d8:	e015      	b.n	8006206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061da:	4b24      	ldr	r3, [pc, #144]	; (800626c <HAL_RCC_OscConfig+0x244>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e0:	f7fb fee2 	bl	8001fa8 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061e6:	e008      	b.n	80061fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061e8:	f7fb fede 	bl	8001fa8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d901      	bls.n	80061fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e187      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f0      	bne.n	80061e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d036      	beq.n	8006280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <HAL_RCC_OscConfig+0x248>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fb fec2 	bl	8001fa8 <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006228:	f7fb febe 	bl	8001fa8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e167      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623a:	4b0b      	ldr	r3, [pc, #44]	; (8006268 <HAL_RCC_OscConfig+0x240>)
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x200>
 8006246:	e01b      	b.n	8006280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <HAL_RCC_OscConfig+0x248>)
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800624e:	f7fb feab 	bl	8001fa8 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006254:	e00e      	b.n	8006274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006256:	f7fb fea7 	bl	8001fa8 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d907      	bls.n	8006274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e150      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
 8006268:	40023800 	.word	0x40023800
 800626c:	42470000 	.word	0x42470000
 8006270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006274:	4b88      	ldr	r3, [pc, #544]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1ea      	bne.n	8006256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8097 	beq.w	80063bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800628e:	2300      	movs	r3, #0
 8006290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006292:	4b81      	ldr	r3, [pc, #516]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10f      	bne.n	80062be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	60bb      	str	r3, [r7, #8]
 80062a2:	4b7d      	ldr	r3, [pc, #500]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	4a7c      	ldr	r2, [pc, #496]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80062a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6413      	str	r3, [r2, #64]	; 0x40
 80062ae:	4b7a      	ldr	r3, [pc, #488]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ba:	2301      	movs	r3, #1
 80062bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062be:	4b77      	ldr	r3, [pc, #476]	; (800649c <HAL_RCC_OscConfig+0x474>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d118      	bne.n	80062fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ca:	4b74      	ldr	r3, [pc, #464]	; (800649c <HAL_RCC_OscConfig+0x474>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a73      	ldr	r2, [pc, #460]	; (800649c <HAL_RCC_OscConfig+0x474>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062d6:	f7fb fe67 	bl	8001fa8 <HAL_GetTick>
 80062da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062de:	f7fb fe63 	bl	8001fa8 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e10c      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f0:	4b6a      	ldr	r3, [pc, #424]	; (800649c <HAL_RCC_OscConfig+0x474>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0f0      	beq.n	80062de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d106      	bne.n	8006312 <HAL_RCC_OscConfig+0x2ea>
 8006304:	4b64      	ldr	r3, [pc, #400]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	4a63      	ldr	r2, [pc, #396]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	6713      	str	r3, [r2, #112]	; 0x70
 8006310:	e01c      	b.n	800634c <HAL_RCC_OscConfig+0x324>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b05      	cmp	r3, #5
 8006318:	d10c      	bne.n	8006334 <HAL_RCC_OscConfig+0x30c>
 800631a:	4b5f      	ldr	r3, [pc, #380]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a5e      	ldr	r2, [pc, #376]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006320:	f043 0304 	orr.w	r3, r3, #4
 8006324:	6713      	str	r3, [r2, #112]	; 0x70
 8006326:	4b5c      	ldr	r3, [pc, #368]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	6713      	str	r3, [r2, #112]	; 0x70
 8006332:	e00b      	b.n	800634c <HAL_RCC_OscConfig+0x324>
 8006334:	4b58      	ldr	r3, [pc, #352]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006338:	4a57      	ldr	r2, [pc, #348]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 800633a:	f023 0301 	bic.w	r3, r3, #1
 800633e:	6713      	str	r3, [r2, #112]	; 0x70
 8006340:	4b55      	ldr	r3, [pc, #340]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006344:	4a54      	ldr	r2, [pc, #336]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006346:	f023 0304 	bic.w	r3, r3, #4
 800634a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006354:	f7fb fe28 	bl	8001fa8 <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800635a:	e00a      	b.n	8006372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635c:	f7fb fe24 	bl	8001fa8 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	f241 3288 	movw	r2, #5000	; 0x1388
 800636a:	4293      	cmp	r3, r2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e0cb      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	4b49      	ldr	r3, [pc, #292]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0ee      	beq.n	800635c <HAL_RCC_OscConfig+0x334>
 800637e:	e014      	b.n	80063aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006380:	f7fb fe12 	bl	8001fa8 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006386:	e00a      	b.n	800639e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006388:	f7fb fe0e 	bl	8001fa8 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f241 3288 	movw	r2, #5000	; 0x1388
 8006396:	4293      	cmp	r3, r2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e0b5      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639e:	4b3e      	ldr	r3, [pc, #248]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80063a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1ee      	bne.n	8006388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d105      	bne.n	80063bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b0:	4b39      	ldr	r3, [pc, #228]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80063b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b4:	4a38      	ldr	r2, [pc, #224]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80063b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80a1 	beq.w	8006508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063c6:	4b34      	ldr	r3, [pc, #208]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 030c 	and.w	r3, r3, #12
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d05c      	beq.n	800648c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d141      	bne.n	800645e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063da:	4b31      	ldr	r3, [pc, #196]	; (80064a0 <HAL_RCC_OscConfig+0x478>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e0:	f7fb fde2 	bl	8001fa8 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063e8:	f7fb fdde 	bl	8001fa8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e087      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fa:	4b27      	ldr	r3, [pc, #156]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69da      	ldr	r2, [r3, #28]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	3b01      	subs	r3, #1
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	061b      	lsls	r3, r3, #24
 800642a:	491b      	ldr	r1, [pc, #108]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 800642c:	4313      	orrs	r3, r2
 800642e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <HAL_RCC_OscConfig+0x478>)
 8006432:	2201      	movs	r2, #1
 8006434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006436:	f7fb fdb7 	bl	8001fa8 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643e:	f7fb fdb3 	bl	8001fa8 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e05c      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x416>
 800645c:	e054      	b.n	8006508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <HAL_RCC_OscConfig+0x478>)
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006464:	f7fb fda0 	bl	8001fa8 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646c:	f7fb fd9c 	bl	8001fa8 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e045      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <HAL_RCC_OscConfig+0x470>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x444>
 800648a:	e03d      	b.n	8006508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e038      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
 8006498:	40023800 	.word	0x40023800
 800649c:	40007000 	.word	0x40007000
 80064a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064a4:	4b1b      	ldr	r3, [pc, #108]	; (8006514 <HAL_RCC_OscConfig+0x4ec>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d028      	beq.n	8006504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d121      	bne.n	8006504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d11a      	bne.n	8006504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064dc:	4293      	cmp	r3, r2
 80064de:	d111      	bne.n	8006504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	3b01      	subs	r3, #1
 80064ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d107      	bne.n	8006504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006500:	429a      	cmp	r2, r3
 8006502:	d001      	beq.n	8006508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800

08006518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0cc      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800652c:	4b68      	ldr	r3, [pc, #416]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d90c      	bls.n	8006554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653a:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006542:	4b63      	ldr	r3, [pc, #396]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0307 	and.w	r3, r3, #7
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d001      	beq.n	8006554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0b8      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800656c:	4b59      	ldr	r3, [pc, #356]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4a58      	ldr	r2, [pc, #352]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006584:	4b53      	ldr	r3, [pc, #332]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a52      	ldr	r2, [pc, #328]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800658e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006590:	4b50      	ldr	r3, [pc, #320]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	494d      	ldr	r1, [pc, #308]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d044      	beq.n	8006638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d107      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b6:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d119      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e07f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d003      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d6:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e06f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e6:	4b3b      	ldr	r3, [pc, #236]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e067      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f023 0203 	bic.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4934      	ldr	r1, [pc, #208]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	4313      	orrs	r3, r2
 8006606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006608:	f7fb fcce 	bl	8001fa8 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	e00a      	b.n	8006626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006610:	f7fb fcca 	bl	8001fa8 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	; 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e04f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 020c 	and.w	r2, r3, #12
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	429a      	cmp	r2, r3
 8006636:	d1eb      	bne.n	8006610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006638:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0307 	and.w	r3, r3, #7
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d20c      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e032      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4916      	ldr	r1, [pc, #88]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	4313      	orrs	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	490e      	ldr	r1, [pc, #56]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	4313      	orrs	r3, r2
 800669c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800669e:	f000 f821 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	091b      	lsrs	r3, r3, #4
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	490a      	ldr	r1, [pc, #40]	; (80066d8 <HAL_RCC_ClockConfig+0x1c0>)
 80066b0:	5ccb      	ldrb	r3, [r1, r3]
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <HAL_RCC_ClockConfig+0x1c4>)
 80066b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <HAL_RCC_ClockConfig+0x1c8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb fc2e 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40023c00 	.word	0x40023c00
 80066d4:	40023800 	.word	0x40023800
 80066d8:	08007410 	.word	0x08007410
 80066dc:	20000000 	.word	0x20000000
 80066e0:	20000004 	.word	0x20000004

080066e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e8:	b090      	sub	sp, #64	; 0x40
 80066ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	2300      	movs	r3, #0
 80066f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066fc:	4b59      	ldr	r3, [pc, #356]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b08      	cmp	r3, #8
 8006706:	d00d      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0x40>
 8006708:	2b08      	cmp	r3, #8
 800670a:	f200 80a1 	bhi.w	8006850 <HAL_RCC_GetSysClockFreq+0x16c>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x34>
 8006712:	2b04      	cmp	r3, #4
 8006714:	d003      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0x3a>
 8006716:	e09b      	b.n	8006850 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006718:	4b53      	ldr	r3, [pc, #332]	; (8006868 <HAL_RCC_GetSysClockFreq+0x184>)
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800671c:	e09b      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800671e:	4b53      	ldr	r3, [pc, #332]	; (800686c <HAL_RCC_GetSysClockFreq+0x188>)
 8006720:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006722:	e098      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006724:	4b4f      	ldr	r3, [pc, #316]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800672e:	4b4d      	ldr	r3, [pc, #308]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d028      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800673a:	4b4a      	ldr	r3, [pc, #296]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	099b      	lsrs	r3, r3, #6
 8006740:	2200      	movs	r2, #0
 8006742:	623b      	str	r3, [r7, #32]
 8006744:	627a      	str	r2, [r7, #36]	; 0x24
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800674c:	2100      	movs	r1, #0
 800674e:	4b47      	ldr	r3, [pc, #284]	; (800686c <HAL_RCC_GetSysClockFreq+0x188>)
 8006750:	fb03 f201 	mul.w	r2, r3, r1
 8006754:	2300      	movs	r3, #0
 8006756:	fb00 f303 	mul.w	r3, r0, r3
 800675a:	4413      	add	r3, r2
 800675c:	4a43      	ldr	r2, [pc, #268]	; (800686c <HAL_RCC_GetSysClockFreq+0x188>)
 800675e:	fba0 1202 	umull	r1, r2, r0, r2
 8006762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006764:	460a      	mov	r2, r1
 8006766:	62ba      	str	r2, [r7, #40]	; 0x28
 8006768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800676a:	4413      	add	r3, r2
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006770:	2200      	movs	r2, #0
 8006772:	61bb      	str	r3, [r7, #24]
 8006774:	61fa      	str	r2, [r7, #28]
 8006776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800677a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800677e:	f7fa f8f9 	bl	8000974 <__aeabi_uldivmod>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4613      	mov	r3, r2
 8006788:	63fb      	str	r3, [r7, #60]	; 0x3c
 800678a:	e053      	b.n	8006834 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678c:	4b35      	ldr	r3, [pc, #212]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	099b      	lsrs	r3, r3, #6
 8006792:	2200      	movs	r2, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	617a      	str	r2, [r7, #20]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800679e:	f04f 0b00 	mov.w	fp, #0
 80067a2:	4652      	mov	r2, sl
 80067a4:	465b      	mov	r3, fp
 80067a6:	f04f 0000 	mov.w	r0, #0
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	0159      	lsls	r1, r3, #5
 80067b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067b4:	0150      	lsls	r0, r2, #5
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	ebb2 080a 	subs.w	r8, r2, sl
 80067be:	eb63 090b 	sbc.w	r9, r3, fp
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80067ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80067d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80067d6:	ebb2 0408 	subs.w	r4, r2, r8
 80067da:	eb63 0509 	sbc.w	r5, r3, r9
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	00eb      	lsls	r3, r5, #3
 80067e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ec:	00e2      	lsls	r2, r4, #3
 80067ee:	4614      	mov	r4, r2
 80067f0:	461d      	mov	r5, r3
 80067f2:	eb14 030a 	adds.w	r3, r4, sl
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	eb45 030b 	adc.w	r3, r5, fp
 80067fc:	607b      	str	r3, [r7, #4]
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800680a:	4629      	mov	r1, r5
 800680c:	028b      	lsls	r3, r1, #10
 800680e:	4621      	mov	r1, r4
 8006810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006814:	4621      	mov	r1, r4
 8006816:	028a      	lsls	r2, r1, #10
 8006818:	4610      	mov	r0, r2
 800681a:	4619      	mov	r1, r3
 800681c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681e:	2200      	movs	r2, #0
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	60fa      	str	r2, [r7, #12]
 8006824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006828:	f7fa f8a4 	bl	8000974 <__aeabi_uldivmod>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4613      	mov	r3, r2
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006834:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <HAL_RCC_GetSysClockFreq+0x180>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	f003 0303 	and.w	r3, r3, #3
 800683e:	3301      	adds	r3, #1
 8006840:	005b      	lsls	r3, r3, #1
 8006842:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	fbb2 f3f3 	udiv	r3, r2, r3
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800684e:	e002      	b.n	8006856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006850:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetSysClockFreq+0x184>)
 8006852:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006858:	4618      	mov	r0, r3
 800685a:	3740      	adds	r7, #64	; 0x40
 800685c:	46bd      	mov	sp, r7
 800685e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006862:	bf00      	nop
 8006864:	40023800 	.word	0x40023800
 8006868:	00f42400 	.word	0x00f42400
 800686c:	017d7840 	.word	0x017d7840

08006870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006874:	4b03      	ldr	r3, [pc, #12]	; (8006884 <HAL_RCC_GetHCLKFreq+0x14>)
 8006876:	681b      	ldr	r3, [r3, #0]
}
 8006878:	4618      	mov	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20000000 	.word	0x20000000

08006888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800688c:	f7ff fff0 	bl	8006870 <HAL_RCC_GetHCLKFreq>
 8006890:	4602      	mov	r2, r0
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	0a9b      	lsrs	r3, r3, #10
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	4903      	ldr	r1, [pc, #12]	; (80068ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800689e:	5ccb      	ldrb	r3, [r1, r3]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40023800 	.word	0x40023800
 80068ac:	08007420 	.word	0x08007420

080068b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e07b      	b.n	80069ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d108      	bne.n	80068dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d2:	d009      	beq.n	80068e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	61da      	str	r2, [r3, #28]
 80068da:	e005      	b.n	80068e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7fb f8b2 	bl	8001a6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	431a      	orrs	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696c:	ea42 0103 	orr.w	r1, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	0c1b      	lsrs	r3, r3, #16
 8006986:	f003 0104 	and.w	r1, r3, #4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0210 	and.w	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	099b      	lsrs	r3, r3, #6
 80069f6:	f003 0301 	and.w	r3, r3, #1
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	4798      	blx	r3
    return;
 8006a06:	e0d7      	b.n	8006bb8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <HAL_SPI_IRQHandler+0x66>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	09db      	lsrs	r3, r3, #7
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
    return;
 8006a28:	e0c6      	b.n	8006bb8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10c      	bne.n	8006a50 <HAL_SPI_IRQHandler+0x8c>
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	099b      	lsrs	r3, r3, #6
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	0a1b      	lsrs	r3, r3, #8
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80b4 	beq.w	8006bb8 <HAL_SPI_IRQHandler+0x1f4>
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80ad 	beq.w	8006bb8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	099b      	lsrs	r3, r3, #6
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d023      	beq.n	8006ab2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d011      	beq.n	8006a9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f043 0204 	orr.w	r2, r3, #4
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a82:	2300      	movs	r3, #0
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	617b      	str	r3, [r7, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	e00b      	b.n	8006ab2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	613b      	str	r3, [r7, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	693b      	ldr	r3, [r7, #16]
        return;
 8006ab0:	e082      	b.n	8006bb8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d014      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00c      	beq.n	8006b0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af8:	f043 0208 	orr.w	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b00:	2300      	movs	r3, #0
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04f      	beq.n	8006bb6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <HAL_SPI_IRQHandler+0x17e>
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d034      	beq.n	8006bac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0203 	bic.w	r2, r2, #3
 8006b50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d011      	beq.n	8006b7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8006b60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fc f98c 	bl	8002e84 <HAL_DMA_Abort_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d005      	beq.n	8006b7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d016      	beq.n	8006bb4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <HAL_SPI_IRQHandler+0x1fc>)
 8006b8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fc f976 	bl	8002e84 <HAL_DMA_Abort_IT>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006baa:	e003      	b.n	8006bb4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f809 	bl	8006bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006bb2:	e000      	b.n	8006bb6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006bb4:	bf00      	nop
    return;
 8006bb6:	bf00      	nop
  }
}
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	08006bd9 	.word	0x08006bd9

08006bc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff ffe6 	bl	8006bc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e041      	b.n	8006c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fb f90e 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 f950 	bl	8006ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d001      	beq.n	8006cb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e03c      	b.n	8006d32 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <HAL_TIM_Base_Start+0xa0>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_TIM_Base_Start+0x5c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd2:	d013      	beq.n	8006cfc <HAL_TIM_Base_Start+0x5c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1a      	ldr	r2, [pc, #104]	; (8006d44 <HAL_TIM_Base_Start+0xa4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_TIM_Base_Start+0x5c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a19      	ldr	r2, [pc, #100]	; (8006d48 <HAL_TIM_Base_Start+0xa8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_TIM_Base_Start+0x5c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a17      	ldr	r2, [pc, #92]	; (8006d4c <HAL_TIM_Base_Start+0xac>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIM_Base_Start+0x5c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <HAL_TIM_Base_Start+0xb0>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d111      	bne.n	8006d20 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b06      	cmp	r3, #6
 8006d0c:	d010      	beq.n	8006d30 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1e:	e007      	b.n	8006d30 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f042 0201 	orr.w	r2, r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800
 8006d4c:	40000c00 	.word	0x40000c00
 8006d50:	40014000 	.word	0x40014000

08006d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_ConfigClockSource+0x1c>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e0b4      	b.n	8006eda <HAL_TIM_ConfigClockSource+0x186>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	d03e      	beq.n	8006e28 <HAL_TIM_ConfigClockSource+0xd4>
 8006daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dae:	f200 8087 	bhi.w	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db6:	f000 8086 	beq.w	8006ec6 <HAL_TIM_ConfigClockSource+0x172>
 8006dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dbe:	d87f      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc0:	2b70      	cmp	r3, #112	; 0x70
 8006dc2:	d01a      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0xa6>
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d87b      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dc8:	2b60      	cmp	r3, #96	; 0x60
 8006dca:	d050      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0x11a>
 8006dcc:	2b60      	cmp	r3, #96	; 0x60
 8006dce:	d877      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd0:	2b50      	cmp	r3, #80	; 0x50
 8006dd2:	d03c      	beq.n	8006e4e <HAL_TIM_ConfigClockSource+0xfa>
 8006dd4:	2b50      	cmp	r3, #80	; 0x50
 8006dd6:	d873      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d058      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x13a>
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d86f      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de0:	2b30      	cmp	r3, #48	; 0x30
 8006de2:	d064      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x15a>
 8006de4:	2b30      	cmp	r3, #48	; 0x30
 8006de6:	d86b      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d060      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x15a>
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d867      	bhi.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d05c      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x15a>
 8006df4:	2b10      	cmp	r3, #16
 8006df6:	d05a      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x15a>
 8006df8:	e062      	b.n	8006ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6899      	ldr	r1, [r3, #8]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f000 f965 	bl	80070d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	609a      	str	r2, [r3, #8]
      break;
 8006e26:	e04f      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6899      	ldr	r1, [r3, #8]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f000 f94e 	bl	80070d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e4a:	609a      	str	r2, [r3, #8]
      break;
 8006e4c:	e03c      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6859      	ldr	r1, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f000 f8c2 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2150      	movs	r1, #80	; 0x50
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f91b 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006e6c:	e02c      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f000 f8e1 	bl	8007042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2160      	movs	r1, #96	; 0x60
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f90b 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006e8c:	e01c      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f000 f8a2 	bl	8006fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f8fb 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006eac:	e00c      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	4610      	mov	r0, r2
 8006eba:	f000 f8f2 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006ebe:	e003      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec4:	e000      	b.n	8006ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a34      	ldr	r2, [pc, #208]	; (8006fc8 <TIM_Base_SetConfig+0xe4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00f      	beq.n	8006f1c <TIM_Base_SetConfig+0x38>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f02:	d00b      	beq.n	8006f1c <TIM_Base_SetConfig+0x38>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a31      	ldr	r2, [pc, #196]	; (8006fcc <TIM_Base_SetConfig+0xe8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d007      	beq.n	8006f1c <TIM_Base_SetConfig+0x38>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <TIM_Base_SetConfig+0xec>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <TIM_Base_SetConfig+0x38>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <TIM_Base_SetConfig+0xf0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d108      	bne.n	8006f2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <TIM_Base_SetConfig+0xe4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01b      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d017      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a22      	ldr	r2, [pc, #136]	; (8006fcc <TIM_Base_SetConfig+0xe8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <TIM_Base_SetConfig+0xec>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00f      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <TIM_Base_SetConfig+0xf0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <TIM_Base_SetConfig+0xf4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1e      	ldr	r2, [pc, #120]	; (8006fdc <TIM_Base_SetConfig+0xf8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_Base_SetConfig+0x8a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1d      	ldr	r2, [pc, #116]	; (8006fe0 <TIM_Base_SetConfig+0xfc>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d108      	bne.n	8006f80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a08      	ldr	r2, [pc, #32]	; (8006fc8 <TIM_Base_SetConfig+0xe4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d103      	bne.n	8006fb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	615a      	str	r2, [r3, #20]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f023 0201 	bic.w	r2, r3, #1
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800700e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f023 030a 	bic.w	r3, r3, #10
 8007020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	621a      	str	r2, [r3, #32]
}
 8007036:	bf00      	nop
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007042:	b480      	push	{r7}
 8007044:	b087      	sub	sp, #28
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f023 0210 	bic.w	r2, r3, #16
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800706c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	031b      	lsls	r3, r3, #12
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800707e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	f043 0307 	orr.w	r3, r3, #7
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	021a      	lsls	r2, r3, #8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	431a      	orrs	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4313      	orrs	r3, r2
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	609a      	str	r2, [r3, #8]
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800712c:	2302      	movs	r3, #2
 800712e:	e050      	b.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d018      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d013      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a18      	ldr	r2, [pc, #96]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00e      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a16      	ldr	r2, [pc, #88]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d009      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d004      	beq.n	80071a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d10c      	bne.n	80071c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	40010000 	.word	0x40010000
 80071e4:	40000400 	.word	0x40000400
 80071e8:	40000800 	.word	0x40000800
 80071ec:	40000c00 	.word	0x40000c00
 80071f0:	40014000 	.word	0x40014000

080071f4 <calloc>:
 80071f4:	4b02      	ldr	r3, [pc, #8]	; (8007200 <calloc+0xc>)
 80071f6:	460a      	mov	r2, r1
 80071f8:	4601      	mov	r1, r0
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f000 b834 	b.w	8007268 <_calloc_r>
 8007200:	2000000c 	.word	0x2000000c

08007204 <__errno>:
 8007204:	4b01      	ldr	r3, [pc, #4]	; (800720c <__errno+0x8>)
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	2000000c 	.word	0x2000000c

08007210 <__libc_init_array>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4d0d      	ldr	r5, [pc, #52]	; (8007248 <__libc_init_array+0x38>)
 8007214:	4c0d      	ldr	r4, [pc, #52]	; (800724c <__libc_init_array+0x3c>)
 8007216:	1b64      	subs	r4, r4, r5
 8007218:	10a4      	asrs	r4, r4, #2
 800721a:	2600      	movs	r6, #0
 800721c:	42a6      	cmp	r6, r4
 800721e:	d109      	bne.n	8007234 <__libc_init_array+0x24>
 8007220:	4d0b      	ldr	r5, [pc, #44]	; (8007250 <__libc_init_array+0x40>)
 8007222:	4c0c      	ldr	r4, [pc, #48]	; (8007254 <__libc_init_array+0x44>)
 8007224:	f000 f8e8 	bl	80073f8 <_init>
 8007228:	1b64      	subs	r4, r4, r5
 800722a:	10a4      	asrs	r4, r4, #2
 800722c:	2600      	movs	r6, #0
 800722e:	42a6      	cmp	r6, r4
 8007230:	d105      	bne.n	800723e <__libc_init_array+0x2e>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	f855 3b04 	ldr.w	r3, [r5], #4
 8007238:	4798      	blx	r3
 800723a:	3601      	adds	r6, #1
 800723c:	e7ee      	b.n	800721c <__libc_init_array+0xc>
 800723e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007242:	4798      	blx	r3
 8007244:	3601      	adds	r6, #1
 8007246:	e7f2      	b.n	800722e <__libc_init_array+0x1e>
 8007248:	08007438 	.word	0x08007438
 800724c:	08007438 	.word	0x08007438
 8007250:	08007438 	.word	0x08007438
 8007254:	0800743c 	.word	0x0800743c

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <_calloc_r>:
 8007268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800726a:	fba1 2402 	umull	r2, r4, r1, r2
 800726e:	b94c      	cbnz	r4, 8007284 <_calloc_r+0x1c>
 8007270:	4611      	mov	r1, r2
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	f000 f82e 	bl	80072d4 <_malloc_r>
 8007278:	9a01      	ldr	r2, [sp, #4]
 800727a:	4605      	mov	r5, r0
 800727c:	b930      	cbnz	r0, 800728c <_calloc_r+0x24>
 800727e:	4628      	mov	r0, r5
 8007280:	b003      	add	sp, #12
 8007282:	bd30      	pop	{r4, r5, pc}
 8007284:	220c      	movs	r2, #12
 8007286:	6002      	str	r2, [r0, #0]
 8007288:	2500      	movs	r5, #0
 800728a:	e7f8      	b.n	800727e <_calloc_r+0x16>
 800728c:	4621      	mov	r1, r4
 800728e:	f7ff ffe3 	bl	8007258 <memset>
 8007292:	e7f4      	b.n	800727e <_calloc_r+0x16>

08007294 <sbrk_aligned>:
 8007294:	b570      	push	{r4, r5, r6, lr}
 8007296:	4e0e      	ldr	r6, [pc, #56]	; (80072d0 <sbrk_aligned+0x3c>)
 8007298:	460c      	mov	r4, r1
 800729a:	6831      	ldr	r1, [r6, #0]
 800729c:	4605      	mov	r5, r0
 800729e:	b911      	cbnz	r1, 80072a6 <sbrk_aligned+0x12>
 80072a0:	f000 f88c 	bl	80073bc <_sbrk_r>
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f000 f887 	bl	80073bc <_sbrk_r>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d00a      	beq.n	80072c8 <sbrk_aligned+0x34>
 80072b2:	1cc4      	adds	r4, r0, #3
 80072b4:	f024 0403 	bic.w	r4, r4, #3
 80072b8:	42a0      	cmp	r0, r4
 80072ba:	d007      	beq.n	80072cc <sbrk_aligned+0x38>
 80072bc:	1a21      	subs	r1, r4, r0
 80072be:	4628      	mov	r0, r5
 80072c0:	f000 f87c 	bl	80073bc <_sbrk_r>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d101      	bne.n	80072cc <sbrk_aligned+0x38>
 80072c8:	f04f 34ff 	mov.w	r4, #4294967295
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	20000330 	.word	0x20000330

080072d4 <_malloc_r>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	1ccd      	adds	r5, r1, #3
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	db01      	blt.n	80072f0 <_malloc_r+0x1c>
 80072ec:	42a9      	cmp	r1, r5
 80072ee:	d905      	bls.n	80072fc <_malloc_r+0x28>
 80072f0:	230c      	movs	r3, #12
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	2600      	movs	r6, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fc:	4e2e      	ldr	r6, [pc, #184]	; (80073b8 <_malloc_r+0xe4>)
 80072fe:	f000 f86d 	bl	80073dc <__malloc_lock>
 8007302:	6833      	ldr	r3, [r6, #0]
 8007304:	461c      	mov	r4, r3
 8007306:	bb34      	cbnz	r4, 8007356 <_malloc_r+0x82>
 8007308:	4629      	mov	r1, r5
 800730a:	4638      	mov	r0, r7
 800730c:	f7ff ffc2 	bl	8007294 <sbrk_aligned>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	4604      	mov	r4, r0
 8007314:	d14d      	bne.n	80073b2 <_malloc_r+0xde>
 8007316:	6834      	ldr	r4, [r6, #0]
 8007318:	4626      	mov	r6, r4
 800731a:	2e00      	cmp	r6, #0
 800731c:	d140      	bne.n	80073a0 <_malloc_r+0xcc>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	4631      	mov	r1, r6
 8007322:	4638      	mov	r0, r7
 8007324:	eb04 0803 	add.w	r8, r4, r3
 8007328:	f000 f848 	bl	80073bc <_sbrk_r>
 800732c:	4580      	cmp	r8, r0
 800732e:	d13a      	bne.n	80073a6 <_malloc_r+0xd2>
 8007330:	6821      	ldr	r1, [r4, #0]
 8007332:	3503      	adds	r5, #3
 8007334:	1a6d      	subs	r5, r5, r1
 8007336:	f025 0503 	bic.w	r5, r5, #3
 800733a:	3508      	adds	r5, #8
 800733c:	2d0c      	cmp	r5, #12
 800733e:	bf38      	it	cc
 8007340:	250c      	movcc	r5, #12
 8007342:	4629      	mov	r1, r5
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff ffa5 	bl	8007294 <sbrk_aligned>
 800734a:	3001      	adds	r0, #1
 800734c:	d02b      	beq.n	80073a6 <_malloc_r+0xd2>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	442b      	add	r3, r5
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	e00e      	b.n	8007374 <_malloc_r+0xa0>
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	1b52      	subs	r2, r2, r5
 800735a:	d41e      	bmi.n	800739a <_malloc_r+0xc6>
 800735c:	2a0b      	cmp	r2, #11
 800735e:	d916      	bls.n	800738e <_malloc_r+0xba>
 8007360:	1961      	adds	r1, r4, r5
 8007362:	42a3      	cmp	r3, r4
 8007364:	6025      	str	r5, [r4, #0]
 8007366:	bf18      	it	ne
 8007368:	6059      	strne	r1, [r3, #4]
 800736a:	6863      	ldr	r3, [r4, #4]
 800736c:	bf08      	it	eq
 800736e:	6031      	streq	r1, [r6, #0]
 8007370:	5162      	str	r2, [r4, r5]
 8007372:	604b      	str	r3, [r1, #4]
 8007374:	4638      	mov	r0, r7
 8007376:	f104 060b 	add.w	r6, r4, #11
 800737a:	f000 f835 	bl	80073e8 <__malloc_unlock>
 800737e:	f026 0607 	bic.w	r6, r6, #7
 8007382:	1d23      	adds	r3, r4, #4
 8007384:	1af2      	subs	r2, r6, r3
 8007386:	d0b6      	beq.n	80072f6 <_malloc_r+0x22>
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	50a3      	str	r3, [r4, r2]
 800738c:	e7b3      	b.n	80072f6 <_malloc_r+0x22>
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	bf0c      	ite	eq
 8007394:	6032      	streq	r2, [r6, #0]
 8007396:	605a      	strne	r2, [r3, #4]
 8007398:	e7ec      	b.n	8007374 <_malloc_r+0xa0>
 800739a:	4623      	mov	r3, r4
 800739c:	6864      	ldr	r4, [r4, #4]
 800739e:	e7b2      	b.n	8007306 <_malloc_r+0x32>
 80073a0:	4634      	mov	r4, r6
 80073a2:	6876      	ldr	r6, [r6, #4]
 80073a4:	e7b9      	b.n	800731a <_malloc_r+0x46>
 80073a6:	230c      	movs	r3, #12
 80073a8:	603b      	str	r3, [r7, #0]
 80073aa:	4638      	mov	r0, r7
 80073ac:	f000 f81c 	bl	80073e8 <__malloc_unlock>
 80073b0:	e7a1      	b.n	80072f6 <_malloc_r+0x22>
 80073b2:	6025      	str	r5, [r4, #0]
 80073b4:	e7de      	b.n	8007374 <_malloc_r+0xa0>
 80073b6:	bf00      	nop
 80073b8:	2000032c 	.word	0x2000032c

080073bc <_sbrk_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_sbrk_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa fcaa 	bl	8001d20 <_sbrk>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_sbrk_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_sbrk_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20000334 	.word	0x20000334

080073dc <__malloc_lock>:
 80073dc:	4801      	ldr	r0, [pc, #4]	; (80073e4 <__malloc_lock+0x8>)
 80073de:	f000 b809 	b.w	80073f4 <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000338 	.word	0x20000338

080073e8 <__malloc_unlock>:
 80073e8:	4801      	ldr	r0, [pc, #4]	; (80073f0 <__malloc_unlock+0x8>)
 80073ea:	f000 b804 	b.w	80073f6 <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	20000338 	.word	0x20000338

080073f4 <__retarget_lock_acquire_recursive>:
 80073f4:	4770      	bx	lr

080073f6 <__retarget_lock_release_recursive>:
 80073f6:	4770      	bx	lr

080073f8 <_init>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	bf00      	nop
 80073fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fe:	bc08      	pop	{r3}
 8007400:	469e      	mov	lr, r3
 8007402:	4770      	bx	lr

08007404 <_fini>:
 8007404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007406:	bf00      	nop
 8007408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800740a:	bc08      	pop	{r3}
 800740c:	469e      	mov	lr, r3
 800740e:	4770      	bx	lr
