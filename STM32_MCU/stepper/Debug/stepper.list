
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008984  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008b3c  08008b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b44  08008b44  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000060  08008bac  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08008bac  00020910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018f75  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000468a  00000000  00000000  00039038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0003d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001003  00000000  00000000  0003eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a48  00000000  00000000  0003fba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159f4  00000000  00000000  000585eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c60d  00000000  00000000  0006dfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fd4  00000000  00000000  0010a5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000144  00000000  00000000  0010f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000012b0  00000000  00000000  0010f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__aeabi_drsub>:
 8000198:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800019c:	e002      	b.n	80001a4 <__adddf3>
 800019e:	bf00      	nop

080001a0 <__aeabi_dsub>:
 80001a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a4 <__adddf3>:
 80001a4:	b530      	push	{r4, r5, lr}
 80001a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ae:	ea94 0f05 	teq	r4, r5
 80001b2:	bf08      	it	eq
 80001b4:	ea90 0f02 	teqeq	r0, r2
 80001b8:	bf1f      	itttt	ne
 80001ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ca:	f000 80e2 	beq.w	8000392 <__adddf3+0x1ee>
 80001ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d6:	bfb8      	it	lt
 80001d8:	426d      	neglt	r5, r5
 80001da:	dd0c      	ble.n	80001f6 <__adddf3+0x52>
 80001dc:	442c      	add	r4, r5
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	ea82 0000 	eor.w	r0, r2, r0
 80001ea:	ea83 0101 	eor.w	r1, r3, r1
 80001ee:	ea80 0202 	eor.w	r2, r0, r2
 80001f2:	ea81 0303 	eor.w	r3, r1, r3
 80001f6:	2d36      	cmp	r5, #54	; 0x36
 80001f8:	bf88      	it	hi
 80001fa:	bd30      	pophi	{r4, r5, pc}
 80001fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000200:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000204:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000208:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800020c:	d002      	beq.n	8000214 <__adddf3+0x70>
 800020e:	4240      	negs	r0, r0
 8000210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000214:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000218:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800021c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000220:	d002      	beq.n	8000228 <__adddf3+0x84>
 8000222:	4252      	negs	r2, r2
 8000224:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000228:	ea94 0f05 	teq	r4, r5
 800022c:	f000 80a7 	beq.w	800037e <__adddf3+0x1da>
 8000230:	f1a4 0401 	sub.w	r4, r4, #1
 8000234:	f1d5 0e20 	rsbs	lr, r5, #32
 8000238:	db0d      	blt.n	8000256 <__adddf3+0xb2>
 800023a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023e:	fa22 f205 	lsr.w	r2, r2, r5
 8000242:	1880      	adds	r0, r0, r2
 8000244:	f141 0100 	adc.w	r1, r1, #0
 8000248:	fa03 f20e 	lsl.w	r2, r3, lr
 800024c:	1880      	adds	r0, r0, r2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	4159      	adcs	r1, r3
 8000254:	e00e      	b.n	8000274 <__adddf3+0xd0>
 8000256:	f1a5 0520 	sub.w	r5, r5, #32
 800025a:	f10e 0e20 	add.w	lr, lr, #32
 800025e:	2a01      	cmp	r2, #1
 8000260:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000264:	bf28      	it	cs
 8000266:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026a:	fa43 f305 	asr.w	r3, r3, r5
 800026e:	18c0      	adds	r0, r0, r3
 8000270:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000278:	d507      	bpl.n	800028a <__adddf3+0xe6>
 800027a:	f04f 0e00 	mov.w	lr, #0
 800027e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000282:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000286:	eb6e 0101 	sbc.w	r1, lr, r1
 800028a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800028e:	d31b      	bcc.n	80002c8 <__adddf3+0x124>
 8000290:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000294:	d30c      	bcc.n	80002b0 <__adddf3+0x10c>
 8000296:	0849      	lsrs	r1, r1, #1
 8000298:	ea5f 0030 	movs.w	r0, r0, rrx
 800029c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a0:	f104 0401 	add.w	r4, r4, #1
 80002a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ac:	f080 809a 	bcs.w	80003e4 <__adddf3+0x240>
 80002b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b4:	bf08      	it	eq
 80002b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ba:	f150 0000 	adcs.w	r0, r0, #0
 80002be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c2:	ea41 0105 	orr.w	r1, r1, r5
 80002c6:	bd30      	pop	{r4, r5, pc}
 80002c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002cc:	4140      	adcs	r0, r0
 80002ce:	eb41 0101 	adc.w	r1, r1, r1
 80002d2:	3c01      	subs	r4, #1
 80002d4:	bf28      	it	cs
 80002d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002da:	d2e9      	bcs.n	80002b0 <__adddf3+0x10c>
 80002dc:	f091 0f00 	teq	r1, #0
 80002e0:	bf04      	itt	eq
 80002e2:	4601      	moveq	r1, r0
 80002e4:	2000      	moveq	r0, #0
 80002e6:	fab1 f381 	clz	r3, r1
 80002ea:	bf08      	it	eq
 80002ec:	3320      	addeq	r3, #32
 80002ee:	f1a3 030b 	sub.w	r3, r3, #11
 80002f2:	f1b3 0220 	subs.w	r2, r3, #32
 80002f6:	da0c      	bge.n	8000312 <__adddf3+0x16e>
 80002f8:	320c      	adds	r2, #12
 80002fa:	dd08      	ble.n	800030e <__adddf3+0x16a>
 80002fc:	f102 0c14 	add.w	ip, r2, #20
 8000300:	f1c2 020c 	rsb	r2, r2, #12
 8000304:	fa01 f00c 	lsl.w	r0, r1, ip
 8000308:	fa21 f102 	lsr.w	r1, r1, r2
 800030c:	e00c      	b.n	8000328 <__adddf3+0x184>
 800030e:	f102 0214 	add.w	r2, r2, #20
 8000312:	bfd8      	it	le
 8000314:	f1c2 0c20 	rsble	ip, r2, #32
 8000318:	fa01 f102 	lsl.w	r1, r1, r2
 800031c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000320:	bfdc      	itt	le
 8000322:	ea41 010c 	orrle.w	r1, r1, ip
 8000326:	4090      	lslle	r0, r2
 8000328:	1ae4      	subs	r4, r4, r3
 800032a:	bfa2      	ittt	ge
 800032c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000330:	4329      	orrge	r1, r5
 8000332:	bd30      	popge	{r4, r5, pc}
 8000334:	ea6f 0404 	mvn.w	r4, r4
 8000338:	3c1f      	subs	r4, #31
 800033a:	da1c      	bge.n	8000376 <__adddf3+0x1d2>
 800033c:	340c      	adds	r4, #12
 800033e:	dc0e      	bgt.n	800035e <__adddf3+0x1ba>
 8000340:	f104 0414 	add.w	r4, r4, #20
 8000344:	f1c4 0220 	rsb	r2, r4, #32
 8000348:	fa20 f004 	lsr.w	r0, r0, r4
 800034c:	fa01 f302 	lsl.w	r3, r1, r2
 8000350:	ea40 0003 	orr.w	r0, r0, r3
 8000354:	fa21 f304 	lsr.w	r3, r1, r4
 8000358:	ea45 0103 	orr.w	r1, r5, r3
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	f1c4 040c 	rsb	r4, r4, #12
 8000362:	f1c4 0220 	rsb	r2, r4, #32
 8000366:	fa20 f002 	lsr.w	r0, r0, r2
 800036a:	fa01 f304 	lsl.w	r3, r1, r4
 800036e:	ea40 0003 	orr.w	r0, r0, r3
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	fa21 f004 	lsr.w	r0, r1, r4
 800037a:	4629      	mov	r1, r5
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	f094 0f00 	teq	r4, #0
 8000382:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000386:	bf06      	itte	eq
 8000388:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800038c:	3401      	addeq	r4, #1
 800038e:	3d01      	subne	r5, #1
 8000390:	e74e      	b.n	8000230 <__adddf3+0x8c>
 8000392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000396:	bf18      	it	ne
 8000398:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800039c:	d029      	beq.n	80003f2 <__adddf3+0x24e>
 800039e:	ea94 0f05 	teq	r4, r5
 80003a2:	bf08      	it	eq
 80003a4:	ea90 0f02 	teqeq	r0, r2
 80003a8:	d005      	beq.n	80003b6 <__adddf3+0x212>
 80003aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ae:	bf04      	itt	eq
 80003b0:	4619      	moveq	r1, r3
 80003b2:	4610      	moveq	r0, r2
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea91 0f03 	teq	r1, r3
 80003ba:	bf1e      	ittt	ne
 80003bc:	2100      	movne	r1, #0
 80003be:	2000      	movne	r0, #0
 80003c0:	bd30      	popne	{r4, r5, pc}
 80003c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c6:	d105      	bne.n	80003d4 <__adddf3+0x230>
 80003c8:	0040      	lsls	r0, r0, #1
 80003ca:	4149      	adcs	r1, r1
 80003cc:	bf28      	it	cs
 80003ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d8:	bf3c      	itt	cc
 80003da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003de:	bd30      	popcc	{r4, r5, pc}
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f6:	bf1a      	itte	ne
 80003f8:	4619      	movne	r1, r3
 80003fa:	4610      	movne	r0, r2
 80003fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000400:	bf1c      	itt	ne
 8000402:	460b      	movne	r3, r1
 8000404:	4602      	movne	r2, r0
 8000406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040a:	bf06      	itte	eq
 800040c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000410:	ea91 0f03 	teqeq	r1, r3
 8000414:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	bf00      	nop

0800041c <__aeabi_ui2d>:
 800041c:	f090 0f00 	teq	r0, #0
 8000420:	bf04      	itt	eq
 8000422:	2100      	moveq	r1, #0
 8000424:	4770      	bxeq	lr
 8000426:	b530      	push	{r4, r5, lr}
 8000428:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800042c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000430:	f04f 0500 	mov.w	r5, #0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e750      	b.n	80002dc <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_i2d>:
 800043c:	f090 0f00 	teq	r0, #0
 8000440:	bf04      	itt	eq
 8000442:	2100      	moveq	r1, #0
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800044c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000450:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000454:	bf48      	it	mi
 8000456:	4240      	negmi	r0, r0
 8000458:	f04f 0100 	mov.w	r1, #0
 800045c:	e73e      	b.n	80002dc <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_f2d>:
 8000460:	0042      	lsls	r2, r0, #1
 8000462:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000466:	ea4f 0131 	mov.w	r1, r1, rrx
 800046a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046e:	bf1f      	itttt	ne
 8000470:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000474:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000478:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800047c:	4770      	bxne	lr
 800047e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000482:	bf08      	it	eq
 8000484:	4770      	bxeq	lr
 8000486:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800048a:	bf04      	itt	eq
 800048c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	e71c      	b.n	80002dc <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_ul2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f04f 0500 	mov.w	r5, #0
 80004b2:	e00a      	b.n	80004ca <__aeabi_l2d+0x16>

080004b4 <__aeabi_l2d>:
 80004b4:	ea50 0201 	orrs.w	r2, r0, r1
 80004b8:	bf08      	it	eq
 80004ba:	4770      	bxeq	lr
 80004bc:	b530      	push	{r4, r5, lr}
 80004be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004c2:	d502      	bpl.n	80004ca <__aeabi_l2d+0x16>
 80004c4:	4240      	negs	r0, r0
 80004c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d6:	f43f aed8 	beq.w	800028a <__adddf3+0xe6>
 80004da:	f04f 0203 	mov.w	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ea:	bf18      	it	ne
 80004ec:	3203      	addne	r2, #3
 80004ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f2:	f1c2 0320 	rsb	r3, r2, #32
 80004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fa:	fa20 f002 	lsr.w	r0, r0, r2
 80004fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000502:	ea40 000e 	orr.w	r0, r0, lr
 8000506:	fa21 f102 	lsr.w	r1, r1, r2
 800050a:	4414      	add	r4, r2
 800050c:	e6bd      	b.n	800028a <__adddf3+0xe6>
 800050e:	bf00      	nop

08000510 <__aeabi_dmul>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000516:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800051a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051e:	bf1d      	ittte	ne
 8000520:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000524:	ea94 0f0c 	teqne	r4, ip
 8000528:	ea95 0f0c 	teqne	r5, ip
 800052c:	f000 f8de 	bleq	80006ec <__aeabi_dmul+0x1dc>
 8000530:	442c      	add	r4, r5
 8000532:	ea81 0603 	eor.w	r6, r1, r3
 8000536:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800053a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000542:	bf18      	it	ne
 8000544:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000548:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800054c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000550:	d038      	beq.n	80005c4 <__aeabi_dmul+0xb4>
 8000552:	fba0 ce02 	umull	ip, lr, r0, r2
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000562:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000566:	f04f 0600 	mov.w	r6, #0
 800056a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056e:	f09c 0f00 	teq	ip, #0
 8000572:	bf18      	it	ne
 8000574:	f04e 0e01 	orrne.w	lr, lr, #1
 8000578:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800057c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000580:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000584:	d204      	bcs.n	8000590 <__aeabi_dmul+0x80>
 8000586:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800058a:	416d      	adcs	r5, r5
 800058c:	eb46 0606 	adc.w	r6, r6, r6
 8000590:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000594:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000598:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800059c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a8:	bf88      	it	hi
 80005aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ae:	d81e      	bhi.n	80005ee <__aeabi_dmul+0xde>
 80005b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005b4:	bf08      	it	eq
 80005b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ba:	f150 0000 	adcs.w	r0, r0, #0
 80005be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c8:	ea46 0101 	orr.w	r1, r6, r1
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	ea81 0103 	eor.w	r1, r1, r3
 80005d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d8:	bfc2      	ittt	gt
 80005da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005e2:	bd70      	popgt	{r4, r5, r6, pc}
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f04f 0e00 	mov.w	lr, #0
 80005ec:	3c01      	subs	r4, #1
 80005ee:	f300 80ab 	bgt.w	8000748 <__aeabi_dmul+0x238>
 80005f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005f6:	bfde      	ittt	le
 80005f8:	2000      	movle	r0, #0
 80005fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd70      	pople	{r4, r5, r6, pc}
 8000600:	f1c4 0400 	rsb	r4, r4, #0
 8000604:	3c20      	subs	r4, #32
 8000606:	da35      	bge.n	8000674 <__aeabi_dmul+0x164>
 8000608:	340c      	adds	r4, #12
 800060a:	dc1b      	bgt.n	8000644 <__aeabi_dmul+0x134>
 800060c:	f104 0414 	add.w	r4, r4, #20
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f305 	lsl.w	r3, r0, r5
 8000618:	fa20 f004 	lsr.w	r0, r0, r4
 800061c:	fa01 f205 	lsl.w	r2, r1, r5
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	fa21 f604 	lsr.w	r6, r1, r4
 8000634:	eb42 0106 	adc.w	r1, r2, r6
 8000638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800063c:	bf08      	it	eq
 800063e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f1c4 040c 	rsb	r4, r4, #12
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f304 	lsl.w	r3, r0, r4
 8000650:	fa20 f005 	lsr.w	r0, r0, r5
 8000654:	fa01 f204 	lsl.w	r2, r1, r4
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	f141 0100 	adc.w	r1, r1, #0
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f205 	lsl.w	r2, r0, r5
 800067c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000680:	fa20 f304 	lsr.w	r3, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea43 0302 	orr.w	r3, r3, r2
 800068c:	fa21 f004 	lsr.w	r0, r1, r4
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	fa21 f204 	lsr.w	r2, r1, r4
 8000698:	ea20 0002 	bic.w	r0, r0, r2
 800069c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f094 0f00 	teq	r4, #0
 80006b0:	d10f      	bne.n	80006d2 <__aeabi_dmul+0x1c2>
 80006b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006b6:	0040      	lsls	r0, r0, #1
 80006b8:	eb41 0101 	adc.w	r1, r1, r1
 80006bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006c0:	bf08      	it	eq
 80006c2:	3c01      	subeq	r4, #1
 80006c4:	d0f7      	beq.n	80006b6 <__aeabi_dmul+0x1a6>
 80006c6:	ea41 0106 	orr.w	r1, r1, r6
 80006ca:	f095 0f00 	teq	r5, #0
 80006ce:	bf18      	it	ne
 80006d0:	4770      	bxne	lr
 80006d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006d6:	0052      	lsls	r2, r2, #1
 80006d8:	eb43 0303 	adc.w	r3, r3, r3
 80006dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006e0:	bf08      	it	eq
 80006e2:	3d01      	subeq	r5, #1
 80006e4:	d0f7      	beq.n	80006d6 <__aeabi_dmul+0x1c6>
 80006e6:	ea43 0306 	orr.w	r3, r3, r6
 80006ea:	4770      	bx	lr
 80006ec:	ea94 0f0c 	teq	r4, ip
 80006f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f4:	bf18      	it	ne
 80006f6:	ea95 0f0c 	teqne	r5, ip
 80006fa:	d00c      	beq.n	8000716 <__aeabi_dmul+0x206>
 80006fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000700:	bf18      	it	ne
 8000702:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000706:	d1d1      	bne.n	80006ac <__aeabi_dmul+0x19c>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800071a:	bf06      	itte	eq
 800071c:	4610      	moveq	r0, r2
 800071e:	4619      	moveq	r1, r3
 8000720:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000724:	d019      	beq.n	800075a <__aeabi_dmul+0x24a>
 8000726:	ea94 0f0c 	teq	r4, ip
 800072a:	d102      	bne.n	8000732 <__aeabi_dmul+0x222>
 800072c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000730:	d113      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000732:	ea95 0f0c 	teq	r5, ip
 8000736:	d105      	bne.n	8000744 <__aeabi_dmul+0x234>
 8000738:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800073c:	bf1c      	itt	ne
 800073e:	4610      	movne	r0, r2
 8000740:	4619      	movne	r1, r3
 8000742:	d10a      	bne.n	800075a <__aeabi_dmul+0x24a>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000750:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800075e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000762:	bd70      	pop	{r4, r5, r6, pc}

08000764 <__aeabi_ddiv>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800076a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800076e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000772:	bf1d      	ittte	ne
 8000774:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000778:	ea94 0f0c 	teqne	r4, ip
 800077c:	ea95 0f0c 	teqne	r5, ip
 8000780:	f000 f8a7 	bleq	80008d2 <__aeabi_ddiv+0x16e>
 8000784:	eba4 0405 	sub.w	r4, r4, r5
 8000788:	ea81 0e03 	eor.w	lr, r1, r3
 800078c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000790:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000794:	f000 8088 	beq.w	80008a8 <__aeabi_ddiv+0x144>
 8000798:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800079c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007bc:	429d      	cmp	r5, r3
 80007be:	bf08      	it	eq
 80007c0:	4296      	cmpeq	r6, r2
 80007c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ca:	d202      	bcs.n	80007d2 <__aeabi_ddiv+0x6e>
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	1ab6      	subs	r6, r6, r2
 80007d4:	eb65 0503 	sbc.w	r5, r5, r3
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000840:	ea55 0e06 	orrs.w	lr, r5, r6
 8000844:	d018      	beq.n	8000878 <__aeabi_ddiv+0x114>
 8000846:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800084a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000852:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000856:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800085a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000862:	d1c0      	bne.n	80007e6 <__aeabi_ddiv+0x82>
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	d10b      	bne.n	8000882 <__aeabi_ddiv+0x11e>
 800086a:	ea41 0100 	orr.w	r1, r1, r0
 800086e:	f04f 0000 	mov.w	r0, #0
 8000872:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000876:	e7b6      	b.n	80007e6 <__aeabi_ddiv+0x82>
 8000878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800087c:	bf04      	itt	eq
 800087e:	4301      	orreq	r1, r0
 8000880:	2000      	moveq	r0, #0
 8000882:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000886:	bf88      	it	hi
 8000888:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800088c:	f63f aeaf 	bhi.w	80005ee <__aeabi_dmul+0xde>
 8000890:	ebb5 0c03 	subs.w	ip, r5, r3
 8000894:	bf04      	itt	eq
 8000896:	ebb6 0c02 	subseq.w	ip, r6, r2
 800089a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089e:	f150 0000 	adcs.w	r0, r0, #0
 80008a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b4:	bfc2      	ittt	gt
 80008b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008be:	bd70      	popgt	{r4, r5, r6, pc}
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c4:	f04f 0e00 	mov.w	lr, #0
 80008c8:	3c01      	subs	r4, #1
 80008ca:	e690      	b.n	80005ee <__aeabi_dmul+0xde>
 80008cc:	ea45 0e06 	orr.w	lr, r5, r6
 80008d0:	e68d      	b.n	80005ee <__aeabi_dmul+0xde>
 80008d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d6:	ea94 0f0c 	teq	r4, ip
 80008da:	bf08      	it	eq
 80008dc:	ea95 0f0c 	teqeq	r5, ip
 80008e0:	f43f af3b 	beq.w	800075a <__aeabi_dmul+0x24a>
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	d10a      	bne.n	8000900 <__aeabi_ddiv+0x19c>
 80008ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ee:	f47f af34 	bne.w	800075a <__aeabi_dmul+0x24a>
 80008f2:	ea95 0f0c 	teq	r5, ip
 80008f6:	f47f af25 	bne.w	8000744 <__aeabi_dmul+0x234>
 80008fa:	4610      	mov	r0, r2
 80008fc:	4619      	mov	r1, r3
 80008fe:	e72c      	b.n	800075a <__aeabi_dmul+0x24a>
 8000900:	ea95 0f0c 	teq	r5, ip
 8000904:	d106      	bne.n	8000914 <__aeabi_ddiv+0x1b0>
 8000906:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800090a:	f43f aefd 	beq.w	8000708 <__aeabi_dmul+0x1f8>
 800090e:	4610      	mov	r0, r2
 8000910:	4619      	mov	r1, r3
 8000912:	e722      	b.n	800075a <__aeabi_dmul+0x24a>
 8000914:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091e:	f47f aec5 	bne.w	80006ac <__aeabi_dmul+0x19c>
 8000922:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000926:	f47f af0d 	bne.w	8000744 <__aeabi_dmul+0x234>
 800092a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092e:	f47f aeeb 	bne.w	8000708 <__aeabi_dmul+0x1f8>
 8000932:	e712      	b.n	800075a <__aeabi_dmul+0x24a>

08000934 <__gedf2>:
 8000934:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000938:	e006      	b.n	8000948 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__ledf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	e002      	b.n	8000948 <__cmpdf2+0x4>
 8000942:	bf00      	nop

08000944 <__cmpdf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	f84d cd04 	str.w	ip, [sp, #-4]!
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095e:	d01b      	beq.n	8000998 <__cmpdf2+0x54>
 8000960:	b001      	add	sp, #4
 8000962:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000966:	bf0c      	ite	eq
 8000968:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800096c:	ea91 0f03 	teqne	r1, r3
 8000970:	bf02      	ittt	eq
 8000972:	ea90 0f02 	teqeq	r0, r2
 8000976:	2000      	moveq	r0, #0
 8000978:	4770      	bxeq	lr
 800097a:	f110 0f00 	cmn.w	r0, #0
 800097e:	ea91 0f03 	teq	r1, r3
 8000982:	bf58      	it	pl
 8000984:	4299      	cmppl	r1, r3
 8000986:	bf08      	it	eq
 8000988:	4290      	cmpeq	r0, r2
 800098a:	bf2c      	ite	cs
 800098c:	17d8      	asrcs	r0, r3, #31
 800098e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000992:	f040 0001 	orr.w	r0, r0, #1
 8000996:	4770      	bx	lr
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d102      	bne.n	80009a8 <__cmpdf2+0x64>
 80009a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a6:	d107      	bne.n	80009b8 <__cmpdf2+0x74>
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009b0:	d1d6      	bne.n	8000960 <__cmpdf2+0x1c>
 80009b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b6:	d0d3      	beq.n	8000960 <__cmpdf2+0x1c>
 80009b8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop

080009c0 <__aeabi_cdrcmple>:
 80009c0:	4684      	mov	ip, r0
 80009c2:	4610      	mov	r0, r2
 80009c4:	4662      	mov	r2, ip
 80009c6:	468c      	mov	ip, r1
 80009c8:	4619      	mov	r1, r3
 80009ca:	4663      	mov	r3, ip
 80009cc:	e000      	b.n	80009d0 <__aeabi_cdcmpeq>
 80009ce:	bf00      	nop

080009d0 <__aeabi_cdcmpeq>:
 80009d0:	b501      	push	{r0, lr}
 80009d2:	f7ff ffb7 	bl	8000944 <__cmpdf2>
 80009d6:	2800      	cmp	r0, #0
 80009d8:	bf48      	it	mi
 80009da:	f110 0f00 	cmnmi.w	r0, #0
 80009de:	bd01      	pop	{r0, pc}

080009e0 <__aeabi_dcmpeq>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff fff4 	bl	80009d0 <__aeabi_cdcmpeq>
 80009e8:	bf0c      	ite	eq
 80009ea:	2001      	moveq	r0, #1
 80009ec:	2000      	movne	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmplt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffea 	bl	80009d0 <__aeabi_cdcmpeq>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmple>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff ffe0 	bl	80009d0 <__aeabi_cdcmpeq>
 8000a10:	bf94      	ite	ls
 8000a12:	2001      	movls	r0, #1
 8000a14:	2000      	movhi	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmpge>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffce 	bl	80009c0 <__aeabi_cdrcmple>
 8000a24:	bf94      	ite	ls
 8000a26:	2001      	movls	r0, #1
 8000a28:	2000      	movhi	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmpgt>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffc4 	bl	80009c0 <__aeabi_cdrcmple>
 8000a38:	bf34      	ite	cc
 8000a3a:	2001      	movcc	r0, #1
 8000a3c:	2000      	movcs	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_d2uiz>:
 8000a44:	004a      	lsls	r2, r1, #1
 8000a46:	d211      	bcs.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a48:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a4c:	d211      	bcs.n	8000a72 <__aeabi_d2uiz+0x2e>
 8000a4e:	d50d      	bpl.n	8000a6c <__aeabi_d2uiz+0x28>
 8000a50:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a58:	d40e      	bmi.n	8000a78 <__aeabi_d2uiz+0x34>
 8000a5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a66:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d102      	bne.n	8000a7e <__aeabi_d2uiz+0x3a>
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a7c:	4770      	bx	lr
 8000a7e:	f04f 0000 	mov.w	r0, #0
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a98:	f000 b80c 	b.w	8000ab4 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f007 feca 	bl	800883c <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr

08000ab4 <__aeabi_idiv0>:
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <deregister_tm_clones>:
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <deregister_tm_clones+0x10>)
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <deregister_tm_clones+0x14>)
 8000abc:	4283      	cmp	r3, r0
 8000abe:	d002      	beq.n	8000ac6 <deregister_tm_clones+0xe>
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <deregister_tm_clones+0x18>)
 8000ac2:	b103      	cbz	r3, 8000ac6 <deregister_tm_clones+0xe>
 8000ac4:	4718      	bx	r3
 8000ac6:	4770      	bx	lr
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	20000060 	.word	0x20000060
 8000ad0:	00000000 	.word	0x00000000

08000ad4 <register_tm_clones>:
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <register_tm_clones+0x18>)
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <register_tm_clones+0x1c>)
 8000ad8:	1a1b      	subs	r3, r3, r0
 8000ada:	0fd9      	lsrs	r1, r3, #31
 8000adc:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 8000ae0:	1049      	asrs	r1, r1, #1
 8000ae2:	d002      	beq.n	8000aea <register_tm_clones+0x16>
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <register_tm_clones+0x20>)
 8000ae6:	b103      	cbz	r3, 8000aea <register_tm_clones+0x16>
 8000ae8:	4718      	bx	r3
 8000aea:	4770      	bx	lr
 8000aec:	20000060 	.word	0x20000060
 8000af0:	20000060 	.word	0x20000060
 8000af4:	00000000 	.word	0x00000000

08000af8 <__do_global_dtors_aux>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4c06      	ldr	r4, [pc, #24]	; (8000b14 <__do_global_dtors_aux+0x1c>)
 8000afc:	7823      	ldrb	r3, [r4, #0]
 8000afe:	b943      	cbnz	r3, 8000b12 <__do_global_dtors_aux+0x1a>
 8000b00:	f7ff ffda 	bl	8000ab8 <deregister_tm_clones>
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__do_global_dtors_aux+0x20>)
 8000b06:	b113      	cbz	r3, 8000b0e <__do_global_dtors_aux+0x16>
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <__do_global_dtors_aux+0x24>)
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	2301      	movs	r3, #1
 8000b10:	7023      	strb	r3, [r4, #0]
 8000b12:	bd10      	pop	{r4, pc}
 8000b14:	20000060 	.word	0x20000060
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	08008b04 	.word	0x08008b04

08000b20 <frame_dummy>:
 8000b20:	b508      	push	{r3, lr}
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <frame_dummy+0x18>)
 8000b24:	b11b      	cbz	r3, 8000b2e <frame_dummy+0xe>
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <frame_dummy+0x1c>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <frame_dummy+0x20>)
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b32:	f7ff bfcf 	b.w	8000ad4 <register_tm_clones>
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	20000064 	.word	0x20000064
 8000b40:	08008b04 	.word	0x08008b04

08000b44 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b56:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b58:	4a21      	ldr	r2, [pc, #132]	; (8000be0 <MX_ADC1_Init+0x9c>)
 8000b5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <MX_ADC1_Init+0xa0>)
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba6:	f001 ffa7 	bl	8002af8 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f001 fc12 	bl	80023d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000bc6:	f002 fa03 	bl	8002fd0 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f001 fc02 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000007c 	.word	0x2000007c
 8000be0:	40012000 	.word	0x40012000
 8000be4:	0f000001 	.word	0x0f000001

08000be8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a37      	ldr	r2, [pc, #220]	; (8000ce4 <HAL_ADC_MspInit+0xfc>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d168      	bne.n	8000cdc <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b33      	ldr	r3, [pc, #204]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ADC_MspInit+0x100>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_ADC_MspInit+0x104>)
 8000c56:	f003 f927 	bl	8003ea8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000c5a:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x10c>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cb2:	f002 fd59 	bl	8003768 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000cbc:	f001 fb8c 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f002 fd12 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f002 fd2b 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3728      	adds	r7, #40	; 0x28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40012000 	.word	0x40012000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	200000c4 	.word	0x200000c4
 8000cf4:	40026470 	.word	0x40026470

08000cf8 <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	2118      	movs	r1, #24
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f007 fcbc 	bl	800867c <calloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b084      	sub	sp, #16
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <AS5600_init+0x16>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	220a      	movs	r2, #10
 8000d1e:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7b9b      	ldrb	r3, [r3, #14]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <AS5600_init+0x24>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7bdb      	ldrb	r3, [r3, #15]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <AS5600_init+0x32>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7c1b      	ldrb	r3, [r3, #16]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <AS5600_init+0x40>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	7c5b      	ldrb	r3, [r3, #17]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <AS5600_init+0x4e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2201      	movs	r2, #1
 8000d56:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7c9b      	ldrb	r3, [r3, #18]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <AS5600_init+0x5c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7cdb      	ldrb	r3, [r3, #19]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <AS5600_init+0x6a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7d1b      	ldrb	r3, [r3, #20]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <AS5600_init+0x78>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7d5b      	ldrb	r3, [r3, #21]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <AS5600_init+0x86>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7bdb      	ldrb	r3, [r3, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f86a 	bl	8000e70 <AS5600_set_low_power_mode>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <AS5600_init+0x9c>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e05f      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7c1b      	ldrb	r3, [r3, #16]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8b3 	bl	8000f18 <AS5600_set_hysteresis>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <AS5600_init+0xb2>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e054      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	7c59      	ldrb	r1, [r3, #17]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7c9b      	ldrb	r3, [r3, #18]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 f8fa 	bl	8000fc0 <AS5600_set_output_mode>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <AS5600_init+0xcc>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e047      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7cdb      	ldrb	r3, [r3, #19]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 f983 	bl	80010e8 <AS5600_set_slow_filter>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <AS5600_init+0xe2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e03c      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	4619      	mov	r1, r3
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 f9cc 	bl	8001190 <AS5600_set_fast_filter_threshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <AS5600_init+0xf8>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e031      	b.n	8000e66 <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7d5b      	ldrb	r3, [r3, #21]
 8000e06:	4619      	mov	r1, r3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fa61 	bl	80012d0 <AS5600_set_watchdog_timer>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <AS5600_init+0x10e>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e026      	b.n	8000e66 <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fa80 	bl	800131e <AS5600_write_config_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <AS5600_init+0x11e>
 8000e24:	2301      	movs	r3, #1
 8000e26:	e01e      	b.n	8000e66 <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000e2c:	f107 030f 	add.w	r3, r7, #15
 8000e30:	4619      	mov	r1, r3
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fab2 	bl	800139c <AS5600_get_magnet_status>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <AS5600_init+0x138>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e011      	b.n	8000e66 <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f003 0320 	and.w	r3, r3, #32
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d009      	beq.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d104      	bne.n	8000e60 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f003 0310 	and.w	r3, r3, #16
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <AS5600_init+0x15a>
 8000e60:	2301      	movs	r3, #1
 8000e62:	e000      	b.n	8000e66 <AS5600_init+0x15c>
	return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d83f      	bhi.n	8000f04 <AS5600_set_low_power_mode+0x94>
 8000e84:	a201      	add	r2, pc, #4	; (adr r2, 8000e8c <AS5600_set_low_power_mode+0x1c>)
 8000e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8a:	bf00      	nop
 8000e8c:	08000e9d 	.word	0x08000e9d
 8000e90:	08000eaf 	.word	0x08000eaf
 8000e94:	08000ed1 	.word	0x08000ed1
 8000e98:	08000ef3 	.word	0x08000ef3
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7ddb      	ldrb	r3, [r3, #23]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	75da      	strb	r2, [r3, #23]
		break;
 8000eac:	e02c      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7ddb      	ldrb	r3, [r3, #23]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7ddb      	ldrb	r3, [r3, #23]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	75da      	strb	r2, [r3, #23]
	break;
 8000ece:	e01b      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7ddb      	ldrb	r3, [r3, #23]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7ddb      	ldrb	r3, [r3, #23]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	75da      	strb	r2, [r3, #23]
		break;
 8000ef0:	e00a      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7ddb      	ldrb	r3, [r3, #23]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f043 0303 	orr.w	r3, r3, #3
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	75da      	strb	r2, [r3, #23]
		break;
 8000f02:	e001      	b.n	8000f08 <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d83f      	bhi.n	8000fac <AS5600_set_hysteresis+0x94>
 8000f2c:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <AS5600_set_hysteresis+0x1c>)
 8000f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f32:	bf00      	nop
 8000f34:	08000f45 	.word	0x08000f45
 8000f38:	08000f57 	.word	0x08000f57
 8000f3c:	08000f79 	.word	0x08000f79
 8000f40:	08000f9b 	.word	0x08000f9b
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7ddb      	ldrb	r3, [r3, #23]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f023 030c 	bic.w	r3, r3, #12
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	75da      	strb	r2, [r3, #23]
		break;
 8000f54:	e02c      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7ddb      	ldrb	r3, [r3, #23]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7ddb      	ldrb	r3, [r3, #23]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f023 0308 	bic.w	r3, r3, #8
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	75da      	strb	r2, [r3, #23]
		break;
 8000f76:	e01b      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7ddb      	ldrb	r3, [r3, #23]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	f023 0304 	bic.w	r3, r3, #4
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	7ddb      	ldrb	r3, [r3, #23]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	75da      	strb	r2, [r3, #23]
		break;
 8000f98:	e00a      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7ddb      	ldrb	r3, [r3, #23]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f043 030c 	orr.w	r3, r3, #12
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	75da      	strb	r2, [r3, #23]
		break;
 8000faa:	e001      	b.n	8000fb0 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d020      	beq.n	800101c <AS5600_set_output_mode+0x5c>
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	dc31      	bgt.n	8001042 <AS5600_set_output_mode+0x82>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d002      	beq.n	8000fe8 <AS5600_set_output_mode+0x28>
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d009      	beq.n	8000ffa <AS5600_set_output_mode+0x3a>
 8000fe6:	e02c      	b.n	8001042 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7ddb      	ldrb	r3, [r3, #23]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	75da      	strb	r2, [r3, #23]
		break;
 8000ff8:	e025      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7ddb      	ldrb	r3, [r3, #23]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	b2da      	uxtb	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7ddb      	ldrb	r3, [r3, #23]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f023 0320 	bic.w	r3, r3, #32
 8001014:	b2da      	uxtb	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	75da      	strb	r2, [r3, #23]
		break;
 800101a:	e014      	b.n	8001046 <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7ddb      	ldrb	r3, [r3, #23]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f003 0310 	and.w	r3, r3, #16
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	7ddb      	ldrb	r3, [r3, #23]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f043 0320 	orr.w	r3, r3, #32
 8001036:	b2da      	uxtb	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e001      	b.n	8001046 <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8001042:	2301      	movs	r3, #1
 8001044:	e049      	b.n	80010da <AS5600_set_output_mode+0x11a>
	}
	if (pwm) {
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d045      	beq.n	80010d8 <AS5600_set_output_mode+0x118>
		switch (frequency) {
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	3b01      	subs	r3, #1
 8001050:	2b03      	cmp	r3, #3
 8001052:	d83f      	bhi.n	80010d4 <AS5600_set_output_mode+0x114>
 8001054:	a201      	add	r2, pc, #4	; (adr r2, 800105c <AS5600_set_output_mode+0x9c>)
 8001056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105a:	bf00      	nop
 800105c:	0800106d 	.word	0x0800106d
 8001060:	0800107f 	.word	0x0800107f
 8001064:	080010a1 	.word	0x080010a1
 8001068:	080010c3 	.word	0x080010c3
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	7ddb      	ldrb	r3, [r3, #23]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	75da      	strb	r2, [r3, #23]
			break;
 800107c:	e02c      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7ddb      	ldrb	r3, [r3, #23]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	b2da      	uxtb	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7ddb      	ldrb	r3, [r3, #23]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	75da      	strb	r2, [r3, #23]
			break;
 800109e:	e01b      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7ddb      	ldrb	r3, [r3, #23]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7ddb      	ldrb	r3, [r3, #23]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	75da      	strb	r2, [r3, #23]
			break;
 80010c0:	e00a      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7ddb      	ldrb	r3, [r3, #23]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	75da      	strb	r2, [r3, #23]
			break;
 80010d2:	e001      	b.n	80010d8 <AS5600_set_output_mode+0x118>
		default: return HAL_ERROR;	// invalid PWM frequency
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <AS5600_set_output_mode+0x11a>
		}
	}
	return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d83f      	bhi.n	800117c <AS5600_set_slow_filter+0x94>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <AS5600_set_slow_filter+0x1c>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	08001127 	.word	0x08001127
 800110c:	08001149 	.word	0x08001149
 8001110:	0800116b 	.word	0x0800116b
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7d9b      	ldrb	r3, [r3, #22]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f023 0303 	bic.w	r3, r3, #3
 800111e:	b2da      	uxtb	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	759a      	strb	r2, [r3, #22]
		break;
 8001124:	e02c      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7d9b      	ldrb	r3, [r3, #22]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7d9b      	ldrb	r3, [r3, #22]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f023 0302 	bic.w	r3, r3, #2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	759a      	strb	r2, [r3, #22]
		break;
 8001146:	e01b      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7d9b      	ldrb	r3, [r3, #22]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7d9b      	ldrb	r3, [r3, #22]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	759a      	strb	r2, [r3, #22]
		break;
 8001168:	e00a      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7d9b      	ldrb	r3, [r3, #22]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f043 0303 	orr.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	759a      	strb	r2, [r3, #22]
		break;
 800117a:	e001      	b.n	8001180 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 800119c:	78fb      	ldrb	r3, [r7, #3]
 800119e:	3b01      	subs	r3, #1
 80011a0:	2b07      	cmp	r3, #7
 80011a2:	f200 808b 	bhi.w	80012bc <AS5600_set_fast_filter_threshold+0x12c>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <AS5600_set_fast_filter_threshold+0x1c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011df 	.word	0x080011df
 80011b4:	08001201 	.word	0x08001201
 80011b8:	08001223 	.word	0x08001223
 80011bc:	08001245 	.word	0x08001245
 80011c0:	08001267 	.word	0x08001267
 80011c4:	08001289 	.word	0x08001289
 80011c8:	080012ab 	.word	0x080012ab
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7d9b      	ldrb	r3, [r3, #22]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f023 031c 	bic.w	r3, r3, #28
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	759a      	strb	r2, [r3, #22]
		break;
 80011dc:	e070      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	7d9b      	ldrb	r3, [r3, #22]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	f023 0318 	bic.w	r3, r3, #24
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7d9b      	ldrb	r3, [r3, #22]
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	759a      	strb	r2, [r3, #22]
		break;
 80011fe:	e05f      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7d9b      	ldrb	r3, [r3, #22]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f023 0314 	bic.w	r3, r3, #20
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7d9b      	ldrb	r3, [r3, #22]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	759a      	strb	r2, [r3, #22]
		break;
 8001220:	e04e      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7d9b      	ldrb	r3, [r3, #22]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	b2da      	uxtb	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7d9b      	ldrb	r3, [r3, #22]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f043 030c 	orr.w	r3, r3, #12
 800123c:	b2da      	uxtb	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	759a      	strb	r2, [r3, #22]
		break;
 8001242:	e03d      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	7d9b      	ldrb	r3, [r3, #22]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f023 030c 	bic.w	r3, r3, #12
 800124e:	b2da      	uxtb	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7d9b      	ldrb	r3, [r3, #22]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	759a      	strb	r2, [r3, #22]
		break;
 8001264:	e02c      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7d9b      	ldrb	r3, [r3, #22]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f023 0308 	bic.w	r3, r3, #8
 8001270:	b2da      	uxtb	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7d9b      	ldrb	r3, [r3, #22]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f043 0314 	orr.w	r3, r3, #20
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	759a      	strb	r2, [r3, #22]
		break;
 8001286:	e01b      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7d9b      	ldrb	r3, [r3, #22]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f023 0304 	bic.w	r3, r3, #4
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7d9b      	ldrb	r3, [r3, #22]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f043 0318 	orr.w	r3, r3, #24
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	759a      	strb	r2, [r3, #22]
		break;
 80012a8:	e00a      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f043 031c 	orr.w	r3, r3, #28
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	759a      	strb	r2, [r3, #22]
		break;
 80012ba:	e001      	b.n	80012c0 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d002      	beq.n	80012e8 <AS5600_set_watchdog_timer+0x18>
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d009      	beq.n	80012fa <AS5600_set_watchdog_timer+0x2a>
 80012e6:	e011      	b.n	800130c <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7d9b      	ldrb	r3, [r3, #22]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	759a      	strb	r2, [r3, #22]
		break;
 80012f8:	e00a      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7d9b      	ldrb	r3, [r3, #22]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001304:	b2da      	uxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	759a      	strb	r2, [r3, #22]
		break;
 800130a:	e001      	b.n	8001310 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af04      	add	r7, sp, #16
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3316      	adds	r3, #22
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	9202      	str	r2, [sp, #8]
 8001334:	2202      	movs	r2, #2
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2207      	movs	r2, #7
 800133e:	216c      	movs	r1, #108	; 0x6c
 8001340:	f003 f894 	bl	800446c <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 800134e:	b580      	push	{r7, lr}
 8001350:	b088      	sub	sp, #32
 8001352:	af04      	add	r7, sp, #16
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 8001358:	2300      	movs	r3, #0
 800135a:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2302      	movs	r3, #2
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	220e      	movs	r2, #14
 8001374:	216c      	movs	r1, #108	; 0x6c
 8001376:	f003 f973 	bl	8004660 <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	b21a      	sxth	r2, r3
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	801a      	strh	r2, [r3, #0]
	return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	220b      	movs	r2, #11
 80013bc:	216c      	movs	r1, #108	; 0x6c
 80013be:	f003 f94f 	bl	8004660 <HAL_I2C_Mem_Read>
 80013c2:	4603      	mov	r3, r0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <MX_DMA_Init+0x5c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a13      	ldr	r2, [pc, #76]	; (8001428 <MX_DMA_Init+0x5c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_DMA_Init+0x5c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	; 0x38
 80013f4:	f002 f981 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	; 0x38
 80013fa:	f002 f99a 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	203b      	movs	r0, #59	; 0x3b
 8001404:	f002 f979 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001408:	203b      	movs	r0, #59	; 0x3b
 800140a:	f002 f992 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	203c      	movs	r0, #60	; 0x3c
 8001414:	f002 f971 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001418:	203c      	movs	r0, #60	; 0x3c
 800141a:	f002 f98a 	bl	8003732 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	4b51      	ldr	r3, [pc, #324]	; (800158c <MX_GPIO_Init+0x160>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a50      	ldr	r2, [pc, #320]	; (800158c <MX_GPIO_Init+0x160>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <MX_GPIO_Init+0x160>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b4a      	ldr	r3, [pc, #296]	; (800158c <MX_GPIO_Init+0x160>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a49      	ldr	r2, [pc, #292]	; (800158c <MX_GPIO_Init+0x160>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <MX_GPIO_Init+0x160>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b43      	ldr	r3, [pc, #268]	; (800158c <MX_GPIO_Init+0x160>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a42      	ldr	r2, [pc, #264]	; (800158c <MX_GPIO_Init+0x160>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b40      	ldr	r3, [pc, #256]	; (800158c <MX_GPIO_Init+0x160>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 7141 	mov.w	r1, #772	; 0x304
 800149c:	483c      	ldr	r0, [pc, #240]	; (8001590 <MX_GPIO_Init+0x164>)
 800149e:	f002 fe87 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a8:	483a      	ldr	r0, [pc, #232]	; (8001594 <MX_GPIO_Init+0x168>)
 80014aa:	f002 fe81 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f24e 0120 	movw	r1, #57376	; 0xe020
 80014b4:	4837      	ldr	r0, [pc, #220]	; (8001594 <MX_GPIO_Init+0x168>)
 80014b6:	f002 fe7b 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 80014ba:	2304      	movs	r3, #4
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	482f      	ldr	r0, [pc, #188]	; (8001590 <MX_GPIO_Init+0x164>)
 80014d2:	f002 fce9 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 80014d6:	2308      	movs	r3, #8
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	4829      	ldr	r0, [pc, #164]	; (8001590 <MX_GPIO_Init+0x164>)
 80014ec:	f002 fcdc 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80014f0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80014f6:	2311      	movs	r3, #17
 80014f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4619      	mov	r1, r3
 8001508:	4822      	ldr	r0, [pc, #136]	; (8001594 <MX_GPIO_Init+0x168>)
 800150a:	f002 fccd 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001514:	2311      	movs	r3, #17
 8001516:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	481b      	ldr	r0, [pc, #108]	; (8001594 <MX_GPIO_Init+0x168>)
 8001528:	f002 fcbe 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 800152c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001532:	2311      	movs	r3, #17
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800153a:	2301      	movs	r3, #1
 800153c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4813      	ldr	r0, [pc, #76]	; (8001594 <MX_GPIO_Init+0x168>)
 8001546:	f002 fcaf 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001550:	2311      	movs	r3, #17
 8001552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <MX_GPIO_Init+0x164>)
 8001564:	f002 fca0 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001568:	2320      	movs	r3, #32
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800156c:	2311      	movs	r3, #17
 800156e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_GPIO_Init+0x168>)
 8001580:	f002 fc92 	bl	8003ea8 <HAL_GPIO_Init>

}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40020000 	.word	0x40020000
 8001594:	40020400 	.word	0x40020400

08001598 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_I2C1_Init+0x50>)
 800159e:	4a13      	ldr	r2, [pc, #76]	; (80015ec <MX_I2C1_Init+0x54>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <MX_I2C1_Init+0x58>)
 80015a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_I2C1_Init+0x50>)
 80015d6:	f002 fe05 	bl	80041e4 <HAL_I2C_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e0:	f000 fefa 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000124 	.word	0x20000124
 80015ec:	40005400 	.word	0x40005400
 80015f0:	000186a0 	.word	0x000186a0

080015f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <HAL_I2C_MspInit+0xa4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d13b      	bne.n	800168e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_I2C_MspInit+0xa8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a1f      	ldr	r2, [pc, #124]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 8001632:	23c0      	movs	r3, #192	; 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4814      	ldr	r0, [pc, #80]	; (80016a0 <HAL_I2C_MspInit+0xac>)
 800164e:	f002 fc2b 	bl	8003ea8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_I2C_MspInit+0xa8>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_I2C_MspInit+0xa8>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201f      	movs	r0, #31
 8001674:	f002 f841 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001678:	201f      	movs	r0, #31
 800167a:	f002 f85a 	bl	8003732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	2100      	movs	r1, #0
 8001682:	2020      	movs	r0, #32
 8001684:	f002 f839 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001688:	2020      	movs	r0, #32
 800168a:	f002 f852 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800168e:	bf00      	nop
 8001690:	3728      	adds	r7, #40	; 0x28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40005400 	.word	0x40005400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400

080016a4 <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24
 80016b4:	bf00      	nop
 80016b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8f9      	bhi.n	80016b6 <delay_us+0x12>
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <set_motor_setting+0x84>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	491d      	ldr	r1, [pc, #116]	; (8001754 <set_motor_setting+0x84>)
 80016de:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 80016e2:	4013      	ands	r3, r2
 80016e4:	614b      	str	r3, [r1, #20]
	switch(instruction->micro_step) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d018      	beq.n	8001726 <set_motor_setting+0x56>
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	dc03      	bgt.n	8001700 <set_motor_setting+0x30>
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d008      	beq.n	800170e <set_motor_setting+0x3e>
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d00d      	beq.n	800171c <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <set_motor_setting+0x84>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	4a13      	ldr	r2, [pc, #76]	; (8001754 <set_motor_setting+0x84>)
 8001706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170a:	6153      	str	r3, [r2, #20]
 800170c:	e012      	b.n	8001734 <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <set_motor_setting+0x84>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4a10      	ldr	r2, [pc, #64]	; (8001754 <set_motor_setting+0x84>)
 8001714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001718:	6153      	str	r3, [r2, #20]
 800171a:	e00b      	b.n	8001734 <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <set_motor_setting+0x84>)
 800171e:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <set_motor_setting+0x84>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	6153      	str	r3, [r2, #20]
 8001724:	e006      	b.n	8001734 <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <set_motor_setting+0x84>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <set_motor_setting+0x84>)
 800172c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->srd_mode);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7e1b      	ldrb	r3, [r3, #24]
 8001738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <set_motor_setting+0x88>)
 8001746:	f002 fd33 	bl	80041b0 <HAL_GPIO_WritePin>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	00000000 	.word	0x00000000

08001760 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	af00      	add	r7, sp, #0
	register uint16_t pos_diff = (AS5600_pos_f64 - state.raw_angle);  // rotation detection
 8001766:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <euler_method+0x1b8>)
 8001768:	e9d3 4500 	ldrd	r4, r5, [r3]
 800176c:	4b6b      	ldr	r3, [pc, #428]	; (800191c <euler_method+0x1bc>)
 800176e:	8b1b      	ldrh	r3, [r3, #24]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe62 	bl	800043c <__aeabi_i2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fd0e 	bl	80001a0 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f95a 	bl	8000a44 <__aeabi_d2uiz>
 8001790:	4603      	mov	r3, r0
 8001792:	b29c      	uxth	r4, r3
	state.pos.rotation += pos_diff > 2048; state.pos.rotation += pos_diff < -2048;
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <euler_method+0x1bc>)
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	f343 0313 	sbfx	r3, r3, #0, #20
 800179c:	461a      	mov	r2, r3
 800179e:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 80017a2:	bf8c      	ite	hi
 80017a4:	2301      	movhi	r3, #1
 80017a6:	2300      	movls	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	031a      	lsls	r2, r3, #12
 80017ae:	1312      	asrs	r2, r2, #12
 80017b0:	495a      	ldr	r1, [pc, #360]	; (800191c <euler_method+0x1bc>)
 80017b2:	690b      	ldr	r3, [r1, #16]
 80017b4:	f362 0313 	bfi	r3, r2, #0, #20
 80017b8:	610b      	str	r3, [r1, #16]
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <euler_method+0x1bc>)
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f343 0113 	sbfx	r1, r3, #0, #20
 80017c2:	4a56      	ldr	r2, [pc, #344]	; (800191c <euler_method+0x1bc>)
 80017c4:	6913      	ldr	r3, [r2, #16]
 80017c6:	f361 0313 	bfi	r3, r1, #0, #20
 80017ca:	6113      	str	r3, [r2, #16]
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 80017cc:	4b54      	ldr	r3, [pc, #336]	; (8001920 <euler_method+0x1c0>)
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fe23 	bl	800041c <__aeabi_ui2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	a149      	add	r1, pc, #292	; (adr r1, 8001900 <euler_method+0x1a0>)
 80017dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017e0:	f7fe ffc0 	bl	8000764 <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <euler_method+0x1c4>)
 80017f2:	f7fe fcd7 	bl	80001a4 <__adddf3>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	4949      	ldr	r1, [pc, #292]	; (8001924 <euler_method+0x1c4>)
 8001800:	f7fe ffb0 	bl	8000764 <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4614      	mov	r4, r2
 800180a:	461d      	mov	r5, r3
	AS5600_pos_f64 = (state.raw_angle * alpha) + ((1 - alpha) * AS5600_pos_f64);
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <euler_method+0x1bc>)
 800180e:	8b1b      	ldrh	r3, [r3, #24]
 8001810:	b29b      	uxth	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe12 	bl	800043c <__aeabi_i2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe fe76 	bl	8000510 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4690      	mov	r8, r2
 800182a:	4699      	mov	r9, r3
 800182c:	4622      	mov	r2, r4
 800182e:	462b      	mov	r3, r5
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	493b      	ldr	r1, [pc, #236]	; (8001924 <euler_method+0x1c4>)
 8001836:	f7fe fcb3 	bl	80001a0 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <euler_method+0x1b8>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fe62 	bl	8000510 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4640      	mov	r0, r8
 8001852:	4649      	mov	r1, r9
 8001854:	f7fe fca6 	bl	80001a4 <__adddf3>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	492e      	ldr	r1, [pc, #184]	; (8001918 <euler_method+0x1b8>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
	state.vel = (1e6 / TIM5->CNT) * ((uint16_t)AS5600_pos_f64 - state.pos.angle) * AS5600_RAD_CONV;  // rad / s
 8001862:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <euler_method+0x1c0>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fdd8 	bl	800041c <__aeabi_ui2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	a125      	add	r1, pc, #148	; (adr r1, 8001908 <euler_method+0x1a8>)
 8001872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001876:	f7fe ff75 	bl	8000764 <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4614      	mov	r4, r2
 8001880:	461d      	mov	r5, r3
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <euler_method+0x1b8>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f8da 	bl	8000a44 <__aeabi_d2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	b29b      	uxth	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <euler_method+0x1bc>)
 8001898:	8a5b      	ldrh	r3, [r3, #18]
 800189a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800189e:	b29b      	uxth	r3, r3
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fdca 	bl	800043c <__aeabi_i2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4620      	mov	r0, r4
 80018ae:	4629      	mov	r1, r5
 80018b0:	f7fe fe2e 	bl	8000510 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	a314      	add	r3, pc, #80	; (adr r3, 8001910 <euler_method+0x1b0>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe25 	bl	8000510 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <euler_method+0x1bc>)
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
	state.pos.angle = (uint16_t)AS5600_pos_f64;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <euler_method+0x1b8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	f7ff f8b3 	bl	8000a44 <__aeabi_d2uiz>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e6:	b299      	uxth	r1, r3
 80018e8:	4a0c      	ldr	r2, [pc, #48]	; (800191c <euler_method+0x1bc>)
 80018ea:	8a53      	ldrh	r3, [r2, #18]
 80018ec:	f361 130f 	bfi	r3, r1, #4, #12
 80018f0:	8253      	strh	r3, [r2, #18]
	TIM5->CNT = 0;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <euler_method+0x1c0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018f8:	bf00      	nop
 80018fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018fe:	bf00      	nop
 8001900:	66666666 	.word	0x66666666
 8001904:	40026666 	.word	0x40026666
 8001908:	00000000 	.word	0x00000000
 800190c:	412e8480 	.word	0x412e8480
 8001910:	5798a5fb 	.word	0x5798a5fb
 8001914:	3f5921fb 	.word	0x3f5921fb
 8001918:	200005c0 	.word	0x200005c0
 800191c:	20000178 	.word	0x20000178
 8001920:	40000c00 	.word	0x40000c00
 8001924:	3ff00000 	.word	0x3ff00000

08001928 <get_next_empty_queue_ptr>:
void* get_next_empty_queue_ptr() {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
	if (state.queue_size == MAX_QUEUE_SIZE) { return 0; }  // nullptr if full
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <get_next_empty_queue_ptr+0x38>)
 8001930:	7f9b      	ldrb	r3, [r3, #30]
 8001932:	2b20      	cmp	r3, #32
 8001934:	d101      	bne.n	800193a <get_next_empty_queue_ptr+0x12>
 8001936:	2300      	movs	r3, #0
 8001938:	e00c      	b.n	8001954 <get_next_empty_queue_ptr+0x2c>
	void* ptr = &queue[(state.queue_index + state.queue_size) % MAX_QUEUE_SIZE];
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <get_next_empty_queue_ptr+0x38>)
 800193c:	7fda      	ldrb	r2, [r3, #31]
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <get_next_empty_queue_ptr+0x38>)
 8001940:	7f9b      	ldrb	r3, [r3, #30]
 8001942:	4413      	add	r3, r2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <get_next_empty_queue_ptr+0x3c>)
 800194e:	4413      	add	r3, r2
 8001950:	607b      	str	r3, [r7, #4]
	return ptr;
 8001952:	687b      	ldr	r3, [r7, #4]
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20000178 	.word	0x20000178
 8001964:	20000198 	.word	0x20000198

08001968 <get_next_queue_ptr>:
void* get_next_queue_ptr() {
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
	if (!state.queue_size) { return 0; }  // nullptr if queue is empty
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <get_next_queue_ptr+0x4c>)
 800196e:	7f9b      	ldrb	r3, [r3, #30]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <get_next_queue_ptr+0x10>
 8001974:	2300      	movs	r3, #0
 8001976:	e017      	b.n	80019a8 <get_next_queue_ptr+0x40>
	state.queue_index = (state.queue_index + 1) % MAX_QUEUE_SIZE;
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <get_next_queue_ptr+0x4c>)
 800197a:	7fdb      	ldrb	r3, [r3, #31]
 800197c:	3301      	adds	r3, #1
 800197e:	425a      	negs	r2, r3
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <get_next_queue_ptr+0x4c>)
 8001990:	77da      	strb	r2, [r3, #31]
	state.queue_size--;  // flag last instruction as overwriteable
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <get_next_queue_ptr+0x4c>)
 8001994:	7f9b      	ldrb	r3, [r3, #30]
 8001996:	3b01      	subs	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <get_next_queue_ptr+0x4c>)
 800199c:	779a      	strb	r2, [r3, #30]
	return &queue[state.queue_index];
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <get_next_queue_ptr+0x4c>)
 80019a0:	7fdb      	ldrb	r3, [r3, #31]
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <get_next_queue_ptr+0x50>)
 80019a6:	4413      	add	r3, r2
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000178 	.word	0x20000178
 80019b8:	20000198 	.word	0x20000198

080019bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80019bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c0:	b090      	sub	sp, #64	; 0x40
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim != &htim10) { return; }
 80019c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019c8:	4ba5      	ldr	r3, [pc, #660]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80019ca:	429a      	cmp	r2, r3
 80019cc:	f040 8389 	bne.w	80020e2 <HAL_TIM_PeriodElapsedCallback+0x726>
	if (state.queue_size == 0) { return; }
 80019d0:	4ba4      	ldr	r3, [pc, #656]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80019d2:	7f9b      	ldrb	r3, [r3, #30]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 8386 	beq.w	80020e6 <HAL_TIM_PeriodElapsedCallback+0x72a>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update state.pos.angle, AS5600_delta_pos using the selected mode
 80019da:	f7ff fec1 	bl	8001760 <euler_method>
	double target_delta = instruction->target - state.pos.angle;
 80019de:	4ba2      	ldr	r3, [pc, #648]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019e6:	4b9f      	ldr	r3, [pc, #636]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80019e8:	8a5b      	ldrh	r3, [r3, #18]
 80019ea:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd23 	bl	800043c <__aeabi_i2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7fe fbcf 	bl	80001a0 <__aeabi_dsub>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a16:	f7ff f80b 	bl	8000a30 <__aeabi_dcmpgt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001a20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a24:	e052      	b.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a28:	603b      	str	r3, [r7, #0]
 8001a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	4b8d      	ldr	r3, [pc, #564]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a3c:	f7fe fbb0 	bl	80001a0 <__aeabi_dsub>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f7fe ffee 	bl	8000a30 <__aeabi_dcmpgt>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	4984      	ldr	r1, [pc, #528]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a60:	e003      	b.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0xae>
 8001a62:	f04f 0000 	mov.w	r0, #0
 8001a66:	f04f 0100 	mov.w	r1, #0
 8001a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6e:	f7fe ffdf 	bl	8000a30 <__aeabi_dcmpgt>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b7b      	ldr	r3, [pc, #492]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a7e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a82:	f7fe fb8d 	bl	80001a0 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e01f      	b.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b76      	ldr	r3, [pc, #472]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001a92:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001a96:	f7fe fb83 	bl	80001a0 <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	f7fe ff99 	bl	80009e0 <__aeabi_dcmpeq>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b6c      	ldr	r3, [pc, #432]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001aba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001abe:	f7fe fb6f 	bl	80001a0 <__aeabi_dsub>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	e001      	b.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001ac8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001acc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	// TODO: add defining rotation dir with SPI (this is obviously implicated with the previous TODO)
	// TODO: re-do: ease-in ease-out function
	// TODO: delete / re-do: pathfinding code
	// TODO: tune interrupt timing

	if (target_delta < 10) {  // ~1 deg
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001ad6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ada:	f7fe ff8b 	bl	80009f4 <__aeabi_dcmplt>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 82df 	beq.w	80020a4 <HAL_TIM_PeriodElapsedCallback+0x6e8>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	461c      	mov	r4, r3
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001af6:	f7fe ff7d 	bl	80009f4 <__aeabi_dcmplt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001b00:	2300      	movs	r3, #0
 8001b02:	461c      	mov	r4, r3
 8001b04:	b2e3      	uxtb	r3, r4
 8001b06:	461a      	mov	r2, r3
 8001b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0c:	485a      	ldr	r0, [pc, #360]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001b0e:	f002 fb4f 	bl	80041b0 <HAL_GPIO_WritePin>
		step_gain = MIN(ABS(target_delta / 1024), MIN(ABS((target_delta + 1024) / 1024), ABS((target_delta - 1024) / 1024)));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4b59      	ldr	r3, [pc, #356]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b18:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b1c:	f7fe fe22 	bl	8000764 <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	f7fe ff7e 	bl	8000a30 <__aeabi_dcmpgt>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00b      	beq.n	8001b52 <HAL_TIM_PeriodElapsedCallback+0x196>
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b40:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b44:	f7fe fe0e 	bl	8000764 <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001b50:	e00c      	b.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b58:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b5c:	f7fe fe02 	bl	8000764 <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b76:	f7fe fb15 	bl	80001a4 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b88:	f7fe fdec 	bl	8000764 <__aeabi_ddiv>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f7fe ff48 	bl	8000a30 <__aeabi_dcmpgt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d014      	beq.n	8001bd0 <HAL_TIM_PeriodElapsedCallback+0x214>
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001bac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bb0:	f7fe faf8 	bl	80001a4 <__adddf3>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001bc2:	f7fe fdcf 	bl	8000764 <__aeabi_ddiv>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001bce:	e015      	b.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0x240>
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001bd6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001bda:	f7fe fae3 	bl	80001a4 <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001bec:	f7fe fdba 	bl	8000764 <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	623a      	str	r2, [r7, #32]
 8001bf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c06:	f7fe facb 	bl	80001a0 <__aeabi_dsub>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c18:	f7fe fda4 	bl	8000764 <__aeabi_ddiv>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	f7fe ff00 	bl	8000a30 <__aeabi_dcmpgt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d024      	beq.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c3c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c40:	f7fe faae 	bl	80001a0 <__aeabi_dsub>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c52:	f7fe fd87 	bl	8000764 <__aeabi_ddiv>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001c5e:	e025      	b.n	8001cac <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8001c60:	2000077c 	.word	0x2000077c
 8001c64:	20000178 	.word	0x20000178
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	40b00000 	.word	0x40b00000
 8001c70:	3ff00000 	.word	0x3ff00000
 8001c74:	40240000 	.word	0x40240000
 8001c78:	40020400 	.word	0x40020400
 8001c7c:	40900000 	.word	0x40900000
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4bad      	ldr	r3, [pc, #692]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001c86:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c8a:	f7fe fa89 	bl	80001a0 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4ba8      	ldr	r3, [pc, #672]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001c9c:	f7fe fd62 	bl	8000764 <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	61ba      	str	r2, [r7, #24]
 8001ca6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001cb4:	f7fe fe9e 	bl	80009f4 <__aeabi_dcmplt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d047      	beq.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x392>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001cc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001cc8:	f7fe fa6c 	bl	80001a4 <__adddf3>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001cda:	f7fe fd43 	bl	8000764 <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f7fe fe9f 	bl	8000a30 <__aeabi_dcmpgt>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d014      	beq.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x366>
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001cfe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d02:	f7fe fa4f 	bl	80001a4 <__adddf3>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d14:	f7fe fd26 	bl	8000764 <__aeabi_ddiv>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4692      	mov	sl, r2
 8001d1e:	469b      	mov	fp, r3
 8001d20:	e05c      	b.n	8001ddc <HAL_TIM_PeriodElapsedCallback+0x420>
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d2c:	f7fe fa3a 	bl	80001a4 <__adddf3>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d3e:	f7fe fd11 	bl	8000764 <__aeabi_ddiv>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4692      	mov	sl, r2
 8001d48:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001d4c:	e046      	b.n	8001ddc <HAL_TIM_PeriodElapsedCallback+0x420>
 8001d4e:	f04f 0200 	mov.w	r2, #0
 8001d52:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d54:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d58:	f7fe fa22 	bl	80001a0 <__aeabi_dsub>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d6a:	f7fe fcfb 	bl	8000764 <__aeabi_ddiv>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	f7fe fe57 	bl	8000a30 <__aeabi_dcmpgt>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d014      	beq.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x3f6>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001d8e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001d92:	f7fe fa05 	bl	80001a0 <__aeabi_dsub>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001da4:	f7fe fcde 	bl	8000764 <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	e014      	b.n	8001ddc <HAL_TIM_PeriodElapsedCallback+0x420>
 8001db2:	f04f 0200 	mov.w	r2, #0
 8001db6:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001db8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001dbc:	f7fe f9f0 	bl	80001a0 <__aeabi_dsub>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001dce:	f7fe fcc9 	bl	8000764 <__aeabi_ddiv>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4692      	mov	sl, r2
 8001dd8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001ddc:	4652      	mov	r2, sl
 8001dde:	465b      	mov	r3, fp
 8001de0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001de4:	f7fe fe06 	bl	80009f4 <__aeabi_dcmplt>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02c      	beq.n	8001e48 <HAL_TIM_PeriodElapsedCallback+0x48c>
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	4b52      	ldr	r3, [pc, #328]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001df4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001df8:	f7fe fcb4 	bl	8000764 <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	f7fe fe10 	bl	8000a30 <__aeabi_dcmpgt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00b      	beq.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0x472>
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e20:	f7fe fca0 	bl	8000764 <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4690      	mov	r8, r2
 8001e2a:	4699      	mov	r9, r3
 8001e2c:	e136      	b.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	4b42      	ldr	r3, [pc, #264]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e34:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e38:	f7fe fc94 	bl	8000764 <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4690      	mov	r8, r2
 8001e42:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e46:	e129      	b.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e4e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e52:	f7fe f9a7 	bl	80001a4 <__adddf3>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e64:	f7fe fc7e 	bl	8000764 <__aeabi_ddiv>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	f7fe fdda 	bl	8000a30 <__aeabi_dcmpgt>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d014      	beq.n	8001eac <HAL_TIM_PeriodElapsedCallback+0x4f0>
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001e8c:	f7fe f98a 	bl	80001a4 <__adddf3>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001e9e:	f7fe fc61 	bl	8000764 <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001eaa:	e015      	b.n	8001ed8 <HAL_TIM_PeriodElapsedCallback+0x51c>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001eb2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001eb6:	f7fe f975 	bl	80001a4 <__adddf3>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001ec8:	f7fe fc4c 	bl	8000764 <__aeabi_ddiv>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	613a      	str	r2, [r7, #16]
 8001ed2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001ede:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001ee2:	f7fe f95d 	bl	80001a0 <__aeabi_dsub>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001ef4:	f7fe fc36 	bl	8000764 <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe fd92 	bl	8000a30 <__aeabi_dcmpgt>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d016      	beq.n	8001f40 <HAL_TIM_PeriodElapsedCallback+0x584>
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f18:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f1c:	f7fe f940 	bl	80001a0 <__aeabi_dsub>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001f2e:	f7fe fc19 	bl	8000764 <__aeabi_ddiv>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f3a:	e017      	b.n	8001f6c <HAL_TIM_PeriodElapsedCallback+0x5b0>
 8001f3c:	40900000 	.word	0x40900000
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001f46:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f4a:	f7fe f929 	bl	80001a0 <__aeabi_dsub>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001f5c:	f7fe fc02 	bl	8000764 <__aeabi_ddiv>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f74:	f7fe fd3e 	bl	80009f4 <__aeabi_dcmplt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d047      	beq.n	800200e <HAL_TIM_PeriodElapsedCallback+0x652>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b5b      	ldr	r3, [pc, #364]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001f84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f88:	f7fe f90c 	bl	80001a4 <__adddf3>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001f9a:	f7fe fbe3 	bl	8000764 <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f7fe fd3f 	bl	8000a30 <__aeabi_dcmpgt>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x626>
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001fbe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fc2:	f7fe f8ef 	bl	80001a4 <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001fd4:	f7fe fbc6 	bl	8000764 <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	e05c      	b.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001fe8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001fec:	f7fe f8da 	bl	80001a4 <__adddf3>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001ffe:	f7fe fbb1 	bl	8000764 <__aeabi_ddiv>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4690      	mov	r8, r2
 8002008:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800200c:	e046      	b.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6e0>
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8002014:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002018:	f7fe f8c2 	bl	80001a0 <__aeabi_dsub>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800202a:	f7fe fb9b 	bl	8000764 <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	f7fe fcf7 	bl	8000a30 <__aeabi_dcmpgt>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d014      	beq.n	8002072 <HAL_TIM_PeriodElapsedCallback+0x6b6>
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	4b28      	ldr	r3, [pc, #160]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800204e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002052:	f7fe f8a5 	bl	80001a0 <__aeabi_dsub>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8002064:	f7fe fb7e 	bl	8000764 <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4690      	mov	r8, r2
 800206e:	4699      	mov	r9, r3
 8002070:	e014      	b.n	800209c <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b1e      	ldr	r3, [pc, #120]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8002078:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800207c:	f7fe f890 	bl	80001a0 <__aeabi_dsub>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800208e:	f7fe fb69 	bl	8000764 <__aeabi_ddiv>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4690      	mov	r8, r2
 8002098:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800209e:	e9c3 8900 	strd	r8, r9, [r3]
		HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, !instruction);  // disable stepper when no instruction is loaded
		set_motor_setting(instruction);
		step_gain = 0;
		// TODO: build stepper function here for div above
	}
	return;
 80020a2:	e021      	b.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x72c>
		instruction = get_next_queue_ptr();  // decrements queue_size and increments queue_index
 80020a4:	f7ff fc60 	bl	8001968 <get_next_queue_ptr>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80020ac:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, !instruction);  // disable stepper when no instruction is loaded
 80020ae:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bf0c      	ite	eq
 80020b6:	2301      	moveq	r3, #1
 80020b8:	2300      	movne	r3, #0
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c2:	480e      	ldr	r0, [pc, #56]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x740>)
 80020c4:	f002 f874 	bl	80041b0 <HAL_GPIO_WritePin>
		set_motor_setting(instruction);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff faff 	bl	80016d0 <set_motor_setting>
		step_gain = 0;
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x738>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9c1 2300 	strd	r2, r3, [r1]
	return;
 80020e0:	e002      	b.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x72c>
	if (htim != &htim10) { return; }
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <HAL_TIM_PeriodElapsedCallback+0x72c>
	if (state.queue_size == 0) { return; }
 80020e6:	bf00      	nop
}
 80020e8:	3740      	adds	r7, #64	; 0x40
 80020ea:	46bd      	mov	sp, r7
 80020ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020f0:	40900000 	.word	0x40900000
 80020f4:	200005c8 	.word	0x200005c8
 80020f8:	20000000 	.word	0x20000000
 80020fc:	40020400 	.word	0x40020400

08002100 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	// only hspi1 is used so there is no need to check
	void* dst = get_next_empty_queue_ptr();  // increments queue_size
 8002108:	f7ff fc0e 	bl	8001928 <get_next_empty_queue_ptr>
 800210c:	60f8      	str	r0, [r7, #12]
	if (!dst) { return; }  // exit if queue is full
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_SPI_TxRxCpltCallback+0x2c>
	memcpy(dst, &instruction_input, sizeof(MCU_Instruction));
 8002114:	2220      	movs	r2, #32
 8002116:	4907      	ldr	r1, [pc, #28]	; (8002134 <HAL_SPI_TxRxCpltCallback+0x34>)
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f006 faa1 	bl	8008660 <memcpy>
	state.queue_size++;
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002120:	7f9b      	ldrb	r3, [r3, #30]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <HAL_SPI_TxRxCpltCallback+0x38>)
 8002128:	779a      	strb	r2, [r3, #30]
 800212a:	e000      	b.n	800212e <HAL_SPI_TxRxCpltCallback+0x2e>
	if (!dst) { return; }  // exit if queue is full
 800212c:	bf00      	nop
}
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000598 	.word	0x20000598
 8002138:	20000178 	.word	0x20000178
 800213c:	00000000 	.word	0x00000000

08002140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002140:	b598      	push	{r3, r4, r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8002144:	f7fe fdd8 	bl	8000cf8 <AS5600_new>
 8002148:	4603      	mov	r3, r0
 800214a:	4a61      	ldr	r2, [pc, #388]	; (80022d0 <main+0x190>)
 800214c:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 800214e:	4b60      	ldr	r3, [pc, #384]	; (80022d0 <main+0x190>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a60      	ldr	r2, [pc, #384]	; (80022d4 <main+0x194>)
 8002154:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8002156:	4b5e      	ldr	r3, [pc, #376]	; (80022d0 <main+0x190>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a5f      	ldr	r2, [pc, #380]	; (80022d8 <main+0x198>)
 800215c:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <main+0x190>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 8002166:	4b5a      	ldr	r3, [pc, #360]	; (80022d0 <main+0x190>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216e:	f000 fc51 	bl	8002a14 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002172:	f000 f8c9 	bl	8002308 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002176:	f7ff f959 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 800217a:	f7ff f927 	bl	80013cc <MX_DMA_Init>
  MX_SPI1_Init();
 800217e:	f000 f933 	bl	80023e8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002182:	f7ff fa09 	bl	8001598 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002186:	f7fe fcdd 	bl	8000b44 <MX_ADC1_Init>
  MX_TIM2_Init();
 800218a:	f000 fb0b 	bl	80027a4 <MX_TIM2_Init>
  MX_TIM5_Init();
 800218e:	f000 fb55 	bl	800283c <MX_TIM5_Init>
  MX_TIM10_Init();
 8002192:	f000 fba1 	bl	80028d8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// disable motor driver
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800219c:	484e      	ldr	r0, [pc, #312]	; (80022d8 <main+0x198>)
 800219e:	f002 f807 	bl	80041b0 <HAL_GPIO_WritePin>

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 80021a2:	bf00      	nop
 80021a4:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <main+0x190>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe fdae 	bl	8000d0a <AS5600_init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f7      	bne.n	80021a4 <main+0x64>

	state.vel = 0.0;
 80021b4:	4949      	ldr	r1, [pc, #292]	; (80022dc <main+0x19c>)
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	e9c1 2300 	strd	r2, r3, [r1]
	state.acc = 0.0;
 80021c2:	4946      	ldr	r1, [pc, #280]	; (80022dc <main+0x19c>)
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	state.instrution_id = 0;
 80021d0:	4b42      	ldr	r3, [pc, #264]	; (80022dc <main+0x19c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	835a      	strh	r2, [r3, #26]
	state.queue_size = 0;
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <main+0x19c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	779a      	strb	r2, [r3, #30]
	state.queue_index = 0;
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <main+0x19c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	77da      	strb	r2, [r3, #31]
	state.micro_step = 0;
 80021e2:	4a3e      	ldr	r2, [pc, #248]	; (80022dc <main+0x19c>)
 80021e4:	7f13      	ldrb	r3, [r2, #28]
 80021e6:	f36f 0301 	bfc	r3, #0, #2
 80021ea:	7713      	strb	r3, [r2, #28]
	state.srd_mode = 0;
 80021ec:	4a3b      	ldr	r2, [pc, #236]	; (80022dc <main+0x19c>)
 80021ee:	7f13      	ldrb	r3, [r2, #28]
 80021f0:	f36f 0382 	bfc	r3, #2, #1
 80021f4:	7713      	strb	r3, [r2, #28]
	// initialize the state struct using AS5600 position values
	AS5600_get_angle(sensor, &state.raw_angle);
 80021f6:	4b36      	ldr	r3, [pc, #216]	; (80022d0 <main+0x190>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4939      	ldr	r1, [pc, #228]	; (80022e0 <main+0x1a0>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f8a6 	bl	800134e <AS5600_get_angle>
	state.pos.angle =	state.raw_angle;
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <main+0x19c>)
 8002204:	8b1b      	ldrh	r3, [r3, #24]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	b299      	uxth	r1, r3
 800220e:	4a33      	ldr	r2, [pc, #204]	; (80022dc <main+0x19c>)
 8002210:	8a53      	ldrh	r3, [r2, #18]
 8002212:	f361 130f 	bfi	r3, r1, #4, #12
 8002216:	8253      	strh	r3, [r2, #18]
	AS5600_pos_f64 =	state.raw_angle;  // set the current angle to the most accurate value for the euler method
 8002218:	4b30      	ldr	r3, [pc, #192]	; (80022dc <main+0x19c>)
 800221a:	8b1b      	ldrh	r3, [r3, #24]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f8fc 	bl	800041c <__aeabi_ui2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	492e      	ldr	r1, [pc, #184]	; (80022e4 <main+0x1a4>)
 800222a:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// TODO: use flag pin to tell CTRL where MCU is in initialization cycle
	// start communication with CTRL
	HAL_TIM_Base_Start(&htim2);  // start timer_2 (for delays)
 800222e:	482e      	ldr	r0, [pc, #184]	; (80022e8 <main+0x1a8>)
 8002230:	f005 fda2 	bl	8007d78 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5 (for simulation time keeping)
 8002234:	482d      	ldr	r0, [pc, #180]	; (80022ec <main+0x1ac>)
 8002236:	f005 fd9f 	bl	8007d78 <HAL_TIM_Base_Start>

	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*)&state, (uint8_t*)&instruction_input, 32);
 800223a:	2320      	movs	r3, #32
 800223c:	4a2c      	ldr	r2, [pc, #176]	; (80022f0 <main+0x1b0>)
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <main+0x19c>)
 8002240:	482c      	ldr	r0, [pc, #176]	; (80022f4 <main+0x1b4>)
 8002242:	f005 f90f 	bl	8007464 <HAL_SPI_TransmitReceive_DMA>

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&state.raw_angle, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	4925      	ldr	r1, [pc, #148]	; (80022e0 <main+0x1a0>)
 800224a:	482b      	ldr	r0, [pc, #172]	; (80022f8 <main+0x1b8>)
 800224c:	f000 fda8 	bl	8002da0 <HAL_ADC_Start_DMA>

	//instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function

	TIM5->CNT = 0;
 8002250:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <main+0x1bc>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt) [100Hz]
 8002256:	482a      	ldr	r0, [pc, #168]	; (8002300 <main+0x1c0>)
 8002258:	f005 fde8 	bl	8007e2c <HAL_TIM_Base_Start_IT>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <main+0x1c4>)
 800225e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002262:	a317      	add	r3, pc, #92	; (adr r3, 80022c0 <main+0x180>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fbc4 	bl	80009f4 <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d124      	bne.n	80022bc <main+0x17c>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 8002272:	4b24      	ldr	r3, [pc, #144]	; (8002304 <main+0x1c4>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	a113      	add	r1, pc, #76	; (adr r1, 80022c8 <main+0x188>)
 800227a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800227e:	f7fe fa71 	bl	8000764 <__aeabi_ddiv>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fbdb 	bl	8000a44 <__aeabi_d2uiz>
 800228e:	4603      	mov	r3, r0
 8002290:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002298:	480f      	ldr	r0, [pc, #60]	; (80022d8 <main+0x198>)
 800229a:	f001 ff89 	bl	80041b0 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 800229e:	4623      	mov	r3, r4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f9ff 	bl	80016a4 <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ac:	480a      	ldr	r0, [pc, #40]	; (80022d8 <main+0x198>)
 80022ae:	f001 ff7f 	bl	80041b0 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 80022b2:	4623      	mov	r3, r4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f9f5 	bl	80016a4 <delay_us>
 80022ba:	e7cf      	b.n	800225c <main+0x11c>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 80022bc:	bf00      	nop
	while (1) {
 80022be:	e7cd      	b.n	800225c <main+0x11c>
 80022c0:	eb1c432d 	.word	0xeb1c432d
 80022c4:	3f1a36e2 	.word	0x3f1a36e2
 80022c8:	00000000 	.word	0x00000000
 80022cc:	4052c000 	.word	0x4052c000
 80022d0:	200005b8 	.word	0x200005b8
 80022d4:	20000124 	.word	0x20000124
 80022d8:	40020400 	.word	0x40020400
 80022dc:	20000178 	.word	0x20000178
 80022e0:	20000190 	.word	0x20000190
 80022e4:	200005c0 	.word	0x200005c0
 80022e8:	200006ec 	.word	0x200006ec
 80022ec:	20000734 	.word	0x20000734
 80022f0:	20000598 	.word	0x20000598
 80022f4:	200005d0 	.word	0x200005d0
 80022f8:	2000007c 	.word	0x2000007c
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	2000077c 	.word	0x2000077c
 8002304:	200005c8 	.word	0x200005c8

08002308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b094      	sub	sp, #80	; 0x50
 800230c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800230e:	f107 0320 	add.w	r3, r7, #32
 8002312:	2230      	movs	r2, #48	; 0x30
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f006 f9d4 	bl	80086c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <SystemClock_Config+0xc8>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <SystemClock_Config+0xc8>)
 8002336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233a:	6413      	str	r3, [r2, #64]	; 0x40
 800233c:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <SystemClock_Config+0xc8>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002348:	2300      	movs	r3, #0
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <SystemClock_Config+0xcc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a20      	ldr	r2, [pc, #128]	; (80023d4 <SystemClock_Config+0xcc>)
 8002352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <SystemClock_Config+0xcc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002364:	2302      	movs	r3, #2
 8002366:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002368:	2301      	movs	r3, #1
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800236c:	2310      	movs	r3, #16
 800236e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002370:	2302      	movs	r3, #2
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002374:	2300      	movs	r3, #0
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002378:	2310      	movs	r3, #16
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800237c:	23c0      	movs	r3, #192	; 0xc0
 800237e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002380:	2302      	movs	r3, #2
 8002382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002384:	2304      	movs	r3, #4
 8002386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fb9b 	bl	8006ac8 <HAL_RCC_OscConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002398:	f000 f81e 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239c:	230f      	movs	r3, #15
 800239e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a0:	2302      	movs	r3, #2
 80023a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2103      	movs	r1, #3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f004 fdfd 	bl	8006fb8 <HAL_RCC_ClockConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80023c4:	f000 f808 	bl	80023d8 <Error_Handler>
  }
}
 80023c8:	bf00      	nop
 80023ca:	3750      	adds	r7, #80	; 0x50
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <MX_SPI1_Init+0x5c>)
 80023ee:	4a16      	ldr	r2, [pc, #88]	; (8002448 <MX_SPI1_Init+0x60>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_SPI1_Init+0x5c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <MX_SPI1_Init+0x5c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002400:	2200      	movs	r2, #0
 8002402:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_SPI1_Init+0x5c>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_SPI1_Init+0x5c>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_SPI1_Init+0x5c>)
 800242a:	220a      	movs	r2, #10
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_SPI1_Init+0x5c>)
 8002430:	f004 ff8e 	bl	8007350 <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800243a:	f7ff ffcd 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200005d0 	.word	0x200005d0
 8002448:	40013000 	.word	0x40013000

0800244c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a52      	ldr	r2, [pc, #328]	; (80025b4 <HAL_SPI_MspInit+0x168>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 809d 	bne.w	80025aa <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	4b50      	ldr	r3, [pc, #320]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	4a4f      	ldr	r2, [pc, #316]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 800247a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247e:	6453      	str	r3, [r2, #68]	; 0x44
 8002480:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 80024a8:	23f0      	movs	r3, #240	; 0xf0
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024b8:	2305      	movs	r3, #5
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	4619      	mov	r1, r3
 80024c2:	483e      	ldr	r0, [pc, #248]	; (80025bc <HAL_SPI_MspInit+0x170>)
 80024c4:	f001 fcf0 	bl	8003ea8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80024c8:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024ca:	4a3e      	ldr	r2, [pc, #248]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024d0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80024d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80024f6:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 8002500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002504:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 8002508:	2200      	movs	r2, #0
 800250a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800250c:	482c      	ldr	r0, [pc, #176]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 800250e:	f001 f92b 	bl	8003768 <HAL_DMA_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002518:	f7ff ff5e 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a28      	ldr	r2, [pc, #160]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 8002520:	649a      	str	r2, [r3, #72]	; 0x48
 8002522:	4a27      	ldr	r2, [pc, #156]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 800252a:	4a28      	ldr	r2, [pc, #160]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800252c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800252e:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002530:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002534:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002548:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800254a:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 800254c:	2200      	movs	r2, #0
 800254e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002550:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002552:	2200      	movs	r2, #0
 8002554:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002556:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002560:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002564:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002568:	2204      	movs	r2, #4
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 800256e:	2203      	movs	r2, #3
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002574:	2200      	movs	r2, #0
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 800257a:	2200      	movs	r2, #0
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800257e:	4812      	ldr	r0, [pc, #72]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002580:	f001 f8f2 	bl	8003768 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 800258a:	f7ff ff25 	bl	80023d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002592:	64da      	str	r2, [r3, #76]	; 0x4c
 8002594:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2023      	movs	r0, #35	; 0x23
 80025a0:	f001 f8ab 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025a4:	2023      	movs	r0, #35	; 0x23
 80025a6:	f001 f8c4 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013000 	.word	0x40013000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	20000628 	.word	0x20000628
 80025c4:	40026458 	.word	0x40026458
 80025c8:	20000688 	.word	0x20000688
 80025cc:	40026410 	.word	0x40026410

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_MspInit+0x4c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_MspInit+0x4c>)
 80025e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_MspInit+0x4c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_MspInit+0x4c>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <HAL_MspInit+0x4c>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_MspInit+0x4c>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800

08002620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002624:	e7fe      	b.n	8002624 <NMI_Handler+0x4>

08002626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800262a:	e7fe      	b.n	800262a <HardFault_Handler+0x4>

0800262c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002630:	e7fe      	b.n	8002630 <MemManage_Handler+0x4>

08002632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <BusFault_Handler+0x4>

08002638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <UsageFault_Handler+0x4>

0800263e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266c:	f000 fa24 	bl	8002ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}

08002674 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <ADC_IRQHandler+0x10>)
 800267a:	f000 fa80 	bl	8002b7e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000007c 	.word	0x2000007c

08002688 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800268e:	f005 fc2f 	bl	8007ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	2000077c 	.word	0x2000077c

0800269c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <I2C1_EV_IRQHandler+0x10>)
 80026a2:	f002 fa03 	bl	8004aac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000124 	.word	0x20000124

080026b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <I2C1_ER_IRQHandler+0x10>)
 80026b6:	f002 fb4c 	bl	8004d52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000124 	.word	0x20000124

080026c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <SPI1_IRQHandler+0x10>)
 80026ca:	f004 ffcd 	bl	8007668 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	200005d0 	.word	0x200005d0

080026d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <DMA2_Stream0_IRQHandler+0x10>)
 80026de:	f001 f96b 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000688 	.word	0x20000688

080026ec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80026f0:	4802      	ldr	r0, [pc, #8]	; (80026fc <DMA2_Stream3_IRQHandler+0x10>)
 80026f2:	f001 f961 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000628 	.word	0x20000628

08002700 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <DMA2_Stream4_IRQHandler+0x10>)
 8002706:	f001 f957 	bl	80039b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200000c4 	.word	0x200000c4

08002714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800271c:	4a14      	ldr	r2, [pc, #80]	; (8002770 <_sbrk+0x5c>)
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_sbrk+0x60>)
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <_sbrk+0x64>)
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <_sbrk+0x68>)
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d207      	bcs.n	8002754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002744:	f005 ffb8 	bl	80086b8 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	220c      	movs	r2, #12
 800274c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002752:	e009      	b.n	8002768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800275a:	4b07      	ldr	r3, [pc, #28]	; (8002778 <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	4a05      	ldr	r2, [pc, #20]	; (8002778 <_sbrk+0x64>)
 8002764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002766:	68fb      	ldr	r3, [r7, #12]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20020000 	.word	0x20020000
 8002774:	00000400 	.word	0x00000400
 8002778:	200006e8 	.word	0x200006e8
 800277c:	20000910 	.word	0x20000910

08002780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <SystemInit+0x20>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <SystemInit+0x20>)
 800278c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b8:	463b      	mov	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <MX_TIM2_Init+0x94>)
 80027c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <MX_TIM2_Init+0x94>)
 80027ca:	225f      	movs	r2, #95	; 0x5f
 80027cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <MX_TIM2_Init+0x94>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80027d4:	4b18      	ldr	r3, [pc, #96]	; (8002838 <MX_TIM2_Init+0x94>)
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <MX_TIM2_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <MX_TIM2_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e8:	4813      	ldr	r0, [pc, #76]	; (8002838 <MX_TIM2_Init+0x94>)
 80027ea:	f005 fa75 	bl	8007cd8 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027f4:	f7ff fdf0 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	4619      	mov	r1, r3
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <MX_TIM2_Init+0x94>)
 8002806:	f005 fc7b 	bl	8008100 <HAL_TIM_ConfigClockSource>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002810:	f7ff fde2 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800281c:	463b      	mov	r3, r7
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_TIM2_Init+0x94>)
 8002822:	f005 fe77 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800282c:	f7ff fdd4 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200006ec 	.word	0x200006ec

0800283c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002850:	463b      	mov	r3, r7
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <MX_TIM5_Init+0x94>)
 800285a:	4a1e      	ldr	r2, [pc, #120]	; (80028d4 <MX_TIM5_Init+0x98>)
 800285c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <MX_TIM5_Init+0x94>)
 8002860:	225f      	movs	r2, #95	; 0x5f
 8002862:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <MX_TIM5_Init+0x94>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <MX_TIM5_Init+0x94>)
 800286c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002870:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <MX_TIM5_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <MX_TIM5_Init+0x94>)
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800287e:	4814      	ldr	r0, [pc, #80]	; (80028d0 <MX_TIM5_Init+0x94>)
 8002880:	f005 fa2a 	bl	8007cd8 <HAL_TIM_Base_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800288a:	f7ff fda5 	bl	80023d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4619      	mov	r1, r3
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <MX_TIM5_Init+0x94>)
 800289c:	f005 fc30 	bl	8008100 <HAL_TIM_ConfigClockSource>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80028a6:	f7ff fd97 	bl	80023d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028b2:	463b      	mov	r3, r7
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <MX_TIM5_Init+0x94>)
 80028b8:	f005 fe2c 	bl	8008514 <HAL_TIMEx_MasterConfigSynchronization>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80028c2:	f7ff fd89 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000734 	.word	0x20000734
 80028d4:	40000c00 	.word	0x40000c00

080028d8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028de:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <MX_TIM10_Init+0x40>)
 80028e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028e4:	225f      	movs	r2, #95	; 0x5f
 80028e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028f0:	2264      	movs	r2, #100	; 0x64
 80028f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_TIM10_Init+0x3c>)
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002900:	4804      	ldr	r0, [pc, #16]	; (8002914 <MX_TIM10_Init+0x3c>)
 8002902:	f005 f9e9 	bl	8007cd8 <HAL_TIM_Base_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 800290c:	f7ff fd64 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	2000077c 	.word	0x2000077c
 8002918:	40014400 	.word	0x40014400

0800291c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292c:	d10e      	bne.n	800294c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800294a:	e02e      	b.n	80029aa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d10e      	bne.n	8002974 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
}
 8002972:	e01a      	b.n	80029aa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a10      	ldr	r2, [pc, #64]	; (80029bc <HAL_TIM_Base_MspInit+0xa0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d115      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298c:	6453      	str	r3, [r2, #68]	; 0x44
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <HAL_TIM_Base_MspInit+0x98>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2100      	movs	r1, #0
 800299e:	2019      	movs	r0, #25
 80029a0:	f000 feab 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029a4:	2019      	movs	r0, #25
 80029a6:	f000 fec4 	bl	8003732 <HAL_NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40000c00 	.word	0x40000c00
 80029bc:	40014400 	.word	0x40014400

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c4:	480d      	ldr	r0, [pc, #52]	; (80029fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c6:	490e      	ldr	r1, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029cc:	e002      	b.n	80029d4 <LoopCopyDataInit>

080029ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029d2:	3304      	adds	r3, #4

080029d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d8:	d3f9      	bcc.n	80029ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029dc:	4c0b      	ldr	r4, [pc, #44]	; (8002a0c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029e0:	e001      	b.n	80029e6 <LoopFillZerobss>

080029e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e4:	3204      	adds	r2, #4

080029e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e8:	d3fb      	bcc.n	80029e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ea:	f7ff fec9 	bl	8002780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f005 fe13 	bl	8008618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7ff fba5 	bl	8002140 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a00:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002a04:	08008b4c 	.word	0x08008b4c
  ldr r2, =_sbss
 8002a08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002a0c:	20000910 	.word	0x20000910

08002a10 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <DMA1_Stream0_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_Init+0x40>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_Init+0x40>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_Init+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <HAL_Init+0x40>)
 8002a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_Init+0x40>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_Init+0x40>)
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 fe51 	bl	80036e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a42:	200f      	movs	r0, #15
 8002a44:	f000 f808 	bl	8002a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a48:	f7ff fdc2 	bl	80025d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023c00 	.word	0x40023c00

08002a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_InitTick+0x54>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_InitTick+0x58>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fe69 	bl	800374e <HAL_SYSTICK_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00e      	b.n	8002aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d80a      	bhi.n	8002aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a94:	f000 fe31 	bl	80036fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a98:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_InitTick+0x5c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	20000008 	.word	0x20000008

08002ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_IncTick+0x20>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x24>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <HAL_IncTick+0x24>)
 8002aca:	6013      	str	r3, [r2, #0]
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	200007c4 	.word	0x200007c4

08002ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_GetTick+0x14>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	200007c4 	.word	0x200007c4

08002af8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e033      	b.n	8002b76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f866 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b3e:	f023 0302 	bic.w	r3, r3, #2
 8002b42:	f043 0202 	orr.w	r2, r3, #2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fb72 	bl	8003234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
 8002b66:	e001      	b.n	8002b6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d049      	beq.n	8002c48 <HAL_ADC_IRQHandler+0xca>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d046      	beq.n	8002c48 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d12b      	bne.n	8002c38 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d127      	bne.n	8002c38 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d119      	bne.n	8002c38 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0220 	bic.w	r2, r2, #32
 8002c12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f9a1 	bl	8002f80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0212 	mvn.w	r2, #18
 8002c46:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c56:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d057      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x190>
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d054      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d139      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d12b      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d124      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11d      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d119      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cd8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0201 	orr.w	r2, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fc16 	bl	8003530 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 020c 	mvn.w	r2, #12
 8002d0c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_ADC_IRQHandler+0x1d6>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10d      	bne.n	8002d54 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f92f 	bl	8002fa8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f06f 0201 	mvn.w	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d62:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d015      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x218>
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d012      	beq.n	8002d96 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f043 0202 	orr.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f06f 0220 	mvn.w	r2, #32
 8002d84:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f918 	bl	8002fbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0220 	mvn.w	r2, #32
 8002d94:	601a      	str	r2, [r3, #0]
  }
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Start_DMA+0x1e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ce      	b.n	8002f5c <HAL_ADC_Start_DMA+0x1bc>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d018      	beq.n	8002e06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002de4:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <HAL_ADC_Start_DMA+0x1c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_ADC_Start_DMA+0x1c8>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0c9a      	lsrs	r2, r3, #18
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002df8:	e002      	b.n	8002e00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f9      	bne.n	8002dfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e14:	d107      	bne.n	8002e26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e24:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	f040 8086 	bne.w	8002f42 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f023 0206 	bic.w	r2, r3, #6
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
 8002e82:	e002      	b.n	8002e8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e92:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_ADC_Start_DMA+0x1cc>)
 8002e94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4a35      	ldr	r2, [pc, #212]	; (8002f70 <HAL_ADC_Start_DMA+0x1d0>)
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea2:	4a34      	ldr	r2, [pc, #208]	; (8002f74 <HAL_ADC_Start_DMA+0x1d4>)
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	4a33      	ldr	r2, [pc, #204]	; (8002f78 <HAL_ADC_Start_DMA+0x1d8>)
 8002eac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ec6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	334c      	adds	r3, #76	; 0x4c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f000 fcec 	bl	80038c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10f      	bne.n	8002f18 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d129      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	e020      	b.n	8002f5a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <HAL_ADC_Start_DMA+0x1dc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d11b      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x1ba>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	e00b      	b.n	8002f5a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000004 	.word	0x20000004
 8002f68:	431bde83 	.word	0x431bde83
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	0800342d 	.word	0x0800342d
 8002f74:	080034e7 	.word	0x080034e7
 8002f78:	08003503 	.word	0x08003503
 8002f7c:	40012000 	.word	0x40012000

08002f80 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1c>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e113      	b.n	8003214 <HAL_ADC_ConfigChannel+0x244>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	d925      	bls.n	8003048 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68d9      	ldr	r1, [r3, #12]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	3b1e      	subs	r3, #30
 8003012:	2207      	movs	r2, #7
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43da      	mvns	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	400a      	ands	r2, r1
 8003020:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	4618      	mov	r0, r3
 8003034:	4603      	mov	r3, r0
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4403      	add	r3, r0
 800303a:	3b1e      	subs	r3, #30
 800303c:	409a      	lsls	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	e022      	b.n	800308e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6919      	ldr	r1, [r3, #16]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	2207      	movs	r2, #7
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43da      	mvns	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	400a      	ands	r2, r1
 800306a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6919      	ldr	r1, [r3, #16]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4618      	mov	r0, r3
 800307e:	4603      	mov	r3, r0
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4403      	add	r3, r0
 8003084:	409a      	lsls	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d824      	bhi.n	80030e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b05      	subs	r3, #5
 80030a8:	221f      	movs	r2, #31
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4618      	mov	r0, r3
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	3b05      	subs	r3, #5
 80030d2:	fa00 f203 	lsl.w	r2, r0, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34
 80030de:	e04c      	b.n	800317a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d824      	bhi.n	8003132 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b23      	subs	r3, #35	; 0x23
 80030fa:	221f      	movs	r2, #31
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43da      	mvns	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	400a      	ands	r2, r1
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	3b23      	subs	r3, #35	; 0x23
 8003124:	fa00 f203 	lsl.w	r2, r0, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
 8003130:	e023      	b.n	800317a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b41      	subs	r3, #65	; 0x41
 8003144:	221f      	movs	r2, #31
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	400a      	ands	r2, r1
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4618      	mov	r0, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b41      	subs	r3, #65	; 0x41
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800317a:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_ADC_ConfigChannel+0x250>)
 800317c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a28      	ldr	r2, [pc, #160]	; (8003224 <HAL_ADC_ConfigChannel+0x254>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10f      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1d8>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b12      	cmp	r3, #18
 800318e:	d10b      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_ADC_ConfigChannel+0x254>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d12b      	bne.n	800320a <HAL_ADC_ConfigChannel+0x23a>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <HAL_ADC_ConfigChannel+0x258>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0x1f4>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b11      	cmp	r3, #17
 80031c2:	d122      	bne.n	800320a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_ADC_ConfigChannel+0x258>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d111      	bne.n	800320a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031e6:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_ADC_ConfigChannel+0x25c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a11      	ldr	r2, [pc, #68]	; (8003230 <HAL_ADC_ConfigChannel+0x260>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9a      	lsrs	r2, r3, #18
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031fc:	e002      	b.n	8003204 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	40012300 	.word	0x40012300
 8003224:	40012000 	.word	0x40012000
 8003228:	10000012 	.word	0x10000012
 800322c:	20000004 	.word	0x20000004
 8003230:	431bde83 	.word	0x431bde83

08003234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800323c:	4b79      	ldr	r3, [pc, #484]	; (8003424 <ADC_Init+0x1f0>)
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	021a      	lsls	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800328c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	4a58      	ldr	r2, [pc, #352]	; (8003428 <ADC_Init+0x1f4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6899      	ldr	r1, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6899      	ldr	r1, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e00f      	b.n	8003332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003330:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0202 	bic.w	r2, r2, #2
 8003340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7e1b      	ldrb	r3, [r3, #24]
 800334c:	005a      	lsls	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800337e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	3b01      	subs	r3, #1
 800338c:	035a      	lsls	r2, r3, #13
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	e007      	b.n	80033a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	051a      	lsls	r2, r3, #20
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ea:	025a      	lsls	r2, r3, #9
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	029a      	lsls	r2, r3, #10
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	40012300 	.word	0x40012300
 8003428:	0f000001 	.word	0x0f000001

0800342c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003442:	2b00      	cmp	r3, #0
 8003444:	d13c      	bne.n	80034c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d12b      	bne.n	80034b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003464:	2b00      	cmp	r3, #0
 8003466:	d127      	bne.n	80034b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003480:	2b00      	cmp	r3, #0
 8003482:	d119      	bne.n	80034b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0220 	bic.w	r2, r2, #32
 8003492:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f7ff fd61 	bl	8002f80 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034be:	e00e      	b.n	80034de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f7ff fd75 	bl	8002fbc <HAL_ADC_ErrorCallback>
}
 80034d2:	e004      	b.n	80034de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	4798      	blx	r3
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fd4d 	bl	8002f94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2240      	movs	r2, #64	; 0x40
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0204 	orr.w	r2, r3, #4
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff fd4a 	bl	8002fbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800356c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	60d3      	str	r3, [r2, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 0307 	and.w	r3, r3, #7
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db0b      	blt.n	80035d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4907      	ldr	r1, [pc, #28]	; (80035e0 <__NVIC_EnableIRQ+0x38>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2001      	movs	r0, #1
 80035ca:	fa00 f202 	lsl.w	r2, r0, r2
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	db0a      	blt.n	800360e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	490c      	ldr	r1, [pc, #48]	; (8003630 <__NVIC_SetPriority+0x4c>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	440b      	add	r3, r1
 8003608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800360c:	e00a      	b.n	8003624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4908      	ldr	r1, [pc, #32]	; (8003634 <__NVIC_SetPriority+0x50>)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	3b04      	subs	r3, #4
 800361c:	0112      	lsls	r2, r2, #4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	440b      	add	r3, r1
 8003622:	761a      	strb	r2, [r3, #24]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000e100 	.word	0xe000e100
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	2b04      	cmp	r3, #4
 8003654:	bf28      	it	cs
 8003656:	2304      	movcs	r3, #4
 8003658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3304      	adds	r3, #4
 800365e:	2b06      	cmp	r3, #6
 8003660:	d902      	bls.n	8003668 <NVIC_EncodePriority+0x30>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3b03      	subs	r3, #3
 8003666:	e000      	b.n	800366a <NVIC_EncodePriority+0x32>
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	401a      	ands	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43d9      	mvns	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	4313      	orrs	r3, r2
         );
}
 8003692:	4618      	mov	r0, r3
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d301      	bcc.n	80036b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <SysTick_Config+0x40>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036be:	210f      	movs	r1, #15
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c4:	f7ff ff8e 	bl	80035e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <SysTick_Config+0x40>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <SysTick_Config+0x40>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff29 	bl	8003544 <__NVIC_SetPriorityGrouping>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff ff3e 	bl	800358c <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff8e 	bl	8003638 <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff5d 	bl	80035e4 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff31 	bl	80035a8 <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffa2 	bl	80036a0 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003774:	f7ff f9b4 	bl	8002ae0 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e099      	b.n	80038b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a4:	e00f      	b.n	80037c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a6:	f7ff f99b 	bl	8002ae0 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b05      	cmp	r3, #5
 80037b2:	d908      	bls.n	80037c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e078      	b.n	80038b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e8      	bne.n	80037a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4b38      	ldr	r3, [pc, #224]	; (80038c0 <HAL_DMA_Init+0x158>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800380a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2b04      	cmp	r3, #4
 800381e:	d107      	bne.n	8003830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	4313      	orrs	r3, r2
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0307 	bic.w	r3, r3, #7
 8003846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b04      	cmp	r3, #4
 8003858:	d117      	bne.n	800388a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00e      	beq.n	800388a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa9f 	bl	8003db0 <DMA_CheckFifoParam>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2240      	movs	r2, #64	; 0x40
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003886:	2301      	movs	r3, #1
 8003888:	e016      	b.n	80038b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa56 	bl	8003d44 <DMA_CalcBaseAndBitshift>
 8003898:	4603      	mov	r3, r0
 800389a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	223f      	movs	r2, #63	; 0x3f
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	f010803f 	.word	0xf010803f

080038c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_DMA_Start_IT+0x26>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e040      	b.n	800396c <HAL_DMA_Start_IT+0xa8>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d12f      	bne.n	800395e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f9e8 	bl	8003ce8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391c:	223f      	movs	r2, #63	; 0x3f
 800391e:	409a      	lsls	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0216 	orr.w	r2, r2, #22
 8003932:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0208 	orr.w	r2, r2, #8
 800394a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e005      	b.n	800396a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003966:	2302      	movs	r3, #2
 8003968:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d004      	beq.n	8003992 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00c      	b.n	80039ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2205      	movs	r2, #5
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039c4:	4b8e      	ldr	r3, [pc, #568]	; (8003c00 <HAL_DMA_IRQHandler+0x248>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a8e      	ldr	r2, [pc, #568]	; (8003c04 <HAL_DMA_IRQHandler+0x24c>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	0a9b      	lsrs	r3, r3, #10
 80039d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	2208      	movs	r2, #8
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0204 	bic.w	r2, r2, #4
 8003a0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	2208      	movs	r2, #8
 8003a12:	409a      	lsls	r2, r3
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	f043 0201 	orr.w	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f043 0202 	orr.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a5e:	2204      	movs	r2, #4
 8003a60:	409a      	lsls	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d012      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2210      	movs	r2, #16
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d043      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d03c      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d018      	beq.n	8003afa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e01f      	b.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e016      	b.n	8003b28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0208 	bic.w	r2, r2, #8
 8003b16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 808f 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 8087 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4e:	2220      	movs	r2, #32
 8003b50:	409a      	lsls	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d136      	bne.n	8003bd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0216 	bic.w	r2, r2, #22
 8003b70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_DMA_IRQHandler+0x1da>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0208 	bic.w	r2, r2, #8
 8003ba0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	223f      	movs	r2, #63	; 0x3f
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d07e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
        }
        return;
 8003bce:	e079      	b.n	8003cc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d01d      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
 8003bfc:	e02c      	b.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
 8003bfe:	bf00      	nop
 8003c00:	20000004 	.word	0x20000004
 8003c04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
 8003c18:	e01e      	b.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10f      	bne.n	8003c48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0210 	bic.w	r2, r2, #16
 8003c36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d032      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2205      	movs	r2, #5
 8003c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d307      	bcc.n	8003ca0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f2      	bne.n	8003c84 <HAL_DMA_IRQHandler+0x2cc>
 8003c9e:	e000      	b.n	8003ca2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ca0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
 8003cc2:	e000      	b.n	8003cc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cc4:	bf00      	nop
    }
  }
}
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cda:	b2db      	uxtb	r3, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d108      	bne.n	8003d28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d26:	e007      	b.n	8003d38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	3b10      	subs	r3, #16
 8003d54:	4a14      	ldr	r2, [pc, #80]	; (8003da8 <DMA_CalcBaseAndBitshift+0x64>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	091b      	lsrs	r3, r3, #4
 8003d5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d5e:	4a13      	ldr	r2, [pc, #76]	; (8003dac <DMA_CalcBaseAndBitshift+0x68>)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4413      	add	r3, r2
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d909      	bls.n	8003d86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	1d1a      	adds	r2, r3, #4
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	659a      	str	r2, [r3, #88]	; 0x58
 8003d84:	e007      	b.n	8003d96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d8e:	f023 0303 	bic.w	r3, r3, #3
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	aaaaaaab 	.word	0xaaaaaaab
 8003dac:	08008b34 	.word	0x08008b34

08003db0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11f      	bne.n	8003e0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d856      	bhi.n	8003e7e <DMA_CheckFifoParam+0xce>
 8003dd0:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <DMA_CheckFifoParam+0x28>)
 8003dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd6:	bf00      	nop
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003dfb 	.word	0x08003dfb
 8003de0:	08003de9 	.word	0x08003de9
 8003de4:	08003e7f 	.word	0x08003e7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d046      	beq.n	8003e82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df8:	e043      	b.n	8003e82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e02:	d140      	bne.n	8003e86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e03d      	b.n	8003e86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e12:	d121      	bne.n	8003e58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d837      	bhi.n	8003e8a <DMA_CheckFifoParam+0xda>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <DMA_CheckFifoParam+0x70>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e37 	.word	0x08003e37
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	08003e49 	.word	0x08003e49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      break;
 8003e34:	e030      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d025      	beq.n	8003e8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e46:	e022      	b.n	8003e8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e50:	d11f      	bne.n	8003e92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e56:	e01c      	b.n	8003e92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d903      	bls.n	8003e66 <DMA_CheckFifoParam+0xb6>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d003      	beq.n	8003e6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e64:	e018      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6a:	e015      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e00b      	b.n	8003e96 <DMA_CheckFifoParam+0xe6>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e00a      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;
 8003e82:	bf00      	nop
 8003e84:	e008      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
 8003e88:	e006      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e004      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
    }
  } 
  
  return status; 
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e159      	b.n	8004178 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	f040 8148 	bne.w	8004172 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d005      	beq.n	8003efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d130      	bne.n	8003f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	2203      	movs	r2, #3
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f30:	2201      	movs	r2, #1
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 0201 	and.w	r2, r3, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	2b03      	cmp	r3, #3
 8003f66:	d017      	beq.n	8003f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	2203      	movs	r2, #3
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d123      	bne.n	8003fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	08da      	lsrs	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3208      	adds	r2, #8
 8003fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	08da      	lsrs	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3208      	adds	r2, #8
 8003fe6:	69b9      	ldr	r1, [r7, #24]
 8003fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 80a2 	beq.w	8004172 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b57      	ldr	r3, [pc, #348]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004036:	4a56      	ldr	r2, [pc, #344]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800403c:	6453      	str	r3, [r2, #68]	; 0x44
 800403e:	4b54      	ldr	r3, [pc, #336]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404a:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	3302      	adds	r3, #2
 8004052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	220f      	movs	r2, #15
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a49      	ldr	r2, [pc, #292]	; (8004198 <HAL_GPIO_Init+0x2f0>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d019      	beq.n	80040aa <HAL_GPIO_Init+0x202>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a48      	ldr	r2, [pc, #288]	; (800419c <HAL_GPIO_Init+0x2f4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d013      	beq.n	80040a6 <HAL_GPIO_Init+0x1fe>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a47      	ldr	r2, [pc, #284]	; (80041a0 <HAL_GPIO_Init+0x2f8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00d      	beq.n	80040a2 <HAL_GPIO_Init+0x1fa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a46      	ldr	r2, [pc, #280]	; (80041a4 <HAL_GPIO_Init+0x2fc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <HAL_GPIO_Init+0x1f6>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a45      	ldr	r2, [pc, #276]	; (80041a8 <HAL_GPIO_Init+0x300>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d101      	bne.n	800409a <HAL_GPIO_Init+0x1f2>
 8004096:	2304      	movs	r3, #4
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x204>
 800409a:	2307      	movs	r3, #7
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x204>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x204>
 80040aa:	2300      	movs	r3, #0
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040bc:	4935      	ldr	r1, [pc, #212]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ca:	4b38      	ldr	r3, [pc, #224]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ee:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f4:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_GPIO_Init+0x304>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004118:	4a24      	ldr	r2, [pc, #144]	; (80041ac <HAL_GPIO_Init+0x304>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411e:	4b23      	ldr	r3, [pc, #140]	; (80041ac <HAL_GPIO_Init+0x304>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004142:	4a1a      	ldr	r2, [pc, #104]	; (80041ac <HAL_GPIO_Init+0x304>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_GPIO_Init+0x304>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800416c:	4a0f      	ldr	r2, [pc, #60]	; (80041ac <HAL_GPIO_Init+0x304>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	f67f aea2 	bls.w	8003ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	; 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40013c00 	.word	0x40013c00

080041b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
 80041bc:	4613      	mov	r3, r2
 80041be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c0:	787b      	ldrb	r3, [r7, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041cc:	e003      	b.n	80041d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	619a      	str	r2, [r3, #24]
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e12b      	b.n	800444e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f9f2 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004236:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004248:	f003 f86e 	bl	8007328 <HAL_RCC_GetPCLK1Freq>
 800424c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4a81      	ldr	r2, [pc, #516]	; (8004458 <HAL_I2C_Init+0x274>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d807      	bhi.n	8004268 <HAL_I2C_Init+0x84>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a80      	ldr	r2, [pc, #512]	; (800445c <HAL_I2C_Init+0x278>)
 800425c:	4293      	cmp	r3, r2
 800425e:	bf94      	ite	ls
 8004260:	2301      	movls	r3, #1
 8004262:	2300      	movhi	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	e006      	b.n	8004276 <HAL_I2C_Init+0x92>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a7d      	ldr	r2, [pc, #500]	; (8004460 <HAL_I2C_Init+0x27c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0e7      	b.n	800444e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4a78      	ldr	r2, [pc, #480]	; (8004464 <HAL_I2C_Init+0x280>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0c9b      	lsrs	r3, r3, #18
 8004288:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_I2C_Init+0x274>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d802      	bhi.n	80042b8 <HAL_I2C_Init+0xd4>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	3301      	adds	r3, #1
 80042b6:	e009      	b.n	80042cc <HAL_I2C_Init+0xe8>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	4a69      	ldr	r2, [pc, #420]	; (8004468 <HAL_I2C_Init+0x284>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	3301      	adds	r3, #1
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6812      	ldr	r2, [r2, #0]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	495c      	ldr	r1, [pc, #368]	; (8004458 <HAL_I2C_Init+0x274>)
 80042e8:	428b      	cmp	r3, r1
 80042ea:	d819      	bhi.n	8004320 <HAL_I2C_Init+0x13c>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1e59      	subs	r1, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fa:	1c59      	adds	r1, r3, #1
 80042fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004300:	400b      	ands	r3, r1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_I2C_Init+0x138>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1e59      	subs	r1, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fbb1 f3f3 	udiv	r3, r1, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431a:	e051      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 800431c:	2304      	movs	r3, #4
 800431e:	e04f      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d111      	bne.n	800434c <HAL_I2C_Init+0x168>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	1e58      	subs	r0, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	440b      	add	r3, r1
 8004336:	fbb0 f3f3 	udiv	r3, r0, r3
 800433a:	3301      	adds	r3, #1
 800433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e012      	b.n	8004372 <HAL_I2C_Init+0x18e>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e58      	subs	r0, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	0099      	lsls	r1, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_I2C_Init+0x196>
 8004376:	2301      	movs	r3, #1
 8004378:	e022      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10e      	bne.n	80043a0 <HAL_I2C_Init+0x1bc>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e58      	subs	r0, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	440b      	add	r3, r1
 8004390:	fbb0 f3f3 	udiv	r3, r0, r3
 8004394:	3301      	adds	r3, #1
 8004396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	e00f      	b.n	80043c0 <HAL_I2C_Init+0x1dc>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	1e58      	subs	r0, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	0099      	lsls	r1, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	6809      	ldr	r1, [r1, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6911      	ldr	r1, [r2, #16]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68d2      	ldr	r2, [r2, #12]
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6812      	ldr	r2, [r2, #0]
 8004400:	430b      	orrs	r3, r1
 8004402:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	000186a0 	.word	0x000186a0
 800445c:	001e847f 	.word	0x001e847f
 8004460:	003d08ff 	.word	0x003d08ff
 8004464:	431bde83 	.word	0x431bde83
 8004468:	10624dd3 	.word	0x10624dd3

0800446c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	4608      	mov	r0, r1
 8004476:	4611      	mov	r1, r2
 8004478:	461a      	mov	r2, r3
 800447a:	4603      	mov	r3, r0
 800447c:	817b      	strh	r3, [r7, #10]
 800447e:	460b      	mov	r3, r1
 8004480:	813b      	strh	r3, [r7, #8]
 8004482:	4613      	mov	r3, r2
 8004484:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004486:	f7fe fb2b 	bl	8002ae0 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b20      	cmp	r3, #32
 8004496:	f040 80d9 	bne.w	800464c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	2319      	movs	r3, #25
 80044a0:	2201      	movs	r2, #1
 80044a2:	496d      	ldr	r1, [pc, #436]	; (8004658 <HAL_I2C_Mem_Write+0x1ec>)
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f002 f8e5 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044b0:	2302      	movs	r3, #2
 80044b2:	e0cc      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_I2C_Mem_Write+0x56>
 80044be:	2302      	movs	r3, #2
 80044c0:	e0c5      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d007      	beq.n	80044e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2240      	movs	r2, #64	; 0x40
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4a4d      	ldr	r2, [pc, #308]	; (800465c <HAL_I2C_Mem_Write+0x1f0>)
 8004528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800452a:	88f8      	ldrh	r0, [r7, #6]
 800452c:	893a      	ldrh	r2, [r7, #8]
 800452e:	8979      	ldrh	r1, [r7, #10]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	9301      	str	r3, [sp, #4]
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4603      	mov	r3, r0
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f001 fe74 	bl	8006228 <I2C_RequestMemoryWrite>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d052      	beq.n	80045ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e081      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f002 f966 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	2b04      	cmp	r3, #4
 8004560:	d107      	bne.n	8004572 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004570:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06b      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	781a      	ldrb	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	3b01      	subs	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d11b      	bne.n	80045ec <HAL_I2C_Mem_Write+0x180>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1aa      	bne.n	800454a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f002 f952 	bl	80068a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	2b04      	cmp	r3, #4
 800460a:	d107      	bne.n	800461c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800461a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e016      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	00100002 	.word	0x00100002
 800465c:	ffff0000 	.word	0xffff0000

08004660 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08c      	sub	sp, #48	; 0x30
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	461a      	mov	r2, r3
 800466e:	4603      	mov	r3, r0
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	460b      	mov	r3, r1
 8004674:	813b      	strh	r3, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800467a:	f7fe fa31 	bl	8002ae0 <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b20      	cmp	r3, #32
 800468a:	f040 8208 	bne.w	8004a9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	2319      	movs	r3, #25
 8004694:	2201      	movs	r2, #1
 8004696:	497b      	ldr	r1, [pc, #492]	; (8004884 <HAL_I2C_Mem_Read+0x224>)
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f001 ffeb 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
 80046a6:	e1fb      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x56>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e1f4      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d007      	beq.n	80046dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2222      	movs	r2, #34	; 0x22
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2240      	movs	r2, #64	; 0x40
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a5b      	ldr	r2, [pc, #364]	; (8004888 <HAL_I2C_Mem_Read+0x228>)
 800471c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800471e:	88f8      	ldrh	r0, [r7, #6]
 8004720:	893a      	ldrh	r2, [r7, #8]
 8004722:	8979      	ldrh	r1, [r7, #10]
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	4603      	mov	r3, r0
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f001 fe10 	bl	8006354 <I2C_RequestMemoryRead>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e1b0      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	2b00      	cmp	r3, #0
 8004744:	d113      	bne.n	800476e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	623b      	str	r3, [r7, #32]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e184      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	2b01      	cmp	r3, #1
 8004774:	d11b      	bne.n	80047ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e164      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d11b      	bne.n	80047ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d6:	2300      	movs	r3, #0
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	e144      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004804:	e138      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480a:	2b03      	cmp	r3, #3
 800480c:	f200 80f1 	bhi.w	80049f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004814:	2b01      	cmp	r3, #1
 8004816:	d123      	bne.n	8004860 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f002 f8b3 	bl	8006988 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e139      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800485e:	e10b      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004864:	2b02      	cmp	r3, #2
 8004866:	d14e      	bne.n	8004906 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	2200      	movs	r2, #0
 8004870:	4906      	ldr	r1, [pc, #24]	; (800488c <HAL_I2C_Mem_Read+0x22c>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f001 fefe 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e10e      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
 8004882:	bf00      	nop
 8004884:	00100002 	.word	0x00100002
 8004888:	ffff0000 	.word	0xffff0000
 800488c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004904:	e0b8      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2200      	movs	r2, #0
 800490e:	4966      	ldr	r1, [pc, #408]	; (8004aa8 <HAL_I2C_Mem_Read+0x448>)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f001 feaf 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0bf      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	2200      	movs	r2, #0
 800496a:	494f      	ldr	r1, [pc, #316]	; (8004aa8 <HAL_I2C_Mem_Read+0x448>)
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f001 fe81 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e091      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691a      	ldr	r2, [r3, #16]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049f0:	e042      	b.n	8004a78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f001 ffc6 	bl	8006988 <I2C_WaitOnRXNEFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e04c      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d118      	bne.n	8004a78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f47f aec2 	bne.w	8004806 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3728      	adds	r7, #40	; 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	00010004 	.word	0x00010004

08004aac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004acc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d003      	beq.n	8004ae4 <HAL_I2C_EV_IRQHandler+0x38>
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	f040 80b1 	bne.w	8004c46 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_I2C_EV_IRQHandler+0x6e>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b04:	d003      	beq.n	8004b0e <HAL_I2C_EV_IRQHandler+0x62>
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b0c:	d101      	bne.n	8004b12 <HAL_I2C_EV_IRQHandler+0x66>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_I2C_EV_IRQHandler+0x68>
 8004b12:	2300      	movs	r3, #0
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	f000 8114 	beq.w	8004d42 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x90>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f001 ffaf 	bl	8006a92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fd5e 	bl	80055f6 <I2C_Master_SB>
 8004b3a:	e083      	b.n	8004c44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d008      	beq.n	8004b58 <HAL_I2C_EV_IRQHandler+0xac>
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fdd6 	bl	8005702 <I2C_Master_ADD10>
 8004b56:	e075      	b.n	8004c44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_I2C_EV_IRQHandler+0xc8>
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fdf2 	bl	8005756 <I2C_Master_ADDR>
 8004b72:	e067      	b.n	8004c44 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d036      	beq.n	8004bec <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b8c:	f000 80db 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00d      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d008      	beq.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x10a>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9d6 	bl	8004f60 <I2C_MasterTransmit_TXE>
 8004bb4:	e046      	b.n	8004c44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 80c2 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80bc 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b21      	cmp	r3, #33	; 0x21
 8004bd2:	d103      	bne.n	8004bdc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa5f 	bl	8005098 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bda:	e0b4      	b.n	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b40      	cmp	r3, #64	; 0x40
 8004be0:	f040 80b1 	bne.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 facd 	bl	8005184 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bea:	e0ac      	b.n	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfa:	f000 80a4 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_I2C_EV_IRQHandler+0x178>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_I2C_EV_IRQHandler+0x178>
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb45 	bl	80052ac <I2C_MasterReceive_RXNE>
 8004c22:	e00f      	b.n	8004c44 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 808b 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8085 	beq.w	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fbf0 	bl	8005422 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c42:	e080      	b.n	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
 8004c44:	e07f      	b.n	8004d46 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e007      	b.n	8004c68 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00c      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d003      	beq.n	8004c8c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c8c:	69b9      	ldr	r1, [r7, #24]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 ffb0 	bl	8005bf4 <I2C_Slave_ADDR>
 8004c94:	e05a      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0310 	and.w	r3, r3, #16
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_I2C_EV_IRQHandler+0x206>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 ffea 	bl	8005c84 <I2C_Slave_STOPF>
 8004cb0:	e04c      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	2b21      	cmp	r3, #33	; 0x21
 8004cb6:	d002      	beq.n	8004cbe <HAL_I2C_EV_IRQHandler+0x212>
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	2b29      	cmp	r3, #41	; 0x29
 8004cbc:	d120      	bne.n	8004d00 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x238>
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x238>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fecb 	bl	8005a78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce2:	e032      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d02d      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0x29e>
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d028      	beq.n	8004d4a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fefa 	bl	8005af2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cfe:	e024      	b.n	8004d4a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x27a>
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <HAL_I2C_EV_IRQHandler+0x27a>
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 ff08 	bl	8005b34 <I2C_SlaveReceive_RXNE>
 8004d24:	e012      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 ff38 	bl	8005bb0 <I2C_SlaveReceive_BTF>
 8004d40:	e004      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08a      	sub	sp, #40	; 0x28
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <HAL_I2C_ER_IRQHandler+0x4a>
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d9a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00d      	beq.n	8004dc2 <HAL_I2C_ER_IRQHandler+0x70>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004dc0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03e      	beq.n	8004e4a <HAL_I2C_ER_IRQHandler+0xf8>
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d039      	beq.n	8004e4a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004dd6:	7efb      	ldrb	r3, [r7, #27]
 8004dd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004df0:	7ebb      	ldrb	r3, [r7, #26]
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d112      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xca>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10f      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xca>
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	2b21      	cmp	r3, #33	; 0x21
 8004e00:	d008      	beq.n	8004e14 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e02:	7cfb      	ldrb	r3, [r7, #19]
 8004e04:	2b29      	cmp	r3, #41	; 0x29
 8004e06:	d005      	beq.n	8004e14 <HAL_I2C_ER_IRQHandler+0xc2>
 8004e08:	7cfb      	ldrb	r3, [r7, #19]
 8004e0a:	2b28      	cmp	r3, #40	; 0x28
 8004e0c:	d106      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b21      	cmp	r3, #33	; 0x21
 8004e12:	d103      	bne.n	8004e1c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 f865 	bl	8005ee4 <I2C_Slave_AF>
 8004e1a:	e016      	b.n	8004e4a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f043 0304 	orr.w	r3, r3, #4
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e2e:	7efb      	ldrb	r3, [r7, #27]
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d002      	beq.n	8004e3a <HAL_I2C_ER_IRQHandler+0xe8>
 8004e34:	7efb      	ldrb	r3, [r7, #27]
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_I2C_ER_IRQHandler+0x11e>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f043 0308 	orr.w	r3, r3, #8
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e6e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 f89e 	bl	8005fc4 <I2C_ITError>
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	70fb      	strb	r3, [r7, #3]
 8004eec:	4613      	mov	r3, r2
 8004eee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d150      	bne.n	8005028 <I2C_MasterTransmit_TXE+0xc8>
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b21      	cmp	r3, #33	; 0x21
 8004f8a:	d14d      	bne.n	8005028 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d01d      	beq.n	8004fce <I2C_MasterTransmit_TXE+0x6e>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d01a      	beq.n	8004fce <I2C_MasterTransmit_TXE+0x6e>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f9e:	d016      	beq.n	8004fce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2211      	movs	r2, #17
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7ff ff62 	bl	8004e90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fcc:	e060      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fdc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d107      	bne.n	8005018 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f7ff ff7d 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005016:	e03b      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff35 	bl	8004e90 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005026:	e033      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b21      	cmp	r3, #33	; 0x21
 800502c:	d005      	beq.n	800503a <I2C_MasterTransmit_TXE+0xda>
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d12d      	bne.n	8005090 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b22      	cmp	r3, #34	; 0x22
 8005038:	d12a      	bne.n	8005090 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005052:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005054:	e01c      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d103      	bne.n	800506a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f88e 	bl	8005184 <I2C_MemoryTransmit_TXE_BTF>
}
 8005068:	e012      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	781a      	ldrb	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800508e:	e7ff      	b.n	8005090 <I2C_MasterTransmit_TXE+0x130>
 8005090:	bf00      	nop
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b21      	cmp	r3, #33	; 0x21
 80050b0:	d164      	bne.n	800517c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d012      	beq.n	80050e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050e0:	e04c      	b.n	800517c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d01d      	beq.n	8005124 <I2C_MasterTransmit_BTF+0x8c>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d01a      	beq.n	8005124 <I2C_MasterTransmit_BTF+0x8c>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f4:	d016      	beq.n	8005124 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005104:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2211      	movs	r2, #17
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff feb7 	bl	8004e90 <HAL_I2C_MasterTxCpltCallback>
}
 8005122:	e02b      	b.n	800517c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005132:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005142:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d107      	bne.n	800516e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff fed2 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
}
 800516c:	e006      	b.n	800517c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fe8a 	bl	8004e90 <HAL_I2C_MasterTxCpltCallback>
}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11d      	bne.n	80051d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10b      	bne.n	80051bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b4:	1c9a      	adds	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051ba:	e073      	b.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	121b      	asrs	r3, r3, #8
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051d6:	e065      	b.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d10b      	bne.n	80051f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f6:	e055      	b.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d151      	bne.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	2b22      	cmp	r3, #34	; 0x22
 8005204:	d10d      	bne.n	8005222 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005214:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005220:	e040      	b.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d015      	beq.n	8005258 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800522c:	7bfb      	ldrb	r3, [r7, #15]
 800522e:	2b21      	cmp	r3, #33	; 0x21
 8005230:	d112      	bne.n	8005258 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005256:	e025      	b.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d120      	bne.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	2b21      	cmp	r3, #33	; 0x21
 8005266:	d11d      	bne.n	80052a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005276:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005286:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff fe36 	bl	8004f10 <HAL_I2C_MemTxCpltCallback>
}
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b22      	cmp	r3, #34	; 0x22
 80052be:	f040 80ac 	bne.w	800541a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d921      	bls.n	8005314 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	f040 808c 	bne.w	800541a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005312:	e082      	b.n	800541a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	2b02      	cmp	r3, #2
 800531a:	d075      	beq.n	8005408 <I2C_MasterReceive_RXNE+0x15c>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d002      	beq.n	8005328 <I2C_MasterReceive_RXNE+0x7c>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d16f      	bne.n	8005408 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 fafb 	bl	8006924 <I2C_WaitOnSTOPRequestThroughIT>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d142      	bne.n	80053ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685a      	ldr	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005352:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d10a      	bne.n	80053a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff fdc1 	bl	8004f24 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053a2:	e03a      	b.n	800541a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2212      	movs	r2, #18
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fd76 	bl	8004ea4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053b8:	e02f      	b.n	800541a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691a      	ldr	r2, [r3, #16]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	b2d2      	uxtb	r2, r2
 80053d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fd99 	bl	8004f38 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005406:	e008      	b.n	800541a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	605a      	str	r2, [r3, #4]
}
 8005418:	e7ff      	b.n	800541a <I2C_MasterReceive_RXNE+0x16e>
 800541a:	bf00      	nop
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b084      	sub	sp, #16
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b04      	cmp	r3, #4
 8005438:	d11b      	bne.n	8005472 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005470:	e0bd      	b.n	80055ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b03      	cmp	r3, #3
 800547a:	d129      	bne.n	80054d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d00a      	beq.n	80054a8 <I2C_MasterReceive_BTF+0x86>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d007      	beq.n	80054a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054ce:	e08e      	b.n	80055ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d176      	bne.n	80055c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d002      	beq.n	80054e6 <I2C_MasterReceive_BTF+0xc4>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d108      	bne.n	80054f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e019      	b.n	800552c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d002      	beq.n	8005504 <I2C_MasterReceive_BTF+0xe2>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d108      	bne.n	8005516 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e00a      	b.n	800552c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b10      	cmp	r3, #16
 800551a:	d007      	beq.n	800552c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005586:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d10a      	bne.n	80055b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fcba 	bl	8004f24 <HAL_I2C_MemRxCpltCallback>
}
 80055b0:	e01d      	b.n	80055ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2212      	movs	r2, #18
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f7ff fc6f 	bl	8004ea4 <HAL_I2C_MasterRxCpltCallback>
}
 80055c6:	e012      	b.n	80055ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b40      	cmp	r3, #64	; 0x40
 8005608:	d117      	bne.n	800563a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005622:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005624:	e067      	b.n	80056f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	b2da      	uxtb	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	611a      	str	r2, [r3, #16]
}
 8005638:	e05d      	b.n	80056f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005642:	d133      	bne.n	80056ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b21      	cmp	r3, #33	; 0x21
 800564e:	d109      	bne.n	8005664 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005660:	611a      	str	r2, [r3, #16]
 8005662:	e008      	b.n	8005676 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <I2C_Master_SB+0x92>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d108      	bne.n	800569a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d032      	beq.n	80056f6 <I2C_Master_SB+0x100>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	2b00      	cmp	r3, #0
 8005698:	d02d      	beq.n	80056f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	605a      	str	r2, [r3, #4]
}
 80056aa:	e024      	b.n	80056f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10e      	bne.n	80056d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	11db      	asrs	r3, r3, #7
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	f003 0306 	and.w	r3, r3, #6
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f063 030f 	orn	r3, r3, #15
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	611a      	str	r2, [r3, #16]
}
 80056d0:	e011      	b.n	80056f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d10d      	bne.n	80056f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056de:	b29b      	uxth	r3, r3
 80056e0:	11db      	asrs	r3, r3, #7
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0306 	and.w	r3, r3, #6
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f063 030e 	orn	r3, r3, #14
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	611a      	str	r2, [r3, #16]
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	b2da      	uxtb	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <I2C_Master_ADD10+0x26>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d108      	bne.n	800573a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <I2C_Master_ADD10+0x48>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	605a      	str	r2, [r3, #4]
  }
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005756:	b480      	push	{r7}
 8005758:	b091      	sub	sp, #68	; 0x44
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b22      	cmp	r3, #34	; 0x22
 800577e:	f040 8169 	bne.w	8005a54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10f      	bne.n	80057aa <I2C_Master_ADDR+0x54>
 800578a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d10b      	bne.n	80057aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005792:	2300      	movs	r3, #0
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	633b      	str	r3, [r7, #48]	; 0x30
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	e160      	b.n	8005a6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11d      	bne.n	80057ee <I2C_Master_ADDR+0x98>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ba:	d118      	bne.n	80057ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	651a      	str	r2, [r3, #80]	; 0x50
 80057ec:	e13e      	b.n	8005a6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d113      	bne.n	8005820 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f8:	2300      	movs	r3, #0
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	62bb      	str	r3, [r7, #40]	; 0x28
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e115      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	f040 808a 	bne.w	8005940 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800582c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005832:	d137      	bne.n	80058a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800584e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005852:	d113      	bne.n	800587c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	627b      	str	r3, [r7, #36]	; 0x24
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	e0e7      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	623b      	str	r3, [r7, #32]
 8005890:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e0d3      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d02e      	beq.n	8005908 <I2C_Master_ADDR+0x1b2>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d02b      	beq.n	8005908 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	2b12      	cmp	r3, #18
 80058b4:	d102      	bne.n	80058bc <I2C_Master_ADDR+0x166>
 80058b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d125      	bne.n	8005908 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00e      	beq.n	80058e0 <I2C_Master_ADDR+0x18a>
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d00b      	beq.n	80058e0 <I2C_Master_ADDR+0x18a>
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d008      	beq.n	80058e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e007      	b.n	80058f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	e0a1      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005916:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e085      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d14d      	bne.n	80059e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	2b04      	cmp	r3, #4
 800594e:	d016      	beq.n	800597e <I2C_Master_ADDR+0x228>
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	2b02      	cmp	r3, #2
 8005954:	d013      	beq.n	800597e <I2C_Master_ADDR+0x228>
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b10      	cmp	r3, #16
 800595a:	d010      	beq.n	800597e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800596a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	e007      	b.n	800598e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800598c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599c:	d117      	bne.n	80059ce <I2C_Master_ADDR+0x278>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059a4:	d00b      	beq.n	80059be <I2C_Master_ADDR+0x268>
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d008      	beq.n	80059be <I2C_Master_ADDR+0x268>
 80059ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d005      	beq.n	80059be <I2C_Master_ADDR+0x268>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d002      	beq.n	80059be <I2C_Master_ADDR+0x268>
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d107      	bne.n	80059ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	e032      	b.n	8005a4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a04:	d117      	bne.n	8005a36 <I2C_Master_ADDR+0x2e0>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a0c:	d00b      	beq.n	8005a26 <I2C_Master_ADDR+0x2d0>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d008      	beq.n	8005a26 <I2C_Master_ADDR+0x2d0>
 8005a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d005      	beq.n	8005a26 <I2C_Master_ADDR+0x2d0>
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d002      	beq.n	8005a26 <I2C_Master_ADDR+0x2d0>
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d107      	bne.n	8005a36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a36:	2300      	movs	r3, #0
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a52:	e00b      	b.n	8005a6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	e7ff      	b.n	8005a6c <I2C_Master_ADDR+0x316>
 8005a6c:	bf00      	nop
 8005a6e:	3744      	adds	r7, #68	; 0x44
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d02b      	beq.n	8005aea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d114      	bne.n	8005aea <I2C_SlaveTransmit_TXE+0x72>
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b29      	cmp	r3, #41	; 0x29
 8005ac4:	d111      	bne.n	8005aea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2221      	movs	r2, #33	; 0x21
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2228      	movs	r2, #40	; 0x28
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff f9e7 	bl	8004eb8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d011      	beq.n	8005b28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d02c      	beq.n	8005ba8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d114      	bne.n	8005ba8 <I2C_SlaveReceive_RXNE+0x74>
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d111      	bne.n	8005ba8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2222      	movs	r2, #34	; 0x22
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2228      	movs	r2, #40	; 0x28
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff f992 	bl	8004ecc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ba8:	bf00      	nop
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d012      	beq.n	8005be8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c0e:	2b28      	cmp	r3, #40	; 0x28
 8005c10:	d125      	bne.n	8005c5e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c20:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	81bb      	strh	r3, [r7, #12]
 8005c40:	e002      	b.n	8005c48 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c50:	89ba      	ldrh	r2, [r7, #12]
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
 8005c54:	4619      	mov	r1, r3
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7ff f942 	bl	8004ee0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c5c:	e00e      	b.n	8005c7c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c7c:	bf00      	nop
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce0:	d172      	bne.n	8005dc8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	2b22      	cmp	r3, #34	; 0x22
 8005ce6:	d002      	beq.n	8005cee <I2C_Slave_STOPF+0x6a>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d135      	bne.n	8005d5a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd ffd0 	bl	8003ccc <HAL_DMA_GetState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d049      	beq.n	8005dc6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	4a69      	ldr	r2, [pc, #420]	; (8005edc <I2C_Slave_STOPF+0x258>)
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fe18 	bl	8003974 <HAL_DMA_Abort_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03d      	beq.n	8005dc6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d58:	e035      	b.n	8005dc6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f043 0204 	orr.w	r2, r3, #4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fd ff9a 	bl	8003ccc <HAL_DMA_GetState>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d014      	beq.n	8005dc8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	4a4e      	ldr	r2, [pc, #312]	; (8005edc <I2C_Slave_STOPF+0x258>)
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fde2 	bl	8003974 <HAL_DMA_Abort_IT>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4798      	blx	r3
 8005dc4:	e000      	b.n	8005dc8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dc6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d03e      	beq.n	8005e50 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d112      	bne.n	8005e06 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d112      	bne.n	8005e3a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691a      	ldr	r2, [r3, #16]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f043 0204 	orr.w	r2, r3, #4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f8b3 	bl	8005fc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e5e:	e039      	b.n	8005ed4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b2a      	cmp	r3, #42	; 0x2a
 8005e64:	d109      	bne.n	8005e7a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2228      	movs	r2, #40	; 0x28
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f829 	bl	8004ecc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b28      	cmp	r3, #40	; 0x28
 8005e84:	d111      	bne.n	8005eaa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <I2C_Slave_STOPF+0x25c>)
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff f82a 	bl	8004efc <HAL_I2C_ListenCpltCallback>
}
 8005ea8:	e014      	b.n	8005ed4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	2b22      	cmp	r3, #34	; 0x22
 8005eb0:	d002      	beq.n	8005eb8 <I2C_Slave_STOPF+0x234>
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	2b22      	cmp	r3, #34	; 0x22
 8005eb6:	d10d      	bne.n	8005ed4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7fe fffc 	bl	8004ecc <HAL_I2C_SlaveRxCpltCallback>
}
 8005ed4:	bf00      	nop
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	08006525 	.word	0x08006525
 8005ee0:	ffff0000 	.word	0xffff0000

08005ee4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d002      	beq.n	8005f06 <I2C_Slave_AF+0x22>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d129      	bne.n	8005f5a <I2C_Slave_AF+0x76>
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b28      	cmp	r3, #40	; 0x28
 8005f0a:	d126      	bne.n	8005f5a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a2c      	ldr	r2, [pc, #176]	; (8005fc0 <I2C_Slave_AF+0xdc>)
 8005f10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f20:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f2a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f3a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fe ffd2 	bl	8004efc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f58:	e02e      	b.n	8005fb8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b21      	cmp	r3, #33	; 0x21
 8005f5e:	d126      	bne.n	8005fae <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <I2C_Slave_AF+0xdc>)
 8005f64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f8a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f94:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fe ff86 	bl	8004eb8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fac:	e004      	b.n	8005fb8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fb6:	615a      	str	r2, [r3, #20]
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	ffff0000 	.word	0xffff0000

08005fc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005fdc:	7bbb      	ldrb	r3, [r7, #14]
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d002      	beq.n	8005fe8 <I2C_ITError+0x24>
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d10a      	bne.n	8005ffe <I2C_ITError+0x3a>
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b22      	cmp	r3, #34	; 0x22
 8005fec:	d107      	bne.n	8005ffe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ffc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
 8006000:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006004:	2b28      	cmp	r3, #40	; 0x28
 8006006:	d107      	bne.n	8006018 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2228      	movs	r2, #40	; 0x28
 8006012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006016:	e015      	b.n	8006044 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006026:	d00a      	beq.n	800603e <I2C_ITError+0x7a>
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b60      	cmp	r3, #96	; 0x60
 800602c:	d007      	beq.n	800603e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006052:	d162      	bne.n	800611a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006062:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d020      	beq.n	80060b4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	4a6a      	ldr	r2, [pc, #424]	; (8006220 <I2C_ITError+0x25c>)
 8006078:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607e:	4618      	mov	r0, r3
 8006080:	f7fd fc78 	bl	8003974 <HAL_DMA_Abort_IT>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8089 	beq.w	800619e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060ae:	4610      	mov	r0, r2
 80060b0:	4798      	blx	r3
 80060b2:	e074      	b.n	800619e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	4a59      	ldr	r2, [pc, #356]	; (8006220 <I2C_ITError+0x25c>)
 80060ba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7fd fc57 	bl	8003974 <HAL_DMA_Abort_IT>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d068      	beq.n	800619e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b40      	cmp	r3, #64	; 0x40
 80060d8:	d10b      	bne.n	80060f2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006114:	4610      	mov	r0, r2
 8006116:	4798      	blx	r3
 8006118:	e041      	b.n	800619e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b60      	cmp	r3, #96	; 0x60
 8006124:	d125      	bne.n	8006172 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	d10b      	bne.n	800615a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0201 	bic.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fe feee 	bl	8004f4c <HAL_I2C_AbortCpltCallback>
 8006170:	e015      	b.n	800619e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d10b      	bne.n	8006198 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fe fecd 	bl	8004f38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10e      	bne.n	80061cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d007      	beq.n	80061dc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061da:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d113      	bne.n	8006218 <I2C_ITError+0x254>
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b28      	cmp	r3, #40	; 0x28
 80061f4:	d110      	bne.n	8006218 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <I2C_ITError+0x260>)
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7fe fe72 	bl	8004efc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006218:	bf00      	nop
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	08006525 	.word	0x08006525
 8006224:	ffff0000 	.word	0xffff0000

08006228 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	4608      	mov	r0, r1
 8006232:	4611      	mov	r1, r2
 8006234:	461a      	mov	r2, r3
 8006236:	4603      	mov	r3, r0
 8006238:	817b      	strh	r3, [r7, #10]
 800623a:	460b      	mov	r3, r1
 800623c:	813b      	strh	r3, [r7, #8]
 800623e:	4613      	mov	r3, r2
 8006240:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006250:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2200      	movs	r2, #0
 800625a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fa08 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00d      	beq.n	8006286 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d103      	bne.n	8006282 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006280:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e05f      	b.n	8006346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006286:	897b      	ldrh	r3, [r7, #10]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006294:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	6a3a      	ldr	r2, [r7, #32]
 800629a:	492d      	ldr	r1, [pc, #180]	; (8006350 <I2C_RequestMemoryWrite+0x128>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fa40 	bl	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e04c      	b.n	8006346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ac:	2300      	movs	r3, #0
 80062ae:	617b      	str	r3, [r7, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c4:	6a39      	ldr	r1, [r7, #32]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 faaa 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d107      	bne.n	80062ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e02b      	b.n	8006346 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d105      	bne.n	8006300 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f4:	893b      	ldrh	r3, [r7, #8]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	611a      	str	r2, [r3, #16]
 80062fe:	e021      	b.n	8006344 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006300:	893b      	ldrh	r3, [r7, #8]
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	b2da      	uxtb	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 fa84 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d107      	bne.n	8006336 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006334:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e005      	b.n	8006346 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633a:	893b      	ldrh	r3, [r7, #8]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	00010002 	.word	0x00010002

08006354 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	4608      	mov	r0, r1
 800635e:	4611      	mov	r1, r2
 8006360:	461a      	mov	r2, r3
 8006362:	4603      	mov	r3, r0
 8006364:	817b      	strh	r3, [r7, #10]
 8006366:	460b      	mov	r3, r1
 8006368:	813b      	strh	r3, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800637c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	2200      	movs	r2, #0
 8006396:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f96a 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00d      	beq.n	80063c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b4:	d103      	bne.n	80063be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0aa      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063c2:	897b      	ldrh	r3, [r7, #10]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	6a3a      	ldr	r2, [r7, #32]
 80063d6:	4952      	ldr	r1, [pc, #328]	; (8006520 <I2C_RequestMemoryRead+0x1cc>)
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f9a2 	bl	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e097      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006400:	6a39      	ldr	r1, [r7, #32]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fa0c 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	2b04      	cmp	r3, #4
 8006414:	d107      	bne.n	8006426 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006424:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e076      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d105      	bne.n	800643c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006430:	893b      	ldrh	r3, [r7, #8]
 8006432:	b2da      	uxtb	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	611a      	str	r2, [r3, #16]
 800643a:	e021      	b.n	8006480 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800643c:	893b      	ldrh	r3, [r7, #8]
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	b29b      	uxth	r3, r3
 8006442:	b2da      	uxtb	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800644a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644c:	6a39      	ldr	r1, [r7, #32]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f9e6 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00d      	beq.n	8006476 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	2b04      	cmp	r3, #4
 8006460:	d107      	bne.n	8006472 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006470:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e050      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006476:	893b      	ldrh	r3, [r7, #8]
 8006478:	b2da      	uxtb	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	6a39      	ldr	r1, [r7, #32]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f9cb 	bl	8006820 <I2C_WaitOnTXEFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006494:	2b04      	cmp	r3, #4
 8006496:	d107      	bne.n	80064a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e035      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f000 f8d3 	bl	8006674 <I2C_WaitOnFlagUntilTimeout>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00d      	beq.n	80064f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e2:	d103      	bne.n	80064ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e013      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064f0:	897b      	ldrh	r3, [r7, #10]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f043 0301 	orr.w	r3, r3, #1
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	4906      	ldr	r1, [pc, #24]	; (8006520 <I2C_RequestMemoryRead+0x1cc>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f90b 	bl	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	00010002 	.word	0x00010002

08006524 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800653e:	4b4b      	ldr	r3, [pc, #300]	; (800666c <I2C_DMAAbort+0x148>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	4a4a      	ldr	r2, [pc, #296]	; (8006670 <I2C_DMAAbort+0x14c>)
 8006546:	fba2 2303 	umull	r2, r3, r2, r3
 800654a:	0a1a      	lsrs	r2, r3, #8
 800654c:	4613      	mov	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	00da      	lsls	r2, r3, #3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0220 	orr.w	r2, r3, #32
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800656a:	e00a      	b.n	8006582 <I2C_DMAAbort+0x5e>
    }
    count--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3b01      	subs	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800657c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006580:	d0ea      	beq.n	8006558 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	2200      	movs	r2, #0
 8006590:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659e:	2200      	movs	r2, #0
 80065a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2200      	movs	r2, #0
 80065b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2200      	movs	r2, #0
 80065c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d4:	2200      	movs	r2, #0
 80065d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d10e      	bne.n	8006612 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800660a:	6978      	ldr	r0, [r7, #20]
 800660c:	f7fe fc9e 	bl	8004f4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006610:	e027      	b.n	8006662 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006612:	7cfb      	ldrb	r3, [r7, #19]
 8006614:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006618:	2b28      	cmp	r3, #40	; 0x28
 800661a:	d117      	bne.n	800664c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f042 0201 	orr.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800663a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2228      	movs	r2, #40	; 0x28
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800664a:	e007      	b.n	800665c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800665c:	6978      	ldr	r0, [r7, #20]
 800665e:	f7fe fc6b 	bl	8004f38 <HAL_I2C_ErrorCallback>
}
 8006662:	bf00      	nop
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000004 	.word	0x20000004
 8006670:	14f8b589 	.word	0x14f8b589

08006674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	4613      	mov	r3, r2
 8006682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006684:	e025      	b.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800668c:	d021      	beq.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fc fa27 	bl	8002ae0 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d116      	bne.n	80066d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e023      	b.n	800671a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10d      	bne.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	43da      	mvns	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	e00c      	b.n	8006712 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	43da      	mvns	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	4013      	ands	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	bf0c      	ite	eq
 800670a:	2301      	moveq	r3, #1
 800670c:	2300      	movne	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	461a      	mov	r2, r3
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	429a      	cmp	r2, r3
 8006716:	d0b6      	beq.n	8006686 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006730:	e051      	b.n	80067d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006740:	d123      	bne.n	800678a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006750:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800675a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f043 0204 	orr.w	r2, r3, #4
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e046      	b.n	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006790:	d021      	beq.n	80067d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fc f9a5 	bl	8002ae0 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d116      	bne.n	80067d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f043 0220 	orr.w	r2, r3, #32
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e020      	b.n	8006818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10c      	bne.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	43da      	mvns	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf14      	ite	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	2300      	moveq	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	e00b      	b.n	8006812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	43da      	mvns	r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4013      	ands	r3, r2
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf14      	ite	ne
 800680c:	2301      	movne	r3, #1
 800680e:	2300      	moveq	r3, #0
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d18d      	bne.n	8006732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800682c:	e02d      	b.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 f900 	bl	8006a34 <I2C_IsAcknowledgeFailed>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e02d      	b.n	800689a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006844:	d021      	beq.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fc f94b 	bl	8002ae0 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d116      	bne.n	800688a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e007      	b.n	800689a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006894:	2b80      	cmp	r3, #128	; 0x80
 8006896:	d1ca      	bne.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068ae:	e02d      	b.n	800690c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f8bf 	bl	8006a34 <I2C_IsAcknowledgeFailed>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e02d      	b.n	800691c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c6:	d021      	beq.n	800690c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c8:	f7fc f90a 	bl	8002ae0 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d302      	bcc.n	80068de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d116      	bne.n	800690c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	f043 0220 	orr.w	r2, r3, #32
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e007      	b.n	800691c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b04      	cmp	r3, #4
 8006918:	d1ca      	bne.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	4a13      	ldr	r2, [pc, #76]	; (8006984 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	0a1a      	lsrs	r2, r3, #8
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b01      	subs	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f043 0220 	orr.w	r2, r3, #32
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e008      	b.n	8006974 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800696c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006970:	d0e9      	beq.n	8006946 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000004 	.word	0x20000004
 8006984:	14f8b589 	.word	0x14f8b589

08006988 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006994:	e042      	b.n	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	f003 0310 	and.w	r3, r3, #16
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d119      	bne.n	80069d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f06f 0210 	mvn.w	r2, #16
 80069ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e029      	b.n	8006a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d8:	f7fc f882 	bl	8002ae0 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d302      	bcc.n	80069ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d116      	bne.n	8006a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e007      	b.n	8006a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d1b5      	bne.n	8006996 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4a:	d11b      	bne.n	8006a84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a70:	f043 0204 	orr.w	r2, r3, #4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006aa2:	d103      	bne.n	8006aac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aaa:	e007      	b.n	8006abc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ab4:	d102      	bne.n	8006abc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2208      	movs	r2, #8
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e267      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d075      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ae6:	4b88      	ldr	r3, [pc, #544]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d00c      	beq.n	8006b0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006af2:	4b85      	ldr	r3, [pc, #532]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d112      	bne.n	8006b24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afe:	4b82      	ldr	r3, [pc, #520]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b0a:	d10b      	bne.n	8006b24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b0c:	4b7e      	ldr	r3, [pc, #504]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d05b      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x108>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d157      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e242      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2c:	d106      	bne.n	8006b3c <HAL_RCC_OscConfig+0x74>
 8006b2e:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a75      	ldr	r2, [pc, #468]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b38:	6013      	str	r3, [r2, #0]
 8006b3a:	e01d      	b.n	8006b78 <HAL_RCC_OscConfig+0xb0>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b44:	d10c      	bne.n	8006b60 <HAL_RCC_OscConfig+0x98>
 8006b46:	4b70      	ldr	r3, [pc, #448]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6f      	ldr	r2, [pc, #444]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	4b6d      	ldr	r3, [pc, #436]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a6c      	ldr	r2, [pc, #432]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	e00b      	b.n	8006b78 <HAL_RCC_OscConfig+0xb0>
 8006b60:	4b69      	ldr	r3, [pc, #420]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a68      	ldr	r2, [pc, #416]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	4b66      	ldr	r3, [pc, #408]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a65      	ldr	r2, [pc, #404]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d013      	beq.n	8006ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fb ffae 	bl	8002ae0 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fb ffaa 	bl	8002ae0 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	; 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e207      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b9a:	4b5b      	ldr	r3, [pc, #364]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0xc0>
 8006ba6:	e014      	b.n	8006bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba8:	f7fb ff9a 	bl	8002ae0 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb0:	f7fb ff96 	bl	8002ae0 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b64      	cmp	r3, #100	; 0x64
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e1f3      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bc2:	4b51      	ldr	r3, [pc, #324]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1f0      	bne.n	8006bb0 <HAL_RCC_OscConfig+0xe8>
 8006bce:	e000      	b.n	8006bd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d063      	beq.n	8006ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bde:	4b4a      	ldr	r3, [pc, #296]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 030c 	and.w	r3, r3, #12
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bea:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	d11c      	bne.n	8006c30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf6:	4b44      	ldr	r3, [pc, #272]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d116      	bne.n	8006c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c02:	4b41      	ldr	r3, [pc, #260]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_RCC_OscConfig+0x152>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d001      	beq.n	8006c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e1c7      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1a:	4b3b      	ldr	r3, [pc, #236]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4937      	ldr	r1, [pc, #220]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c2e:	e03a      	b.n	8006ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d020      	beq.n	8006c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c38:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <HAL_RCC_OscConfig+0x244>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3e:	f7fb ff4f 	bl	8002ae0 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c46:	f7fb ff4b 	bl	8002ae0 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e1a8      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c64:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	00db      	lsls	r3, r3, #3
 8006c72:	4925      	ldr	r1, [pc, #148]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]
 8006c78:	e015      	b.n	8006ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c7a:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <HAL_RCC_OscConfig+0x244>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c80:	f7fb ff2e 	bl	8002ae0 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c88:	f7fb ff2a 	bl	8002ae0 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e187      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d036      	beq.n	8006d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d016      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cba:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <HAL_RCC_OscConfig+0x248>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc0:	f7fb ff0e 	bl	8002ae0 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc8:	f7fb ff0a 	bl	8002ae0 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e167      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d0f0      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x200>
 8006ce6:	e01b      	b.n	8006d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce8:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <HAL_RCC_OscConfig+0x248>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cee:	f7fb fef7 	bl	8002ae0 <HAL_GetTick>
 8006cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	e00e      	b.n	8006d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf6:	f7fb fef3 	bl	8002ae0 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d907      	bls.n	8006d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e150      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	42470000 	.word	0x42470000
 8006d10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d14:	4b88      	ldr	r3, [pc, #544]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ea      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8097 	beq.w	8006e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d32:	4b81      	ldr	r3, [pc, #516]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10f      	bne.n	8006d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	4b7d      	ldr	r3, [pc, #500]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4a7c      	ldr	r2, [pc, #496]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4e:	4b7a      	ldr	r3, [pc, #488]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	60bb      	str	r3, [r7, #8]
 8006d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5e:	4b77      	ldr	r3, [pc, #476]	; (8006f3c <HAL_RCC_OscConfig+0x474>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d118      	bne.n	8006d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d6a:	4b74      	ldr	r3, [pc, #464]	; (8006f3c <HAL_RCC_OscConfig+0x474>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a73      	ldr	r2, [pc, #460]	; (8006f3c <HAL_RCC_OscConfig+0x474>)
 8006d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d76:	f7fb feb3 	bl	8002ae0 <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d7c:	e008      	b.n	8006d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7e:	f7fb feaf 	bl	8002ae0 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e10c      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d90:	4b6a      	ldr	r3, [pc, #424]	; (8006f3c <HAL_RCC_OscConfig+0x474>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f0      	beq.n	8006d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d106      	bne.n	8006db2 <HAL_RCC_OscConfig+0x2ea>
 8006da4:	4b64      	ldr	r3, [pc, #400]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a63      	ldr	r2, [pc, #396]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	e01c      	b.n	8006dec <HAL_RCC_OscConfig+0x324>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b05      	cmp	r3, #5
 8006db8:	d10c      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x30c>
 8006dba:	4b5f      	ldr	r3, [pc, #380]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbe:	4a5e      	ldr	r2, [pc, #376]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	f043 0304 	orr.w	r3, r3, #4
 8006dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc6:	4b5c      	ldr	r3, [pc, #368]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dca:	4a5b      	ldr	r2, [pc, #364]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd2:	e00b      	b.n	8006dec <HAL_RCC_OscConfig+0x324>
 8006dd4:	4b58      	ldr	r3, [pc, #352]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a57      	ldr	r2, [pc, #348]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006dda:	f023 0301 	bic.w	r3, r3, #1
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
 8006de0:	4b55      	ldr	r3, [pc, #340]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de4:	4a54      	ldr	r2, [pc, #336]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006de6:	f023 0304 	bic.w	r3, r3, #4
 8006dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d015      	beq.n	8006e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df4:	f7fb fe74 	bl	8002ae0 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfa:	e00a      	b.n	8006e12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dfc:	f7fb fe70 	bl	8002ae0 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e0cb      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e12:	4b49      	ldr	r3, [pc, #292]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0ee      	beq.n	8006dfc <HAL_RCC_OscConfig+0x334>
 8006e1e:	e014      	b.n	8006e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e20:	f7fb fe5e 	bl	8002ae0 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e26:	e00a      	b.n	8006e3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e28:	f7fb fe5a 	bl	8002ae0 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e0b5      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e3e:	4b3e      	ldr	r3, [pc, #248]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1ee      	bne.n	8006e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d105      	bne.n	8006e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e50:	4b39      	ldr	r3, [pc, #228]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e54:	4a38      	ldr	r2, [pc, #224]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80a1 	beq.w	8006fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e66:	4b34      	ldr	r3, [pc, #208]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d05c      	beq.n	8006f2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d141      	bne.n	8006efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e7a:	4b31      	ldr	r3, [pc, #196]	; (8006f40 <HAL_RCC_OscConfig+0x478>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e80:	f7fb fe2e 	bl	8002ae0 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fb fe2a 	bl	8002ae0 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e087      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b27      	ldr	r3, [pc, #156]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	491b      	ldr	r1, [pc, #108]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x478>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed6:	f7fb fe03 	bl	8002ae0 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ede:	f7fb fdff 	bl	8002ae0 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e05c      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0f0      	beq.n	8006ede <HAL_RCC_OscConfig+0x416>
 8006efc:	e054      	b.n	8006fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <HAL_RCC_OscConfig+0x478>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fb fdec 	bl	8002ae0 <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f0c:	f7fb fde8 	bl	8002ae0 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e045      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <HAL_RCC_OscConfig+0x470>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x444>
 8006f2a:	e03d      	b.n	8006fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e038      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
 8006f38:	40023800 	.word	0x40023800
 8006f3c:	40007000 	.word	0x40007000
 8006f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <HAL_RCC_OscConfig+0x4ec>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d028      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d121      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d11a      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f74:	4013      	ands	r3, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d111      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800

08006fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0cc      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fcc:	4b68      	ldr	r3, [pc, #416]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d90c      	bls.n	8006ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fda:	4b65      	ldr	r3, [pc, #404]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	b2d2      	uxtb	r2, r2
 8006fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe2:	4b63      	ldr	r3, [pc, #396]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0b8      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d020      	beq.n	8007042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800700c:	4b59      	ldr	r3, [pc, #356]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	4a58      	ldr	r2, [pc, #352]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007024:	4b53      	ldr	r3, [pc, #332]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	4a52      	ldr	r2, [pc, #328]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800702e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007030:	4b50      	ldr	r3, [pc, #320]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	494d      	ldr	r1, [pc, #308]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800703e:	4313      	orrs	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d044      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d107      	bne.n	8007066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007056:	4b47      	ldr	r3, [pc, #284]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d119      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e07f      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d003      	beq.n	8007076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007072:	2b03      	cmp	r3, #3
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007076:	4b3f      	ldr	r3, [pc, #252]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e06f      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007086:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e067      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007096:	4b37      	ldr	r3, [pc, #220]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f023 0203 	bic.w	r2, r3, #3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	4934      	ldr	r1, [pc, #208]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a8:	f7fb fd1a 	bl	8002ae0 <HAL_GetTick>
 80070ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ae:	e00a      	b.n	80070c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b0:	f7fb fd16 	bl	8002ae0 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80070be:	4293      	cmp	r3, r2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e04f      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c6:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 020c 	and.w	r2, r3, #12
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d1eb      	bne.n	80070b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d8:	4b25      	ldr	r3, [pc, #148]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0307 	and.w	r3, r3, #7
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d20c      	bcs.n	8007100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e6:	4b22      	ldr	r3, [pc, #136]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ee:	4b20      	ldr	r3, [pc, #128]	; (8007170 <HAL_RCC_ClockConfig+0x1b8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d001      	beq.n	8007100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e032      	b.n	8007166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d008      	beq.n	800711e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800710c:	4b19      	ldr	r3, [pc, #100]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	4916      	ldr	r1, [pc, #88]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0308 	and.w	r3, r3, #8
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800712a:	4b12      	ldr	r3, [pc, #72]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	490e      	ldr	r1, [pc, #56]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	4313      	orrs	r3, r2
 800713c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800713e:	f000 f821 	bl	8007184 <HAL_RCC_GetSysClockFreq>
 8007142:	4602      	mov	r2, r0
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	091b      	lsrs	r3, r3, #4
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	490a      	ldr	r1, [pc, #40]	; (8007178 <HAL_RCC_ClockConfig+0x1c0>)
 8007150:	5ccb      	ldrb	r3, [r1, r3]
 8007152:	fa22 f303 	lsr.w	r3, r2, r3
 8007156:	4a09      	ldr	r2, [pc, #36]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8007158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4618      	mov	r0, r3
 8007160:	f7fb fc7a 	bl	8002a58 <HAL_InitTick>

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40023c00 	.word	0x40023c00
 8007174:	40023800 	.word	0x40023800
 8007178:	08008b1c 	.word	0x08008b1c
 800717c:	20000004 	.word	0x20000004
 8007180:	20000008 	.word	0x20000008

08007184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007188:	b090      	sub	sp, #64	; 0x40
 800718a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	2300      	movs	r3, #0
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007194:	2300      	movs	r3, #0
 8007196:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800719c:	4b59      	ldr	r3, [pc, #356]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 030c 	and.w	r3, r3, #12
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d00d      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x40>
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	f200 80a1 	bhi.w	80072f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0x34>
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d003      	beq.n	80071be <HAL_RCC_GetSysClockFreq+0x3a>
 80071b6:	e09b      	b.n	80072f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071b8:	4b53      	ldr	r3, [pc, #332]	; (8007308 <HAL_RCC_GetSysClockFreq+0x184>)
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071bc:	e09b      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071be:	4b53      	ldr	r3, [pc, #332]	; (800730c <HAL_RCC_GetSysClockFreq+0x188>)
 80071c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071c2:	e098      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071c4:	4b4f      	ldr	r3, [pc, #316]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ce:	4b4d      	ldr	r3, [pc, #308]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d028      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071da:	4b4a      	ldr	r3, [pc, #296]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	099b      	lsrs	r3, r3, #6
 80071e0:	2200      	movs	r2, #0
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	627a      	str	r2, [r7, #36]	; 0x24
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071ec:	2100      	movs	r1, #0
 80071ee:	4b47      	ldr	r3, [pc, #284]	; (800730c <HAL_RCC_GetSysClockFreq+0x188>)
 80071f0:	fb03 f201 	mul.w	r2, r3, r1
 80071f4:	2300      	movs	r3, #0
 80071f6:	fb00 f303 	mul.w	r3, r0, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	4a43      	ldr	r2, [pc, #268]	; (800730c <HAL_RCC_GetSysClockFreq+0x188>)
 80071fe:	fba0 1202 	umull	r1, r2, r0, r2
 8007202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007204:	460a      	mov	r2, r1
 8007206:	62ba      	str	r2, [r7, #40]	; 0x28
 8007208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800720a:	4413      	add	r3, r2
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2200      	movs	r2, #0
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	61fa      	str	r2, [r7, #28]
 8007216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800721a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800721e:	f7f9 fc31 	bl	8000a84 <__aeabi_uldivmod>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4613      	mov	r3, r2
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800722a:	e053      	b.n	80072d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722c:	4b35      	ldr	r3, [pc, #212]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	099b      	lsrs	r3, r3, #6
 8007232:	2200      	movs	r2, #0
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	617a      	str	r2, [r7, #20]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800723e:	f04f 0b00 	mov.w	fp, #0
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	f04f 0000 	mov.w	r0, #0
 800724a:	f04f 0100 	mov.w	r1, #0
 800724e:	0159      	lsls	r1, r3, #5
 8007250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007254:	0150      	lsls	r0, r2, #5
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	ebb2 080a 	subs.w	r8, r2, sl
 800725e:	eb63 090b 	sbc.w	r9, r3, fp
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800726e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007276:	ebb2 0408 	subs.w	r4, r2, r8
 800727a:	eb63 0509 	sbc.w	r5, r3, r9
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	00eb      	lsls	r3, r5, #3
 8007288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800728c:	00e2      	lsls	r2, r4, #3
 800728e:	4614      	mov	r4, r2
 8007290:	461d      	mov	r5, r3
 8007292:	eb14 030a 	adds.w	r3, r4, sl
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	eb45 030b 	adc.w	r3, r5, fp
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072aa:	4629      	mov	r1, r5
 80072ac:	028b      	lsls	r3, r1, #10
 80072ae:	4621      	mov	r1, r4
 80072b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072b4:	4621      	mov	r1, r4
 80072b6:	028a      	lsls	r2, r1, #10
 80072b8:	4610      	mov	r0, r2
 80072ba:	4619      	mov	r1, r3
 80072bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072be:	2200      	movs	r2, #0
 80072c0:	60bb      	str	r3, [r7, #8]
 80072c2:	60fa      	str	r2, [r7, #12]
 80072c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c8:	f7f9 fbdc 	bl	8000a84 <__aeabi_uldivmod>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4613      	mov	r3, r2
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072d4:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <HAL_RCC_GetSysClockFreq+0x180>)
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	3301      	adds	r3, #1
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072ee:	e002      	b.n	80072f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <HAL_RCC_GetSysClockFreq+0x184>)
 80072f2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3740      	adds	r7, #64	; 0x40
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800
 8007308:	00f42400 	.word	0x00f42400
 800730c:	017d7840 	.word	0x017d7840

08007310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007314:	4b03      	ldr	r3, [pc, #12]	; (8007324 <HAL_RCC_GetHCLKFreq+0x14>)
 8007316:	681b      	ldr	r3, [r3, #0]
}
 8007318:	4618      	mov	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000004 	.word	0x20000004

08007328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800732c:	f7ff fff0 	bl	8007310 <HAL_RCC_GetHCLKFreq>
 8007330:	4602      	mov	r2, r0
 8007332:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	0a9b      	lsrs	r3, r3, #10
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	4903      	ldr	r1, [pc, #12]	; (800734c <HAL_RCC_GetPCLK1Freq+0x24>)
 800733e:	5ccb      	ldrb	r3, [r1, r3]
 8007340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40023800 	.word	0x40023800
 800734c:	08008b2c 	.word	0x08008b2c

08007350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e07b      	b.n	800745a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d108      	bne.n	800737c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007372:	d009      	beq.n	8007388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	61da      	str	r2, [r3, #28]
 800737a:	e005      	b.n	8007388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb f852 	bl	800244c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073d0:	431a      	orrs	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	431a      	orrs	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740c:	ea42 0103 	orr.w	r1, r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007414:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	0c1b      	lsrs	r3, r3, #16
 8007426:	f003 0104 	and.w	r1, r3, #4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0210 	and.w	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007448:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007480:	2302      	movs	r3, #2
 8007482:	e0e3      	b.n	800764c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007492:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800749a:	7dbb      	ldrb	r3, [r7, #22]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d00d      	beq.n	80074bc <HAL_SPI_TransmitReceive_DMA+0x58>
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074a6:	d106      	bne.n	80074b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80074b0:	7dbb      	ldrb	r3, [r7, #22]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d002      	beq.n	80074bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
 80074b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ba:	e0c2      	b.n	8007642 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80074c8:	887b      	ldrh	r3, [r7, #2]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d2:	e0b6      	b.n	8007642 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d003      	beq.n	80074e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2205      	movs	r2, #5
 80074e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	887a      	ldrh	r2, [r7, #2]
 80074f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	887a      	ldrh	r2, [r7, #2]
 80074fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	887a      	ldrh	r2, [r7, #2]
 800750a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	887a      	ldrh	r2, [r7, #2]
 8007510:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b04      	cmp	r3, #4
 8007528:	d108      	bne.n	800753c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	4a49      	ldr	r2, [pc, #292]	; (8007654 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007530:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007536:	4a48      	ldr	r2, [pc, #288]	; (8007658 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007538:	63da      	str	r2, [r3, #60]	; 0x3c
 800753a:	e007      	b.n	800754c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007540:	4a46      	ldr	r2, [pc, #280]	; (800765c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007542:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007548:	4a45      	ldr	r2, [pc, #276]	; (8007660 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007550:	4a44      	ldr	r2, [pc, #272]	; (8007664 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007558:	2200      	movs	r2, #0
 800755a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	330c      	adds	r3, #12
 8007566:	4619      	mov	r1, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007572:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007574:	f7fc f9a6 	bl	80038c4 <HAL_DMA_Start_IT>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00c      	beq.n	8007598 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007582:	f043 0210 	orr.w	r2, r3, #16
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007596:	e054      	b.n	8007642 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ac:	2200      	movs	r2, #0
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b4:	2200      	movs	r2, #0
 80075b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075bc:	2200      	movs	r2, #0
 80075be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c4:	2200      	movs	r2, #0
 80075c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	4619      	mov	r1, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075e0:	f7fc f970 	bl	80038c4 <HAL_DMA_Start_IT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ee:	f043 0210 	orr.w	r2, r3, #16
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007602:	e01e      	b.n	8007642 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d007      	beq.n	8007622 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0220 	orr.w	r2, r2, #32
 8007630:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0202 	orr.w	r2, r2, #2
 8007640:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	080079d9 	.word	0x080079d9
 8007658:	080078a1 	.word	0x080078a1
 800765c:	080079f5 	.word	0x080079f5
 8007660:	08007949 	.word	0x08007949
 8007664:	08007a11 	.word	0x08007a11

08007668 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10e      	bne.n	80076a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007690:	2b00      	cmp	r3, #0
 8007692:	d009      	beq.n	80076a8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
    return;
 80076a6:	e0ce      	b.n	8007846 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d009      	beq.n	80076c6 <HAL_SPI_IRQHandler+0x5e>
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
    return;
 80076c4:	e0bf      	b.n	8007846 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <HAL_SPI_IRQHandler+0x7e>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80b0 	beq.w	8007846 <HAL_SPI_IRQHandler+0x1de>
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f003 0320 	and.w	r3, r3, #32
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 80aa 	beq.w	8007846 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b03      	cmp	r3, #3
 8007706:	d011      	beq.n	800772c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770c:	f043 0204 	orr.w	r2, r3, #4
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	e00b      	b.n	8007744 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
        return;
 8007742:	e080      	b.n	8007846 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	f003 0320 	and.w	r3, r3, #32
 800774a:	2b00      	cmp	r3, #0
 800774c:	d014      	beq.n	8007778 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f043 0201 	orr.w	r2, r3, #1
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	60fb      	str	r3, [r7, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00c      	beq.n	800779c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	f043 0208 	orr.w	r2, r3, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800778e:	2300      	movs	r3, #0
 8007790:	60bb      	str	r3, [r7, #8]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d04f      	beq.n	8007844 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077b2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d104      	bne.n	80077d0 <HAL_SPI_IRQHandler+0x168>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d034      	beq.n	800783a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0203 	bic.w	r2, r2, #3
 80077de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d011      	beq.n	800780c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <HAL_SPI_IRQHandler+0x1e4>)
 80077ee:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fc f8bd 	bl	8003974 <HAL_DMA_Abort_IT>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d005      	beq.n	800780c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007810:	2b00      	cmp	r3, #0
 8007812:	d016      	beq.n	8007842 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007818:	4a0c      	ldr	r2, [pc, #48]	; (800784c <HAL_SPI_IRQHandler+0x1e4>)
 800781a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	4618      	mov	r0, r3
 8007822:	f7fc f8a7 	bl	8003974 <HAL_DMA_Abort_IT>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007830:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007838:	e003      	b.n	8007842 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f826 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007840:	e000      	b.n	8007844 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007842:	bf00      	nop
    return;
 8007844:	bf00      	nop
  }
}
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	08007a51 	.word	0x08007a51

08007850 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ae:	f7fb f917 	bl	8002ae0 <HAL_GetTick>
 80078b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c2:	d03b      	beq.n	800793c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0220 	bic.w	r2, r2, #32
 80078d2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10d      	bne.n	80078f8 <SPI_DMAReceiveCplt+0x58>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e4:	d108      	bne.n	80078f8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0203 	bic.w	r2, r2, #3
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	e007      	b.n	8007908 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0201 	bic.w	r2, r2, #1
 8007906:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	2164      	movs	r1, #100	; 0x64
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f93b 	bl	8007b88 <SPI_EndRxTransaction>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f7ff ffa9 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800793a:	e002      	b.n	8007942 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ff87 	bl	8007850 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007956:	f7fb f8c3 	bl	8002ae0 <HAL_GetTick>
 800795a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796a:	d02f      	beq.n	80079cc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0220 	bic.w	r2, r2, #32
 800797a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	2164      	movs	r1, #100	; 0x64
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f967 	bl	8007c54 <SPI_EndRxTxTransaction>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	f043 0220 	orr.w	r2, r3, #32
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0203 	bic.w	r2, r2, #3
 80079a6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079c4:	68f8      	ldr	r0, [r7, #12]
 80079c6:	f7ff ff61 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079ca:	e002      	b.n	80079d2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f7fa fb97 	bl	8002100 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f7ff ff3c 	bl	8007864 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff ff38 	bl	8007878 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0203 	bic.w	r2, r2, #3
 8007a2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	f043 0210 	orr.w	r2, r3, #16
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff ff22 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff ff0e 	bl	800788c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a70:	bf00      	nop
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b088      	sub	sp, #32
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a88:	f7fb f82a 	bl	8002ae0 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	4413      	add	r3, r2
 8007a96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a98:	f7fb f822 	bl	8002ae0 <HAL_GetTick>
 8007a9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a9e:	4b39      	ldr	r3, [pc, #228]	; (8007b84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	015b      	lsls	r3, r3, #5
 8007aa4:	0d1b      	lsrs	r3, r3, #20
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
 8007aac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aae:	e054      	b.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab6:	d050      	beq.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ab8:	f7fb f812 	bl	8002ae0 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	69fa      	ldr	r2, [r7, #28]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d902      	bls.n	8007ace <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d13d      	bne.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007adc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ae6:	d111      	bne.n	8007b0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007af0:	d004      	beq.n	8007afc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007afa:	d107      	bne.n	8007b0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b14:	d10f      	bne.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e017      	b.n	8007b7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	bf0c      	ite	eq
 8007b6a:	2301      	moveq	r3, #1
 8007b6c:	2300      	movne	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d19b      	bne.n	8007ab0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000004 	.word	0x20000004

08007b88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b9c:	d111      	bne.n	8007bc2 <SPI_EndRxTransaction+0x3a>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba6:	d004      	beq.n	8007bb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bb0:	d107      	bne.n	8007bc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bca:	d12a      	bne.n	8007c22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bd4:	d012      	beq.n	8007bfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2180      	movs	r1, #128	; 0x80
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f7ff ff49 	bl	8007a78 <SPI_WaitFlagStateUntilTimeout>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d02d      	beq.n	8007c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	f043 0220 	orr.w	r2, r3, #32
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e026      	b.n	8007c4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2200      	movs	r2, #0
 8007c04:	2101      	movs	r1, #1
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff ff36 	bl	8007a78 <SPI_WaitFlagStateUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d01a      	beq.n	8007c48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	f043 0220 	orr.w	r2, r3, #32
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e013      	b.n	8007c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff ff23 	bl	8007a78 <SPI_WaitFlagStateUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	f043 0220 	orr.w	r2, r3, #32
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e000      	b.n	8007c4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b088      	sub	sp, #32
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c60:	4b1b      	ldr	r3, [pc, #108]	; (8007cd0 <SPI_EndRxTxTransaction+0x7c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <SPI_EndRxTxTransaction+0x80>)
 8007c66:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6a:	0d5b      	lsrs	r3, r3, #21
 8007c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7e:	d112      	bne.n	8007ca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fef4 	bl	8007a78 <SPI_WaitFlagStateUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d016      	beq.n	8007cc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e00f      	b.n	8007cc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d0f2      	beq.n	8007ca6 <SPI_EndRxTxTransaction+0x52>
 8007cc0:	e000      	b.n	8007cc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cc2:	bf00      	nop
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	20000004 	.word	0x20000004
 8007cd4:	165e9f81 	.word	0x165e9f81

08007cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e041      	b.n	8007d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fa fe0c 	bl	800291c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f000 fae2 	bl	80082e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d001      	beq.n	8007d90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e03c      	b.n	8007e0a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <HAL_TIM_Base_Start+0xa0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d018      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x5c>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007daa:	d013      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x5c>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1a      	ldr	r2, [pc, #104]	; (8007e1c <HAL_TIM_Base_Start+0xa4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00e      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x5c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a19      	ldr	r2, [pc, #100]	; (8007e20 <HAL_TIM_Base_Start+0xa8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d009      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x5c>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a17      	ldr	r2, [pc, #92]	; (8007e24 <HAL_TIM_Base_Start+0xac>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d004      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x5c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a16      	ldr	r2, [pc, #88]	; (8007e28 <HAL_TIM_Base_Start+0xb0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d111      	bne.n	8007df8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b06      	cmp	r3, #6
 8007de4:	d010      	beq.n	8007e08 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0201 	orr.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df6:	e007      	b.n	8007e08 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40000c00 	.word	0x40000c00
 8007e28:	40014000 	.word	0x40014000

08007e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d001      	beq.n	8007e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e044      	b.n	8007ece <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <HAL_TIM_Base_Start_IT+0xb0>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d018      	beq.n	8007e98 <HAL_TIM_Base_Start_IT+0x6c>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e6e:	d013      	beq.n	8007e98 <HAL_TIM_Base_Start_IT+0x6c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a1a      	ldr	r2, [pc, #104]	; (8007ee0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00e      	beq.n	8007e98 <HAL_TIM_Base_Start_IT+0x6c>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d009      	beq.n	8007e98 <HAL_TIM_Base_Start_IT+0x6c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <HAL_TIM_Base_Start_IT+0x6c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a16      	ldr	r2, [pc, #88]	; (8007eec <HAL_TIM_Base_Start_IT+0xc0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d111      	bne.n	8007ebc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2b06      	cmp	r3, #6
 8007ea8:	d010      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eba:	e007      	b.n	8007ecc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40010000 	.word	0x40010000
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40014000 	.word	0x40014000

08007ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d122      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d11b      	bne.n	8007f4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0202 	mvn.w	r2, #2
 8007f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f9b5 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007f38:	e005      	b.n	8007f46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f9a7 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9b8 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0304 	and.w	r3, r3, #4
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d122      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d11b      	bne.n	8007fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0204 	mvn.w	r2, #4
 8007f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f98b 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007f8c:	e005      	b.n	8007f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f97d 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f98e 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d122      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d11b      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f06f 0208 	mvn.w	r2, #8
 8007fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f003 0303 	and.w	r3, r3, #3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f961 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8007fe0:	e005      	b.n	8007fee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f953 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f964 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b10      	cmp	r3, #16
 8008000:	d122      	bne.n	8008048 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	f003 0310 	and.w	r3, r3, #16
 800800c:	2b10      	cmp	r3, #16
 800800e:	d11b      	bne.n	8008048 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0210 	mvn.w	r2, #16
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2208      	movs	r2, #8
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f937 	bl	80082a2 <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f929 	bl	800828e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f93a 	bl	80082b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10e      	bne.n	8008074 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d107      	bne.n	8008074 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0201 	mvn.w	r2, #1
 800806c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7f9 fca4 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d10e      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d107      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fab2 	bl	8008604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d10e      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8ff 	bl	80082ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0220 	mvn.w	r2, #32
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fa7c 	bl	80085f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_TIM_ConfigClockSource+0x1c>
 8008118:	2302      	movs	r3, #2
 800811a:	e0b4      	b.n	8008286 <HAL_TIM_ConfigClockSource+0x186>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800813a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008154:	d03e      	beq.n	80081d4 <HAL_TIM_ConfigClockSource+0xd4>
 8008156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800815a:	f200 8087 	bhi.w	800826c <HAL_TIM_ConfigClockSource+0x16c>
 800815e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008162:	f000 8086 	beq.w	8008272 <HAL_TIM_ConfigClockSource+0x172>
 8008166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816a:	d87f      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 800816c:	2b70      	cmp	r3, #112	; 0x70
 800816e:	d01a      	beq.n	80081a6 <HAL_TIM_ConfigClockSource+0xa6>
 8008170:	2b70      	cmp	r3, #112	; 0x70
 8008172:	d87b      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 8008174:	2b60      	cmp	r3, #96	; 0x60
 8008176:	d050      	beq.n	800821a <HAL_TIM_ConfigClockSource+0x11a>
 8008178:	2b60      	cmp	r3, #96	; 0x60
 800817a:	d877      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 800817c:	2b50      	cmp	r3, #80	; 0x50
 800817e:	d03c      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0xfa>
 8008180:	2b50      	cmp	r3, #80	; 0x50
 8008182:	d873      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d058      	beq.n	800823a <HAL_TIM_ConfigClockSource+0x13a>
 8008188:	2b40      	cmp	r3, #64	; 0x40
 800818a:	d86f      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 800818c:	2b30      	cmp	r3, #48	; 0x30
 800818e:	d064      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x15a>
 8008190:	2b30      	cmp	r3, #48	; 0x30
 8008192:	d86b      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 8008194:	2b20      	cmp	r3, #32
 8008196:	d060      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x15a>
 8008198:	2b20      	cmp	r3, #32
 800819a:	d867      	bhi.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d05c      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x15a>
 80081a0:	2b10      	cmp	r3, #16
 80081a2:	d05a      	beq.n	800825a <HAL_TIM_ConfigClockSource+0x15a>
 80081a4:	e062      	b.n	800826c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6818      	ldr	r0, [r3, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	6899      	ldr	r1, [r3, #8]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f000 f98d 	bl	80084d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80081c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	609a      	str	r2, [r3, #8]
      break;
 80081d2:	e04f      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6818      	ldr	r0, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	6899      	ldr	r1, [r3, #8]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685a      	ldr	r2, [r3, #4]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f000 f976 	bl	80084d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081f6:	609a      	str	r2, [r3, #8]
      break;
 80081f8:	e03c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	6859      	ldr	r1, [r3, #4]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	461a      	mov	r2, r3
 8008208:	f000 f8ea 	bl	80083e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2150      	movs	r1, #80	; 0x50
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f943 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8008218:	e02c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	6859      	ldr	r1, [r3, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	461a      	mov	r2, r3
 8008228:	f000 f909 	bl	800843e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2160      	movs	r1, #96	; 0x60
 8008232:	4618      	mov	r0, r3
 8008234:	f000 f933 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8008238:	e01c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	6859      	ldr	r1, [r3, #4]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	461a      	mov	r2, r3
 8008248:	f000 f8ca 	bl	80083e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2140      	movs	r1, #64	; 0x40
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f923 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 8008258:	e00c      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f000 f91a 	bl	800849e <TIM_ITRx_SetConfig>
      break;
 800826a:	e003      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
      break;
 8008270:	e000      	b.n	8008274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a34      	ldr	r2, [pc, #208]	; (80083c4 <TIM_Base_SetConfig+0xe4>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d00f      	beq.n	8008318 <TIM_Base_SetConfig+0x38>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fe:	d00b      	beq.n	8008318 <TIM_Base_SetConfig+0x38>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a31      	ldr	r2, [pc, #196]	; (80083c8 <TIM_Base_SetConfig+0xe8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <TIM_Base_SetConfig+0x38>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a30      	ldr	r2, [pc, #192]	; (80083cc <TIM_Base_SetConfig+0xec>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_Base_SetConfig+0x38>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a2f      	ldr	r2, [pc, #188]	; (80083d0 <TIM_Base_SetConfig+0xf0>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d108      	bne.n	800832a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <TIM_Base_SetConfig+0xe4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01b      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008338:	d017      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a22      	ldr	r2, [pc, #136]	; (80083c8 <TIM_Base_SetConfig+0xe8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d013      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a21      	ldr	r2, [pc, #132]	; (80083cc <TIM_Base_SetConfig+0xec>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a20      	ldr	r2, [pc, #128]	; (80083d0 <TIM_Base_SetConfig+0xf0>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a1f      	ldr	r2, [pc, #124]	; (80083d4 <TIM_Base_SetConfig+0xf4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a1e      	ldr	r2, [pc, #120]	; (80083d8 <TIM_Base_SetConfig+0xf8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_Base_SetConfig+0x8a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a1d      	ldr	r2, [pc, #116]	; (80083dc <TIM_Base_SetConfig+0xfc>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d108      	bne.n	800837c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <TIM_Base_SetConfig+0xe4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d103      	bne.n	80083b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	691a      	ldr	r2, [r3, #16]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	615a      	str	r2, [r3, #20]
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40010000 	.word	0x40010000
 80083c8:	40000400 	.word	0x40000400
 80083cc:	40000800 	.word	0x40000800
 80083d0:	40000c00 	.word	0x40000c00
 80083d4:	40014000 	.word	0x40014000
 80083d8:	40014400 	.word	0x40014400
 80083dc:	40014800 	.word	0x40014800

080083e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	f023 0201 	bic.w	r2, r3, #1
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800840a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f023 030a 	bic.w	r3, r3, #10
 800841c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4313      	orrs	r3, r2
 8008424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	621a      	str	r2, [r3, #32]
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800843e:	b480      	push	{r7}
 8008440:	b087      	sub	sp, #28
 8008442:	af00      	add	r7, sp, #0
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0210 	bic.w	r2, r3, #16
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	031b      	lsls	r3, r3, #12
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800847a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f043 0307 	orr.w	r3, r3, #7
 80084c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	609a      	str	r2, [r3, #8]
}
 80084c8:	bf00      	nop
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	021a      	lsls	r2, r3, #8
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	609a      	str	r2, [r3, #8]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008528:	2302      	movs	r3, #2
 800852a:	e050      	b.n	80085ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1c      	ldr	r2, [pc, #112]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d018      	beq.n	80085a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008578:	d013      	beq.n	80085a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a18      	ldr	r2, [pc, #96]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d00e      	beq.n	80085a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a16      	ldr	r2, [pc, #88]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d009      	beq.n	80085a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d004      	beq.n	80085a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a13      	ldr	r2, [pc, #76]	; (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d10c      	bne.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40000400 	.word	0x40000400
 80085e4:	40000800 	.word	0x40000800
 80085e8:	40000c00 	.word	0x40000c00
 80085ec:	40014000 	.word	0x40014000

080085f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <__libc_init_array>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4d0d      	ldr	r5, [pc, #52]	; (8008650 <__libc_init_array+0x38>)
 800861c:	4c0d      	ldr	r4, [pc, #52]	; (8008654 <__libc_init_array+0x3c>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	2600      	movs	r6, #0
 8008624:	42a6      	cmp	r6, r4
 8008626:	d109      	bne.n	800863c <__libc_init_array+0x24>
 8008628:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__libc_init_array+0x40>)
 800862a:	4c0c      	ldr	r4, [pc, #48]	; (800865c <__libc_init_array+0x44>)
 800862c:	f000 fa6a 	bl	8008b04 <_init>
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	2600      	movs	r6, #0
 8008636:	42a6      	cmp	r6, r4
 8008638:	d105      	bne.n	8008646 <__libc_init_array+0x2e>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008640:	4798      	blx	r3
 8008642:	3601      	adds	r6, #1
 8008644:	e7ee      	b.n	8008624 <__libc_init_array+0xc>
 8008646:	f855 3b04 	ldr.w	r3, [r5], #4
 800864a:	4798      	blx	r3
 800864c:	3601      	adds	r6, #1
 800864e:	e7f2      	b.n	8008636 <__libc_init_array+0x1e>
 8008650:	08008b44 	.word	0x08008b44
 8008654:	08008b44 	.word	0x08008b44
 8008658:	08008b44 	.word	0x08008b44
 800865c:	08008b48 	.word	0x08008b48

08008660 <memcpy>:
 8008660:	440a      	add	r2, r1
 8008662:	4291      	cmp	r1, r2
 8008664:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008668:	d100      	bne.n	800866c <memcpy+0xc>
 800866a:	4770      	bx	lr
 800866c:	b510      	push	{r4, lr}
 800866e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008676:	4291      	cmp	r1, r2
 8008678:	d1f9      	bne.n	800866e <memcpy+0xe>
 800867a:	bd10      	pop	{r4, pc}

0800867c <calloc>:
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <calloc+0xc>)
 800867e:	460a      	mov	r2, r1
 8008680:	4601      	mov	r1, r0
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	f000 b802 	b.w	800868c <_calloc_r>
 8008688:	2000005c 	.word	0x2000005c

0800868c <_calloc_r>:
 800868c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800868e:	fba1 2402 	umull	r2, r4, r1, r2
 8008692:	b94c      	cbnz	r4, 80086a8 <_calloc_r+0x1c>
 8008694:	4611      	mov	r1, r2
 8008696:	9201      	str	r2, [sp, #4]
 8008698:	f000 f83e 	bl	8008718 <_malloc_r>
 800869c:	9a01      	ldr	r2, [sp, #4]
 800869e:	4605      	mov	r5, r0
 80086a0:	b930      	cbnz	r0, 80086b0 <_calloc_r+0x24>
 80086a2:	4628      	mov	r0, r5
 80086a4:	b003      	add	sp, #12
 80086a6:	bd30      	pop	{r4, r5, pc}
 80086a8:	220c      	movs	r2, #12
 80086aa:	6002      	str	r2, [r0, #0]
 80086ac:	2500      	movs	r5, #0
 80086ae:	e7f8      	b.n	80086a2 <_calloc_r+0x16>
 80086b0:	4621      	mov	r1, r4
 80086b2:	f000 f807 	bl	80086c4 <memset>
 80086b6:	e7f4      	b.n	80086a2 <_calloc_r+0x16>

080086b8 <__errno>:
 80086b8:	4b01      	ldr	r3, [pc, #4]	; (80086c0 <__errno+0x8>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	2000005c 	.word	0x2000005c

080086c4 <memset>:
 80086c4:	4402      	add	r2, r0
 80086c6:	4603      	mov	r3, r0
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d100      	bne.n	80086ce <memset+0xa>
 80086cc:	4770      	bx	lr
 80086ce:	f803 1b01 	strb.w	r1, [r3], #1
 80086d2:	e7f9      	b.n	80086c8 <memset+0x4>

080086d4 <__retarget_lock_acquire_recursive>:
 80086d4:	4770      	bx	lr

080086d6 <__retarget_lock_release_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <sbrk_aligned>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	4e0e      	ldr	r6, [pc, #56]	; (8008714 <sbrk_aligned+0x3c>)
 80086dc:	460c      	mov	r4, r1
 80086de:	6831      	ldr	r1, [r6, #0]
 80086e0:	4605      	mov	r5, r0
 80086e2:	b911      	cbnz	r1, 80086ea <sbrk_aligned+0x12>
 80086e4:	f000 f89a 	bl	800881c <_sbrk_r>
 80086e8:	6030      	str	r0, [r6, #0]
 80086ea:	4621      	mov	r1, r4
 80086ec:	4628      	mov	r0, r5
 80086ee:	f000 f895 	bl	800881c <_sbrk_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	d00a      	beq.n	800870c <sbrk_aligned+0x34>
 80086f6:	1cc4      	adds	r4, r0, #3
 80086f8:	f024 0403 	bic.w	r4, r4, #3
 80086fc:	42a0      	cmp	r0, r4
 80086fe:	d007      	beq.n	8008710 <sbrk_aligned+0x38>
 8008700:	1a21      	subs	r1, r4, r0
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f88a 	bl	800881c <_sbrk_r>
 8008708:	3001      	adds	r0, #1
 800870a:	d101      	bne.n	8008710 <sbrk_aligned+0x38>
 800870c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008710:	4620      	mov	r0, r4
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	2000090c 	.word	0x2000090c

08008718 <_malloc_r>:
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871c:	1ccd      	adds	r5, r1, #3
 800871e:	f025 0503 	bic.w	r5, r5, #3
 8008722:	3508      	adds	r5, #8
 8008724:	2d0c      	cmp	r5, #12
 8008726:	bf38      	it	cc
 8008728:	250c      	movcc	r5, #12
 800872a:	2d00      	cmp	r5, #0
 800872c:	4607      	mov	r7, r0
 800872e:	db01      	blt.n	8008734 <_malloc_r+0x1c>
 8008730:	42a9      	cmp	r1, r5
 8008732:	d905      	bls.n	8008740 <_malloc_r+0x28>
 8008734:	230c      	movs	r3, #12
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	2600      	movs	r6, #0
 800873a:	4630      	mov	r0, r6
 800873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008740:	4e2f      	ldr	r6, [pc, #188]	; (8008800 <_malloc_r+0xe8>)
 8008742:	f000 f85f 	bl	8008804 <__malloc_lock>
 8008746:	6833      	ldr	r3, [r6, #0]
 8008748:	461c      	mov	r4, r3
 800874a:	bb44      	cbnz	r4, 800879e <_malloc_r+0x86>
 800874c:	4629      	mov	r1, r5
 800874e:	4638      	mov	r0, r7
 8008750:	f7ff ffc2 	bl	80086d8 <sbrk_aligned>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	4604      	mov	r4, r0
 8008758:	d14f      	bne.n	80087fa <_malloc_r+0xe2>
 800875a:	6834      	ldr	r4, [r6, #0]
 800875c:	4626      	mov	r6, r4
 800875e:	2e00      	cmp	r6, #0
 8008760:	d142      	bne.n	80087e8 <_malloc_r+0xd0>
 8008762:	2c00      	cmp	r4, #0
 8008764:	d043      	beq.n	80087ee <_malloc_r+0xd6>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	4631      	mov	r1, r6
 800876a:	4638      	mov	r0, r7
 800876c:	eb04 0803 	add.w	r8, r4, r3
 8008770:	f000 f854 	bl	800881c <_sbrk_r>
 8008774:	4580      	cmp	r8, r0
 8008776:	d13a      	bne.n	80087ee <_malloc_r+0xd6>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	3503      	adds	r5, #3
 800877c:	1aed      	subs	r5, r5, r3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	4629      	mov	r1, r5
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff ffa3 	bl	80086d8 <sbrk_aligned>
 8008792:	3001      	adds	r0, #1
 8008794:	d02b      	beq.n	80087ee <_malloc_r+0xd6>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	442b      	add	r3, r5
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	e00e      	b.n	80087bc <_malloc_r+0xa4>
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	1b52      	subs	r2, r2, r5
 80087a2:	d41e      	bmi.n	80087e2 <_malloc_r+0xca>
 80087a4:	2a0b      	cmp	r2, #11
 80087a6:	d916      	bls.n	80087d6 <_malloc_r+0xbe>
 80087a8:	1961      	adds	r1, r4, r5
 80087aa:	42a3      	cmp	r3, r4
 80087ac:	6025      	str	r5, [r4, #0]
 80087ae:	bf18      	it	ne
 80087b0:	6059      	strne	r1, [r3, #4]
 80087b2:	6863      	ldr	r3, [r4, #4]
 80087b4:	bf08      	it	eq
 80087b6:	6031      	streq	r1, [r6, #0]
 80087b8:	5162      	str	r2, [r4, r5]
 80087ba:	604b      	str	r3, [r1, #4]
 80087bc:	4638      	mov	r0, r7
 80087be:	f104 060b 	add.w	r6, r4, #11
 80087c2:	f000 f825 	bl	8008810 <__malloc_unlock>
 80087c6:	f026 0607 	bic.w	r6, r6, #7
 80087ca:	1d23      	adds	r3, r4, #4
 80087cc:	1af2      	subs	r2, r6, r3
 80087ce:	d0b4      	beq.n	800873a <_malloc_r+0x22>
 80087d0:	1b9b      	subs	r3, r3, r6
 80087d2:	50a3      	str	r3, [r4, r2]
 80087d4:	e7b1      	b.n	800873a <_malloc_r+0x22>
 80087d6:	6862      	ldr	r2, [r4, #4]
 80087d8:	42a3      	cmp	r3, r4
 80087da:	bf0c      	ite	eq
 80087dc:	6032      	streq	r2, [r6, #0]
 80087de:	605a      	strne	r2, [r3, #4]
 80087e0:	e7ec      	b.n	80087bc <_malloc_r+0xa4>
 80087e2:	4623      	mov	r3, r4
 80087e4:	6864      	ldr	r4, [r4, #4]
 80087e6:	e7b0      	b.n	800874a <_malloc_r+0x32>
 80087e8:	4634      	mov	r4, r6
 80087ea:	6876      	ldr	r6, [r6, #4]
 80087ec:	e7b7      	b.n	800875e <_malloc_r+0x46>
 80087ee:	230c      	movs	r3, #12
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	4638      	mov	r0, r7
 80087f4:	f000 f80c 	bl	8008810 <__malloc_unlock>
 80087f8:	e79f      	b.n	800873a <_malloc_r+0x22>
 80087fa:	6025      	str	r5, [r4, #0]
 80087fc:	e7de      	b.n	80087bc <_malloc_r+0xa4>
 80087fe:	bf00      	nop
 8008800:	20000908 	.word	0x20000908

08008804 <__malloc_lock>:
 8008804:	4801      	ldr	r0, [pc, #4]	; (800880c <__malloc_lock+0x8>)
 8008806:	f7ff bf65 	b.w	80086d4 <__retarget_lock_acquire_recursive>
 800880a:	bf00      	nop
 800880c:	20000900 	.word	0x20000900

08008810 <__malloc_unlock>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__malloc_unlock+0x8>)
 8008812:	f7ff bf60 	b.w	80086d6 <__retarget_lock_release_recursive>
 8008816:	bf00      	nop
 8008818:	20000900 	.word	0x20000900

0800881c <_sbrk_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4d06      	ldr	r5, [pc, #24]	; (8008838 <_sbrk_r+0x1c>)
 8008820:	2300      	movs	r3, #0
 8008822:	4604      	mov	r4, r0
 8008824:	4608      	mov	r0, r1
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	f7f9 ff74 	bl	8002714 <_sbrk>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_sbrk_r+0x1a>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_sbrk_r+0x1a>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000904 	.word	0x20000904

0800883c <__udivmoddi4>:
 800883c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	9e08      	ldr	r6, [sp, #32]
 8008842:	460d      	mov	r5, r1
 8008844:	4604      	mov	r4, r0
 8008846:	460f      	mov	r7, r1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d14a      	bne.n	80088e2 <__udivmoddi4+0xa6>
 800884c:	428a      	cmp	r2, r1
 800884e:	4694      	mov	ip, r2
 8008850:	d965      	bls.n	800891e <__udivmoddi4+0xe2>
 8008852:	fab2 f382 	clz	r3, r2
 8008856:	b143      	cbz	r3, 800886a <__udivmoddi4+0x2e>
 8008858:	fa02 fc03 	lsl.w	ip, r2, r3
 800885c:	f1c3 0220 	rsb	r2, r3, #32
 8008860:	409f      	lsls	r7, r3
 8008862:	fa20 f202 	lsr.w	r2, r0, r2
 8008866:	4317      	orrs	r7, r2
 8008868:	409c      	lsls	r4, r3
 800886a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800886e:	fa1f f58c 	uxth.w	r5, ip
 8008872:	fbb7 f1fe 	udiv	r1, r7, lr
 8008876:	0c22      	lsrs	r2, r4, #16
 8008878:	fb0e 7711 	mls	r7, lr, r1, r7
 800887c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008880:	fb01 f005 	mul.w	r0, r1, r5
 8008884:	4290      	cmp	r0, r2
 8008886:	d90a      	bls.n	800889e <__udivmoddi4+0x62>
 8008888:	eb1c 0202 	adds.w	r2, ip, r2
 800888c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8008890:	f080 811c 	bcs.w	8008acc <__udivmoddi4+0x290>
 8008894:	4290      	cmp	r0, r2
 8008896:	f240 8119 	bls.w	8008acc <__udivmoddi4+0x290>
 800889a:	3902      	subs	r1, #2
 800889c:	4462      	add	r2, ip
 800889e:	1a12      	subs	r2, r2, r0
 80088a0:	b2a4      	uxth	r4, r4
 80088a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80088a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80088aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80088ae:	fb00 f505 	mul.w	r5, r0, r5
 80088b2:	42a5      	cmp	r5, r4
 80088b4:	d90a      	bls.n	80088cc <__udivmoddi4+0x90>
 80088b6:	eb1c 0404 	adds.w	r4, ip, r4
 80088ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80088be:	f080 8107 	bcs.w	8008ad0 <__udivmoddi4+0x294>
 80088c2:	42a5      	cmp	r5, r4
 80088c4:	f240 8104 	bls.w	8008ad0 <__udivmoddi4+0x294>
 80088c8:	4464      	add	r4, ip
 80088ca:	3802      	subs	r0, #2
 80088cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80088d0:	1b64      	subs	r4, r4, r5
 80088d2:	2100      	movs	r1, #0
 80088d4:	b11e      	cbz	r6, 80088de <__udivmoddi4+0xa2>
 80088d6:	40dc      	lsrs	r4, r3
 80088d8:	2300      	movs	r3, #0
 80088da:	e9c6 4300 	strd	r4, r3, [r6]
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	428b      	cmp	r3, r1
 80088e4:	d908      	bls.n	80088f8 <__udivmoddi4+0xbc>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	f000 80ed 	beq.w	8008ac6 <__udivmoddi4+0x28a>
 80088ec:	2100      	movs	r1, #0
 80088ee:	e9c6 0500 	strd	r0, r5, [r6]
 80088f2:	4608      	mov	r0, r1
 80088f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088f8:	fab3 f183 	clz	r1, r3
 80088fc:	2900      	cmp	r1, #0
 80088fe:	d149      	bne.n	8008994 <__udivmoddi4+0x158>
 8008900:	42ab      	cmp	r3, r5
 8008902:	d302      	bcc.n	800890a <__udivmoddi4+0xce>
 8008904:	4282      	cmp	r2, r0
 8008906:	f200 80f8 	bhi.w	8008afa <__udivmoddi4+0x2be>
 800890a:	1a84      	subs	r4, r0, r2
 800890c:	eb65 0203 	sbc.w	r2, r5, r3
 8008910:	2001      	movs	r0, #1
 8008912:	4617      	mov	r7, r2
 8008914:	2e00      	cmp	r6, #0
 8008916:	d0e2      	beq.n	80088de <__udivmoddi4+0xa2>
 8008918:	e9c6 4700 	strd	r4, r7, [r6]
 800891c:	e7df      	b.n	80088de <__udivmoddi4+0xa2>
 800891e:	b902      	cbnz	r2, 8008922 <__udivmoddi4+0xe6>
 8008920:	deff      	udf	#255	; 0xff
 8008922:	fab2 f382 	clz	r3, r2
 8008926:	2b00      	cmp	r3, #0
 8008928:	f040 8090 	bne.w	8008a4c <__udivmoddi4+0x210>
 800892c:	1a8a      	subs	r2, r1, r2
 800892e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008932:	fa1f fe8c 	uxth.w	lr, ip
 8008936:	2101      	movs	r1, #1
 8008938:	fbb2 f5f7 	udiv	r5, r2, r7
 800893c:	fb07 2015 	mls	r0, r7, r5, r2
 8008940:	0c22      	lsrs	r2, r4, #16
 8008942:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008946:	fb0e f005 	mul.w	r0, lr, r5
 800894a:	4290      	cmp	r0, r2
 800894c:	d908      	bls.n	8008960 <__udivmoddi4+0x124>
 800894e:	eb1c 0202 	adds.w	r2, ip, r2
 8008952:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008956:	d202      	bcs.n	800895e <__udivmoddi4+0x122>
 8008958:	4290      	cmp	r0, r2
 800895a:	f200 80cb 	bhi.w	8008af4 <__udivmoddi4+0x2b8>
 800895e:	4645      	mov	r5, r8
 8008960:	1a12      	subs	r2, r2, r0
 8008962:	b2a4      	uxth	r4, r4
 8008964:	fbb2 f0f7 	udiv	r0, r2, r7
 8008968:	fb07 2210 	mls	r2, r7, r0, r2
 800896c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008970:	fb0e fe00 	mul.w	lr, lr, r0
 8008974:	45a6      	cmp	lr, r4
 8008976:	d908      	bls.n	800898a <__udivmoddi4+0x14e>
 8008978:	eb1c 0404 	adds.w	r4, ip, r4
 800897c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8008980:	d202      	bcs.n	8008988 <__udivmoddi4+0x14c>
 8008982:	45a6      	cmp	lr, r4
 8008984:	f200 80bb 	bhi.w	8008afe <__udivmoddi4+0x2c2>
 8008988:	4610      	mov	r0, r2
 800898a:	eba4 040e 	sub.w	r4, r4, lr
 800898e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8008992:	e79f      	b.n	80088d4 <__udivmoddi4+0x98>
 8008994:	f1c1 0720 	rsb	r7, r1, #32
 8008998:	408b      	lsls	r3, r1
 800899a:	fa22 fc07 	lsr.w	ip, r2, r7
 800899e:	ea4c 0c03 	orr.w	ip, ip, r3
 80089a2:	fa05 f401 	lsl.w	r4, r5, r1
 80089a6:	fa20 f307 	lsr.w	r3, r0, r7
 80089aa:	40fd      	lsrs	r5, r7
 80089ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80089b0:	4323      	orrs	r3, r4
 80089b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80089b6:	fa1f fe8c 	uxth.w	lr, ip
 80089ba:	fb09 5518 	mls	r5, r9, r8, r5
 80089be:	0c1c      	lsrs	r4, r3, #16
 80089c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80089c4:	fb08 f50e 	mul.w	r5, r8, lr
 80089c8:	42a5      	cmp	r5, r4
 80089ca:	fa02 f201 	lsl.w	r2, r2, r1
 80089ce:	fa00 f001 	lsl.w	r0, r0, r1
 80089d2:	d90b      	bls.n	80089ec <__udivmoddi4+0x1b0>
 80089d4:	eb1c 0404 	adds.w	r4, ip, r4
 80089d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80089dc:	f080 8088 	bcs.w	8008af0 <__udivmoddi4+0x2b4>
 80089e0:	42a5      	cmp	r5, r4
 80089e2:	f240 8085 	bls.w	8008af0 <__udivmoddi4+0x2b4>
 80089e6:	f1a8 0802 	sub.w	r8, r8, #2
 80089ea:	4464      	add	r4, ip
 80089ec:	1b64      	subs	r4, r4, r5
 80089ee:	b29d      	uxth	r5, r3
 80089f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80089f4:	fb09 4413 	mls	r4, r9, r3, r4
 80089f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80089fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8008a00:	45a6      	cmp	lr, r4
 8008a02:	d908      	bls.n	8008a16 <__udivmoddi4+0x1da>
 8008a04:	eb1c 0404 	adds.w	r4, ip, r4
 8008a08:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008a0c:	d26c      	bcs.n	8008ae8 <__udivmoddi4+0x2ac>
 8008a0e:	45a6      	cmp	lr, r4
 8008a10:	d96a      	bls.n	8008ae8 <__udivmoddi4+0x2ac>
 8008a12:	3b02      	subs	r3, #2
 8008a14:	4464      	add	r4, ip
 8008a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008a1a:	fba3 9502 	umull	r9, r5, r3, r2
 8008a1e:	eba4 040e 	sub.w	r4, r4, lr
 8008a22:	42ac      	cmp	r4, r5
 8008a24:	46c8      	mov	r8, r9
 8008a26:	46ae      	mov	lr, r5
 8008a28:	d356      	bcc.n	8008ad8 <__udivmoddi4+0x29c>
 8008a2a:	d053      	beq.n	8008ad4 <__udivmoddi4+0x298>
 8008a2c:	b156      	cbz	r6, 8008a44 <__udivmoddi4+0x208>
 8008a2e:	ebb0 0208 	subs.w	r2, r0, r8
 8008a32:	eb64 040e 	sbc.w	r4, r4, lr
 8008a36:	fa04 f707 	lsl.w	r7, r4, r7
 8008a3a:	40ca      	lsrs	r2, r1
 8008a3c:	40cc      	lsrs	r4, r1
 8008a3e:	4317      	orrs	r7, r2
 8008a40:	e9c6 7400 	strd	r7, r4, [r6]
 8008a44:	4618      	mov	r0, r3
 8008a46:	2100      	movs	r1, #0
 8008a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4c:	f1c3 0120 	rsb	r1, r3, #32
 8008a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8008a54:	fa20 f201 	lsr.w	r2, r0, r1
 8008a58:	fa25 f101 	lsr.w	r1, r5, r1
 8008a5c:	409d      	lsls	r5, r3
 8008a5e:	432a      	orrs	r2, r5
 8008a60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008a64:	fa1f fe8c 	uxth.w	lr, ip
 8008a68:	fbb1 f0f7 	udiv	r0, r1, r7
 8008a6c:	fb07 1510 	mls	r5, r7, r0, r1
 8008a70:	0c11      	lsrs	r1, r2, #16
 8008a72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008a76:	fb00 f50e 	mul.w	r5, r0, lr
 8008a7a:	428d      	cmp	r5, r1
 8008a7c:	fa04 f403 	lsl.w	r4, r4, r3
 8008a80:	d908      	bls.n	8008a94 <__udivmoddi4+0x258>
 8008a82:	eb1c 0101 	adds.w	r1, ip, r1
 8008a86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8008a8a:	d22f      	bcs.n	8008aec <__udivmoddi4+0x2b0>
 8008a8c:	428d      	cmp	r5, r1
 8008a8e:	d92d      	bls.n	8008aec <__udivmoddi4+0x2b0>
 8008a90:	3802      	subs	r0, #2
 8008a92:	4461      	add	r1, ip
 8008a94:	1b49      	subs	r1, r1, r5
 8008a96:	b292      	uxth	r2, r2
 8008a98:	fbb1 f5f7 	udiv	r5, r1, r7
 8008a9c:	fb07 1115 	mls	r1, r7, r5, r1
 8008aa0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008aa4:	fb05 f10e 	mul.w	r1, r5, lr
 8008aa8:	4291      	cmp	r1, r2
 8008aaa:	d908      	bls.n	8008abe <__udivmoddi4+0x282>
 8008aac:	eb1c 0202 	adds.w	r2, ip, r2
 8008ab0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8008ab4:	d216      	bcs.n	8008ae4 <__udivmoddi4+0x2a8>
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d914      	bls.n	8008ae4 <__udivmoddi4+0x2a8>
 8008aba:	3d02      	subs	r5, #2
 8008abc:	4462      	add	r2, ip
 8008abe:	1a52      	subs	r2, r2, r1
 8008ac0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008ac4:	e738      	b.n	8008938 <__udivmoddi4+0xfc>
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4630      	mov	r0, r6
 8008aca:	e708      	b.n	80088de <__udivmoddi4+0xa2>
 8008acc:	4639      	mov	r1, r7
 8008ace:	e6e6      	b.n	800889e <__udivmoddi4+0x62>
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	e6fb      	b.n	80088cc <__udivmoddi4+0x90>
 8008ad4:	4548      	cmp	r0, r9
 8008ad6:	d2a9      	bcs.n	8008a2c <__udivmoddi4+0x1f0>
 8008ad8:	ebb9 0802 	subs.w	r8, r9, r2
 8008adc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	e7a3      	b.n	8008a2c <__udivmoddi4+0x1f0>
 8008ae4:	4645      	mov	r5, r8
 8008ae6:	e7ea      	b.n	8008abe <__udivmoddi4+0x282>
 8008ae8:	462b      	mov	r3, r5
 8008aea:	e794      	b.n	8008a16 <__udivmoddi4+0x1da>
 8008aec:	4640      	mov	r0, r8
 8008aee:	e7d1      	b.n	8008a94 <__udivmoddi4+0x258>
 8008af0:	46d0      	mov	r8, sl
 8008af2:	e77b      	b.n	80089ec <__udivmoddi4+0x1b0>
 8008af4:	3d02      	subs	r5, #2
 8008af6:	4462      	add	r2, ip
 8008af8:	e732      	b.n	8008960 <__udivmoddi4+0x124>
 8008afa:	4608      	mov	r0, r1
 8008afc:	e70a      	b.n	8008914 <__udivmoddi4+0xd8>
 8008afe:	4464      	add	r4, ip
 8008b00:	3802      	subs	r0, #2
 8008b02:	e742      	b.n	800898a <__udivmoddi4+0x14e>

08008b04 <_init>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr

08008b10 <_fini>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr
