
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086bc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a74  08008a74  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a7c  08008a7c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000060  08008ae4  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000910  08008ae4  00020910  2**0
  1 .text         00009178  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08009310  08009310  00019310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009530  08009530  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009530  08009530  00019530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009538  08009538  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009538  08009538  00019538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  20000078  080095b4  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  080095b4  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148ea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f31  00000000  00000000  0003498e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000378c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cef  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017076  00000000  00000000  0005287f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009af8f  00000000  00000000  000698f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104884  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019330  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047a2  00000000  00000000  000393f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  0003db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001022  00000000  00000000  0003f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d20  00000000  00000000  000400c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f7e  00000000  00000000  00058de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c6e8  00000000  00000000  0006ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005058  00000000  00000000  0010b448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000144  00000000  00000000  001104a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 000012b0  00000000  00000000  001105e4  2**0
 20 .debug_frame  00004f44  00000000  00000000  001048d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080092f8 	.word	0x080092f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080092f8 	.word	0x080092f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a84 <__aeabi_uldivmod>:
 8000a84:	b953      	cbnz	r3, 8000a9c <__aeabi_uldivmod+0x18>
 8000a86:	b94a      	cbnz	r2, 8000a9c <__aeabi_uldivmod+0x18>
 8000a88:	2900      	cmp	r1, #0
 8000a8a:	bf08      	it	eq
 8000a8c:	2800      	cmpeq	r0, #0
 8000a8e:	bf1c      	itt	ne
 8000a90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a98:	f000 b80c 	b.w	8000ab4 <__aeabi_idiv0>
 8000a9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa4:	f007 fd66 	bl	8008574 <__udivmoddi4>
 8000aa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr
08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af8 <__do_global_dtors_aux>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	4c06      	ldr	r4, [pc, #24]	; (8000b14 <__do_global_dtors_aux+0x1c>)
 8000afc:	7823      	ldrb	r3, [r4, #0]
 8000afe:	b943      	cbnz	r3, 8000b12 <__do_global_dtors_aux+0x1a>
 8000b00:	f7ff ffda 	bl	8000ab8 <deregister_tm_clones>
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__do_global_dtors_aux+0x20>)
 8000b06:	b113      	cbz	r3, 8000b0e <__do_global_dtors_aux+0x16>
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <__do_global_dtors_aux+0x24>)
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	2301      	movs	r3, #1
 8000b10:	7023      	strb	r3, [r4, #0]
 8000b12:	bd10      	pop	{r4, pc}
 8000b14:	20000060 	.word	0x20000060
 8000b18:	00000000 	.word	0x00000000
 8000b1c:	0800883c 	.word	0x0800883c

08000b20 <frame_dummy>:
 8000b20:	b508      	push	{r3, lr}
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <frame_dummy+0x18>)
 8000b24:	b11b      	cbz	r3, 8000b2e <frame_dummy+0xe>
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <frame_dummy+0x1c>)
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <frame_dummy+0x20>)
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000b32:	f7ff bfcf 	b.w	8000ad4 <register_tm_clones>
 8000b36:	bf00      	nop
 8000b38:	00000000 	.word	0x00000000
 8000b3c:	20000064 	.word	0x20000064
 8000b40:	0800883c 	.word	0x0800883c
08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_ADC1_Init+0x9c>)
 8000dde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000de6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <MX_ADC1_Init+0xa0>)
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000ba6:	f001 fe2b 	bl	8002800 <HAL_ADC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bb0:	f001 fa8e 	bl	80020d0 <Error_Handler>
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e2a:	f002 fb79 	bl	8003520 <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f001 ffdc 	bl	8002df0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_ADC1_Init+0x98>)
 8000bc6:	f002 f887 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f001 fa7e 	bl	80020d0 <Error_Handler>
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_ADC1_Init+0x98>)
 8000e4a:	f002 fdd5 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e54:	f001 ffcc 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000094 	.word	0x20000094
 8000e64:	40012000 	.word	0x40012000
 8000e68:	0f000001 	.word	0x0f000001

08000e6c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	; 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a37      	ldr	r2, [pc, #220]	; (8000f68 <HAL_ADC_MspInit+0xfc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d168      	bne.n	8000f60 <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4a35      	ldr	r2, [pc, #212]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a2e      	ldr	r2, [pc, #184]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_ADC_MspInit+0x100>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AS5600_ANALOG_IN_Pin;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AS5600_ANALOG_IN_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4825      	ldr	r0, [pc, #148]	; (8000cec <HAL_ADC_MspInit+0x104>)
 8000c56:	f002 ffab 	bl	8003bb0 <HAL_GPIO_Init>
 8000ed2:	f107 0314 	add.w	r3, r7, #20
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4825      	ldr	r0, [pc, #148]	; (8000f70 <HAL_ADC_MspInit+0x104>)
 8000eda:	f003 fcf9 	bl	80048d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee0:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_ADC_MspInit+0x10c>)
 8000ee2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000ef8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f24:	2203      	movs	r2, #3
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ADC_MspInit+0x108>)
 8000cb2:	f002 fbdd 	bl	8003470 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000cbc:	f001 fa08 	bl	80020d0 <Error_Handler>
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f36:	f003 f92b 	bl	8004190 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000f40:	f001 ff56 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_ADC_MspInit+0x108>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f002 fb96 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd6:	2012      	movs	r0, #18
 8000cd8:	f002 fbaf 	bl	800343a <HAL_NVIC_EnableIRQ>
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2012      	movs	r0, #18
 8000f56:	f003 f8e4 	bl	8004122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f5a:	2012      	movs	r0, #18
 8000f5c:	f003 f8fd 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	200000dc 	.word	0x200000dc
 8000f78:	40026470 	.word	0x40026470

08000f7c <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	2118      	movs	r1, #24
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f007 fb58 	bl	80083b4 <calloc>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	2118      	movs	r1, #24
 8000f82:	2001      	movs	r0, #1
 8000f84:	f008 f8a8 	bl	80090d8 <calloc>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <AS5600_init+0x16>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	220a      	movs	r2, #10
 8000fa2:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b9b      	ldrb	r3, [r3, #14]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <AS5600_init+0x24>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2201      	movs	r2, #1
 8000fb0:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7bdb      	ldrb	r3, [r3, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d102      	bne.n	8000fc0 <AS5600_init+0x32>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7c1b      	ldrb	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <AS5600_init+0x40>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7c5b      	ldrb	r3, [r3, #17]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d102      	bne.n	8000fdc <AS5600_init+0x4e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7c9b      	ldrb	r3, [r3, #18]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <AS5600_init+0x5c>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7cdb      	ldrb	r3, [r3, #19]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <AS5600_init+0x6a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7d1b      	ldrb	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <AS5600_init+0x78>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7d5b      	ldrb	r3, [r3, #21]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <AS5600_init+0x86>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2202      	movs	r2, #2
 8001012:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7bdb      	ldrb	r3, [r3, #15]
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f86a 	bl	80010f4 <AS5600_set_low_power_mode>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <AS5600_init+0x9c>
 8001026:	2301      	movs	r3, #1
 8001028:	e05f      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7c1b      	ldrb	r3, [r3, #16]
 800102e:	4619      	mov	r1, r3
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f8b3 	bl	800119c <AS5600_set_hysteresis>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <AS5600_init+0xb2>
 800103c:	2301      	movs	r3, #1
 800103e:	e054      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7c59      	ldrb	r1, [r3, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7c9b      	ldrb	r3, [r3, #18]
 8001048:	461a      	mov	r2, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f8fa 	bl	8001244 <AS5600_set_output_mode>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <AS5600_init+0xcc>
 8001056:	2301      	movs	r3, #1
 8001058:	e047      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7cdb      	ldrb	r3, [r3, #19]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f983 	bl	800136c <AS5600_set_slow_filter>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <AS5600_init+0xe2>
 800106c:	2301      	movs	r3, #1
 800106e:	e03c      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7d1b      	ldrb	r3, [r3, #20]
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f9cc 	bl	8001414 <AS5600_set_fast_filter_threshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <AS5600_init+0xf8>
 8001082:	2301      	movs	r3, #1
 8001084:	e031      	b.n	80010ea <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7d5b      	ldrb	r3, [r3, #21]
 800108a:	4619      	mov	r1, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fa61 	bl	8001554 <AS5600_set_watchdog_timer>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <AS5600_init+0x10e>
 8001098:	2301      	movs	r3, #1
 800109a:	e026      	b.n	80010ea <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa80 	bl	80015a2 <AS5600_write_config_register>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <AS5600_init+0x11e>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e01e      	b.n	80010ea <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	4619      	mov	r1, r3
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 fab2 	bl	8001620 <AS5600_get_magnet_status>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <AS5600_init+0x138>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e011      	b.n	80010ea <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d009      	beq.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d104      	bne.n	80010e4 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <AS5600_init+0x15a>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <AS5600_init+0x15c>
	return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET); break;
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	3b01      	subs	r3, #1
 8001104:	2b03      	cmp	r3, #3
 8001106:	d83f      	bhi.n	8001188 <AS5600_set_low_power_mode+0x94>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <AS5600_set_low_power_mode+0x1c>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001121 	.word	0x08001121
 8001114:	08001133 	.word	0x08001133
 8001118:	08001155 	.word	0x08001155
 800111c:	08001177 	.word	0x08001177
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7ddb      	ldrb	r3, [r3, #23]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f023 0303 	bic.w	r3, r3, #3
 800112a:	b2da      	uxtb	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	75da      	strb	r2, [r3, #23]
		break;
 8001130:	e02c      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7ddb      	ldrb	r3, [r3, #23]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2da      	uxtb	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7ddb      	ldrb	r3, [r3, #23]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f023 0302 	bic.w	r3, r3, #2
 800114c:	b2da      	uxtb	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	75da      	strb	r2, [r3, #23]
	break;
 8001152:	e01b      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7ddb      	ldrb	r3, [r3, #23]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7ddb      	ldrb	r3, [r3, #23]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	75da      	strb	r2, [r3, #23]
		break;
 8001174:	e00a      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7ddb      	ldrb	r3, [r3, #23]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f043 0303 	orr.w	r3, r3, #3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	75da      	strb	r2, [r3, #23]
		break;
 8001186:	e001      	b.n	800118c <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d83f      	bhi.n	8001230 <AS5600_set_hysteresis+0x94>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <AS5600_set_hysteresis+0x1c>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011db 	.word	0x080011db
 80011c0:	080011fd 	.word	0x080011fd
 80011c4:	0800121f 	.word	0x0800121f
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7ddb      	ldrb	r3, [r3, #23]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f023 030c 	bic.w	r3, r3, #12
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	75da      	strb	r2, [r3, #23]
		break;
 80011d8:	e02c      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7ddb      	ldrb	r3, [r3, #23]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7ddb      	ldrb	r3, [r3, #23]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f023 0308 	bic.w	r3, r3, #8
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	75da      	strb	r2, [r3, #23]
		break;
 80011fa:	e01b      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7ddb      	ldrb	r3, [r3, #23]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0304 	bic.w	r3, r3, #4
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7ddb      	ldrb	r3, [r3, #23]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	75da      	strb	r2, [r3, #23]
		break;
 800121c:	e00a      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7ddb      	ldrb	r3, [r3, #23]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f043 030c 	orr.w	r3, r3, #12
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	75da      	strb	r2, [r3, #23]
		break;
 800122e:	e001      	b.n	8001234 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d020      	beq.n	80012a0 <AS5600_set_output_mode+0x5c>
 800125e:	2b03      	cmp	r3, #3
 8001260:	dc31      	bgt.n	80012c6 <AS5600_set_output_mode+0x82>
 8001262:	2b01      	cmp	r3, #1
 8001264:	d002      	beq.n	800126c <AS5600_set_output_mode+0x28>
 8001266:	2b02      	cmp	r3, #2
 8001268:	d009      	beq.n	800127e <AS5600_set_output_mode+0x3a>
 800126a:	e02c      	b.n	80012c6 <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7ddb      	ldrb	r3, [r3, #23]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001276:	b2da      	uxtb	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	75da      	strb	r2, [r3, #23]
		break;
 800127c:	e025      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7ddb      	ldrb	r3, [r3, #23]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0310 	orr.w	r3, r3, #16
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7ddb      	ldrb	r3, [r3, #23]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f023 0320 	bic.w	r3, r3, #32
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	75da      	strb	r2, [r3, #23]
		break;
 800129e:	e014      	b.n	80012ca <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7ddb      	ldrb	r3, [r3, #23]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7ddb      	ldrb	r3, [r3, #23]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	f043 0320 	orr.w	r3, r3, #32
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 80012c6:	2301      	movs	r3, #1
 80012c8:	e04a      	b.n	8001360 <AS5600_set_output_mode+0x11c>
	}
	if (pwm) {
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d045      	beq.n	800135c <AS5600_set_output_mode+0x118>
		switch (frequency) {
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d83f      	bhi.n	8001358 <AS5600_set_output_mode+0x114>
 80012d8:	a201      	add	r2, pc, #4	; (adr r2, 80012e0 <AS5600_set_output_mode+0x9c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	080012f1 	.word	0x080012f1
 80012e4:	08001303 	.word	0x08001303
 80012e8:	08001325 	.word	0x08001325
 80012ec:	08001347 	.word	0x08001347
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7ddb      	ldrb	r3, [r3, #23]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	75da      	strb	r2, [r3, #23]
			break;
 8001300:	e02d      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7ddb      	ldrb	r3, [r3, #23]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7ddb      	ldrb	r3, [r3, #23]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	75da      	strb	r2, [r3, #23]
			break;
 8001322:	e01c      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7ddb      	ldrb	r3, [r3, #23]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800132e:	b2da      	uxtb	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7ddb      	ldrb	r3, [r3, #23]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	75da      	strb	r2, [r3, #23]
			break;
 8001344:	e00b      	b.n	800135e <AS5600_set_output_mode+0x11a>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7ddb      	ldrb	r3, [r3, #23]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001350:	b2da      	uxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	75da      	strb	r2, [r3, #23]
			break;
 8001356:	e002      	b.n	800135e <AS5600_set_output_mode+0x11a>
		default: return HAL_ERROR;	// invalid PWM frequency
 8001358:	2301      	movs	r3, #1
 800135a:	e001      	b.n	8001360 <AS5600_set_output_mode+0x11c>
		}
	}
 800135c:	bf00      	nop
	return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	3b01      	subs	r3, #1
 800137c:	2b03      	cmp	r3, #3
 800137e:	d83f      	bhi.n	8001400 <AS5600_set_slow_filter+0x94>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <AS5600_set_slow_filter+0x1c>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001399 	.word	0x08001399
 800138c:	080013ab 	.word	0x080013ab
 8001390:	080013cd 	.word	0x080013cd
 8001394:	080013ef 	.word	0x080013ef
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7d9b      	ldrb	r3, [r3, #22]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	759a      	strb	r2, [r3, #22]
		break;
 80013a8:	e02c      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	7d9b      	ldrb	r3, [r3, #22]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7d9b      	ldrb	r3, [r3, #22]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	f023 0302 	bic.w	r3, r3, #2
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	759a      	strb	r2, [r3, #22]
		break;
 80013ca:	e01b      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7d9b      	ldrb	r3, [r3, #22]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7d9b      	ldrb	r3, [r3, #22]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	759a      	strb	r2, [r3, #22]
		break;
 80013ec:	e00a      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7d9b      	ldrb	r3, [r3, #22]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f043 0303 	orr.w	r3, r3, #3
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	759a      	strb	r2, [r3, #22]
		break;
 80013fe:	e001      	b.n	8001404 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop

08001414 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	3b01      	subs	r3, #1
 8001424:	2b07      	cmp	r3, #7
 8001426:	f200 808b 	bhi.w	8001540 <AS5600_set_fast_filter_threshold+0x12c>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <AS5600_set_fast_filter_threshold+0x1c>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001451 	.word	0x08001451
 8001434:	08001463 	.word	0x08001463
 8001438:	08001485 	.word	0x08001485
 800143c:	080014a7 	.word	0x080014a7
 8001440:	080014c9 	.word	0x080014c9
 8001444:	080014eb 	.word	0x080014eb
 8001448:	0800150d 	.word	0x0800150d
 800144c:	0800152f 	.word	0x0800152f
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7d9b      	ldrb	r3, [r3, #22]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	f023 031c 	bic.w	r3, r3, #28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	759a      	strb	r2, [r3, #22]
		break;
 8001460:	e070      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7d9b      	ldrb	r3, [r3, #22]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f023 0318 	bic.w	r3, r3, #24
 800146c:	b2da      	uxtb	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7d9b      	ldrb	r3, [r3, #22]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	759a      	strb	r2, [r3, #22]
		break;
 8001482:	e05f      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7d9b      	ldrb	r3, [r3, #22]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f023 0314 	bic.w	r3, r3, #20
 800148e:	b2da      	uxtb	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	7d9b      	ldrb	r3, [r3, #22]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	759a      	strb	r2, [r3, #22]
		break;
 80014a4:	e04e      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7d9b      	ldrb	r3, [r3, #22]
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f023 0310 	bic.w	r3, r3, #16
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7d9b      	ldrb	r3, [r3, #22]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f043 030c 	orr.w	r3, r3, #12
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	759a      	strb	r2, [r3, #22]
		break;
 80014c6:	e03d      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d9b      	ldrb	r3, [r3, #22]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f023 030c 	bic.w	r3, r3, #12
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7d9b      	ldrb	r3, [r3, #22]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	759a      	strb	r2, [r3, #22]
		break;
 80014e8:	e02c      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7d9b      	ldrb	r3, [r3, #22]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f023 0308 	bic.w	r3, r3, #8
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7d9b      	ldrb	r3, [r3, #22]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0314 	orr.w	r3, r3, #20
 8001504:	b2da      	uxtb	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	759a      	strb	r2, [r3, #22]
		break;
 800150a:	e01b      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7d9b      	ldrb	r3, [r3, #22]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 0304 	bic.w	r3, r3, #4
 8001516:	b2da      	uxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7d9b      	ldrb	r3, [r3, #22]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f043 0318 	orr.w	r3, r3, #24
 8001526:	b2da      	uxtb	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	759a      	strb	r2, [r3, #22]
		break;
 800152c:	e00a      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7d9b      	ldrb	r3, [r3, #22]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	f043 031c 	orr.w	r3, r3, #28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	759a      	strb	r2, [r3, #22]
		break;
 800153e:	e001      	b.n	8001544 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d002      	beq.n	800156c <AS5600_set_watchdog_timer+0x18>
 8001566:	2b02      	cmp	r3, #2
 8001568:	d009      	beq.n	800157e <AS5600_set_watchdog_timer+0x2a>
 800156a:	e011      	b.n	8001590 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7d9b      	ldrb	r3, [r3, #22]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001576:	b2da      	uxtb	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	759a      	strb	r2, [r3, #22]
		break;
 800157c:	e00a      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	7d9b      	ldrb	r3, [r3, #22]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001588:	b2da      	uxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	759a      	strb	r2, [r3, #22]
		break;
 800158e:	e001      	b.n	8001594 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af04      	add	r7, sp, #16
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3316      	adds	r3, #22
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6892      	ldr	r2, [r2, #8]
 8001332:	9202      	str	r2, [sp, #8]
 8001334:	2202      	movs	r2, #2
 8001336:	9201      	str	r2, [sp, #4]
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2207      	movs	r2, #7
 800133e:	216c      	movs	r1, #108	; 0x6c
 8001340:	f002 ff30 	bl	80041a4 <HAL_I2C_Mem_Write>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af04      	add	r7, sp, #16
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3316      	adds	r3, #22
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6892      	ldr	r2, [r2, #8]
 80015b6:	9202      	str	r2, [sp, #8]
 80015b8:	2202      	movs	r2, #2
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2301      	movs	r3, #1
 80015c0:	2207      	movs	r2, #7
 80015c2:	216c      	movs	r1, #108	; 0x6c
 80015c4:	f003 fc7e 	bl	8004ec4 <HAL_I2C_Mem_Write>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b088      	sub	sp, #32
 80015d6:	af04      	add	r7, sp, #16
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 80015dc:	2300      	movs	r3, #0
 80015de:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	2302      	movs	r3, #2
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	f107 030c 	add.w	r3, r7, #12
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	220e      	movs	r2, #14
 8001374:	216c      	movs	r1, #108	; 0x6c
 8001376:	f003 f80f 	bl	8004398 <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	2302      	movs	r3, #2
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2301      	movs	r3, #1
 80015f6:	220e      	movs	r2, #14
 80015f8:	216c      	movs	r1, #108	; 0x6c
 80015fa:	f003 fd5d 	bl	80050b8 <HAL_I2C_Mem_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 8001602:	7b3b      	ldrb	r3, [r7, #12]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21a      	sxth	r2, r3
 8001608:	7b7b      	ldrb	r3, [r7, #13]
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	b29a      	uxth	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	801a      	strh	r2, [r3, #0]
	return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	220b      	movs	r2, #11
 80013bc:	216c      	movs	r1, #108	; 0x6c
 80013be:	f002 ffeb 	bl	8004398 <HAL_I2C_Mem_Read>
 80013c2:	4603      	mov	r3, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2301      	movs	r3, #1
 800163e:	220b      	movs	r2, #11
 8001640:	216c      	movs	r1, #108	; 0x6c
 8001642:	f003 fd39 	bl	80050b8 <HAL_I2C_Mem_Read>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

080013cc <crc16_dnp>:
08001650 <crc16_dnp>:
};



// crc16_dnp was the most error resilient for messages under 130 bytes with a hamming distance of 7!!
uint16_t crc16_dnp(const void* buffer, uint64_t size) {
 80013cc:	b4b0      	push	{r4, r5, r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t crc = 0x0000;
 80013d8:	2300      	movs	r3, #0
 80013da:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80013e8:	e01a      	b.n	8001420 <crc16_dnp+0x54>
		crc = ((crc << 8) & 0xff00) ^ crc16_dnp_table[((crc >> 8) ^ ((const uint8_t*)buffer)[i]) & 0xff];
 80013ea:	8bfb      	ldrh	r3, [r7, #30]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	8bfb      	ldrh	r3, [r7, #30]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	440b      	add	r3, r1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4043      	eors	r3, r0
 8001402:	b2db      	uxtb	r3, r3
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <crc16_dnp+0x74>)
 8001406:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4053      	eors	r3, r2
 800140e:	b21b      	sxth	r3, r3
 8001410:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8001412:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001416:	1c54      	adds	r4, r2, #1
 8001418:	f143 0500 	adc.w	r5, r3, #0
 800141c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8001420:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001428:	4290      	cmp	r0, r2
 800142a:	eb71 0303 	sbcs.w	r3, r1, r3
 800142e:	d3dc      	bcc.n	80013ea <crc16_dnp+0x1e>
	}; return crc ^ 0xffff;
 8001430:	8bfb      	ldrh	r3, [r7, #30]
 8001432:	43db      	mvns	r3, r3
 8001434:	b29b      	uxth	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	bcb0      	pop	{r4, r5, r7}
 800143e:	4770      	bx	lr
 8001440:	08008854 	.word	0x08008854

08001444 <MX_DMA_Init>:
 8001650:	b4b0      	push	{r4, r5, r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	e9c7 2300 	strd	r2, r3, [r7]
	uint16_t crc = 0x0000;
 800165c:	2300      	movs	r3, #0
 800165e:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800166c:	e01a      	b.n	80016a4 <crc16_dnp+0x54>
		crc = ((crc << 8) & 0xff00) ^ crc16_dnp_table[((crc >> 8) ^ ((const uint8_t*)buffer)[i]) & 0xff];
 800166e:	8bfb      	ldrh	r3, [r7, #30]
 8001670:	021b      	lsls	r3, r3, #8
 8001672:	b21a      	sxth	r2, r3
 8001674:	8bfb      	ldrh	r3, [r7, #30]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	68f9      	ldr	r1, [r7, #12]
 8001680:	440b      	add	r3, r1
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	4043      	eors	r3, r0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <crc16_dnp+0x74>)
 800168a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800168e:	b21b      	sxth	r3, r3
 8001690:	4053      	eors	r3, r2
 8001692:	b21b      	sxth	r3, r3
 8001694:	83fb      	strh	r3, [r7, #30]
	for (uint64_t i = 0; i < size; i++) {
 8001696:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800169a:	1c54      	adds	r4, r2, #1
 800169c:	f143 0500 	adc.w	r5, r3, #0
 80016a0:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80016a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ac:	4290      	cmp	r0, r2
 80016ae:	eb71 0303 	sbcs.w	r3, r1, r3
 80016b2:	d3dc      	bcc.n	800166e <crc16_dnp+0x1e>
	}; return crc ^ 0xffff;
 80016b4:	8bfb      	ldrh	r3, [r7, #30]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b29b      	uxth	r3, r3
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	; 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bcb0      	pop	{r4, r5, r7}
 80016c2:	4770      	bx	lr
 80016c4:	08009310 	.word	0x08009310

080016c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <MX_DMA_Init+0x5c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <MX_DMA_Init+0x5c>)
 8001454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_DMA_Init+0x5c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_DMA_Init+0x5c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a13      	ldr	r2, [pc, #76]	; (8001724 <MX_DMA_Init+0x5c>)
 80016d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_DMA_Init+0x5c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2038      	movs	r0, #56	; 0x38
 800146c:	f001 ffc9 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001470:	2038      	movs	r0, #56	; 0x38
 8001472:	f001 ffe2 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	203b      	movs	r0, #59	; 0x3b
 800147c:	f001 ffc1 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001480:	203b      	movs	r0, #59	; 0x3b
 8001482:	f001 ffda 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	203c      	movs	r0, #60	; 0x3c
 800148c:	f001 ffb9 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001490:	203c      	movs	r0, #60	; 0x3c
 8001492:	f001 ffd2 	bl	800343a <HAL_NVIC_EnableIRQ>

}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800

080014a4 <MX_GPIO_Init>:
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	2038      	movs	r0, #56	; 0x38
 80016f0:	f002 fd17 	bl	8004122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f4:	2038      	movs	r0, #56	; 0x38
 80016f6:	f002 fd30 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	203b      	movs	r0, #59	; 0x3b
 8001700:	f002 fd0f 	bl	8004122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001704:	203b      	movs	r0, #59	; 0x3b
 8001706:	f002 fd28 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	203c      	movs	r0, #60	; 0x3c
 8001710:	f002 fd07 	bl	8004122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001714:	203c      	movs	r0, #60	; 0x3c
 8001716:	f002 fd20 	bl	800415a <HAL_NVIC_EnableIRQ>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b5c      	ldr	r3, [pc, #368]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a5b      	ldr	r2, [pc, #364]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b59      	ldr	r3, [pc, #356]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b55      	ldr	r3, [pc, #340]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a54      	ldr	r2, [pc, #336]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b52      	ldr	r3, [pc, #328]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a4d      	ldr	r2, [pc, #308]	; (8001630 <MX_GPIO_Init+0x18c>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <MX_GPIO_Init+0x18c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 7141 	mov.w	r1, #772	; 0x304
 8001514:	4847      	ldr	r0, [pc, #284]	; (8001634 <MX_GPIO_Init+0x190>)
 8001516:	f002 fccf 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	4845      	ldr	r0, [pc, #276]	; (8001638 <MX_GPIO_Init+0x194>)
 8001522:	f002 fcc9 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f24e 0120 	movw	r1, #57376	; 0xe020
 800152c:	4842      	ldr	r0, [pc, #264]	; (8001638 <MX_GPIO_Init+0x194>)
 800152e:	f002 fcc3 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 8001532:	2304      	movs	r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4619      	mov	r1, r3
 8001548:	483a      	ldr	r0, [pc, #232]	; (8001634 <MX_GPIO_Init+0x190>)
 800154a:	f002 fb31 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 800154e:	2308      	movs	r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001552:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4619      	mov	r1, r3
 8001562:	4834      	ldr	r0, [pc, #208]	; (8001634 <MX_GPIO_Init+0x190>)
 8001564:	f002 fb24 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 8001568:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800156e:	2311      	movs	r3, #17
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	482d      	ldr	r0, [pc, #180]	; (8001638 <MX_GPIO_Init+0x194>)
 8001582:	f002 fb15 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800158c:	2311      	movs	r3, #17
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	4826      	ldr	r0, [pc, #152]	; (8001638 <MX_GPIO_Init+0x194>)
 80015a0:	f002 fb06 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 80015a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015aa:	2311      	movs	r3, #17
 80015ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	4619      	mov	r1, r3
 80015bc:	481e      	ldr	r0, [pc, #120]	; (8001638 <MX_GPIO_Init+0x194>)
 80015be:	f002 faf7 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 80015c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015c8:	2311      	movs	r3, #17
 80015ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_GPIO_Init+0x190>)
 80015dc:	f002 fae8 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 80015e0:	2320      	movs	r3, #32
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015e4:	2311      	movs	r3, #17
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <MX_GPIO_Init+0x194>)
 80015f8:	f002 fada 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	4809      	ldr	r0, [pc, #36]	; (8001638 <MX_GPIO_Init+0x194>)
 8001612:	f002 facd 	bl	8003bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2009      	movs	r0, #9
 800161c:	f001 fef1 	bl	8003402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001620:	2009      	movs	r0, #9
 8001622:	f001 ff0a 	bl	800343a <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3720      	adds	r7, #32
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400

0800163c <MX_I2C1_Init>:
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <MX_GPIO_Init+0x18c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <MX_GPIO_Init+0x18c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <MX_GPIO_Init+0x18c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_PIN_Pin|STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 7141 	mov.w	r1, #772	; 0x304
 8001798:	4847      	ldr	r0, [pc, #284]	; (80018b8 <MX_GPIO_Init+0x190>)
 800179a:	f003 fa1d 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	4845      	ldr	r0, [pc, #276]	; (80018bc <MX_GPIO_Init+0x194>)
 80017a6:	f003 fa17 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|AS5600_DIR_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f24e 0120 	movw	r1, #57376	; 0xe020
 80017b0:	4842      	ldr	r0, [pc, #264]	; (80018bc <MX_GPIO_Init+0x194>)
 80017b2:	f003 fa11 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_PIN_Pin;
 80017b6:	2304      	movs	r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATUS_PIN_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	4619      	mov	r1, r3
 80017cc:	483a      	ldr	r0, [pc, #232]	; (80018b8 <MX_GPIO_Init+0x190>)
 80017ce:	f003 f87f 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INSTUCTION_INT_Pin;
 80017d2:	2308      	movs	r3, #8
 80017d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INSTUCTION_INT_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4834      	ldr	r0, [pc, #208]	; (80018b8 <MX_GPIO_Init+0x190>)
 80017e8:	f003 f872 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 80017ec:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80017f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017f2:	2311      	movs	r3, #17
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <MX_GPIO_Init+0x194>)
 8001806:	f003 f863 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001810:	2311      	movs	r3, #17
 8001812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	4619      	mov	r1, r3
 8001822:	4826      	ldr	r0, [pc, #152]	; (80018bc <MX_GPIO_Init+0x194>)
 8001824:	f003 f854 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 8001828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800182e:	2311      	movs	r3, #17
 8001830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	481e      	ldr	r0, [pc, #120]	; (80018bc <MX_GPIO_Init+0x194>)
 8001842:	f003 f845 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 8001846:	f44f 7340 	mov.w	r3, #768	; 0x300
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800184c:	2311      	movs	r3, #17
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001854:	2301      	movs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4619      	mov	r1, r3
 800185e:	4816      	ldr	r0, [pc, #88]	; (80018b8 <MX_GPIO_Init+0x190>)
 8001860:	f003 f836 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AS5600_DIR_Pin;
 8001864:	2320      	movs	r3, #32
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001868:	2311      	movs	r3, #17
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AS5600_DIR_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_GPIO_Init+0x194>)
 800187c:	f003 f828 	bl	80048d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = __Pin;
 8001880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(__GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	4809      	ldr	r0, [pc, #36]	; (80018bc <MX_GPIO_Init+0x194>)
 8001896:	f003 f81b 	bl	80048d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2009      	movs	r0, #9
 80018a0:	f002 fc3f 	bl	8004122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018a4:	2009      	movs	r0, #9
 80018a6:	f002 fc58 	bl	800415a <HAL_NVIC_EnableIRQ>

}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400

080018c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_I2C1_Init+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <MX_I2C1_Init+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_I2C1_Init+0x50>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_I2C1_Init+0x58>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_I2C1_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_I2C1_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_I2C1_Init+0x50>)
 800165a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_I2C1_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_I2C1_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_I2C1_Init+0x50>)
 800167a:	f002 fc4f 	bl	8003f1c <HAL_I2C_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001684:	f000 fd24 	bl	80020d0 <Error_Handler>
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_I2C1_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_I2C1_Init+0x50>)
 80018fe:	f003 f99d 	bl	8004c3c <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f001 fa72 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000124 	.word	0x20000124
 8001690:	40005400 	.word	0x40005400
 8001694:	000186a0 	.word	0x000186a0

08001698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <HAL_I2C_MspInit+0xa4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d13b      	bne.n	8001732 <HAL_I2C_MspInit+0x9a>
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000013c 	.word	0x2000013c
 8001914:	40005400 	.word	0x40005400
 8001918:	000186a0 	.word	0x000186a0

0800191c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <HAL_I2C_MspInit+0xa4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d13b      	bne.n	80019b6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = AS5600_SCL_Pin|AS5600_SDA_Pin;
 80016d6:	23c0      	movs	r3, #192	; 0xc0
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e6:	2304      	movs	r3, #4
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <HAL_I2C_MspInit+0xac>)
 80016f2:	f002 fa5d 	bl	8003bb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_I2C_MspInit+0xa8>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201f      	movs	r0, #31
 8001718:	f001 fe73 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800171c:	201f      	movs	r0, #31
 800171e:	f001 fe8c 	bl	800343a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2020      	movs	r0, #32
 8001728:	f001 fe6b 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800172c:	2020      	movs	r0, #32
 800172e:	f001 fe84 	bl	800343a <HAL_NVIC_EnableIRQ>
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196a:	2304      	movs	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4814      	ldr	r0, [pc, #80]	; (80019c8 <HAL_I2C_MspInit+0xac>)
 8001976:	f002 ffab 	bl	80048d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_I2C_MspInit+0xa8>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	201f      	movs	r0, #31
 800199c:	f002 fbc1 	bl	8004122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019a0:	201f      	movs	r0, #31
 80019a2:	f002 fbda 	bl	800415a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2020      	movs	r0, #32
 80019ac:	f002 fbb9 	bl	8004122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019b0:	2020      	movs	r0, #32
 80019b2:	f002 fbd2 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40005400 	.word	0x40005400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400

08001748 <delay_us>:
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40005400 	.word	0x40005400
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020400 	.word	0x40020400

080019cc <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint32_t n) { TIM2->CNT = 0; while(TIM2->CNT < n); }
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
 8001758:	bf00      	nop
 800175a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d8f9      	bhi.n	800175a <delay_us+0x12>
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <set_motor_setting+0x84>)
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	491d      	ldr	r1, [pc, #116]	; (80017f8 <set_motor_setting+0x84>)
 8001782:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 8001786:	4013      	ands	r3, r2
 8001788:	614b      	str	r3, [r1, #20]
	switch(instruction->micro_step) {
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7e1b      	ldrb	r3, [r3, #24]
 800178e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b03      	cmp	r3, #3
 8001796:	d018      	beq.n	80017ca <set_motor_setting+0x56>
 8001798:	2b03      	cmp	r3, #3
 800179a:	dc03      	bgt.n	80017a4 <set_motor_setting+0x30>
 800179c:	2b01      	cmp	r3, #1
 800179e:	d008      	beq.n	80017b2 <set_motor_setting+0x3e>
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d00d      	beq.n	80017c0 <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <set_motor_setting+0x84>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <set_motor_setting+0x84>)
 80017aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017ae:	6153      	str	r3, [r2, #20]
 80017b0:	e012      	b.n	80017d8 <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <set_motor_setting+0x84>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <set_motor_setting+0x84>)
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	e00b      	b.n	80017d8 <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <set_motor_setting+0x84>)
 80017c2:	4a0d      	ldr	r2, [pc, #52]	; (80017f8 <set_motor_setting+0x84>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	6153      	str	r3, [r2, #20]
 80017c8:	e006      	b.n	80017d8 <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <set_motor_setting+0x84>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <set_motor_setting+0x84>)
 80017d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80017d4:	6153      	str	r3, [r2, #20]
 80017d6:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->srd_mode);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
 80017dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	461a      	mov	r2, r3
 80017e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <set_motor_setting+0x88>)
 80017ea:	f002 fb65 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400

08001800 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 8001800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001804:	af00      	add	r7, sp, #0
	register uint16_t raw = ACD_RANGE_CONV * (state.raw_angle - MIN_ADC_IN);
 8001806:	4b6e      	ldr	r3, [pc, #440]	; (80019c0 <euler_method+0x1c0>)
 8001808:	8b1b      	ldrh	r3, [r3, #24]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001810:	b29e      	uxth	r6, r3
	register uint16_t pos_diff = (AS5600_pos_f64 - raw);  // rotation detection
 8001812:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <euler_method+0x1c4>)
 8001814:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001818:	4633      	mov	r3, r6
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe0e 	bl	800043c <__aeabi_i2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fcba 	bl	80001a0 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f906 	bl	8000a44 <__aeabi_d2uiz>
 8001838:	4603      	mov	r3, r0
 800183a:	b29c      	uxth	r4, r3
	state.pos.rotation += pos_diff > 2048; state.pos.rotation -= pos_diff < -2048;
 800183c:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <euler_method+0x1c0>)
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f343 0313 	sbfx	r3, r3, #0, #20
 8001844:	461a      	mov	r2, r3
 8001846:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 800184a:	bf8c      	ite	hi
 800184c:	2301      	movhi	r3, #1
 800184e:	2300      	movls	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	031a      	lsls	r2, r3, #12
 8001856:	1312      	asrs	r2, r2, #12
 8001858:	4959      	ldr	r1, [pc, #356]	; (80019c0 <euler_method+0x1c0>)
 800185a:	690b      	ldr	r3, [r1, #16]
 800185c:	f362 0313 	bfi	r3, r2, #0, #20
 8001860:	610b      	str	r3, [r1, #16]
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <euler_method+0x1c0>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	f343 0113 	sbfx	r1, r3, #0, #20
 800186a:	4a55      	ldr	r2, [pc, #340]	; (80019c0 <euler_method+0x1c0>)
 800186c:	6913      	ldr	r3, [r2, #16]
 800186e:	f361 0313 	bfi	r3, r1, #0, #20
 8001872:	6113      	str	r3, [r2, #16]
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <euler_method+0x1c8>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fdcf 	bl	800041c <__aeabi_ui2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	a149      	add	r1, pc, #292	; (adr r1, 80019a8 <euler_method+0x1a8>)
 8001884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001888:	f7fe ff6c 	bl	8000764 <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <euler_method+0x1cc>)
 800189a:	f7fe fc83 	bl	80001a4 <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	4949      	ldr	r1, [pc, #292]	; (80019cc <euler_method+0x1cc>)
 80018a8:	f7fe ff5c 	bl	8000764 <__aeabi_ddiv>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4614      	mov	r4, r2
 80018b2:	461d      	mov	r5, r3
	AS5600_pos_f64 = (raw * alpha) + ((1 - alpha) * AS5600_pos_f64);
 80018b4:	4633      	mov	r3, r6
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdc0 	bl	800043c <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fe24 	bl	8000510 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4690      	mov	r8, r2
 80018ce:	4699      	mov	r9, r3
 80018d0:	4622      	mov	r2, r4
 80018d2:	462b      	mov	r3, r5
 80018d4:	f04f 0000 	mov.w	r0, #0
 80018d8:	493c      	ldr	r1, [pc, #240]	; (80019cc <euler_method+0x1cc>)
 80018da:	f7fe fc61 	bl	80001a0 <__aeabi_dsub>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <euler_method+0x1c4>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fe10 	bl	8000510 <__aeabi_dmul>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4640      	mov	r0, r8
 80018f6:	4649      	mov	r1, r9
 80018f8:	f7fe fc54 	bl	80001a4 <__adddf3>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4930      	ldr	r1, [pc, #192]	; (80019c4 <euler_method+0x1c4>)
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
	state.vel = (1e6 / TIM5->CNT) * ((uint16_t)AS5600_pos_f64 - state.pos.angle) * AS5600_RAD_CONV;  // rad / s
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <euler_method+0x1c8>)
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd86 	bl	800041c <__aeabi_ui2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	a126      	add	r1, pc, #152	; (adr r1, 80019b0 <euler_method+0x1b0>)
 8001916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800191a:	f7fe ff23 	bl	8000764 <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	461d      	mov	r5, r3
 8001926:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <euler_method+0x1c4>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f888 	bl	8000a44 <__aeabi_d2uiz>
 8001934:	4603      	mov	r3, r0
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <euler_method+0x1c0>)
 800193c:	8a5b      	ldrh	r3, [r3, #18]
 800193e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001942:	b29b      	uxth	r3, r3
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fd78 	bl	800043c <__aeabi_i2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fddc 	bl	8000510 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	a315      	add	r3, pc, #84	; (adr r3, 80019b8 <euler_method+0x1b8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fdd3 	bl	8000510 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4914      	ldr	r1, [pc, #80]	; (80019c0 <euler_method+0x1c0>)
 8001970:	e9c1 2300 	strd	r2, r3, [r1]
	state.pos.angle = (uint16_t)AS5600_pos_f64;
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <euler_method+0x1c4>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f861 	bl	8000a44 <__aeabi_d2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	b29b      	uxth	r3, r3
 8001986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198a:	b299      	uxth	r1, r3
 800198c:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <euler_method+0x1c0>)
 800198e:	8a53      	ldrh	r3, [r2, #18]
 8001990:	f361 130f 	bfi	r3, r1, #4, #12
 8001994:	8253      	strh	r3, [r2, #18]
	TIM5->CNT = 0;
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <euler_method+0x1c8>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800199c:	bf00      	nop
 800199e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019a2:	bf00      	nop
 80019a4:	f3af 8000 	nop.w
 80019a8:	66666666 	.word	0x66666666
 80019ac:	40026666 	.word	0x40026666
 80019b0:	00000000 	.word	0x00000000
 80019b4:	412e8480 	.word	0x412e8480
 80019b8:	5798a5fb 	.word	0x5798a5fb
 80019bc:	3f5921fb 	.word	0x3f5921fb
 80019c0:	20000178 	.word	0x20000178
 80019c4:	200005c0 	.word	0x200005c0
 80019c8:	40000c00 	.word	0x40000c00
 80019cc:	3ff00000 	.word	0x3ff00000

080019d0 <get_next_empty_queue_ptr>:
void* get_next_empty_queue_ptr() {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
	if (state.queue_size == MAX_QUEUE_SIZE) { return 0; }  // nullptr if full
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <get_next_empty_queue_ptr+0x38>)
 80019d8:	7f9b      	ldrb	r3, [r3, #30]
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d101      	bne.n	80019e2 <get_next_empty_queue_ptr+0x12>
 80019de:	2300      	movs	r3, #0
 80019e0:	e00c      	b.n	80019fc <get_next_empty_queue_ptr+0x2c>
	void* ptr = &queue[(state.queue_index + state.queue_size) % MAX_QUEUE_SIZE];
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <get_next_empty_queue_ptr+0x38>)
 80019e4:	7fda      	ldrb	r2, [r3, #31]
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <get_next_empty_queue_ptr+0x38>)
 80019e8:	7f9b      	ldrb	r3, [r3, #30]
 80019ea:	4413      	add	r3, r2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	015b      	lsls	r3, r3, #5
 80019f4:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <get_next_empty_queue_ptr+0x3c>)
 80019f6:	4413      	add	r3, r2
 80019f8:	607b      	str	r3, [r7, #4]
	return ptr;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	20000178 	.word	0x20000178
 8001a0c:	20000198 	.word	0x20000198

08001a10 <get_next_queue_ptr>:
void* get_next_queue_ptr() {
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	if (!state.queue_size) { return 0; }  // nullptr if queue is empty
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a16:	7f9b      	ldrb	r3, [r3, #30]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <get_next_queue_ptr+0x10>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e017      	b.n	8001a50 <get_next_queue_ptr+0x40>
	state.queue_index = (state.queue_index + 1) % MAX_QUEUE_SIZE;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a22:	7fdb      	ldrb	r3, [r3, #31]
 8001a24:	3301      	adds	r3, #1
 8001a26:	425a      	negs	r2, r3
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	bf58      	it	pl
 8001a32:	4253      	negpl	r3, r2
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a38:	77da      	strb	r2, [r3, #31]
	state.queue_size--;  // flag last instruction as overwriteable
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a3c:	7f9b      	ldrb	r3, [r3, #30]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a44:	779a      	strb	r2, [r3, #30]
	return &queue[state.queue_index];
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <get_next_queue_ptr+0x4c>)
 8001a48:	7fdb      	ldrb	r3, [r3, #31]
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <get_next_queue_ptr+0x50>)
 8001a4e:	4413      	add	r3, r2
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000178 	.word	0x20000178
 8001a60:	20000198 	.word	0x20000198

08001a64 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a68:	b087      	sub	sp, #28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
	if (htim != &htim10) { return; }
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4ab7      	ldr	r2, [pc, #732]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	f040 8161 	bne.w	8001d3a <HAL_TIM_PeriodElapsedCallback+0x2d6>
	if (state.queue_size == 0) { return; }
 8001a78:	4bb6      	ldr	r3, [pc, #728]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a7a:	7f9b      	ldrb	r3, [r3, #30]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 815e 	beq.w	8001d3e <HAL_TIM_PeriodElapsedCallback+0x2da>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update state.pos.angle, AS5600_delta_pos using the selected mode
 8001a82:	f7ff febd 	bl	8001800 <euler_method>
	double target_delta = instruction->target - state.pos.angle;
 8001a86:	4bb4      	ldr	r3, [pc, #720]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a8e:	4bb1      	ldr	r3, [pc, #708]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001a90:	8a5b      	ldrh	r3, [r3, #18]
 8001a92:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fccf 	bl	800043c <__aeabi_i2d>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4640      	mov	r0, r8
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	f7fe fb7b 	bl	80001a0 <__aeabi_dsub>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001abe:	f7fe ffb7 	bl	8000a30 <__aeabi_dcmpgt>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001ac8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001acc:	e052      	b.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b9f      	ldr	r3, [pc, #636]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001ae0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ae4:	f7fe fb5c 	bl	80001a0 <__aeabi_dsub>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	f7fe ff9a 	bl	8000a30 <__aeabi_dcmpgt>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	4996      	ldr	r1, [pc, #600]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001b08:	e003      	b.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0xae>
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b16:	f7fe ff8b 	bl	8000a30 <__aeabi_dcmpgt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d009      	beq.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001b20:	f04f 0200 	mov.w	r2, #0
 8001b24:	4b8d      	ldr	r3, [pc, #564]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b26:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b2a:	f7fe fb39 	bl	80001a0 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	e01f      	b.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b3e:	f7fe fb2f 	bl	80001a0 <__aeabi_dsub>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	f7fe ff45 	bl	80009e0 <__aeabi_dcmpeq>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d009      	beq.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b66:	f7fe fb1b 	bl	80001a0 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	e001      	b.n	8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001b70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b74:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
 80019dc:	bf00      	nop
 80019de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d8f9      	bhi.n	80019de <delay_us+0x12>
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <set_motor_setting>:
void until_us(uint32_t n) { while(TIM2->CNT < n); }  // this will wait until the count register is set to a specific value this allows code to be ran while waiting
void set_motor_setting(MCU_Instruction* instruction) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <set_motor_setting+0x84>)
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	491d      	ldr	r1, [pc, #116]	; (8001a7c <set_motor_setting+0x84>)
 8001a06:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	614b      	str	r3, [r1, #20]
	switch(instruction->micro_step) {
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7e1b      	ldrb	r3, [r3, #24]
 8001a12:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d018      	beq.n	8001a4e <set_motor_setting+0x56>
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	dc03      	bgt.n	8001a28 <set_motor_setting+0x30>
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d008      	beq.n	8001a36 <set_motor_setting+0x3e>
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d00d      	beq.n	8001a44 <set_motor_setting+0x4c>
	case 0: GPIOA->ODR |= M2; break;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <set_motor_setting+0x84>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <set_motor_setting+0x84>)
 8001a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a32:	6153      	str	r3, [r2, #20]
 8001a34:	e012      	b.n	8001a5c <set_motor_setting+0x64>
	case 1: GPIOA->ODR |= M4; break;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <set_motor_setting+0x84>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <set_motor_setting+0x84>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6153      	str	r3, [r2, #20]
 8001a42:	e00b      	b.n	8001a5c <set_motor_setting+0x64>
	case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <set_motor_setting+0x84>)
 8001a46:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <set_motor_setting+0x84>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6153      	str	r3, [r2, #20]
 8001a4c:	e006      	b.n	8001a5c <set_motor_setting+0x64>
	case 3: GPIOA->ODR |= M16; break;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <set_motor_setting+0x84>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <set_motor_setting+0x84>)
 8001a54:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001a58:	6153      	str	r3, [r2, #20]
 8001a5a:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->srd_mode);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7e1b      	ldrb	r3, [r3, #24]
 8001a60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <set_motor_setting+0x88>)
 8001a6e:	f003 f8b3 	bl	8004bd8 <HAL_GPIO_WritePin>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	00000000 	.word	0x00000000

08001a88 <euler_method>:
void euler_method() {  // typical execution time ~45 us
 8001a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a8c:	af00      	add	r7, sp, #0
	register uint16_t raw = ACD_RANGE_CONV * (state.raw_angle - MIN_ADC_IN);
 8001a8e:	4b6e      	ldr	r3, [pc, #440]	; (8001c48 <euler_method+0x1c0>)
 8001a90:	8b1b      	ldrh	r3, [r3, #24]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a98:	b29e      	uxth	r6, r3
	register uint16_t pos_diff = (AS5600_pos_f64 - raw);  // rotation detection
 8001a9a:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <euler_method+0x1c4>)
 8001a9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001aa0:	4633      	mov	r3, r6
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcea 	bl	800047c <__aeabi_i2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4620      	mov	r0, r4
 8001aae:	4629      	mov	r1, r5
 8001ab0:	f7fe fb96 	bl	80001e0 <__aeabi_dsub>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f7fe ffe2 	bl	8000a84 <__aeabi_d2uiz>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29c      	uxth	r4, r3
	state.pos.rotation += pos_diff > 2048; state.pos.rotation -= pos_diff < -2048;
 8001ac4:	4b60      	ldr	r3, [pc, #384]	; (8001c48 <euler_method+0x1c0>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f343 0313 	sbfx	r3, r3, #0, #20
 8001acc:	461a      	mov	r2, r3
 8001ace:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8001ad2:	bf8c      	ite	hi
 8001ad4:	2301      	movhi	r3, #1
 8001ad6:	2300      	movls	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	031a      	lsls	r2, r3, #12
 8001ade:	1312      	asrs	r2, r2, #12
 8001ae0:	4959      	ldr	r1, [pc, #356]	; (8001c48 <euler_method+0x1c0>)
 8001ae2:	690b      	ldr	r3, [r1, #16]
 8001ae4:	f362 0313 	bfi	r3, r2, #0, #20
 8001ae8:	610b      	str	r3, [r1, #16]
 8001aea:	4b57      	ldr	r3, [pc, #348]	; (8001c48 <euler_method+0x1c0>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f343 0113 	sbfx	r1, r3, #0, #20
 8001af2:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <euler_method+0x1c0>)
 8001af4:	6913      	ldr	r3, [r2, #16]
 8001af6:	f361 0313 	bfi	r3, r1, #0, #20
 8001afa:	6113      	str	r3, [r2, #16]
	register double alpha = 1 / ((EULER_TAU / TIM5->CNT) + 1);
 8001afc:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <euler_method+0x1c8>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fcab 	bl	800045c <__aeabi_ui2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	a149      	add	r1, pc, #292	; (adr r1, 8001c30 <euler_method+0x1a8>)
 8001b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b10:	f7fe fe48 	bl	80007a4 <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <euler_method+0x1cc>)
 8001b22:	f7fe fb5f 	bl	80001e4 <__adddf3>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	4949      	ldr	r1, [pc, #292]	; (8001c54 <euler_method+0x1cc>)
 8001b30:	f7fe fe38 	bl	80007a4 <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
	AS5600_pos_f64 = (raw * alpha) + ((1 - alpha) * AS5600_pos_f64);
 8001b3c:	4633      	mov	r3, r6
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fc9c 	bl	800047c <__aeabi_i2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fd00 	bl	8000550 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4690      	mov	r8, r2
 8001b56:	4699      	mov	r9, r3
 8001b58:	4622      	mov	r2, r4
 8001b5a:	462b      	mov	r3, r5
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	493c      	ldr	r1, [pc, #240]	; (8001c54 <euler_method+0x1cc>)
 8001b62:	f7fe fb3d 	bl	80001e0 <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <euler_method+0x1c4>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fcec 	bl	8000550 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4640      	mov	r0, r8
 8001b7e:	4649      	mov	r1, r9
 8001b80:	f7fe fb30 	bl	80001e4 <__adddf3>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4930      	ldr	r1, [pc, #192]	; (8001c4c <euler_method+0x1c4>)
 8001b8a:	e9c1 2300 	strd	r2, r3, [r1]
	state.vel = (1e6 / TIM5->CNT) * ((uint16_t)AS5600_pos_f64 - state.pos.angle) * AS5600_RAD_CONV;  // rad / s
 8001b8e:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <euler_method+0x1c8>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc62 	bl	800045c <__aeabi_ui2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	a126      	add	r1, pc, #152	; (adr r1, 8001c38 <euler_method+0x1b0>)
 8001b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ba2:	f7fe fdff 	bl	80007a4 <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	461d      	mov	r5, r3
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <euler_method+0x1c4>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ff64 	bl	8000a84 <__aeabi_d2uiz>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <euler_method+0x1c0>)
 8001bc4:	8a5b      	ldrh	r3, [r3, #18]
 8001bc6:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc54 	bl	800047c <__aeabi_i2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fcb8 	bl	8000550 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	a315      	add	r3, pc, #84	; (adr r3, 8001c40 <euler_method+0x1b8>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fcaf 	bl	8000550 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4914      	ldr	r1, [pc, #80]	; (8001c48 <euler_method+0x1c0>)
 8001bf8:	e9c1 2300 	strd	r2, r3, [r1]
	state.pos.angle = (uint16_t)AS5600_pos_f64;
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <euler_method+0x1c4>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe ff3d 	bl	8000a84 <__aeabi_d2uiz>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c12:	b299      	uxth	r1, r3
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <euler_method+0x1c0>)
 8001c16:	8a53      	ldrh	r3, [r2, #18]
 8001c18:	f361 130f 	bfi	r3, r1, #4, #12
 8001c1c:	8253      	strh	r3, [r2, #18]
	TIM5->CNT = 0;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <euler_method+0x1c8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c24:	bf00      	nop
 8001c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	66666666 	.word	0x66666666
 8001c34:	40026666 	.word	0x40026666
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	412e8480 	.word	0x412e8480
 8001c40:	5798a5fb 	.word	0x5798a5fb
 8001c44:	3f5921fb 	.word	0x3f5921fb
 8001c48:	20000190 	.word	0x20000190
 8001c4c:	200005d8 	.word	0x200005d8
 8001c50:	40000c00 	.word	0x40000c00
 8001c54:	3ff00000 	.word	0x3ff00000

08001c58 <get_next_empty_queue_ptr>:
void* get_next_empty_queue_ptr() {
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
	if (state.queue_size == MAX_QUEUE_SIZE) { return 0; }  // nullptr if full
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <get_next_empty_queue_ptr+0x38>)
 8001c60:	7f9b      	ldrb	r3, [r3, #30]
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d101      	bne.n	8001c6a <get_next_empty_queue_ptr+0x12>
 8001c66:	2300      	movs	r3, #0
 8001c68:	e00c      	b.n	8001c84 <get_next_empty_queue_ptr+0x2c>
	void* ptr = &queue[(state.queue_index + state.queue_size) % MAX_QUEUE_SIZE];
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <get_next_empty_queue_ptr+0x38>)
 8001c6c:	7fda      	ldrb	r2, [r3, #31]
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <get_next_empty_queue_ptr+0x38>)
 8001c70:	7f9b      	ldrb	r3, [r3, #30]
 8001c72:	4413      	add	r3, r2
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <get_next_empty_queue_ptr+0x3c>)
 8001c7e:	4413      	add	r3, r2
 8001c80:	607b      	str	r3, [r7, #4]
	return ptr;
 8001c82:	687b      	ldr	r3, [r7, #4]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20000190 	.word	0x20000190
 8001c94:	200001b0 	.word	0x200001b0

08001c98 <get_next_queue_ptr>:
void* get_next_queue_ptr() {
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	if (!state.queue_size) { return 0; }  // nullptr if queue is empty
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001c9e:	7f9b      	ldrb	r3, [r3, #30]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <get_next_queue_ptr+0x10>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e017      	b.n	8001cd8 <get_next_queue_ptr+0x40>
	state.queue_index = (state.queue_index + 1) % MAX_QUEUE_SIZE;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001caa:	7fdb      	ldrb	r3, [r3, #31]
 8001cac:	3301      	adds	r3, #1
 8001cae:	425a      	negs	r2, r3
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	bf58      	it	pl
 8001cba:	4253      	negpl	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001cc0:	77da      	strb	r2, [r3, #31]
	state.queue_size--;  // flag last instruction as overwriteable
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001cc4:	7f9b      	ldrb	r3, [r3, #30]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001ccc:	779a      	strb	r2, [r3, #30]
	return &queue[state.queue_index];
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <get_next_queue_ptr+0x4c>)
 8001cd0:	7fdb      	ldrb	r3, [r3, #31]
 8001cd2:	015b      	lsls	r3, r3, #5
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <get_next_queue_ptr+0x50>)
 8001cd6:	4413      	add	r3, r2
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000190 	.word	0x20000190
 8001ce8:	200001b0 	.word	0x200001b0

08001cec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b09c      	sub	sp, #112	; 0x70
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6678      	str	r0, [r7, #100]	; 0x64
	if (htim != &htim10) { return; }
 8001cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001cf8:	4bb7      	ldr	r3, [pc, #732]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	f040 86c0 	bne.w	8002a80 <HAL_TIM_PeriodElapsedCallback+0xd94>
	if (state.queue_size == 0) { return; }
 8001d00:	4bb6      	ldr	r3, [pc, #728]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d02:	7f9b      	ldrb	r3, [r3, #30]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 86bd 	beq.w	8002a84 <HAL_TIM_PeriodElapsedCallback+0xd98>
	//if (pre_euler_func) { (*pre_euler_func)(); }
	euler_method();  // update state.pos.angle, AS5600_delta_pos using the selected mode
 8001d0a:	f7ff febd 	bl	8001a88 <euler_method>
	double target_delta = instruction->target - state.pos.angle;
 8001d0e:	4bb4      	ldr	r3, [pc, #720]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d16:	4bb1      	ldr	r3, [pc, #708]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d18:	8a5b      	ldrh	r3, [r3, #18]
 8001d1a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fbab 	bl	800047c <__aeabi_i2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	4629      	mov	r1, r5
 8001d2e:	f7fe fa57 	bl	80001e0 <__aeabi_dsub>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	target_delta = ABS(target_delta) < ABS(target_delta - 4096) ? target_delta : target_delta - 4096;
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d46:	f7fe fe93 	bl	8000a70 <__aeabi_dcmpgt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001d50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d54:	e052      	b.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d58:	603b      	str	r3, [r7, #0]
 8001d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	4b9f      	ldr	r3, [pc, #636]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001d68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d6c:	f7fe fa38 	bl	80001e0 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	f7fe fe76 	bl	8000a70 <__aeabi_dcmpgt>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001d8a:	f04f 0000 	mov.w	r0, #0
 8001d8e:	4996      	ldr	r1, [pc, #600]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001d90:	e003      	b.n	8001d9a <HAL_TIM_PeriodElapsedCallback+0xae>
 8001d92:	f04f 0000 	mov.w	r0, #0
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d9e:	f7fe fe67 	bl	8000a70 <__aeabi_dcmpgt>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_TIM_PeriodElapsedCallback+0xd0>
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001dae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001db2:	f7fe fa15 	bl	80001e0 <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	e01f      	b.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dc6:	f7fe fa0b 	bl	80001e0 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	f7fe fe21 	bl	8000a20 <__aeabi_dcmpeq>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b7e      	ldr	r3, [pc, #504]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001dee:	f7fe f9f7 	bl	80001e0 <__aeabi_dsub>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	e001      	b.n	8001dfc <HAL_TIM_PeriodElapsedCallback+0x110>
 8001df8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001dfc:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	// TODO: add defining rotation dir with SPI (this is obviously implicated with the previous TODO)
	// TODO: re-do: ease-in ease-out function
	// TODO: delete / re-do: pathfinding code
	// TODO: tune interrupt timing

	if (ABS(target_delta) > 10) {  // ~1 deg
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b84:	f7fe ff54 	bl	8000a30 <__aeabi_dcmpgt>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d010      	beq.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	461e      	mov	r6, r3
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9e:	f7fe ff1f 	bl	80009e0 <__aeabi_dcmpeq>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_TIM_PeriodElapsedCallback+0x148>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	461e      	mov	r6, r3
 8001bac:	b2f3      	uxtb	r3, r6
 8001bae:	e00e      	b.n	8001bce <HAL_TIM_PeriodElapsedCallback+0x16a>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	461e      	mov	r6, r3
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001bba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bbe:	f7fe ff19 	bl	80009f4 <__aeabi_dcmplt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x168>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	461e      	mov	r6, r3
 8001bcc:	b2f3      	uxtb	r3, r6
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8091 	beq.w	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x292>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	461e      	mov	r6, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be4:	f7fe ff06 	bl	80009f4 <__aeabi_dcmplt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_PeriodElapsedCallback+0x18e>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	461e      	mov	r6, r3
 8001bf2:	b2f3      	uxtb	r3, r6
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfa:	485b      	ldr	r0, [pc, #364]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001bfc:	f002 f95c 	bl	8003eb8 <HAL_GPIO_WritePin>
		step_gain = MIN(1, ABS(target_delta / 1024));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c0a:	f7fe fdab 	bl	8000764 <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	f7fe ff07 	bl	8000a30 <__aeabi_dcmpgt>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c32:	f7fe fd97 	bl	8000764 <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	2301      	movs	r3, #1
 8001c40:	461e      	mov	r6, r3
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001c48:	f7fe fef2 	bl	8000a30 <__aeabi_dcmpgt>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x1f2>
 8001c52:	2300      	movs	r3, #0
 8001c54:	461e      	mov	r6, r3
 8001c56:	b2f3      	uxtb	r3, r6
 8001c58:	e017      	b.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x226>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c60:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c64:	f7fe fd7e 	bl	8000764 <__aeabi_ddiv>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2301      	movs	r3, #1
 8001c72:	461e      	mov	r6, r3
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001c7a:	f7fe febb 	bl	80009f4 <__aeabi_dcmplt>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0x224>
 8001c84:	2300      	movs	r3, #0
 8001c86:	461e      	mov	r6, r3
 8001c88:	b2f3      	uxtb	r3, r6
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_PeriodElapsedCallback+0x232>
 8001c8e:	f04f 0400 	mov.w	r4, #0
 8001c92:	4d33      	ldr	r5, [pc, #204]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001c94:	e02b      	b.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x28a>
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001c9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca0:	f7fe fd60 	bl	8000764 <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f7fe febc 	bl	8000a30 <__aeabi_dcmpgt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x272>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cc8:	f7fe fd4c 	bl	8000764 <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	461d      	mov	r5, r3
 8001cd4:	e00b      	b.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x28a>
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001cdc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ce0:	f7fe fd40 	bl	8000764 <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4614      	mov	r4, r2
 8001cea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001cf0:	e9c3 4500 	strd	r4, r5, [r3]
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e0c:	f7fe fe30 	bl	8000a70 <__aeabi_dcmpgt>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8001e16:	2301      	movs	r3, #1
 8001e18:	461c      	mov	r4, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e26:	f7fe fdfb 	bl	8000a20 <__aeabi_dcmpeq>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001e30:	2300      	movs	r3, #0
 8001e32:	461c      	mov	r4, r3
 8001e34:	b2e3      	uxtb	r3, r4
 8001e36:	e00e      	b.n	8001e56 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	461c      	mov	r4, r3
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001e42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e46:	f7fe fdf5 	bl	8000a34 <__aeabi_dcmplt>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_TIM_PeriodElapsedCallback+0x168>
 8001e50:	2300      	movs	r3, #0
 8001e52:	461c      	mov	r4, r3
 8001e54:	b2e3      	uxtb	r3, r4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 85f4 	beq.w	8002a44 <HAL_TIM_PeriodElapsedCallback+0xd58>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, target_delta < 0);
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	461c      	mov	r4, r3
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e6c:	f7fe fde2 	bl	8000a34 <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PeriodElapsedCallback+0x18e>
 8001e76:	2300      	movs	r3, #0
 8001e78:	461c      	mov	r4, r3
 8001e7a:	b2e3      	uxtb	r3, r4
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e82:	485b      	ldr	r0, [pc, #364]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001e84:	f002 fea8 	bl	8004bd8 <HAL_GPIO_WritePin>
		step_gain = MIN(1, MIN(ABS(target_delta / 1024), MIN(ABS((target_delta + 1024) / 1024), ABS((target_delta - 1024) / 1024))));  // all deltas greater than 1/8 rotation are met by a gain of 100%
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	4b59      	ldr	r3, [pc, #356]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e92:	f7fe fc87 	bl	80007a4 <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	f7fe fde3 	bl	8000a70 <__aeabi_dcmpgt>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00b      	beq.n	8001ec8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eba:	f7fe fc73 	bl	80007a4 <__aeabi_ddiv>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8001ec6:	e00c      	b.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	4b49      	ldr	r3, [pc, #292]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ece:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ed2:	f7fe fc67 	bl	80007a4 <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	653a      	str	r2, [r7, #80]	; 0x50
 8001edc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001ee8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001eec:	f7fe f97a 	bl	80001e4 <__adddf3>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f04f 0200 	mov.w	r2, #0
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001efe:	f7fe fc51 	bl	80007a4 <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	f7fe fdad 	bl	8000a70 <__aeabi_dcmpgt>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d014      	beq.n	8001f46 <HAL_TIM_PeriodElapsedCallback+0x25a>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f26:	f7fe f95d 	bl	80001e4 <__adddf3>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4610      	mov	r0, r2
 8001f30:	4619      	mov	r1, r3
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f38:	f7fe fc34 	bl	80007a4 <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001f44:	e015      	b.n	8001f72 <HAL_TIM_PeriodElapsedCallback+0x286>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f50:	f7fe f948 	bl	80001e4 <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	4b24      	ldr	r3, [pc, #144]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f62:	f7fe fc1f 	bl	80007a4 <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8001f6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001f7c:	f7fe f930 	bl	80001e0 <__aeabi_dsub>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f8e:	f7fe fc09 	bl	80007a4 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	f7fe fd65 	bl	8000a70 <__aeabi_dcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d025      	beq.n	8001ff8 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fb6:	f7fe f913 	bl	80001e0 <__aeabi_dsub>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001fc8:	f7fe fbec 	bl	80007a4 <__aeabi_ddiv>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e026      	b.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x338>
 8001fd6:	bf00      	nop
 8001fd8:	20000794 	.word	0x20000794
 8001fdc:	20000190 	.word	0x20000190
 8001fe0:	20000000 	.word	0x20000000
 8001fe4:	40b00000 	.word	0x40b00000
 8001fe8:	3ff00000 	.word	0x3ff00000
 8001fec:	c0240000 	.word	0xc0240000
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40900000 	.word	0x40900000
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	4bba      	ldr	r3, [pc, #744]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002002:	f7fe f8ed 	bl	80001e0 <__aeabi_dsub>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4bb5      	ldr	r3, [pc, #724]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002014:	f7fe fbc6 	bl	80007a4 <__aeabi_ddiv>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	643a      	str	r2, [r7, #64]	; 0x40
 800201e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
 8002024:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002028:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800202c:	f7fe fd02 	bl	8000a34 <__aeabi_dcmplt>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d047      	beq.n	80020c6 <HAL_TIM_PeriodElapsedCallback+0x3da>
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	4bab      	ldr	r3, [pc, #684]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800203c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002040:	f7fe f8d0 	bl	80001e4 <__adddf3>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	4ba5      	ldr	r3, [pc, #660]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002052:	f7fe fba7 	bl	80007a4 <__aeabi_ddiv>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	f7fe fd03 	bl	8000a70 <__aeabi_dcmpgt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d014      	beq.n	800209a <HAL_TIM_PeriodElapsedCallback+0x3ae>
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800207a:	f7fe f8b3 	bl	80001e4 <__adddf3>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800208c:	f7fe fb8a 	bl	80007a4 <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4690      	mov	r8, r2
 8002096:	4699      	mov	r9, r3
 8002098:	e05c      	b.n	8002154 <HAL_TIM_PeriodElapsedCallback+0x468>
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80020a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020a4:	f7fe f89e 	bl	80001e4 <__adddf3>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80020b6:	f7fe fb75 	bl	80007a4 <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4690      	mov	r8, r2
 80020c0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80020c4:	e046      	b.n	8002154 <HAL_TIM_PeriodElapsedCallback+0x468>
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	4b87      	ldr	r3, [pc, #540]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80020cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80020d0:	f7fe f886 	bl	80001e0 <__aeabi_dsub>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	4b81      	ldr	r3, [pc, #516]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80020e2:	f7fe fb5f 	bl	80007a4 <__aeabi_ddiv>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	f7fe fcbb 	bl	8000a70 <__aeabi_dcmpgt>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_TIM_PeriodElapsedCallback+0x43e>
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800210a:	f7fe f869 	bl	80001e0 <__aeabi_dsub>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800211c:	f7fe fb42 	bl	80007a4 <__aeabi_ddiv>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4690      	mov	r8, r2
 8002126:	4699      	mov	r9, r3
 8002128:	e014      	b.n	8002154 <HAL_TIM_PeriodElapsedCallback+0x468>
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4b6e      	ldr	r3, [pc, #440]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002130:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002134:	f7fe f854 	bl	80001e0 <__aeabi_dsub>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4610      	mov	r0, r2
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002146:	f7fe fb2d 	bl	80007a4 <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4690      	mov	r8, r2
 8002150:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800215c:	f7fe fc6a 	bl	8000a34 <__aeabi_dcmplt>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d045      	beq.n	80021f2 <HAL_TIM_PeriodElapsedCallback+0x506>
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b5f      	ldr	r3, [pc, #380]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800216c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002170:	f7fe fb18 	bl	80007a4 <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f7fe fc74 	bl	8000a70 <__aeabi_dcmpgt>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d018      	beq.n	80021c0 <HAL_TIM_PeriodElapsedCallback+0x4d4>
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002194:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002198:	f7fe fb04 	bl	80007a4 <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	461c      	mov	r4, r3
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x600>)
 80021ae:	f7fe fc5f 	bl	8000a70 <__aeabi_dcmpgt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_TIM_PeriodElapsedCallback+0x4d0>
 80021b8:	2300      	movs	r3, #0
 80021ba:	461c      	mov	r4, r3
 80021bc:	b2e3      	uxtb	r3, r4
 80021be:	e179      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80021c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021ca:	f7fe faeb 	bl	80007a4 <__aeabi_ddiv>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	2301      	movs	r3, #1
 80021d8:	461c      	mov	r4, r3
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b44      	ldr	r3, [pc, #272]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80021e0:	f7fe fc28 	bl	8000a34 <__aeabi_dcmplt>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PeriodElapsedCallback+0x502>
 80021ea:	2300      	movs	r3, #0
 80021ec:	461c      	mov	r4, r3
 80021ee:	b2e3      	uxtb	r3, r4
 80021f0:	e160      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80021f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021fc:	f7fd fff2 	bl	80001e4 <__adddf3>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800220e:	f7fe fac9 	bl	80007a4 <__aeabi_ddiv>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	f04f 0300 	mov.w	r3, #0
 8002222:	f7fe fc25 	bl	8000a70 <__aeabi_dcmpgt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d014      	beq.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x56a>
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002236:	f7fd ffd5 	bl	80001e4 <__adddf3>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002248:	f7fe faac 	bl	80007a4 <__aeabi_ddiv>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002254:	e015      	b.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x596>
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800225c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002260:	f7fd ffc0 	bl	80001e4 <__adddf3>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002272:	f7fe fa97 	bl	80007a4 <__aeabi_ddiv>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	63ba      	str	r2, [r7, #56]	; 0x38
 800227c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8002288:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800228c:	f7fd ffa8 	bl	80001e0 <__aeabi_dsub>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 800229e:	f7fe fa81 	bl	80007a4 <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	f7fe fbdd 	bl	8000a70 <__aeabi_dcmpgt>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d01b      	beq.n	80022f4 <HAL_TIM_PeriodElapsedCallback+0x608>
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80022c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022c6:	f7fd ff8b 	bl	80001e0 <__aeabi_dsub>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4610      	mov	r0, r2
 80022d0:	4619      	mov	r1, r3
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80022d8:	f7fe fa64 	bl	80007a4 <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80022e4:	e01c      	b.n	8002320 <HAL_TIM_PeriodElapsedCallback+0x634>
 80022e6:	bf00      	nop
 80022e8:	40900000 	.word	0x40900000
 80022ec:	3ff00000 	.word	0x3ff00000
 80022f0:	bff00000 	.word	0xbff00000
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	4bc5      	ldr	r3, [pc, #788]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80022fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022fe:	f7fd ff6f 	bl	80001e0 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	4bc0      	ldr	r3, [pc, #768]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002310:	f7fe fa48 	bl	80007a4 <__aeabi_ddiv>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	633a      	str	r2, [r7, #48]	; 0x30
 800231a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800231e:	637b      	str	r3, [r7, #52]	; 0x34
 8002320:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002324:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002328:	f7fe fb84 	bl	8000a34 <__aeabi_dcmplt>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d060      	beq.n	80023f4 <HAL_TIM_PeriodElapsedCallback+0x708>
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4bb6      	ldr	r3, [pc, #728]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002338:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800233c:	f7fd ff52 	bl	80001e4 <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	4bb0      	ldr	r3, [pc, #704]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800234e:	f7fe fa29 	bl	80007a4 <__aeabi_ddiv>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	f7fe fb85 	bl	8000a70 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d021      	beq.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x6c4>
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	4ba7      	ldr	r3, [pc, #668]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002376:	f7fd ff35 	bl	80001e4 <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	4ba2      	ldr	r3, [pc, #648]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002388:	f7fe fa0c 	bl	80007a4 <__aeabi_ddiv>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	2301      	movs	r3, #1
 8002396:	461c      	mov	r4, r3
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	4b9d      	ldr	r3, [pc, #628]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x928>)
 800239e:	f7fe fb67 	bl	8000a70 <__aeabi_dcmpgt>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_TIM_PeriodElapsedCallback+0x6c0>
 80023a8:	2300      	movs	r3, #0
 80023aa:	461c      	mov	r4, r3
 80023ac:	b2e3      	uxtb	r3, r4
 80023ae:	e081      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	4b96      	ldr	r3, [pc, #600]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80023b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023ba:	f7fd ff13 	bl	80001e4 <__adddf3>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80023cc:	f7fe f9ea 	bl	80007a4 <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	2301      	movs	r3, #1
 80023da:	461c      	mov	r4, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b8d      	ldr	r3, [pc, #564]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 80023e2:	f7fe fb27 	bl	8000a34 <__aeabi_dcmplt>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_PeriodElapsedCallback+0x704>
 80023ec:	2300      	movs	r3, #0
 80023ee:	461c      	mov	r4, r3
 80023f0:	b2e3      	uxtb	r3, r4
 80023f2:	e05f      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80023fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80023fe:	f7fd feef 	bl	80001e0 <__aeabi_dsub>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b80      	ldr	r3, [pc, #512]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002410:	f7fe f9c8 	bl	80007a4 <__aeabi_ddiv>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f7fe fb24 	bl	8000a70 <__aeabi_dcmpgt>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d021      	beq.n	8002472 <HAL_TIM_PeriodElapsedCallback+0x786>
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	4b77      	ldr	r3, [pc, #476]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002434:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002438:	f7fd fed2 	bl	80001e0 <__aeabi_dsub>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	4b71      	ldr	r3, [pc, #452]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800244a:	f7fe f9ab 	bl	80007a4 <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	2301      	movs	r3, #1
 8002458:	461c      	mov	r4, r3
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	4b6d      	ldr	r3, [pc, #436]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x928>)
 8002460:	f7fe fb06 	bl	8000a70 <__aeabi_dcmpgt>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_PeriodElapsedCallback+0x782>
 800246a:	2300      	movs	r3, #0
 800246c:	461c      	mov	r4, r3
 800246e:	b2e3      	uxtb	r3, r4
 8002470:	e020      	b.n	80024b4 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002478:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800247c:	f7fd feb0 	bl	80001e0 <__aeabi_dsub>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b60      	ldr	r3, [pc, #384]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800248e:	f7fe f989 	bl	80007a4 <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	2301      	movs	r3, #1
 800249c:	461c      	mov	r4, r3
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x92c>)
 80024a4:	f7fe fac6 	bl	8000a34 <__aeabi_dcmplt>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_TIM_PeriodElapsedCallback+0x7c6>
 80024ae:	2300      	movs	r3, #0
 80024b0:	461c      	mov	r4, r3
 80024b2:	b2e3      	uxtb	r3, r4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_TIM_PeriodElapsedCallback+0x7d6>
 80024b8:	f04f 0a00 	mov.w	sl, #0
 80024bc:	f8df b154 	ldr.w	fp, [pc, #340]	; 8002614 <HAL_TIM_PeriodElapsedCallback+0x928>
 80024c0:	e2bc      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b52      	ldr	r3, [pc, #328]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80024c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024cc:	f7fe f96a 	bl	80007a4 <__aeabi_ddiv>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4610      	mov	r0, r2
 80024d6:	4619      	mov	r1, r3
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	f7fe fac6 	bl	8000a70 <__aeabi_dcmpgt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_TIM_PeriodElapsedCallback+0x816>
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	4b48      	ldr	r3, [pc, #288]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80024f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80024f4:	f7fe f956 	bl	80007a4 <__aeabi_ddiv>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002500:	e00c      	b.n	800251c <HAL_TIM_PeriodElapsedCallback+0x830>
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	4b42      	ldr	r3, [pc, #264]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800250c:	f7fe f94a 	bl	80007a4 <__aeabi_ddiv>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	62ba      	str	r2, [r7, #40]	; 0x28
 8002516:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002526:	f7fd fe5d 	bl	80001e4 <__adddf3>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	4b36      	ldr	r3, [pc, #216]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002538:	f7fe f934 	bl	80007a4 <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	f7fe fa90 	bl	8000a70 <__aeabi_dcmpgt>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d014      	beq.n	8002580 <HAL_TIM_PeriodElapsedCallback+0x894>
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800255c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002560:	f7fd fe40 	bl	80001e4 <__adddf3>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002572:	f7fe f917 	bl	80007a4 <__aeabi_ddiv>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800257e:	e015      	b.n	80025ac <HAL_TIM_PeriodElapsedCallback+0x8c0>
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002586:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800258a:	f7fd fe2b 	bl	80001e4 <__adddf3>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 800259c:	f7fe f902 	bl	80007a4 <__aeabi_ddiv>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	623a      	str	r2, [r7, #32]
 80025a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80025b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025b6:	f7fd fe13 	bl	80001e0 <__aeabi_dsub>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80025c8:	f7fe f8ec 	bl	80007a4 <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	f7fe fa48 	bl	8000a70 <__aeabi_dcmpgt>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01a      	beq.n	800261c <HAL_TIM_PeriodElapsedCallback+0x930>
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 80025ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025f0:	f7fd fdf6 	bl	80001e0 <__aeabi_dsub>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x924>)
 8002602:	f7fe f8cf 	bl	80007a4 <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800260e:	e01b      	b.n	8002648 <HAL_TIM_PeriodElapsedCallback+0x95c>
 8002610:	40900000 	.word	0x40900000
 8002614:	3ff00000 	.word	0x3ff00000
 8002618:	bff00000 	.word	0xbff00000
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4bae      	ldr	r3, [pc, #696]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002622:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002626:	f7fd fddb 	bl	80001e0 <__aeabi_dsub>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	4ba9      	ldr	r3, [pc, #676]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002638:	f7fe f8b4 	bl	80007a4 <__aeabi_ddiv>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	61ba      	str	r2, [r7, #24]
 8002642:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800264c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002650:	f7fe f9f0 	bl	8000a34 <__aeabi_dcmplt>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d048      	beq.n	80026ec <HAL_TIM_PeriodElapsedCallback+0xa00>
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b9f      	ldr	r3, [pc, #636]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002660:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002664:	f7fd fdbe 	bl	80001e4 <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	4b99      	ldr	r3, [pc, #612]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002676:	f7fe f895 	bl	80007a4 <__aeabi_ddiv>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	f7fe f9f1 	bl	8000a70 <__aeabi_dcmpgt>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d014      	beq.n	80026be <HAL_TIM_PeriodElapsedCallback+0x9d2>
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	4b90      	ldr	r3, [pc, #576]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800269a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800269e:	f7fd fda1 	bl	80001e4 <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b8b      	ldr	r3, [pc, #556]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80026b0:	f7fe f878 	bl	80007a4 <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80026bc:	e05e      	b.n	800277c <HAL_TIM_PeriodElapsedCallback+0xa90>
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80026c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026c8:	f7fd fd8c 	bl	80001e4 <__adddf3>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80026da:	f7fe f863 	bl	80007a4 <__aeabi_ddiv>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80026e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ea:	e047      	b.n	800277c <HAL_TIM_PeriodElapsedCallback+0xa90>
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80026f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026f6:	f7fd fd73 	bl	80001e0 <__aeabi_dsub>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b75      	ldr	r3, [pc, #468]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002708:	f7fe f84c 	bl	80007a4 <__aeabi_ddiv>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	f7fe f9a8 	bl	8000a70 <__aeabi_dcmpgt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d014      	beq.n	8002750 <HAL_TIM_PeriodElapsedCallback+0xa64>
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800272c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002730:	f7fd fd56 	bl	80001e0 <__aeabi_dsub>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002742:	f7fe f82f 	bl	80007a4 <__aeabi_ddiv>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800274e:	e015      	b.n	800277c <HAL_TIM_PeriodElapsedCallback+0xa90>
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800275a:	f7fd fd41 	bl	80001e0 <__aeabi_dsub>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	4610      	mov	r0, r2
 8002764:	4619      	mov	r1, r3
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b5c      	ldr	r3, [pc, #368]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800276c:	f7fe f81a 	bl	80007a4 <__aeabi_ddiv>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	65ba      	str	r2, [r7, #88]	; 0x58
 8002776:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800277a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002780:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002784:	f7fe f956 	bl	8000a34 <__aeabi_dcmplt>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d02c      	beq.n	80027e8 <HAL_TIM_PeriodElapsedCallback+0xafc>
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	4b52      	ldr	r3, [pc, #328]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002794:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002798:	f7fe f804 	bl	80007a4 <__aeabi_ddiv>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f7fe f960 	bl	8000a70 <__aeabi_dcmpgt>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_TIM_PeriodElapsedCallback+0xae2>
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b48      	ldr	r3, [pc, #288]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80027bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027c0:	f7fd fff0 	bl	80007a4 <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4692      	mov	sl, r2
 80027ca:	469b      	mov	fp, r3
 80027cc:	e136      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b42      	ldr	r3, [pc, #264]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80027d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027d8:	f7fd ffe4 	bl	80007a4 <__aeabi_ddiv>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4692      	mov	sl, r2
 80027e2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80027e6:	e129      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80027ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027f2:	f7fd fcf7 	bl	80001e4 <__adddf3>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	4b36      	ldr	r3, [pc, #216]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002804:	f7fd ffce 	bl	80007a4 <__aeabi_ddiv>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	f7fe f92a 	bl	8000a70 <__aeabi_dcmpgt>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d014      	beq.n	800284c <HAL_TIM_PeriodElapsedCallback+0xb60>
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002828:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800282c:	f7fd fcda 	bl	80001e4 <__adddf3>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800283e:	f7fd ffb1 	bl	80007a4 <__aeabi_ddiv>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800284a:	e015      	b.n	8002878 <HAL_TIM_PeriodElapsedCallback+0xb8c>
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002852:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002856:	f7fd fcc5 	bl	80001e4 <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002868:	f7fd ff9c 	bl	80007a4 <__aeabi_ddiv>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	613a      	str	r2, [r7, #16]
 8002872:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 800287e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002882:	f7fd fcad 	bl	80001e0 <__aeabi_dsub>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8002894:	f7fd ff86 	bl	80007a4 <__aeabi_ddiv>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	f7fe f8e2 	bl	8000a70 <__aeabi_dcmpgt>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d016      	beq.n	80028e0 <HAL_TIM_PeriodElapsedCallback+0xbf4>
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80028b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028bc:	f7fd fc90 	bl	80001e0 <__aeabi_dsub>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 80028ce:	f7fd ff69 	bl	80007a4 <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80028da:	e017      	b.n	800290c <HAL_TIM_PeriodElapsedCallback+0xc20>
 80028dc:	40900000 	.word	0x40900000
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80028e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028ea:	f7fd fc79 	bl	80001e0 <__aeabi_dsub>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80028fc:	f7fd ff52 	bl	80007a4 <__aeabi_ddiv>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002910:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002914:	f7fe f88e 	bl	8000a34 <__aeabi_dcmplt>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d047      	beq.n	80029ae <HAL_TIM_PeriodElapsedCallback+0xcc2>
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	4b5c      	ldr	r3, [pc, #368]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002924:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002928:	f7fd fc5c 	bl	80001e4 <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800293a:	f7fd ff33 	bl	80007a4 <__aeabi_ddiv>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	f04f 0300 	mov.w	r3, #0
 800294e:	f7fe f88f 	bl	8000a70 <__aeabi_dcmpgt>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <HAL_TIM_PeriodElapsedCallback+0xc96>
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800295e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002962:	f7fd fc3f 	bl	80001e4 <__adddf3>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002974:	f7fd ff16 	bl	80007a4 <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4692      	mov	sl, r2
 800297e:	469b      	mov	fp, r3
 8002980:	e05c      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002988:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800298c:	f7fd fc2a 	bl	80001e4 <__adddf3>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 800299e:	f7fd ff01 	bl	80007a4 <__aeabi_ddiv>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4692      	mov	sl, r2
 80029a8:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80029ac:	e046      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80029b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029b8:	f7fd fc12 	bl	80001e0 <__aeabi_dsub>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80029ca:	f7fd feeb 	bl	80007a4 <__aeabi_ddiv>
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4610      	mov	r0, r2
 80029d4:	4619      	mov	r1, r3
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f7fe f847 	bl	8000a70 <__aeabi_dcmpgt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d014      	beq.n	8002a12 <HAL_TIM_PeriodElapsedCallback+0xd26>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 80029ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029f2:	f7fd fbf5 	bl	80001e0 <__aeabi_dsub>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002a04:	f7fd fece 	bl	80007a4 <__aeabi_ddiv>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4692      	mov	sl, r2
 8002a0e:	469b      	mov	fp, r3
 8002a10:	e014      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0xd50>
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4b1f      	ldr	r3, [pc, #124]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002a18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a1c:	f7fd fbe0 	bl	80001e0 <__aeabi_dsub>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0xda8>)
 8002a2e:	f7fd feb9 	bl	80007a4 <__aeabi_ddiv>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4692      	mov	sl, r2
 8002a38:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002a3c:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8002a3e:	e9c3 ab00 	strd	sl, fp, [r3]
		set_motor_setting(instruction);
		step_gain = 0;
		state.lock = 1;
		// TODO: build variables for stepper function here to call in div above
	}
	return;
 8001cf4:	e025      	b.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x2de>
	} else if (!state.lock) {
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001cf8:	7f5b      	ldrb	r3, [r3, #29]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11e      	bne.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x2de>
		instruction = get_next_queue_ptr();  // decrements queue_size and increments queue_index
 8001d04:	f7ff fe84 	bl	8001a10 <get_next_queue_ptr>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001d0c:	6013      	str	r3, [r2, #0]
		if (!instruction) { return; }
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d017      	beq.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x2e2>
		set_motor_setting(instruction);
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fd2a 	bl	8001774 <set_motor_setting>
		step_gain = 0;
 8001d20:	4914      	ldr	r1, [pc, #80]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	f04f 0300 	mov.w	r3, #0
 8001d2a:	e9c1 2300 	strd	r2, r3, [r1]
		state.lock = 1;
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001d30:	7f53      	ldrb	r3, [r2, #29]
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	7753      	strb	r3, [r2, #29]
	return;
 8001d38:	e003      	b.n	8001d42 <HAL_TIM_PeriodElapsedCallback+0x2de>
	if (htim != &htim10) { return; }
 8001d3a:	bf00      	nop
 8001d3c:	e004      	b.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x2e4>
	if (state.queue_size == 0) { return; }
 8001d3e:	bf00      	nop
 8001d40:	e002      	b.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x2e4>
	return;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <HAL_TIM_PeriodElapsedCallback+0x2e4>
		if (!instruction) { return; }
 8001d46:	bf00      	nop
}
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d50:	2000077c 	.word	0x2000077c
 8001d54:	20000178 	.word	0x20000178
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	40b00000 	.word	0x40b00000
 8001d60:	3ff00000 	.word	0x3ff00000
 8001d64:	c0240000 	.word	0xc0240000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40900000 	.word	0x40900000
 8001d70:	bff00000 	.word	0xbff00000
 8001d74:	200005c8 	.word	0x200005c8

08001d78 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 1);  // set the flag pin until success
 8001d80:	2201      	movs	r2, #1
 8001d82:	2104      	movs	r1, #4
 8001d84:	4817      	ldr	r0, [pc, #92]	; (8001de4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8001d86:	f002 f897 	bl	8003eb8 <HAL_GPIO_WritePin>
	// only hspi1 is used so there is no need to check
	void* dst = get_next_empty_queue_ptr();
 8001d8a:	f7ff fe21 	bl	80019d0 <get_next_empty_queue_ptr>
 8001d8e:	60f8      	str	r0, [r7, #12]
	if (!dst) { return; }  // exit if queue is full
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d022      	beq.n	8001ddc <HAL_SPI_TxRxCpltCallback+0x64>
	// the main computer is told how its data is recieved via the Status pin
	// note that the pin is cleared when something is received correctly
	// this means that the main computer has to check this pin before sending the next instruction to prevent data loss
	if (instruction_input.crc == crc16_dnp(&instruction_input, 30)) {
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_SPI_TxRxCpltCallback+0x70>)
 8001d98:	8bdb      	ldrh	r3, [r3, #30]
 8001d9a:	b29c      	uxth	r4, r3
 8001d9c:	f04f 021e 	mov.w	r2, #30
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	4810      	ldr	r0, [pc, #64]	; (8001de8 <HAL_SPI_TxRxCpltCallback+0x70>)
 8001da6:	f7ff fb11 	bl	80013cc <crc16_dnp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	429c      	cmp	r4, r3
 8001dae:	d104      	bne.n	8001dba <HAL_SPI_TxRxCpltCallback+0x42>
		HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2104      	movs	r1, #4
 8001db4:	480b      	ldr	r0, [pc, #44]	; (8001de4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8001db6:	f002 f87f 	bl	8003eb8 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8001dc0:	f002 f87a 	bl	8003eb8 <HAL_GPIO_WritePin>
	memcpy(dst, &instruction_input, sizeof(MCU_Instruction));
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <HAL_SPI_TxRxCpltCallback+0x70>)
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f006 fae5 	bl	8008398 <memcpy>
	state.queue_size++;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_SPI_TxRxCpltCallback+0x74>)
 8001dd0:	7f9b      	ldrb	r3, [r3, #30]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_SPI_TxRxCpltCallback+0x74>)
 8001dd8:	779a      	strb	r2, [r3, #30]
 8001dda:	e000      	b.n	8001dde <HAL_SPI_TxRxCpltCallback+0x66>
	if (!dst) { return; }  // exit if queue is full
 8001ddc:	bf00      	nop
}
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	40020000 	.word	0x40020000
 8001de8:	20000598 	.word	0x20000598
 8001dec:	20000178 	.word	0x20000178

08001df0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
	// this will not instantly load next instruction
	if (GPIO_Pin == INSTUCTION_INT_Pin) { state.lock = 0; }
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d104      	bne.n	8001e0a <HAL_GPIO_EXTI_Callback+0x1a>
 8001e00:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e02:	7f53      	ldrb	r3, [r2, #29]
 8001e04:	f36f 0382 	bfc	r3, #2, #1
 8001e08:	7753      	strb	r3, [r2, #29]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20000178 	.word	0x20000178
 8001e1c:	00000000 	.word	0x00000000

08001e20 <main>:
 8002a42:	e021      	b.n	8002a88 <HAL_TIM_PeriodElapsedCallback+0xd9c>
	} else if (!state.lock) {
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8002a46:	7f5b      	ldrb	r3, [r3, #29]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11a      	bne.n	8002a88 <HAL_TIM_PeriodElapsedCallback+0xd9c>
		instruction = get_next_queue_ptr();  // decrements queue_size and increments queue_index
 8002a52:	f7ff f921 	bl	8001c98 <get_next_queue_ptr>
 8002a56:	4603      	mov	r3, r0
 8002a58:	4a11      	ldr	r2, [pc, #68]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8002a5a:	6013      	str	r3, [r2, #0]
		set_motor_setting(instruction);
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xdb4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ffc9 	bl	80019f8 <set_motor_setting>
		step_gain = 0;
 8002a66:	490c      	ldr	r1, [pc, #48]	; (8002a98 <HAL_TIM_PeriodElapsedCallback+0xdac>)
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9c1 2300 	strd	r2, r3, [r1]
		state.lock = 1;
 8002a74:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_TIM_PeriodElapsedCallback+0xdb0>)
 8002a76:	7f53      	ldrb	r3, [r2, #29]
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	7753      	strb	r3, [r2, #29]
	return;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_PeriodElapsedCallback+0xd9c>
	if (htim != &htim10) { return; }
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <HAL_TIM_PeriodElapsedCallback+0xd9e>
	if (state.queue_size == 0) { return; }
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_PeriodElapsedCallback+0xd9e>
	return;
 8002a88:	bf00      	nop
}
 8002a8a:	3770      	adds	r7, #112	; 0x70
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a92:	bf00      	nop
 8002a94:	40900000 	.word	0x40900000
 8002a98:	200005e0 	.word	0x200005e0
 8002a9c:	20000190 	.word	0x20000190
 8002aa0:	20000000 	.word	0x20000000

08002aa4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	// only hspi1 is used so there is no need to check
	void* dst = get_next_empty_queue_ptr();
 8002aac:	f7ff f8d4 	bl	8001c58 <get_next_empty_queue_ptr>
 8002ab0:	60f8      	str	r0, [r7, #12]
	if (!dst) { return; }  // exit if queue is full
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d023      	beq.n	8002b00 <HAL_SPI_TxRxCpltCallback+0x5c>
	// the main computer is told how its data is recieved via the Status pin
	// note that the pin is cleared when something is received correctly
	// this means that the main computer has to check this pin before sending the next instruction to prevent data loss
	if (instruction_input.crc != crc16_dnp(&instruction_input, 30)) {
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <HAL_SPI_TxRxCpltCallback+0x64>)
 8002aba:	8bdb      	ldrh	r3, [r3, #30]
 8002abc:	b29c      	uxth	r4, r3
 8002abe:	f04f 021e 	mov.w	r2, #30
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	4810      	ldr	r0, [pc, #64]	; (8002b08 <HAL_SPI_TxRxCpltCallback+0x64>)
 8002ac8:	f7fe fdc2 	bl	8001650 <crc16_dnp>
 8002acc:	4603      	mov	r3, r0
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d005      	beq.n	8002ade <HAL_SPI_TxRxCpltCallback+0x3a>
		HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 1); return;
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	2104      	movs	r1, #4
 8002ad6:	480d      	ldr	r0, [pc, #52]	; (8002b0c <HAL_SPI_TxRxCpltCallback+0x68>)
 8002ad8:	f002 f87e 	bl	8004bd8 <HAL_GPIO_WritePin>
 8002adc:	e011      	b.n	8002b02 <HAL_SPI_TxRxCpltCallback+0x5e>
	}
	HAL_GPIO_WritePin(STATUS_PIN_GPIO_Port, STATUS_PIN_Pin, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	480a      	ldr	r0, [pc, #40]	; (8002b0c <HAL_SPI_TxRxCpltCallback+0x68>)
 8002ae4:	f002 f878 	bl	8004bd8 <HAL_GPIO_WritePin>
	memcpy(dst, &instruction_input, sizeof(MCU_Instruction));
 8002ae8:	2220      	movs	r2, #32
 8002aea:	4907      	ldr	r1, [pc, #28]	; (8002b08 <HAL_SPI_TxRxCpltCallback+0x64>)
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f006 fb25 	bl	800913c <memcpy>
	state.queue_size++;
 8002af2:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8002af4:	7f9b      	ldrb	r3, [r3, #30]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8002afc:	779a      	strb	r2, [r3, #30]
 8002afe:	e000      	b.n	8002b02 <HAL_SPI_TxRxCpltCallback+0x5e>
	if (!dst) { return; }  // exit if queue is full
 8002b00:	bf00      	nop
}
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	200005b0 	.word	0x200005b0
 8002b0c:	40020000 	.word	0x40020000
 8002b10:	20000190 	.word	0x20000190

08002b14 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
	// this will not instantly load next instruction
	if (GPIO_Pin == INSTUCTION_INT_Pin) { state.lock = 0; }
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d104      	bne.n	8002b2e <HAL_GPIO_EXTI_Callback+0x1a>
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x28>)
 8002b26:	7f53      	ldrb	r3, [r2, #29]
 8002b28:	f36f 0382 	bfc	r3, #2, #1
 8002b2c:	7753      	strb	r3, [r2, #29]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000190 	.word	0x20000190

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e20:	b598      	push	{r3, r4, r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8001e24:	f7fe ff68 	bl	8000cf8 <AS5600_new>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a67      	ldr	r2, [pc, #412]	; (8001fc8 <main+0x1a8>)
 8001e2c:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 8001e2e:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <main+0x1a8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <main+0x1ac>)
 8001e34:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8001e36:	4b64      	ldr	r3, [pc, #400]	; (8001fc8 <main+0x1a8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <main+0x1b0>)
 8001e3c:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8001e3e:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <main+0x1a8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2220      	movs	r2, #32
 8001e44:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 8001e46:	4b60      	ldr	r3, [pc, #384]	; (8001fc8 <main+0x1a8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	739a      	strb	r2, [r3, #14]
 8002b40:	b598      	push	{r3, r4, r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	sensor = AS5600_new();
 8002b44:	f7fe fa1a 	bl	8000f7c <AS5600_new>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <main+0x1a8>)
 8002b4c:	6013      	str	r3, [r2, #0]
	sensor->i2c_handle = &hi2c1;
 8002b4e:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <main+0x1a8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a66      	ldr	r2, [pc, #408]	; (8002cec <main+0x1ac>)
 8002b54:	601a      	str	r2, [r3, #0]
	sensor->dir_port = AS5600_DIR_GPIO_Port;
 8002b56:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <main+0x1a8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <main+0x1b0>)
 8002b5c:	605a      	str	r2, [r3, #4]
	sensor->dir_pin = AS5600_DIR_Pin;
 8002b5e:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <main+0x1a8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	819a      	strh	r2, [r3, #12]
	sensor->positive_rotation_direction = AS5600_DIR_CW;
 8002b66:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <main+0x1a8>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	739a      	strb	r2, [r3, #14]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e4e:	f000 fc65 	bl	800271c <HAL_Init>
 8002b6e:	f000 fc65 	bl	800343c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e52:	f000 f8d5 	bl	8002000 <SystemClock_Config>
 8002b72:	f000 f8d5 	bl	8002d20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e56:	f7ff fb25 	bl	80014a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e5a:	f7ff faf3 	bl	8001444 <MX_DMA_Init>
  MX_SPI1_Init();
 8001e5e:	f000 f93f 	bl	80020e0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001e62:	f7ff fbeb 	bl	800163c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001e66:	f7fe fe6d 	bl	8000b44 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001e6a:	f000 fb1f 	bl	80024ac <MX_TIM2_Init>
  MX_TIM5_Init();
 8001e6e:	f000 fb69 	bl	8002544 <MX_TIM5_Init>
  MX_TIM10_Init();
 8001e72:	f000 fbb5 	bl	80025e0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// disable motor driver
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 8001e76:	2201      	movs	r2, #1
 8001e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e7c:	4854      	ldr	r0, [pc, #336]	; (8001fd0 <main+0x1b0>)
 8001e7e:	f002 f81b 	bl	8003eb8 <HAL_GPIO_WritePin>

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 8001e82:	bf00      	nop
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <main+0x1a8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe ff3e 	bl	8000d0a <AS5600_init>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f7      	bne.n	8001e84 <main+0x64>

	state.vel = 0.0;
 8001e94:	494f      	ldr	r1, [pc, #316]	; (8001fd4 <main+0x1b4>)
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
	state.acc = 0.0;
 8001ea2:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <main+0x1b4>)
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	state.instrution_id = 0;
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <main+0x1b4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	835a      	strh	r2, [r3, #26]
	state.queue_size = 0;
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <main+0x1b4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	779a      	strb	r2, [r3, #30]
	state.queue_index = 31;
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <main+0x1b4>)
 8001ebe:	221f      	movs	r2, #31
 8001ec0:	77da      	strb	r2, [r3, #31]
	state.micro_step = 0;
 8001ec2:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <main+0x1b4>)
 8001ec4:	7f13      	ldrb	r3, [r2, #28]
 8001ec6:	f36f 0301 	bfc	r3, #0, #2
 8001eca:	7713      	strb	r3, [r2, #28]
	state.srd_mode = 0;
 8001ecc:	4a41      	ldr	r2, [pc, #260]	; (8001fd4 <main+0x1b4>)
 8001ece:	7f13      	ldrb	r3, [r2, #28]
 8001ed0:	f36f 0382 	bfc	r3, #2, #1
 8001ed4:	7713      	strb	r3, [r2, #28]
	state.lock = 0;  // TODO: reset this from within the GO_INTERRUPT
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	; (8001fd4 <main+0x1b4>)
 8001ed8:	7f53      	ldrb	r3, [r2, #29]
 8001eda:	f36f 0382 	bfc	r3, #2, #1
 8001ede:	7753      	strb	r3, [r2, #29]
	// initialize the state struct using AS5600 position values
	AS5600_get_angle(sensor, &state.raw_angle);
 8001ee0:	4b39      	ldr	r3, [pc, #228]	; (8001fc8 <main+0x1a8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	493c      	ldr	r1, [pc, #240]	; (8001fd8 <main+0x1b8>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fa31 	bl	800134e <AS5600_get_angle>
	state.pos.angle =	state.raw_angle;
 8001eec:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <main+0x1b4>)
 8001eee:	8b1b      	ldrh	r3, [r3, #24]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	4a36      	ldr	r2, [pc, #216]	; (8001fd4 <main+0x1b4>)
 8001efa:	8a53      	ldrh	r3, [r2, #18]
 8001efc:	f361 130f 	bfi	r3, r1, #4, #12
 8001f00:	8253      	strh	r3, [r2, #18]
	AS5600_pos_f64 =	state.raw_angle;  // set the current angle to the most accurate value for the euler method
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <main+0x1b4>)
 8001f04:	8b1b      	ldrh	r3, [r3, #24]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fa87 	bl	800041c <__aeabi_ui2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4932      	ldr	r1, [pc, #200]	; (8001fdc <main+0x1bc>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
 8002b76:	f7fe fdd7 	bl	8001728 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7a:	f7fe fda5 	bl	80016c8 <MX_DMA_Init>
  MX_SPI1_Init();
 8002b7e:	f000 f93f 	bl	8002e00 <MX_SPI1_Init>
  MX_I2C1_Init();
 8002b82:	f7fe fe9d 	bl	80018c0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002b86:	f7fe f91f 	bl	8000dc8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002b8a:	f000 fb1f 	bl	80031cc <MX_TIM2_Init>
  MX_TIM5_Init();
 8002b8e:	f000 fb69 	bl	8003264 <MX_TIM5_Init>
  MX_TIM10_Init();
 8002b92:	f000 fbb5 	bl	8003300 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
	// disable motor driver
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9c:	4854      	ldr	r0, [pc, #336]	; (8002cf0 <main+0x1b0>)
 8002b9e:	f002 f81b 	bl	8004bd8 <HAL_GPIO_WritePin>

	// initialize AS5600 sensor
	while (AS5600_init(sensor) != HAL_OK) {}  // the sensor has to be on for the code to work
 8002ba2:	bf00      	nop
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <main+0x1a8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe f9f0 	bl	8000f8e <AS5600_init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1f7      	bne.n	8002ba4 <main+0x64>

	state.vel = 0.0;
 8002bb4:	494f      	ldr	r1, [pc, #316]	; (8002cf4 <main+0x1b4>)
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
	state.acc = 0.0;
 8002bc2:	494c      	ldr	r1, [pc, #304]	; (8002cf4 <main+0x1b4>)
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	state.instrution_id = 0;
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <main+0x1b4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	835a      	strh	r2, [r3, #26]
	state.queue_size = 0;
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <main+0x1b4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	779a      	strb	r2, [r3, #30]
	state.queue_index = 0;
 8002bdc:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <main+0x1b4>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	77da      	strb	r2, [r3, #31]
	state.micro_step = 0;
 8002be2:	4a44      	ldr	r2, [pc, #272]	; (8002cf4 <main+0x1b4>)
 8002be4:	7f13      	ldrb	r3, [r2, #28]
 8002be6:	f36f 0301 	bfc	r3, #0, #2
 8002bea:	7713      	strb	r3, [r2, #28]
	state.srd_mode = 0;
 8002bec:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <main+0x1b4>)
 8002bee:	7f13      	ldrb	r3, [r2, #28]
 8002bf0:	f36f 0382 	bfc	r3, #2, #1
 8002bf4:	7713      	strb	r3, [r2, #28]
	state.lock = 0;  // TODO: reset this from within the GO_INTERRUPT
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <main+0x1b4>)
 8002bf8:	7f53      	ldrb	r3, [r2, #29]
 8002bfa:	f36f 0382 	bfc	r3, #2, #1
 8002bfe:	7753      	strb	r3, [r2, #29]
	// initialize the state struct using AS5600 position values
	AS5600_get_angle(sensor, &state.raw_angle);
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <main+0x1a8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	493c      	ldr	r1, [pc, #240]	; (8002cf8 <main+0x1b8>)
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fce3 	bl	80015d2 <AS5600_get_angle>
	state.pos.angle =	state.raw_angle;
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <main+0x1b4>)
 8002c0e:	8b1b      	ldrh	r3, [r3, #24]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c16:	b299      	uxth	r1, r3
 8002c18:	4a36      	ldr	r2, [pc, #216]	; (8002cf4 <main+0x1b4>)
 8002c1a:	8a53      	ldrh	r3, [r2, #18]
 8002c1c:	f361 130f 	bfi	r3, r1, #4, #12
 8002c20:	8253      	strh	r3, [r2, #18]
	AS5600_pos_f64 =	state.raw_angle;  // set the current angle to the most accurate value for the euler method
 8002c22:	4b34      	ldr	r3, [pc, #208]	; (8002cf4 <main+0x1b4>)
 8002c24:	8b1b      	ldrh	r3, [r3, #24]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc17 	bl	800045c <__aeabi_ui2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4932      	ldr	r1, [pc, #200]	; (8002cfc <main+0x1bc>)
 8002c34:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)&state, 16);  // start data receiving loop
	*/

	// TODO: use flag pin to tell CTRL where MCU is in initialization cycle
	// start communication with CTRL
	HAL_TIM_Base_Start(&htim2);  // start timer_2 (for delays)
 8001f18:	4831      	ldr	r0, [pc, #196]	; (8001fe0 <main+0x1c0>)
 8001f1a:	f005 fdc9 	bl	8007ab0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5 (for simulation time keeping)
 8001f1e:	4831      	ldr	r0, [pc, #196]	; (8001fe4 <main+0x1c4>)
 8001f20:	f005 fdc6 	bl	8007ab0 <HAL_TIM_Base_Start>

	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*)&state, (uint8_t*)&instruction_input, 32);
 8001f24:	2320      	movs	r3, #32
 8001f26:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <main+0x1c8>)
 8001f28:	492a      	ldr	r1, [pc, #168]	; (8001fd4 <main+0x1b4>)
 8001f2a:	4830      	ldr	r0, [pc, #192]	; (8001fec <main+0x1cc>)
 8001f2c:	f005 f936 	bl	800719c <HAL_SPI_TransmitReceive_DMA>

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&state.raw_angle, 1);
 8001f30:	2201      	movs	r2, #1
 8001f32:	4929      	ldr	r1, [pc, #164]	; (8001fd8 <main+0x1b8>)
 8001f34:	482e      	ldr	r0, [pc, #184]	; (8001ff0 <main+0x1d0>)
 8001f36:	f000 fdb7 	bl	8002aa8 <HAL_ADC_Start_DMA>
 8002c38:	4831      	ldr	r0, [pc, #196]	; (8002d00 <main+0x1c0>)
 8002c3a:	f005 fdfd 	bl	8008838 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim5);  // start timer_5 (for simulation time keeping)
 8002c3e:	4831      	ldr	r0, [pc, #196]	; (8002d04 <main+0x1c4>)
 8002c40:	f005 fdfa 	bl	8008838 <HAL_TIM_Base_Start>

	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*)&state, (uint8_t*)&instruction_input, 32);
 8002c44:	2320      	movs	r3, #32
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <main+0x1c8>)
 8002c48:	492a      	ldr	r1, [pc, #168]	; (8002cf4 <main+0x1b4>)
 8002c4a:	4830      	ldr	r0, [pc, #192]	; (8002d0c <main+0x1cc>)
 8002c4c:	f005 f95e 	bl	8007f0c <HAL_SPI_TransmitReceive_DMA>

	// start receiving ADC data
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&state.raw_angle, 1);
 8002c50:	2201      	movs	r2, #1
 8002c52:	4929      	ldr	r1, [pc, #164]	; (8002cf8 <main+0x1b8>)
 8002c54:	482e      	ldr	r0, [pc, #184]	; (8002d10 <main+0x1d0>)
 8002c56:	f000 fdb7 	bl	80037c8 <HAL_ADC_Start_DMA>

	//instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up

	// TODO: Add function to the INSTRUCT_GO interrupt pin that will start the stepping function
	// TODO: FIX ADC NOW IT STARTS FROM 500 AND HANGS ON 4096
	HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	4823      	ldr	r0, [pc, #140]	; (8001fd0 <main+0x1b0>)
 8001f42:	f001 ffb9 	bl	8003eb8 <HAL_GPIO_WritePin>
	TIM5->CNT = 0;
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <main+0x1d4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt) [100Hz]
 8001f4c:	482a      	ldr	r0, [pc, #168]	; (8001ff8 <main+0x1d8>)
 8001f4e:	f005 fe09 	bl	8007b64 <HAL_TIM_Base_Start_IT>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8001f52:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <main+0x1dc>)
 8001f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f58:	a317      	add	r3, pc, #92	; (adr r3, 8001fb8 <main+0x198>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fd49 	bl	80009f4 <__aeabi_dcmplt>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d124      	bne.n	8001fb2 <main+0x192>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <main+0x1dc>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	a114      	add	r1, pc, #80	; (adr r1, 8001fc0 <main+0x1a0>)
 8001f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f74:	f7fe fbf6 	bl	8000764 <__aeabi_ddiv>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe fd60 	bl	8000a44 <__aeabi_d2uiz>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <main+0x1b0>)
 8001f90:	f001 ff92 	bl	8003eb8 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8001f94:	4623      	mov	r3, r4
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fbd6 	bl	8001748 <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa2:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <main+0x1b0>)
 8001fa4:	f001 ff88 	bl	8003eb8 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8001fa8:	4623      	mov	r3, r4
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fbcc 	bl	8001748 <delay_us>
 8001fb0:	e7cf      	b.n	8001f52 <main+0x132>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8001fb2:	bf00      	nop
	while (1) {
 8001fb4:	e7cd      	b.n	8001f52 <main+0x132>
 8001fb6:	bf00      	nop
 8001fb8:	eb1c432d 	.word	0xeb1c432d
 8001fbc:	3f1a36e2 	.word	0x3f1a36e2
 8001fc0:	00000000 	.word	0x00000000
 8001fc4:	4052c000 	.word	0x4052c000
 8001fc8:	200005b8 	.word	0x200005b8
 8001fcc:	20000124 	.word	0x20000124
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	20000178 	.word	0x20000178
 8001fd8:	20000190 	.word	0x20000190
 8001fdc:	200005c0 	.word	0x200005c0
 8001fe0:	200006ec 	.word	0x200006ec
 8001fe4:	20000734 	.word	0x20000734
 8001fe8:	20000598 	.word	0x20000598
 8001fec:	200005d0 	.word	0x200005d0
 8001ff0:	2000007c 	.word	0x2000007c
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	2000077c 	.word	0x2000077c
 8001ffc:	200005c8 	.word	0x200005c8

08002000 <SystemClock_Config>:
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c60:	4823      	ldr	r0, [pc, #140]	; (8002cf0 <main+0x1b0>)
 8002c62:	f001 ffb9 	bl	8004bd8 <HAL_GPIO_WritePin>
	TIM5->CNT = 0;
 8002c66:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <main+0x1d4>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim10);  // start timer_10  (sensor interupt) [100Hz]
 8002c6c:	482a      	ldr	r0, [pc, #168]	; (8002d18 <main+0x1d8>)
 8002c6e:	f005 fe3d 	bl	80088ec <HAL_TIM_Base_Start_IT>
	while (1) {
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <main+0x1dc>)
 8002c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c78:	a317      	add	r3, pc, #92	; (adr r3, 8002cd8 <main+0x198>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fed9 	bl	8000a34 <__aeabi_dcmplt>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d124      	bne.n	8002cd2 <main+0x192>
		// dir is set in interrupt
		register uint16_t pulse_delay = MIN_STEPPER_DELAY / step_gain;
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <main+0x1dc>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	a114      	add	r1, pc, #80	; (adr r1, 8002ce0 <main+0x1a0>)
 8002c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c94:	f7fd fd86 	bl	80007a4 <__aeabi_ddiv>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd fef0 	bl	8000a84 <__aeabi_d2uiz>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b29c      	uxth	r4, r3
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cae:	4810      	ldr	r0, [pc, #64]	; (8002cf0 <main+0x1b0>)
 8002cb0:	f001 ff92 	bl	8004bd8 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fe88 	bl	80019cc <delay_us>
		HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc2:	480b      	ldr	r0, [pc, #44]	; (8002cf0 <main+0x1b0>)
 8002cc4:	f001 ff88 	bl	8004bd8 <HAL_GPIO_WritePin>
		delay_us(pulse_delay);
 8002cc8:	4623      	mov	r3, r4
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fe7e 	bl	80019cc <delay_us>
 8002cd0:	e7cf      	b.n	8002c72 <main+0x132>
		if (step_gain < MIN_STEPPER_GAIN) { continue; }  // make sure that the step delay is never greater than 0.75 s
 8002cd2:	bf00      	nop
	while (1) {
 8002cd4:	e7cd      	b.n	8002c72 <main+0x132>
 8002cd6:	bf00      	nop
 8002cd8:	eb1c432d 	.word	0xeb1c432d
 8002cdc:	3f1a36e2 	.word	0x3f1a36e2
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	4052c000 	.word	0x4052c000
 8002ce8:	200005d0 	.word	0x200005d0
 8002cec:	2000013c 	.word	0x2000013c
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	20000190 	.word	0x20000190
 8002cf8:	200001a8 	.word	0x200001a8
 8002cfc:	200005d8 	.word	0x200005d8
 8002d00:	20000704 	.word	0x20000704
 8002d04:	2000074c 	.word	0x2000074c
 8002d08:	200005b0 	.word	0x200005b0
 8002d0c:	200005e8 	.word	0x200005e8
 8002d10:	20000094 	.word	0x20000094
 8002d14:	40000c00 	.word	0x40000c00
 8002d18:	20000794 	.word	0x20000794
 8002d1c:	200005e0 	.word	0x200005e0

08002d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b094      	sub	sp, #80	; 0x50
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	2230      	movs	r2, #48	; 0x30
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f006 f9f4 	bl	80083fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b094      	sub	sp, #80	; 0x50
 8002d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d26:	f107 0320 	add.w	r3, r7, #32
 8002d2a:	2230      	movs	r2, #48	; 0x30
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f006 fa12 	bl	8009158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <SystemClock_Config+0xc8>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <SystemClock_Config+0xc8>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <SystemClock_Config+0xc8>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <SystemClock_Config+0xcc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a20      	ldr	r2, [pc, #128]	; (80020cc <SystemClock_Config+0xcc>)
 800204a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <SystemClock_Config+0xcc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 8002d44:	2300      	movs	r3, #0
 8002d46:	60bb      	str	r3, [r7, #8]
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <SystemClock_Config+0xc8>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <SystemClock_Config+0xc8>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	; 0x40
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <SystemClock_Config+0xc8>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	4b21      	ldr	r3, [pc, #132]	; (8002dec <SystemClock_Config+0xcc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <SystemClock_Config+0xcc>)
 8002d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <SystemClock_Config+0xcc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002060:	2301      	movs	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002064:	2310      	movs	r3, #16
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002070:	2310      	movs	r3, #16
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002074:	23c0      	movs	r3, #192	; 0xc0
 8002076:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002078:	2302      	movs	r3, #2
 800207a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002080:	f107 0320 	add.w	r3, r7, #32
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fbbb 	bl	8006800 <HAL_RCC_OscConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002090:	f000 f81e 	bl	80020d0 <Error_Handler>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d84:	2310      	movs	r3, #16
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002d90:	2310      	movs	r3, #16
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002d94:	23c0      	movs	r3, #192	; 0xc0
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da0:	f107 0320 	add.w	r3, r7, #32
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 fbe3 	bl	8007570 <HAL_RCC_OscConfig>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002db0:	f000 f81e 	bl	8002df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002094:	230f      	movs	r3, #15
 8002096:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002098:	2302      	movs	r3, #2
 800209a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	2103      	movs	r1, #3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f004 fe1d 	bl	8006cf0 <HAL_RCC_ClockConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020bc:	f000 f808 	bl	80020d0 <Error_Handler>
  }
}
 80020c0:	bf00      	nop
 80020c2:	3750      	adds	r7, #80	; 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000

080020d0 <Error_Handler>:
 8002db4:	230f      	movs	r3, #15
 8002db6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db8:	2302      	movs	r3, #2
 8002dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	2103      	movs	r1, #3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fe45 	bl	8007a60 <HAL_RCC_ClockConfig>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ddc:	f000 f808 	bl	8002df0 <Error_Handler>
  }
}
 8002de0:	bf00      	nop
 8002de2:	3750      	adds	r7, #80	; 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000

08002df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <MX_SPI1_Init>:
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <MX_SPI1_Init+0x5c>)
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <MX_SPI1_Init+0x60>)
 80020e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_SPI1_Init+0x5c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_SPI1_Init+0x5c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_SPI1_Init+0x5c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_SPI1_Init+0x5c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <MX_SPI1_Init+0x5c>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <MX_SPI1_Init+0x5c>)
 800210a:	2200      	movs	r2, #0
 800210c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <MX_SPI1_Init+0x5c>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <MX_SPI1_Init+0x5c>)
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_SPI1_Init+0x5c>)
 800211c:	2200      	movs	r2, #0
 800211e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <MX_SPI1_Init+0x5c>)
 8002122:	220a      	movs	r2, #10
 8002124:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002126:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_SPI1_Init+0x5c>)
 8002128:	f004 ffae 	bl	8007088 <HAL_SPI_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002132:	f7ff ffcd 	bl	80020d0 <Error_Handler>
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <MX_SPI1_Init+0x60>)
 8002e08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e22:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e2e:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e42:	220a      	movs	r2, #10
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e46:	4805      	ldr	r0, [pc, #20]	; (8002e5c <MX_SPI1_Init+0x5c>)
 8002e48:	f004 ffd6 	bl	8007df8 <HAL_SPI_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8002e52:	f7ff ffcd 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200005d0 	.word	0x200005d0
 8002140:	40013000 	.word	0x40013000

08002144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_SPI_MspInit+0x168>)
 8002162:	4293      	cmp	r3, r2
 8002164:	f040 809d 	bne.w	80022a2 <HAL_SPI_MspInit+0x15e>
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200005e8 	.word	0x200005e8
 8002e60:	40013000 	.word	0x40013000

08002e64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_SPI_MspInit+0x168>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	f040 809d 	bne.w	8002fc2 <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 8002172:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002176:	6453      	str	r3, [r2, #68]	; 0x44
 8002178:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6313      	str	r3, [r2, #48]	; 0x30
 8002194:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_SPI_MspInit+0x16c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	4a4f      	ldr	r2, [pc, #316]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002e92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e96:	6453      	str	r3, [r2, #68]	; 0x44
 8002e98:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a48      	ldr	r2, [pc, #288]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b46      	ldr	r3, [pc, #280]	; (8002fd0 <HAL_SPI_MspInit+0x16c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 80021a0:	23f0      	movs	r3, #240	; 0xf0
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b0:	2305      	movs	r3, #5
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	483e      	ldr	r0, [pc, #248]	; (80022b4 <HAL_SPI_MspInit+0x170>)
 80021bc:	f001 fcf8 	bl	8003bb0 <HAL_GPIO_Init>
 8002ec0:	23f0      	movs	r3, #240	; 0xf0
 8002ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ed0:	2305      	movs	r3, #5
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	483e      	ldr	r0, [pc, #248]	; (8002fd4 <HAL_SPI_MspInit+0x170>)
 8002edc:	f001 fcf8 	bl	80048d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80021c0:	4b3d      	ldr	r3, [pc, #244]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021c2:	4a3e      	ldr	r2, [pc, #248]	; (80022bc <HAL_SPI_MspInit+0x178>)
 80021c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ce:	4b3a      	ldr	r3, [pc, #232]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021d0:	2240      	movs	r2, #64	; 0x40
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b37      	ldr	r3, [pc, #220]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e8:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80021f6:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 80021f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fe:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 8002206:	f001 f933 	bl	8003470 <HAL_DMA_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002210:	f7ff ff5e 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a28      	ldr	r2, [pc, #160]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 8002218:	649a      	str	r2, [r3, #72]	; 0x48
 800221a:	4a27      	ldr	r2, [pc, #156]	; (80022b8 <HAL_SPI_MspInit+0x174>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002220:	4b27      	ldr	r3, [pc, #156]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002222:	4a28      	ldr	r2, [pc, #160]	; (80022c4 <HAL_SPI_MspInit+0x180>)
 8002224:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002228:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800222c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800222e:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 800223c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002240:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002244:	2200      	movs	r2, #0
 8002246:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002250:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002254:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002258:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800225c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002260:	2204      	movs	r2, #4
 8002262:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002266:	2203      	movs	r2, #3
 8002268:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 800226c:	2200      	movs	r2, #0
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002276:	4812      	ldr	r0, [pc, #72]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 8002278:	f001 f8fa 	bl	8003470 <HAL_DMA_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 8002282:	f7ff ff25 	bl	80020d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 800228a:	64da      	str	r2, [r3, #76]	; 0x4c
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_SPI_MspInit+0x17c>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	2023      	movs	r0, #35	; 0x23
 8002298:	f001 f8b3 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800229c:	2023      	movs	r0, #35	; 0x23
 800229e:	f001 f8cc 	bl	800343a <HAL_NVIC_EnableIRQ>
 8002ee0:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_SPI_MspInit+0x178>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002ee8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002eec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eee:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f02:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f08:	4b33      	ldr	r3, [pc, #204]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f24:	482c      	ldr	r0, [pc, #176]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f26:	f001 f933 	bl	8004190 <HAL_DMA_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8002f30:	f7ff ff5e 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f38:	649a      	str	r2, [r3, #72]	; 0x48
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_SPI_MspInit+0x174>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002f40:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f42:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <HAL_SPI_MspInit+0x180>)
 8002f44:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002f46:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f48:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002f4c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f4e:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f54:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f60:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f62:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f74:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002f7c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f80:	2204      	movs	r2, #4
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f86:	2203      	movs	r2, #3
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002f96:	4812      	ldr	r0, [pc, #72]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002f98:	f001 f8fa 	bl	8004190 <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 8002fa2:	f7ff ff25 	bl	8002df0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002faa:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_SPI_MspInit+0x17c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2023      	movs	r0, #35	; 0x23
 8002fb8:	f001 f8b3 	bl	8004122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002fbc:	2023      	movs	r0, #35	; 0x23
 8002fbe:	f001 f8cc 	bl	800415a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40013000 	.word	0x40013000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	20000628 	.word	0x20000628
 80022bc:	40026458 	.word	0x40026458
 80022c0:	20000688 	.word	0x20000688
 80022c4:	40026410 	.word	0x40026410

080022c8 <HAL_MspInit>:
 8002fc2:	bf00      	nop
 8002fc4:	3728      	adds	r7, #40	; 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40013000 	.word	0x40013000
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	20000640 	.word	0x20000640
 8002fdc:	40026458 	.word	0x40026458
 8002fe0:	200006a0 	.word	0x200006a0
 8002fe4:	40026410 	.word	0x40026410

08002fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_MspInit+0x4c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a0f      	ldr	r2, [pc, #60]	; (8002314 <HAL_MspInit+0x4c>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_MspInit+0x4c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_MspInit+0x4c>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_MspInit+0x4c>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a0f      	ldr	r2, [pc, #60]	; (8003034 <HAL_MspInit+0x4c>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	; (8003034 <HAL_MspInit+0x4c>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	607b      	str	r3, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_MspInit+0x4c>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_MspInit+0x4c>)
 8003014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_MspInit+0x4c>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800

08002318 <NMI_Handler>:
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800231c:	e7fe      	b.n	800231c <NMI_Handler+0x4>

0800231e <HardFault_Handler>:
 800303c:	e7fe      	b.n	800303c <NMI_Handler+0x4>

0800303e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <HardFault_Handler+0x4>

08002324 <MemManage_Handler>:
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <MemManage_Handler+0x4>

0800232a <BusFault_Handler>:
 8003048:	e7fe      	b.n	8003048 <MemManage_Handler+0x4>

0800304a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232e:	e7fe      	b.n	800232e <BusFault_Handler+0x4>

08002330 <UsageFault_Handler>:
 800304e:	e7fe      	b.n	800304e <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <UsageFault_Handler+0x4>

08002336 <SVC_Handler>:
 8003054:	e7fe      	b.n	8003054 <UsageFault_Handler+0x4>

08003056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <DebugMon_Handler>:
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <PendSV_Handler>:
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <SysTick_Handler>:
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002364:	f000 fa2c 	bl	80027c0 <HAL_IncTick>
 8003084:	f000 fa2c 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <EXTI3_IRQHandler>:
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INSTUCTION_INT_Pin);
 8002370:	2008      	movs	r0, #8
 8002372:	f001 fdbb 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
 8003090:	2008      	movs	r0, #8
 8003092:	f001 fdbb 	bl	8004c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <ADC_IRQHandler>:
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <ADC_IRQHandler+0x10>)
 8002382:	f000 fa80 	bl	8002886 <HAL_ADC_IRQHandler>
 80030a0:	4802      	ldr	r0, [pc, #8]	; (80030ac <ADC_IRQHandler+0x10>)
 80030a2:	f000 fa80 	bl	80035a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000007c 	.word	0x2000007c

08002390 <TIM1_UP_TIM10_IRQHandler>:
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000094 	.word	0x20000094

080030b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002396:	f005 fc47 	bl	8007c28 <HAL_TIM_IRQHandler>
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030b6:	f005 fc7b 	bl	80089b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000077c 	.word	0x2000077c

080023a4 <I2C1_EV_IRQHandler>:
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000794 	.word	0x20000794

080030c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <I2C1_EV_IRQHandler+0x10>)
 80023aa:	f002 fa1b 	bl	80047e4 <HAL_I2C_EV_IRQHandler>
 80030c8:	4802      	ldr	r0, [pc, #8]	; (80030d4 <I2C1_EV_IRQHandler+0x10>)
 80030ca:	f002 fa1b 	bl	8005504 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000124 	.word	0x20000124

080023b8 <I2C1_ER_IRQHandler>:
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	2000013c 	.word	0x2000013c

080030d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <I2C1_ER_IRQHandler+0x10>)
 80023be:	f002 fb64 	bl	8004a8a <HAL_I2C_ER_IRQHandler>
 80030dc:	4802      	ldr	r0, [pc, #8]	; (80030e8 <I2C1_ER_IRQHandler+0x10>)
 80030de:	f002 fb82 	bl	80057e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000124 	.word	0x20000124

080023cc <SPI1_IRQHandler>:
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000013c 	.word	0x2000013c

080030ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <SPI1_IRQHandler+0x10>)
 80023d2:	f004 ffe5 	bl	80073a0 <HAL_SPI_IRQHandler>
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <SPI1_IRQHandler+0x10>)
 80030f2:	f005 f80d 	bl	8008110 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200005d0 	.word	0x200005d0

080023e0 <DMA2_Stream0_IRQHandler>:
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200005e8 	.word	0x200005e8

08003100 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA2_Stream0_IRQHandler+0x10>)
 80023e6:	f001 f96b 	bl	80036c0 <HAL_DMA_IRQHandler>
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <DMA2_Stream0_IRQHandler+0x10>)
 8003106:	f001 f96b 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000688 	.word	0x20000688

080023f4 <DMA2_Stream3_IRQHandler>:
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200006a0 	.word	0x200006a0

08003114 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <DMA2_Stream3_IRQHandler+0x10>)
 80023fa:	f001 f961 	bl	80036c0 <HAL_DMA_IRQHandler>
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <DMA2_Stream3_IRQHandler+0x10>)
 800311a:	f001 f961 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000628 	.word	0x20000628

08002408 <DMA2_Stream4_IRQHandler>:
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000640 	.word	0x20000640

08003128 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA2_Stream4_IRQHandler+0x10>)
 800240e:	f001 f957 	bl	80036c0 <HAL_DMA_IRQHandler>
 800312c:	4802      	ldr	r0, [pc, #8]	; (8003138 <DMA2_Stream4_IRQHandler+0x10>)
 800312e:	f001 f957 	bl	80043e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200000c4 	.word	0x200000c4

0800241c <_sbrk>:
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	200000dc 	.word	0x200000dc

0800313c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002424:	4a14      	ldr	r2, [pc, #80]	; (8002478 <_sbrk+0x5c>)
 8002426:	4b15      	ldr	r3, [pc, #84]	; (800247c <_sbrk+0x60>)
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <_sbrk+0x5c>)
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <_sbrk+0x60>)
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <_sbrk+0x64>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <_sbrk+0x64>)
 800243a:	4a12      	ldr	r2, [pc, #72]	; (8002484 <_sbrk+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <_sbrk+0x64>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <_sbrk+0x64>)
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <_sbrk+0x68>)
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	429a      	cmp	r2, r3
 800244a:	d207      	bcs.n	800245c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800244c:	f005 ffd0 	bl	80083f0 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	220c      	movs	r2, #12
 8002454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245a:	e009      	b.n	8002470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <_sbrk+0x64>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a05      	ldr	r2, [pc, #20]	; (8002480 <_sbrk+0x64>)
 800246c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246e:	68fb      	ldr	r3, [r7, #12]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20020000 	.word	0x20020000
 800247c:	00000400 	.word	0x00000400
 8002480:	200006e8 	.word	0x200006e8
 8002484:	20000910 	.word	0x20000910

08002488 <SystemInit>:
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	429a      	cmp	r2, r3
 800316a:	d207      	bcs.n	800317c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800316c:	f005 ffbc 	bl	80090e8 <__errno>
 8003170:	4603      	mov	r3, r0
 8003172:	220c      	movs	r2, #12
 8003174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e009      	b.n	8003190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <_sbrk+0x64>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003182:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <_sbrk+0x64>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <_sbrk+0x64>)
 800318c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20020000 	.word	0x20020000
 800319c:	00000400 	.word	0x00000400
 80031a0:	20000700 	.word	0x20000700
 80031a4:	200007f0 	.word	0x200007f0

080031a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <SystemInit+0x20>)
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <SystemInit+0x20>)
 8002494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SystemInit+0x20>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	4a05      	ldr	r2, [pc, #20]	; (80031c8 <SystemInit+0x20>)
 80031b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <MX_TIM2_Init>:
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0308 	add.w	r3, r7, #8
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	463b      	mov	r3, r7
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	605a      	str	r2, [r3, #4]
 80031d2:	f107 0308 	add.w	r3, r7, #8
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	463b      	mov	r3, r7
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MX_TIM2_Init+0x94>)
 80024ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <MX_TIM2_Init+0x94>)
 80024d2:	225f      	movs	r2, #95	; 0x5f
 80024d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_TIM2_Init+0x94>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <MX_TIM2_Init+0x94>)
 80024de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <MX_TIM2_Init+0x94>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_TIM2_Init+0x94>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <MX_TIM2_Init+0x94>)
 80024f2:	f005 fa8d 	bl	8007a10 <HAL_TIM_Base_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024fc:	f7ff fde8 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002506:	f107 0308 	add.w	r3, r7, #8
 800250a:	4619      	mov	r1, r3
 800250c:	480c      	ldr	r0, [pc, #48]	; (8002540 <MX_TIM2_Init+0x94>)
 800250e:	f005 fc93 	bl	8007e38 <HAL_TIM_ConfigClockSource>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002518:	f7ff fdda 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_TIM2_Init+0x94>)
 800252a:	f005 fe8f 	bl	800824c <HAL_TIMEx_MasterConfigSynchronization>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002534:	f7ff fdcc 	bl	80020d0 <Error_Handler>
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <MX_TIM2_Init+0x94>)
 80031ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <MX_TIM2_Init+0x94>)
 80031f2:	225f      	movs	r2, #95	; 0x5f
 80031f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <MX_TIM2_Init+0x94>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 80031fc:	4b18      	ldr	r3, [pc, #96]	; (8003260 <MX_TIM2_Init+0x94>)
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <MX_TIM2_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <MX_TIM2_Init+0x94>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003210:	4813      	ldr	r0, [pc, #76]	; (8003260 <MX_TIM2_Init+0x94>)
 8003212:	f005 fac1 	bl	8008798 <HAL_TIM_Base_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800321c:	f7ff fde8 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003224:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4619      	mov	r1, r3
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <MX_TIM2_Init+0x94>)
 800322e:	f005 fcc7 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003238:	f7ff fdda 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003244:	463b      	mov	r3, r7
 8003246:	4619      	mov	r1, r3
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_TIM2_Init+0x94>)
 800324a:	f005 fec3 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003254:	f7ff fdcc 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200006ec 	.word	0x200006ec

08002544 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 8003258:	bf00      	nop
 800325a:	3718      	adds	r7, #24
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20000704 	.word	0x20000704

08003264 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	463b      	mov	r3, r7
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003278:	463b      	mov	r3, r7
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <MX_TIM5_Init+0x94>)
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <MX_TIM5_Init+0x98>)
 8002564:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <MX_TIM5_Init+0x94>)
 8002568:	225f      	movs	r2, #95	; 0x5f
 800256a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1a      	ldr	r3, [pc, #104]	; (80025d8 <MX_TIM5_Init+0x94>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <MX_TIM5_Init+0x94>)
 8002574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002578:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <MX_TIM5_Init+0x94>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <MX_TIM5_Init+0x94>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <MX_TIM5_Init+0x94>)
 8002588:	f005 fa42 	bl	8007a10 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002592:	f7ff fd9d 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800259c:	f107 0308 	add.w	r3, r7, #8
 80025a0:	4619      	mov	r1, r3
 80025a2:	480d      	ldr	r0, [pc, #52]	; (80025d8 <MX_TIM5_Init+0x94>)
 80025a4:	f005 fc48 	bl	8007e38 <HAL_TIM_ConfigClockSource>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f7ff fd8f 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025ba:	463b      	mov	r3, r7
 80025bc:	4619      	mov	r1, r3
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <MX_TIM5_Init+0x94>)
 80025c0:	f005 fe44 	bl	800824c <HAL_TIMEx_MasterConfigSynchronization>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80025ca:	f7ff fd81 	bl	80020d0 <Error_Handler>
 8003280:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <MX_TIM5_Init+0x94>)
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <MX_TIM5_Init+0x98>)
 8003284:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 95;
 8003286:	4b1c      	ldr	r3, [pc, #112]	; (80032f8 <MX_TIM5_Init+0x94>)
 8003288:	225f      	movs	r2, #95	; 0x5f
 800328a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328c:	4b1a      	ldr	r3, [pc, #104]	; (80032f8 <MX_TIM5_Init+0x94>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffffffff;
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <MX_TIM5_Init+0x94>)
 8003294:	f04f 32ff 	mov.w	r2, #4294967295
 8003298:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329a:	4b17      	ldr	r3, [pc, #92]	; (80032f8 <MX_TIM5_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <MX_TIM5_Init+0x94>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80032a6:	4814      	ldr	r0, [pc, #80]	; (80032f8 <MX_TIM5_Init+0x94>)
 80032a8:	f005 fa76 	bl	8008798 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80032b2:	f7ff fd9d 	bl	8002df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	4619      	mov	r1, r3
 80032c2:	480d      	ldr	r0, [pc, #52]	; (80032f8 <MX_TIM5_Init+0x94>)
 80032c4:	f005 fc7c 	bl	8008bc0 <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80032ce:	f7ff fd8f 	bl	8002df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032da:	463b      	mov	r3, r7
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	; (80032f8 <MX_TIM5_Init+0x94>)
 80032e0:	f005 fe78 	bl	8008fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80032ea:	f7ff fd81 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025ce:	bf00      	nop
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000734 	.word	0x20000734
 80025dc:	40000c00 	.word	0x40000c00

080025e0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000074c 	.word	0x2000074c
 80032fc:	40000c00 	.word	0x40000c00

08003300 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <MX_TIM10_Init+0x3c>)
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <MX_TIM10_Init+0x40>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_TIM10_Init+0x3c>)
 80025ec:	225f      	movs	r2, #95	; 0x5f
 80025ee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <MX_TIM10_Init+0x3c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_TIM10_Init+0x3c>)
 80025f8:	2264      	movs	r2, #100	; 0x64
 80025fa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <MX_TIM10_Init+0x3c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002602:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_TIM10_Init+0x3c>)
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002608:	4804      	ldr	r0, [pc, #16]	; (800261c <MX_TIM10_Init+0x3c>)
 800260a:	f005 fa01 	bl	8007a10 <HAL_TIM_Base_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8002614:	f7ff fd5c 	bl	80020d0 <Error_Handler>
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <MX_TIM10_Init+0x3c>)
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <MX_TIM10_Init+0x40>)
 8003308:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <MX_TIM10_Init+0x3c>)
 800330c:	225f      	movs	r2, #95	; 0x5f
 800330e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <MX_TIM10_Init+0x3c>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100;
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <MX_TIM10_Init+0x3c>)
 8003318:	2264      	movs	r2, #100	; 0x64
 800331a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <MX_TIM10_Init+0x3c>)
 800331e:	2200      	movs	r2, #0
 8003320:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_TIM10_Init+0x3c>)
 8003324:	2280      	movs	r2, #128	; 0x80
 8003326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003328:	4804      	ldr	r0, [pc, #16]	; (800333c <MX_TIM10_Init+0x3c>)
 800332a:	f005 fa35 	bl	8008798 <HAL_TIM_Base_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8003334:	f7ff fd5c 	bl	8002df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}
 800261c:	2000077c 	.word	0x2000077c
 8002620:	40014400 	.word	0x40014400

08002624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_Base_MspInit+0x30>
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000794 	.word	0x20000794
 8003340:	40014400 	.word	0x40014400

08003344 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a1f      	ldr	r2, [pc, #124]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	697b      	ldr	r3, [r7, #20]
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002652:	e02e      	b.n	80026b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_TIM_Base_MspInit+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d10e      	bne.n	800267c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a15      	ldr	r2, [pc, #84]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
}
 800267a:	e01a      	b.n	80026b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_TIM_Base_MspInit+0xa0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d115      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_TIM_Base_MspInit+0x98>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2019      	movs	r0, #25
 80026a8:	f000 feab 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026ac:	2019      	movs	r0, #25
 80026ae:	f000 fec4 	bl	800343a <HAL_NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40014400 	.word	0x40014400

080026c8 <Reset_Handler>:
 8003372:	e02e      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM5)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_TIM_Base_MspInit+0x9c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10e      	bne.n	800339c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	4b16      	ldr	r3, [pc, #88]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 8003388:	f043 0308 	orr.w	r3, r3, #8
 800338c:	6413      	str	r3, [r2, #64]	; 0x40
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
}
 800339a:	e01a      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_TIM_Base_MspInit+0xa0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d115      	bne.n	80033d2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	6453      	str	r3, [r2, #68]	; 0x44
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_TIM_Base_MspInit+0x98>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	2100      	movs	r1, #0
 80033c6:	2019      	movs	r0, #25
 80033c8:	f000 feab 	bl	8004122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033cc:	2019      	movs	r0, #25
 80033ce:	f000 fec4 	bl	800415a <HAL_NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40014400 	.word	0x40014400

080033e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026ce:	490e      	ldr	r1, [pc, #56]	; (8002708 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026d0:	4a0e      	ldr	r2, [pc, #56]	; (800270c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d4:	e002      	b.n	80026dc <LoopCopyDataInit>

080026d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026da:	3304      	adds	r3, #4

080026dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e0:	d3f9      	bcc.n	80026d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e2:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e4:	4c0b      	ldr	r4, [pc, #44]	; (8002714 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e8:	e001      	b.n	80026ee <LoopFillZerobss>

080026ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026ec:	3204      	adds	r2, #4

080026ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f0:	d3fb      	bcc.n	80026ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026f2:	f7ff fec9 	bl	8002488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026f6:	f005 fe2b 	bl	8008350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7ff fb91 	bl	8001e20 <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002708:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800270c:	08008a84 	.word	0x08008a84
  ldr r2, =_sbss
 8002710:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002714:	20000910 	.word	0x20000910

08002718 <DMA1_Stream0_IRQHandler>:
 80033e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ec:	480d      	ldr	r0, [pc, #52]	; (8003424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ee:	490e      	ldr	r1, [pc, #56]	; (8003428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003402:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003404:	4c0b      	ldr	r4, [pc, #44]	; (8003434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003412:	f7ff fec9 	bl	80031a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003416:	f005 fe6d 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800341a:	f7ff fb91 	bl	8002b40 <main>
  bx  lr    
 800341e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003428:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800342c:	08009540 	.word	0x08009540
  ldr r2, =_sbss
 8003430:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003434:	200007f0 	.word	0x200007f0

08003438 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <DMA1_Stream0_IRQHandler>
	...

0800271c <HAL_Init>:
 8003438:	e7fe      	b.n	8003438 <DMA1_Stream0_IRQHandler>
	...

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_Init+0x40>)
 8002726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272a:	6013      	str	r3, [r2, #0]
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003440:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_Init+0x40>)
 8003446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_Init+0x40>)
 8002732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002736:	6013      	str	r3, [r2, #0]
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_Init+0x40>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <HAL_Init+0x40>)
 8003452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x40>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <HAL_Init+0x40>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a07      	ldr	r2, [pc, #28]	; (800347c <HAL_Init+0x40>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 fe51 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	200f      	movs	r0, #15
 800274c:	f000 f808 	bl	8002760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7ff fdba 	bl	80022c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_InitTick>:
 8003464:	2003      	movs	r0, #3
 8003466:	f000 fe51 	bl	800410c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800346a:	200f      	movs	r0, #15
 800346c:	f000 f808 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003470:	f7ff fdba 	bl	8002fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40023c00 	.word	0x40023c00

08003480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x54>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x58>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002776:	fbb3 f3f1 	udiv	r3, r3, r1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fe69 	bl	8003456 <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00e      	b.n	80027ac <HAL_InitTick+0x4c>
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <HAL_InitTick+0x54>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_InitTick+0x58>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	fbb3 f3f1 	udiv	r3, r3, r1
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fe69 	bl	8004176 <HAL_SYSTICK_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00e      	b.n	80034cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d80a      	bhi.n	80027aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800279c:	f000 fe31 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <HAL_InitTick+0x5c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d80a      	bhi.n	80034ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b4:	2200      	movs	r2, #0
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f000 fe31 	bl	8004122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <HAL_InitTick+0x5c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000004 	.word	0x20000004
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000008 	.word	0x20000008

080027c0 <HAL_IncTick>:
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000004 	.word	0x20000004
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	20000008 	.word	0x20000008

080034e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000000c 	.word	0x2000000c
 80027e4:	200007c4 	.word	0x200007c4

080027e8 <HAL_GetTick>:
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_IncTick+0x20>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_IncTick+0x24>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a04      	ldr	r2, [pc, #16]	; (8003504 <HAL_IncTick+0x24>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	2000000c 	.word	0x2000000c
 8003504:	200007dc 	.word	0x200007dc

08003508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	200007c4 	.word	0x200007c4

08002800 <HAL_ADC_Init>:
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return uwTick;
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_GetTick+0x14>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	200007dc 	.word	0x200007dc

08003520 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e033      	b.n	800287e <HAL_ADC_Init+0x7e>
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e033      	b.n	800359e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_ADC_Init+0x32>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fe f9e2 	bl	8000be8 <HAL_ADC_MspInit>
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fc94 	bl	8000e6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f003 0310 	and.w	r3, r3, #16
 800283a:	2b00      	cmp	r3, #0
 800283c:	d118      	bne.n	8002870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002846:	f023 0302 	bic.w	r3, r3, #2
 800284a:	f043 0202 	orr.w	r2, r3, #2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d118      	bne.n	8003590 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003566:	f023 0302 	bic.w	r3, r3, #2
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fb72 	bl	8002f3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	f043 0201 	orr.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
 800286e:	e001      	b.n	8002874 <HAL_ADC_Init+0x74>
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fb72 	bl	8003c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	f043 0201 	orr.w	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
 800358e:	e001      	b.n	8003594 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_ADC_IRQHandler>:
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60bb      	str	r3, [r7, #8]
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	2300      	movs	r3, #0
 80035b4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d049      	beq.n	8002950 <HAL_ADC_IRQHandler+0xca>
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d046      	beq.n	8002950 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d049      	beq.n	8003670 <HAL_ADC_IRQHandler+0xca>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d046      	beq.n	8003670 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d12b      	bne.n	8002940 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d127      	bne.n	8002940 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <HAL_ADC_IRQHandler+0xba>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d12b      	bne.n	8003660 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800360c:	2b00      	cmp	r3, #0
 800360e:	d127      	bne.n	8003660 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d006      	beq.n	800362c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003628:	2b00      	cmp	r3, #0
 800362a:	d119      	bne.n	8003660 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0220 	bic.w	r2, r2, #32
 800291a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d105      	bne.n	8002940 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0220 	bic.w	r2, r2, #32
 800363a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f9a1 	bl	8002c88 <HAL_ADC_ConvCpltCallback>
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f9a1 	bl	80039a8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f06f 0212 	mvn.w	r2, #18
 800294e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d057      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x190>
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d054      	beq.n	8002a16 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0212 	mvn.w	r2, #18
 800366e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d057      	beq.n	8003736 <HAL_ADC_IRQHandler+0x190>
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d054      	beq.n	8003736 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d139      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d12b      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d124      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11d      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d139      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d12b      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d124      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d11d      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d119      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003700:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d105      	bne.n	8003726 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fc16 	bl	8003238 <HAL_ADCEx_InjectedConvCpltCallback>
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fc16 	bl	8003f58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 020c 	mvn.w	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d017      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x1d6>
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d014      	beq.n	8002a5c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d10d      	bne.n	8002a5c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 020c 	mvn.w	r2, #12
 8003734:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_ADC_IRQHandler+0x1d6>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d014      	beq.n	800377c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10d      	bne.n	800377c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f92f 	bl	8002cb0 <HAL_ADC_LevelOutOfWindowCallback>
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f92f 	bl	80039d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0201 	mvn.w	r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0201 	mvn.w	r2, #1
 800377a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a6a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x218>
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_ADC_IRQHandler+0x218>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800378a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d015      	beq.n	80037be <HAL_ADC_IRQHandler+0x218>
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	f043 0202 	orr.w	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f06f 0220 	mvn.w	r2, #32
 8002a8c:	601a      	str	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f043 0202 	orr.w	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0220 	mvn.w	r2, #32
 80037ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f918 	bl	8002cc4 <HAL_ADC_ErrorCallback>
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f918 	bl	80039e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0220 	mvn.w	r2, #32
 8002a9c:	601a      	str	r2, [r3, #0]
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_ADC_Start_DMA>:
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0220 	mvn.w	r2, #32
 80037bc:	601a      	str	r2, [r3, #0]
  }
}
 80037be:	bf00      	nop
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Start_DMA+0x1e>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	e0ce      	b.n	8002c64 <HAL_ADC_Start_DMA+0x1bc>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_ADC_Start_DMA+0x1e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e0ce      	b.n	8003984 <HAL_ADC_Start_DMA+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d018      	beq.n	8002b0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	609a      	str	r2, [r3, #8]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d018      	beq.n	800382e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aec:	4b5f      	ldr	r3, [pc, #380]	; (8002c6c <HAL_ADC_Start_DMA+0x1c4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5f      	ldr	r2, [pc, #380]	; (8002c70 <HAL_ADC_Start_DMA+0x1c8>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9a      	lsrs	r2, r3, #18
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b00:	e002      	b.n	8002b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f9      	bne.n	8002b02 <HAL_ADC_Start_DMA+0x5a>
 800380c:	4b5f      	ldr	r3, [pc, #380]	; (800398c <HAL_ADC_Start_DMA+0x1c4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a5f      	ldr	r2, [pc, #380]	; (8003990 <HAL_ADC_Start_DMA+0x1c8>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	0c9a      	lsrs	r2, r3, #18
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003820:	e002      	b.n	8003828 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3b01      	subs	r3, #1
 8003826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f9      	bne.n	8003822 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1c:	d107      	bne.n	8002b2e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b2c:	609a      	str	r2, [r3, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d107      	bne.n	800384e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800384c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 8086 	bne.w	8002c4a <HAL_ADC_Start_DMA+0x1a2>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	f040 8086 	bne.w	800396a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d106      	bne.n	8002b8c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f023 0206 	bic.w	r2, r3, #6
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
 8002b8a:	e002      	b.n	8002b92 <HAL_ADC_Start_DMA+0xea>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389c:	d106      	bne.n	80038ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f023 0206 	bic.w	r2, r3, #6
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
 80038aa:	e002      	b.n	80038b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_ADC_Start_DMA+0x1cc>)
 8002b9c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <HAL_ADC_Start_DMA+0x1d0>)
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	4a34      	ldr	r2, [pc, #208]	; (8002c7c <HAL_ADC_Start_DMA+0x1d4>)
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	4a33      	ldr	r2, [pc, #204]	; (8002c80 <HAL_ADC_Start_DMA+0x1d8>)
 8002bb4:	64da      	str	r2, [r3, #76]	; 0x4c
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_ADC_Start_DMA+0x1cc>)
 80038bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4a35      	ldr	r2, [pc, #212]	; (8003998 <HAL_ADC_Start_DMA+0x1d0>)
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_ADC_Start_DMA+0x1d4>)
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <HAL_ADC_Start_DMA+0x1d8>)
 80038d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bde:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	334c      	adds	r3, #76	; 0x4c
 8002bea:	4619      	mov	r1, r3
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f000 fcec 	bl	80035cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10f      	bne.n	8002c20 <HAL_ADC_Start_DMA+0x178>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	334c      	adds	r3, #76	; 0x4c
 800390a:	4619      	mov	r1, r3
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f000 fcec 	bl	80042ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10f      	bne.n	8003940 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d129      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	e020      	b.n	8002c62 <HAL_ADC_Start_DMA+0x1ba>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d129      	bne.n	8003982 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	e020      	b.n	8003982 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_ADC_Start_DMA+0x1dc>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d11b      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1ba>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d114      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e00b      	b.n	8002c62 <HAL_ADC_Start_DMA+0x1ba>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <HAL_ADC_Start_DMA+0x1dc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d11b      	bne.n	8003982 <HAL_ADC_Start_DMA+0x1ba>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d114      	bne.n	8003982 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	e00b      	b.n	8003982 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0210 	orr.w	r2, r3, #16
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	431bde83 	.word	0x431bde83
 8002c74:	40012300 	.word	0x40012300
 8002c78:	08003135 	.word	0x08003135
 8002c7c:	080031ef 	.word	0x080031ef
 8002c80:	0800320b 	.word	0x0800320b
 8002c84:	40012000 	.word	0x40012000

08002c88 <HAL_ADC_ConvCpltCallback>:
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3718      	adds	r7, #24
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000004 	.word	0x20000004
 8003990:	431bde83 	.word	0x431bde83
 8003994:	40012300 	.word	0x40012300
 8003998:	08003e55 	.word	0x08003e55
 800399c:	08003f0f 	.word	0x08003f0f
 80039a0:	08003f2b 	.word	0x08003f2b
 80039a4:	40012000 	.word	0x40012000

080039a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_ADC_ConvHalfCpltCallback>:
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_LevelOutOfWindowCallback>:
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ErrorCallback>:
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_ConfigChannel>:
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e113      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x244>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d925      	bls.n	8002d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	3b1e      	subs	r3, #30
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43da      	mvns	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	400a      	ands	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4403      	add	r3, r0
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	409a      	lsls	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	e022      	b.n	8002d96 <HAL_ADC_ConfigChannel+0xbe>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e113      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x244>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	d925      	bls.n	8003a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68d9      	ldr	r1, [r3, #12]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	3b1e      	subs	r3, #30
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43da      	mvns	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	400a      	ands	r2, r1
 8003a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4403      	add	r3, r0
 8003a62:	3b1e      	subs	r3, #30
 8003a64:	409a      	lsls	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e022      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	2207      	movs	r2, #7
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6919      	ldr	r1, [r3, #16]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4403      	add	r3, r0
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	2207      	movs	r2, #7
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	400a      	ands	r2, r1
 8003a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4403      	add	r3, r0
 8003aac:	409a      	lsls	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d824      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b05      	subs	r3, #5
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b05      	subs	r3, #5
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
 8002de6:	e04c      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d824      	bhi.n	8002e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b23      	subs	r3, #35	; 0x23
 8002e02:	221f      	movs	r2, #31
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b23      	subs	r3, #35	; 0x23
 8002e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	e023      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d824      	bhi.n	8003b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	3b05      	subs	r3, #5
 8003ad0:	221f      	movs	r2, #31
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	3b05      	subs	r3, #5
 8003afa:	fa00 f203 	lsl.w	r2, r0, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	635a      	str	r2, [r3, #52]	; 0x34
 8003b06:	e04c      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d824      	bhi.n	8003b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b23      	subs	r3, #35	; 0x23
 8003b22:	221f      	movs	r2, #31
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	400a      	ands	r2, r1
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	3b23      	subs	r3, #35	; 0x23
 8003b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30
 8003b58:	e023      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b41      	subs	r3, #65	; 0x41
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b41      	subs	r3, #65	; 0x41
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b41      	subs	r3, #65	; 0x41
 8003b6c:	221f      	movs	r2, #31
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	400a      	ands	r2, r1
 8003b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3b41      	subs	r3, #65	; 0x41
 8003b96:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_ADC_ConfigChannel+0x250>)
 8002e84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_ADC_ConfigChannel+0x254>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d8>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d10b      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x1d8>
 8003ba2:	4b29      	ldr	r3, [pc, #164]	; (8003c48 <HAL_ADC_ConfigChannel+0x250>)
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <HAL_ADC_ConfigChannel+0x254>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10f      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <HAL_ADC_ConfigChannel+0x254>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12b      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <HAL_ADC_ConfigChannel+0x258>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x1f4>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b11      	cmp	r3, #17
 8002eca:	d122      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	; (8003c4c <HAL_ADC_ConfigChannel+0x254>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d12b      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	; (8003c50 <HAL_ADC_ConfigChannel+0x258>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x1f4>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b11      	cmp	r3, #17
 8003bea:	d122      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_ADC_ConfigChannel+0x258>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d111      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x23a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <HAL_ADC_ConfigChannel+0x258>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d111      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_ADC_ConfigChannel+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_ADC_ConfigChannel+0x260>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9a      	lsrs	r2, r3, #18
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f04:	e002      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f9      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x22e>
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_ADC_ConfigChannel+0x25c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a11      	ldr	r2, [pc, #68]	; (8003c58 <HAL_ADC_ConfigChannel+0x260>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	0c9a      	lsrs	r2, r3, #18
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c24:	e002      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f9      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40012300 	.word	0x40012300
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	10000012 	.word	0x10000012
 8002f34:	20000004 	.word	0x20000004
 8002f38:	431bde83 	.word	0x431bde83

08002f3c <ADC_Init>:
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40012300 	.word	0x40012300
 8003c4c:	40012000 	.word	0x40012000
 8003c50:	10000012 	.word	0x10000012
 8003c54:	20000004 	.word	0x20000004
 8003c58:	431bde83 	.word	0x431bde83

08003c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <ADC_Init+0x1f0>)
 8002f46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	021a      	lsls	r2, r3, #8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
 8003c64:	4b79      	ldr	r3, [pc, #484]	; (8003e4c <ADC_Init+0x1f0>)
 8003c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	021a      	lsls	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	4a58      	ldr	r2, [pc, #352]	; (8003130 <ADC_Init+0x1f4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d022      	beq.n	800301a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fe2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6899      	ldr	r1, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6899      	ldr	r1, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	e00f      	b.n	800303a <ADC_Init+0xfe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	4a58      	ldr	r2, [pc, #352]	; (8003e50 <ADC_Init+0x1f4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e00f      	b.n	8003d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003028:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003038:	609a      	str	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0202 	bic.w	r2, r2, #2
 8003048:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6899      	ldr	r1, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7e1b      	ldrb	r3, [r3, #24]
 8003054:	005a      	lsls	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <ADC_Init+0x164>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0202 	bic.w	r2, r2, #2
 8003d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e1b      	ldrb	r3, [r3, #24]
 8003d74:	005a      	lsls	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003086:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	3b01      	subs	r3, #1
 8003094:	035a      	lsls	r2, r3, #13
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	e007      	b.n	80030b0 <ADC_Init+0x174>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	3b01      	subs	r3, #1
 8003db4:	035a      	lsls	r2, r3, #13
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e007      	b.n	8003dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ae:	605a      	str	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	051a      	lsls	r2, r3, #20
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030f2:	025a      	lsls	r2, r3, #9
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	029a      	lsls	r2, r3, #10
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012300 	.word	0x40012300
 8003130:	0f000001 	.word	0x0f000001

08003134 <ADC_DMAConvCplt>:
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	051a      	lsls	r2, r3, #20
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e12:	025a      	lsls	r2, r3, #9
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6899      	ldr	r1, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	029a      	lsls	r2, r3, #10
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40012300 	.word	0x40012300
 8003e50:	0f000001 	.word	0x0f000001

08003e54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003140:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	d13c      	bne.n	80031c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d13c      	bne.n	8003ee8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12b      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d127      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003188:	2b00      	cmp	r3, #0
 800318a:	d119      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12b      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d119      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0220 	bic.w	r2, r2, #32
 800319a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0220 	bic.w	r2, r2, #32
 8003eba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fd61 	bl	8002c88 <HAL_ADC_ConvCpltCallback>
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fd61 	bl	80039a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031c6:	e00e      	b.n	80031e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fd75 	bl	8002cc4 <HAL_ADC_ErrorCallback>
}
 80031da:	e004      	b.n	80031e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4798      	blx	r3
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <ADC_DMAHalfConvCplt>:
 8003ee6:	e00e      	b.n	8003f06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fd75 	bl	80039e4 <HAL_ADC_ErrorCallback>
}
 8003efa:	e004      	b.n	8003f06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	60fb      	str	r3, [r7, #12]
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fd4d 	bl	8002c9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <ADC_DMAError>:
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fd4d 	bl	80039bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff fd4a 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_ADCEx_InjectedConvCpltCallback>:
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fd4a 	bl	80039e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <__NVIC_SetPriorityGrouping>:
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f9e:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	60d3      	str	r3, [r2, #12]
}
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000ed00 	.word	0xe000ed00

08003fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <__NVIC_GetPriorityGrouping+0x18>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	f003 0307 	and.w	r3, r3, #7
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db0b      	blt.n	8003ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f003 021f 	and.w	r2, r3, #31
 8003fe8:	4907      	ldr	r1, [pc, #28]	; (8004008 <__NVIC_EnableIRQ+0x38>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	e000e100 	.word	0xe000e100

0800400c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	; (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	6039      	str	r1, [r7, #0]
 8004016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401c:	2b00      	cmp	r3, #0
 800401e:	db0a      	blt.n	8004036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	490c      	ldr	r1, [pc, #48]	; (8004058 <__NVIC_SetPriority+0x4c>)
 8004026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800402a:	0112      	lsls	r2, r2, #4
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	440b      	add	r3, r1
 8004030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
 8004034:	e00a      	b.n	800404c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4908      	ldr	r1, [pc, #32]	; (800405c <__NVIC_SetPriority+0x50>)
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	3b04      	subs	r3, #4
 8004044:	0112      	lsls	r2, r2, #4
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	440b      	add	r3, r1
 800404a:	761a      	strb	r2, [r3, #24]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	e000e100 	.word	0xe000e100
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	; 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f1c3 0307 	rsb	r3, r3, #7
 800407a:	2b04      	cmp	r3, #4
 800407c:	bf28      	it	cs
 800407e:	2304      	movcs	r3, #4
 8004080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3304      	adds	r3, #4
 8004086:	2b06      	cmp	r3, #6
 8004088:	d902      	bls.n	8004090 <NVIC_EncodePriority+0x30>
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3b03      	subs	r3, #3
 800408e:	e000      	b.n	8004092 <NVIC_EncodePriority+0x32>
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004094:	f04f 32ff 	mov.w	r2, #4294967295
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43da      	mvns	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	401a      	ands	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040a8:	f04f 31ff 	mov.w	r1, #4294967295
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	43d9      	mvns	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040b8:	4313      	orrs	r3, r2
         );
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3724      	adds	r7, #36	; 0x24
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040d8:	d301      	bcc.n	80040de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040da:	2301      	movs	r3, #1
 80040dc:	e00f      	b.n	80040fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <SysTick_Config+0x40>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e6:	210f      	movs	r1, #15
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f7ff ff8e 	bl	800400c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <SysTick_Config+0x40>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f6:	4b04      	ldr	r3, [pc, #16]	; (8004108 <SysTick_Config+0x40>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	e000e010 	.word	0xe000e010

0800410c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff29 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff ff29 	bl	8003f6c <__NVIC_SetPriorityGrouping>
}
 800411a:	bf00      	nop
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8004122:	b580      	push	{r7, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af00      	add	r7, sp, #0
 8004128:	4603      	mov	r3, r0
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff3e 	bl	8003294 <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
 8004134:	f7ff ff3e 	bl	8003fb4 <__NVIC_GetPriorityGrouping>
 8004138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff ff8e 	bl	8004060 <NVIC_EncodePriority>
 8004144:	4602      	mov	r2, r0
 8004146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414a:	4611      	mov	r1, r2
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff ff5d 	bl	800400c <__NVIC_SetPriority>
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff31 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff ff31 	bl	8003fd0 <__NVIC_EnableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_DMA_Init>:
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ffa2 	bl	80040c8 <SysTick_Config>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff f9b4 	bl	80027e8 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800419c:	f7ff f9b4 	bl	8003508 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e099      	b.n	80035c0 <HAL_DMA_Init+0x150>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e099      	b.n	80042e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0201 	bic.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ac:	e00f      	b.n	80034ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ae:	f7ff f99b 	bl	80027e8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b05      	cmp	r3, #5
 80034ba:	d908      	bls.n	80034ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2203      	movs	r2, #3
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e078      	b.n	80035c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e8      	bne.n	80034ae <HAL_DMA_Init+0x3e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041cc:	e00f      	b.n	80041ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ce:	f7ff f99b 	bl	8003508 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b05      	cmp	r3, #5
 80041da:	d908      	bls.n	80041ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e078      	b.n	80042e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e8      	bne.n	80041ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <HAL_DMA_Init+0x158>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	4b38      	ldr	r3, [pc, #224]	; (80042e8 <HAL_DMA_Init+0x158>)
 8004208:	4013      	ands	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2b04      	cmp	r3, #4
 8003526:	d107      	bne.n	8003538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4313      	orrs	r3, r2
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800421a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	2b04      	cmp	r3, #4
 8004246:	d107      	bne.n	8004258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	4313      	orrs	r3, r2
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f023 0307 	bic.w	r3, r3, #7
 800354e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2b04      	cmp	r3, #4
 8003560:	d117      	bne.n	8003592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	2b04      	cmp	r3, #4
 8004280:	d117      	bne.n	80042b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fa9f 	bl	8003ab8 <DMA_CheckFifoParam>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800358e:	2301      	movs	r3, #1
 8003590:	e016      	b.n	80035c0 <HAL_DMA_Init+0x150>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00e      	beq.n	80042b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fa9f 	bl	80047d8 <DMA_CheckFifoParam>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2240      	movs	r2, #64	; 0x40
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042ae:	2301      	movs	r3, #1
 80042b0:	e016      	b.n	80042e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	615a      	str	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa56 	bl	8003a4c <DMA_CalcBaseAndBitshift>
 80035a0:	4603      	mov	r3, r0
 80035a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a8:	223f      	movs	r2, #63	; 0x3f
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	f010803f 	.word	0xf010803f

080035cc <HAL_DMA_Start_IT>:
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa56 	bl	800476c <DMA_CalcBaseAndBitshift>
 80042c0:	4603      	mov	r3, r0
 80042c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	223f      	movs	r2, #63	; 0x3f
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	f010803f 	.word	0xf010803f

080042ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	613b      	str	r3, [r7, #16]
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_DMA_Start_IT+0x26>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e040      	b.n	8003674 <HAL_DMA_Start_IT+0xa8>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d12f      	bne.n	8003666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2202      	movs	r2, #2
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f9e8 	bl	80039f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	223f      	movs	r2, #63	; 0x3f
 8003626:	409a      	lsls	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0216 	orr.w	r2, r2, #22
 800363a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0208 	orr.w	r2, r2, #8
 8003652:	601a      	str	r2, [r3, #0]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_DMA_Start_IT+0x26>
 800430e:	2302      	movs	r3, #2
 8004310:	e040      	b.n	8004394 <HAL_DMA_Start_IT+0xa8>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d12f      	bne.n	8004386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f9e8 	bl	8004710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	223f      	movs	r2, #63	; 0x3f
 8004346:	409a      	lsls	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0216 	orr.w	r2, r2, #22
 800435a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0208 	orr.w	r2, r2, #8
 8004372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e005      	b.n	8003672 <HAL_DMA_Start_IT+0xa6>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e005      	b.n	8004392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800366e:	2302      	movs	r3, #2
 8003670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_DMA_Abort_IT>:
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004392:	7dfb      	ldrb	r3, [r7, #23]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d004      	beq.n	800369a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00c      	b.n	80036b4 <HAL_DMA_Abort_IT+0x38>
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2280      	movs	r2, #128	; 0x80
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e00c      	b.n	80043d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2205      	movs	r2, #5
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_DMA_IRQHandler>:
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2205      	movs	r2, #5
 80043be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036cc:	4b8e      	ldr	r3, [pc, #568]	; (8003908 <HAL_DMA_IRQHandler+0x248>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a8e      	ldr	r2, [pc, #568]	; (800390c <HAL_DMA_IRQHandler+0x24c>)
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	0a9b      	lsrs	r3, r3, #10
 80036d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2208      	movs	r2, #8
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01a      	beq.n	800372c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	2208      	movs	r2, #8
 800371a:	409a      	lsls	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003724:	f043 0201 	orr.w	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043ec:	4b8e      	ldr	r3, [pc, #568]	; (8004628 <HAL_DMA_IRQHandler+0x248>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a8e      	ldr	r2, [pc, #568]	; (800462c <HAL_DMA_IRQHandler+0x24c>)
 80043f2:	fba2 2303 	umull	r2, r3, r2, r3
 80043f6:	0a9b      	lsrs	r3, r3, #10
 80043f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2208      	movs	r2, #8
 800440c:	409a      	lsls	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4013      	ands	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	2208      	movs	r2, #8
 800443a:	409a      	lsls	r2, r3
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	2201      	movs	r2, #1
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d012      	beq.n	8003762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00b      	beq.n	8003762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0202 	orr.w	r2, r3, #2
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2201      	movs	r2, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003766:	2204      	movs	r2, #4
 8003768:	409a      	lsls	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d012      	beq.n	8003798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00b      	beq.n	8003798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2204      	movs	r2, #4
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	2204      	movs	r2, #4
 8004488:	409a      	lsls	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d012      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a4:	2204      	movs	r2, #4
 80044a6:	409a      	lsls	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0204 	orr.w	r2, r3, #4
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379c:	2210      	movs	r2, #16
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d043      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d03c      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2210      	movs	r2, #16
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d108      	bne.n	80037f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d024      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
 80037ee:	e01f      	b.n	8003830 <HAL_DMA_IRQHandler+0x170>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	2210      	movs	r2, #16
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d043      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03c      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	2210      	movs	r2, #16
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d018      	beq.n	8004522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d108      	bne.n	8004510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d024      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	4798      	blx	r3
 800450e:	e01f      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
 8003800:	e016      	b.n	8003830 <HAL_DMA_IRQHandler+0x170>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e016      	b.n	8004550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0208 	bic.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d107      	bne.n	8004540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0208 	bic.w	r2, r2, #8
 800453e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2220      	movs	r2, #32
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 808f 	beq.w	8003960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 8087 	beq.w	8003960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2220      	movs	r2, #32
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b05      	cmp	r3, #5
 8003868:	d136      	bne.n	80038d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0216 	bic.w	r2, r2, #22
 8003878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <HAL_DMA_IRQHandler+0x1da>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0208 	bic.w	r2, r2, #8
 80038a8:	601a      	str	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	2220      	movs	r2, #32
 8004556:	409a      	lsls	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 808f 	beq.w	8004680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8087 	beq.w	8004680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2220      	movs	r2, #32
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b05      	cmp	r3, #5
 8004588:	d136      	bne.n	80045f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0216 	bic.w	r2, r2, #22
 8004598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695a      	ldr	r2, [r3, #20]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_DMA_IRQHandler+0x1da>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d007      	beq.n	80045ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0208 	bic.w	r2, r2, #8
 80045c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	223f      	movs	r2, #63	; 0x3f
 80038b0:	409a      	lsls	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d07e      	beq.n	80039cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
        }
        return;
 80038d6:	e079      	b.n	80039cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10d      	bne.n	8003910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e02c      	b.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
 8003906:	bf00      	nop
 8003908:	20000004 	.word	0x20000004
 800390c:	1b4e81b5 	.word	0x1b4e81b5
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	223f      	movs	r2, #63	; 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d07e      	beq.n	80046ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	4798      	blx	r3
        }
        return;
 80045f6:	e079      	b.n	80046ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01d      	beq.n	8004642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10d      	bne.n	8004630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	2b00      	cmp	r3, #0
 800461a:	d031      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e02c      	b.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
 8004626:	bf00      	nop
 8004628:	20000004 	.word	0x20000004
 800462c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e01e      	b.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004634:	2b00      	cmp	r3, #0
 8004636:	d023      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
 8004640:	e01e      	b.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0210 	bic.w	r2, r2, #16
 800393e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10f      	bne.n	8004670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0210 	bic.w	r2, r2, #16
 800465e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003964:	2b00      	cmp	r3, #0
 8003966:	d032      	beq.n	80039ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d022      	beq.n	80039ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2205      	movs	r2, #5
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	2b00      	cmp	r3, #0
 8004686:	d032      	beq.n	80046ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d022      	beq.n	80046da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2205      	movs	r2, #5
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3301      	adds	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	429a      	cmp	r2, r3
 8003996:	d307      	bcc.n	80039a8 <HAL_DMA_IRQHandler+0x2e8>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d307      	bcc.n	80046c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f2      	bne.n	800398c <HAL_DMA_IRQHandler+0x2cc>
 80039a6:	e000      	b.n	80039aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
 80039ca:	e000      	b.n	80039ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80039cc:	bf00      	nop
    }
  }
}
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_GetState>:
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f2      	bne.n	80046ac <HAL_DMA_IRQHandler+0x2cc>
 80046c6:	e000      	b.n	80046ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80046c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	4798      	blx	r3
 80046ea:	e000      	b.n	80046ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80046ec:	bf00      	nop
    }
  }
}
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039e2:	b2db      	uxtb	r3, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <DMA_SetConfig>:
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004702:	b2db      	uxtb	r3, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d108      	bne.n	8003a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800472c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d108      	bne.n	8004750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a2e:	e007      	b.n	8003a40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	60da      	str	r2, [r3, #12]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <DMA_CalcBaseAndBitshift>:
 800474e:	e007      	b.n	8004760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	60da      	str	r2, [r3, #12]
}
 8004760:	bf00      	nop
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3b10      	subs	r3, #16
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	3b10      	subs	r3, #16
 800477c:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <DMA_CalcBaseAndBitshift+0x64>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d909      	bls.n	8003a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a8c:	e007      	b.n	8003a9e <DMA_CalcBaseAndBitshift+0x52>
 8004786:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <DMA_CalcBaseAndBitshift+0x68>)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d909      	bls.n	80047ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	659a      	str	r2, [r3, #88]	; 0x58
 80047ac:	e007      	b.n	80047be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	aaaaaaab 	.word	0xaaaaaaab
 8003ab4:	08008a6c 	.word	0x08008a6c

08003ab8 <DMA_CheckFifoParam>:
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047b6:	f023 0303 	bic.w	r3, r3, #3
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	aaaaaaab 	.word	0xaaaaaaab
 80047d4:	08009528 	.word	0x08009528

080047d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11f      	bne.n	8003b12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d856      	bhi.n	8003b86 <DMA_CheckFifoParam+0xce>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <DMA_CheckFifoParam+0x28>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003b03 	.word	0x08003b03
 8003ae8:	08003af1 	.word	0x08003af1
 8003aec:	08003b87 	.word	0x08003b87
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11f      	bne.n	8004832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d856      	bhi.n	80048a6 <DMA_CheckFifoParam+0xce>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <DMA_CheckFifoParam+0x28>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004811 	.word	0x08004811
 8004804:	08004823 	.word	0x08004823
 8004808:	08004811 	.word	0x08004811
 800480c:	080048a7 	.word	0x080048a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d046      	beq.n	8003b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e043      	b.n	8003b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b0a:	d140      	bne.n	8003b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e03d      	b.n	8003b8e <DMA_CheckFifoParam+0xd6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d046      	beq.n	80048aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004820:	e043      	b.n	80048aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800482a:	d140      	bne.n	80048ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004830:	e03d      	b.n	80048ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1a:	d121      	bne.n	8003b60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d837      	bhi.n	8003b92 <DMA_CheckFifoParam+0xda>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <DMA_CheckFifoParam+0x70>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b3f 	.word	0x08003b3f
 8003b30:	08003b39 	.word	0x08003b39
 8003b34:	08003b51 	.word	0x08003b51
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483a:	d121      	bne.n	8004880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d837      	bhi.n	80048b2 <DMA_CheckFifoParam+0xda>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <DMA_CheckFifoParam+0x70>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004859 	.word	0x08004859
 800484c:	0800485f 	.word	0x0800485f
 8004850:	08004859 	.word	0x08004859
 8004854:	08004871 	.word	0x08004871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e030      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d025      	beq.n	8003b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4e:	e022      	b.n	8003b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b58:	d11f      	bne.n	8003b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b5e:	e01c      	b.n	8003b9a <DMA_CheckFifoParam+0xe2>
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e030      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d025      	beq.n	80048b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e022      	b.n	80048b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004878:	d11f      	bne.n	80048ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800487e:	e01c      	b.n	80048ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d903      	bls.n	8003b6e <DMA_CheckFifoParam+0xb6>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d003      	beq.n	8003b74 <DMA_CheckFifoParam+0xbc>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d903      	bls.n	800488e <DMA_CheckFifoParam+0xb6>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d003      	beq.n	8004894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b6c:	e018      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      break;
 8003b72:	e015      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e00b      	b.n	8003b9e <DMA_CheckFifoParam+0xe6>
      break;
 8003b86:	bf00      	nop
 8003b88:	e00a      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e008      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e006      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 800488c:	e018      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	73fb      	strb	r3, [r7, #15]
      break;
 8004892:	e015      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00e      	beq.n	80048be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e00b      	b.n	80048be <DMA_CheckFifoParam+0xe6>
      break;
 80048a6:	bf00      	nop
 80048a8:	e00a      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048aa:	bf00      	nop
 80048ac:	e008      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048ae:	bf00      	nop
 80048b0:	e006      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048b2:	bf00      	nop
 80048b4:	e004      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048b6:	bf00      	nop
 80048b8:	e002      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80048ba:	bf00      	nop
 80048bc:	e000      	b.n	80048c0 <DMA_CheckFifoParam+0xe8>
      break;
 80048be:	bf00      	nop
    }
  } 
  
  return status; 
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <HAL_GPIO_Init>:
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3714      	adds	r7, #20
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop

080048d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e159      	b.n	8003e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	f040 8148 	bne.w	8003e7a <HAL_GPIO_Init+0x2ca>
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
 80048ea:	e159      	b.n	8004ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048ec:	2201      	movs	r2, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	f040 8148 	bne.w	8004b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d005      	beq.n	8003c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d130      	bne.n	8003c64 <HAL_GPIO_Init+0xb4>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b01      	cmp	r3, #1
 8004914:	d005      	beq.n	8004922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800491e:	2b02      	cmp	r3, #2
 8004920:	d130      	bne.n	8004984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0201 	and.w	r2, r3, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d017      	beq.n	8003ca0 <HAL_GPIO_Init+0xf0>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	2203      	movs	r2, #3
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4013      	ands	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	fa02 f303 	lsl.w	r3, r2, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4313      	orrs	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004958:	2201      	movs	r2, #1
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	f003 0201 	and.w	r2, r3, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4313      	orrs	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	2b03      	cmp	r3, #3
 800498e:	d017      	beq.n	80049c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	60da      	str	r2, [r3, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	2203      	movs	r2, #3
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d123      	bne.n	8003cf4 <HAL_GPIO_Init+0x144>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d123      	bne.n	8004a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	08da      	lsrs	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3208      	adds	r2, #8
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	08da      	lsrs	r2, r3, #3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3208      	adds	r2, #8
 80049d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	220f      	movs	r2, #15
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	08da      	lsrs	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	69b9      	ldr	r1, [r7, #24]
 8004a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	601a      	str	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 0203 	and.w	r2, r3, #3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80a2 	beq.w	8003e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b57      	ldr	r3, [pc, #348]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a56      	ldr	r2, [pc, #344]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <HAL_GPIO_Init+0x2e8>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d52:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	220f      	movs	r2, #15
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a49      	ldr	r2, [pc, #292]	; (8003ea0 <HAL_GPIO_Init+0x2f0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d019      	beq.n	8003db2 <HAL_GPIO_Init+0x202>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a48      	ldr	r2, [pc, #288]	; (8003ea4 <HAL_GPIO_Init+0x2f4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d013      	beq.n	8003dae <HAL_GPIO_Init+0x1fe>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a47      	ldr	r2, [pc, #284]	; (8003ea8 <HAL_GPIO_Init+0x2f8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00d      	beq.n	8003daa <HAL_GPIO_Init+0x1fa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a46      	ldr	r2, [pc, #280]	; (8003eac <HAL_GPIO_Init+0x2fc>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <HAL_GPIO_Init+0x1f6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a45      	ldr	r2, [pc, #276]	; (8003eb0 <HAL_GPIO_Init+0x300>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_GPIO_Init+0x1f2>
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e008      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003da2:	2307      	movs	r3, #7
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x204>
 8003db2:	2300      	movs	r3, #0
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f002 0203 	and.w	r2, r2, #3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc4:	4935      	ldr	r1, [pc, #212]	; (8003e9c <HAL_GPIO_Init+0x2ec>)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003df6:	4a2f      	ldr	r2, [pc, #188]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dfc:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e26:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e50:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e74:	4a0f      	ldr	r2, [pc, #60]	; (8003eb4 <HAL_GPIO_Init+0x304>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	f67f aea2 	bls.w	8003bcc <HAL_GPIO_Init+0x1c>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80a2 	beq.w	8004b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4a56      	ldr	r2, [pc, #344]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a64:	6453      	str	r3, [r2, #68]	; 0x44
 8004a66:	4b54      	ldr	r3, [pc, #336]	; (8004bb8 <HAL_GPIO_Init+0x2e8>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a72:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_GPIO_Init+0x2ec>)
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	089b      	lsrs	r3, r3, #2
 8004a78:	3302      	adds	r3, #2
 8004a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	220f      	movs	r2, #15
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43db      	mvns	r3, r3
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	4013      	ands	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a49      	ldr	r2, [pc, #292]	; (8004bc0 <HAL_GPIO_Init+0x2f0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d019      	beq.n	8004ad2 <HAL_GPIO_Init+0x202>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a48      	ldr	r2, [pc, #288]	; (8004bc4 <HAL_GPIO_Init+0x2f4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_GPIO_Init+0x1fe>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a47      	ldr	r2, [pc, #284]	; (8004bc8 <HAL_GPIO_Init+0x2f8>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00d      	beq.n	8004aca <HAL_GPIO_Init+0x1fa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a46      	ldr	r2, [pc, #280]	; (8004bcc <HAL_GPIO_Init+0x2fc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <HAL_GPIO_Init+0x1f6>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a45      	ldr	r2, [pc, #276]	; (8004bd0 <HAL_GPIO_Init+0x300>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_GPIO_Init+0x1f2>
 8004abe:	2304      	movs	r3, #4
 8004ac0:	e008      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	e006      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e004      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e002      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_GPIO_Init+0x204>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	f002 0203 	and.w	r2, r2, #3
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	4093      	lsls	r3, r2
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae4:	4935      	ldr	r1, [pc, #212]	; (8004bbc <HAL_GPIO_Init+0x2ec>)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	089b      	lsrs	r3, r3, #2
 8004aea:	3302      	adds	r3, #2
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004af2:	4b38      	ldr	r3, [pc, #224]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b1c:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b46:	4b23      	ldr	r3, [pc, #140]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b70:	4b18      	ldr	r3, [pc, #96]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b94:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <HAL_GPIO_Init+0x304>)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	61fb      	str	r3, [r7, #28]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	f67f aea2 	bls.w	80048ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	40020800 	.word	0x40020800
 8003eac:	40020c00 	.word	0x40020c00
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40013c00 	.word	0x40013c00

08003eb8 <HAL_GPIO_WritePin>:
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	40020000 	.word	0x40020000
 8004bc4:	40020400 	.word	0x40020400
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020c00 	.word	0x40020c00
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	40013c00 	.word	0x40013c00

08004bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	807b      	strh	r3, [r7, #2]
 8004be4:	4613      	mov	r3, r2
 8004be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
 8004be8:	787b      	ldrb	r3, [r7, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bee:	887a      	ldrh	r2, [r7, #2]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_EXTI_IRQHandler>:
 8004bf4:	e003      	b.n	8004bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	041a      	lsls	r2, r3, #16
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	619a      	str	r2, [r3, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fd ff70 	bl	8001df0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_I2C_Init>:
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c16:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c18:	695a      	ldr	r2, [r3, #20]
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c28:	88fb      	ldrh	r3, [r7, #6]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fd ff72 	bl	8002b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013c00 	.word	0x40013c00

08004c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e12b      	b.n	8004186 <HAL_I2C_Init+0x26a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e12b      	b.n	8004ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d106      	bne.n	8003f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d106      	bne.n	8004c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7fd fba8 	bl	8001698 <HAL_I2C_MspInit>
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7fc fe5a 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2224      	movs	r2, #36	; 0x24
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f80:	f003 f86e 	bl	8007060 <HAL_RCC_GetPCLK1Freq>
 8003f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a81      	ldr	r2, [pc, #516]	; (8004190 <HAL_I2C_Init+0x274>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d807      	bhi.n	8003fa0 <HAL_I2C_Init+0x84>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a80      	ldr	r2, [pc, #512]	; (8004194 <HAL_I2C_Init+0x278>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	bf94      	ite	ls
 8003f98:	2301      	movls	r3, #1
 8003f9a:	2300      	movhi	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e006      	b.n	8003fae <HAL_I2C_Init+0x92>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a7d      	ldr	r2, [pc, #500]	; (8004198 <HAL_I2C_Init+0x27c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	bf94      	ite	ls
 8003fa8:	2301      	movls	r3, #1
 8003faa:	2300      	movhi	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0e7      	b.n	8004186 <HAL_I2C_Init+0x26a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2224      	movs	r2, #36	; 0x24
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ca0:	f003 f896 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 8004ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	4a81      	ldr	r2, [pc, #516]	; (8004eb0 <HAL_I2C_Init+0x274>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d807      	bhi.n	8004cc0 <HAL_I2C_Init+0x84>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a80      	ldr	r2, [pc, #512]	; (8004eb4 <HAL_I2C_Init+0x278>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bf94      	ite	ls
 8004cb8:	2301      	movls	r3, #1
 8004cba:	2300      	movhi	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e006      	b.n	8004cce <HAL_I2C_Init+0x92>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a7d      	ldr	r2, [pc, #500]	; (8004eb8 <HAL_I2C_Init+0x27c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bf94      	ite	ls
 8004cc8:	2301      	movls	r3, #1
 8004cca:	2300      	movhi	r3, #0
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e0e7      	b.n	8004ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4a78      	ldr	r2, [pc, #480]	; (800419c <HAL_I2C_Init+0x280>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	0c9b      	lsrs	r3, r3, #18
 8003fc0:	60bb      	str	r3, [r7, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a78      	ldr	r2, [pc, #480]	; (8004ebc <HAL_I2C_Init+0x280>)
 8004cda:	fba2 2303 	umull	r2, r3, r2, r3
 8004cde:	0c9b      	lsrs	r3, r3, #18
 8004ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_I2C_Init+0x274>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d802      	bhi.n	8003ff0 <HAL_I2C_Init+0xd4>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	3301      	adds	r3, #1
 8003fee:	e009      	b.n	8004004 <HAL_I2C_Init+0xe8>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ff6:	fb02 f303 	mul.w	r3, r2, r3
 8003ffa:	4a69      	ldr	r2, [pc, #420]	; (80041a0 <HAL_I2C_Init+0x284>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	099b      	lsrs	r3, r3, #6
 8004002:	3301      	adds	r3, #1
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	430b      	orrs	r3, r1
 800400a:	6213      	str	r3, [r2, #32]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a6a      	ldr	r2, [pc, #424]	; (8004eb0 <HAL_I2C_Init+0x274>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d802      	bhi.n	8004d10 <HAL_I2C_Init+0xd4>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	e009      	b.n	8004d24 <HAL_I2C_Init+0xe8>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	4a69      	ldr	r2, [pc, #420]	; (8004ec0 <HAL_I2C_Init+0x284>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	099b      	lsrs	r3, r3, #6
 8004d22:	3301      	adds	r3, #1
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	495c      	ldr	r1, [pc, #368]	; (8004190 <HAL_I2C_Init+0x274>)
 8004020:	428b      	cmp	r3, r1
 8004022:	d819      	bhi.n	8004058 <HAL_I2C_Init+0x13c>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1e59      	subs	r1, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004032:	1c59      	adds	r1, r3, #1
 8004034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004038:	400b      	ands	r3, r1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_I2C_Init+0x138>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1e59      	subs	r1, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fbb1 f3f3 	udiv	r3, r1, r3
 800404c:	3301      	adds	r3, #1
 800404e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004052:	e051      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 8004054:	2304      	movs	r3, #4
 8004056:	e04f      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d111      	bne.n	8004084 <HAL_I2C_Init+0x168>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1e58      	subs	r0, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	440b      	add	r3, r1
 800406e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004072:	3301      	adds	r3, #1
 8004074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004078:	2b00      	cmp	r3, #0
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	e012      	b.n	80040aa <HAL_I2C_Init+0x18e>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e58      	subs	r0, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	0099      	lsls	r1, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x196>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e022      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <HAL_I2C_Init+0x1bc>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	1e58      	subs	r0, r3, #1
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	440b      	add	r3, r1
 80040c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d6:	e00f      	b.n	80040f8 <HAL_I2C_Init+0x1dc>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	0099      	lsls	r1, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	6809      	ldr	r1, [r1, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61cb      	str	r3, [r1, #28]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	495c      	ldr	r1, [pc, #368]	; (8004eb0 <HAL_I2C_Init+0x274>)
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d819      	bhi.n	8004d78 <HAL_I2C_Init+0x13c>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1e59      	subs	r1, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d58:	400b      	ands	r3, r1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_I2C_Init+0x138>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1e59      	subs	r1, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d72:	e051      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004d74:	2304      	movs	r3, #4
 8004d76:	e04f      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d111      	bne.n	8004da4 <HAL_I2C_Init+0x168>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	1e58      	subs	r0, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	440b      	add	r3, r1
 8004d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	e012      	b.n	8004dca <HAL_I2C_Init+0x18e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	1e58      	subs	r0, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6859      	ldr	r1, [r3, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	0099      	lsls	r1, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dba:	3301      	adds	r3, #1
 8004dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_I2C_Init+0x196>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10e      	bne.n	8004df8 <HAL_I2C_Init+0x1bc>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1e58      	subs	r0, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6859      	ldr	r1, [r3, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	440b      	add	r3, r1
 8004de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df6:	e00f      	b.n	8004e18 <HAL_I2C_Init+0x1dc>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1e58      	subs	r0, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6859      	ldr	r1, [r3, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	0099      	lsls	r1, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	6809      	ldr	r1, [r1, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69da      	ldr	r2, [r3, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6911      	ldr	r1, [r2, #16]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68d2      	ldr	r2, [r2, #12]
 8004132:	4311      	orrs	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	430b      	orrs	r3, r1
 800413a:	6093      	str	r3, [r2, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6911      	ldr	r1, [r2, #16]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68d2      	ldr	r2, [r2, #12]
 8004e52:	4311      	orrs	r1, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6812      	ldr	r2, [r2, #0]
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	000186a0 	.word	0x000186a0
 8004194:	001e847f 	.word	0x001e847f
 8004198:	003d08ff 	.word	0x003d08ff
 800419c:	431bde83 	.word	0x431bde83
 80041a0:	10624dd3 	.word	0x10624dd3

080041a4 <HAL_I2C_Mem_Write>:
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695a      	ldr	r2, [r3, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	000186a0 	.word	0x000186a0
 8004eb4:	001e847f 	.word	0x001e847f
 8004eb8:	003d08ff 	.word	0x003d08ff
 8004ebc:	431bde83 	.word	0x431bde83
 8004ec0:	10624dd3 	.word	0x10624dd3

08004ec4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	460b      	mov	r3, r1
 80041b8:	813b      	strh	r3, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041be:	f7fe fb13 	bl	80027e8 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ede:	f7fe fb13 	bl	8003508 <HAL_GetTick>
 8004ee2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	f040 80d9 	bne.w	8004384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2319      	movs	r3, #25
 80041d8:	2201      	movs	r2, #1
 80041da:	496d      	ldr	r1, [pc, #436]	; (8004390 <HAL_I2C_Mem_Write+0x1ec>)
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f002 f8e5 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041e8:	2302      	movs	r3, #2
 80041ea:	e0cc      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 80d9 	bne.w	80050a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2319      	movs	r3, #25
 8004ef8:	2201      	movs	r2, #1
 8004efa:	496d      	ldr	r1, [pc, #436]	; (80050b0 <HAL_I2C_Mem_Write+0x1ec>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f002 f90d 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e0cc      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_I2C_Mem_Write+0x56>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0c5      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d007      	beq.n	8004220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Mem_Write+0x56>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e0c5      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2221      	movs	r2, #33	; 0x21
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a3a      	ldr	r2, [r7, #32]
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4a4d      	ldr	r2, [pc, #308]	; (8004394 <HAL_I2C_Mem_Write+0x1f0>)
 8004260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004262:	88f8      	ldrh	r0, [r7, #6]
 8004264:	893a      	ldrh	r2, [r7, #8]
 8004266:	8979      	ldrh	r1, [r7, #10]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4603      	mov	r3, r0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 fe74 	bl	8005f60 <I2C_RequestMemoryWrite>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d052      	beq.n	8004324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e081      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2221      	movs	r2, #33	; 0x21
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a3a      	ldr	r2, [r7, #32]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a4d      	ldr	r2, [pc, #308]	; (80050b4 <HAL_I2C_Mem_Write+0x1f0>)
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f82:	88f8      	ldrh	r0, [r7, #6]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f001 fe9c 	bl	8006cd0 <I2C_RequestMemoryWrite>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d052      	beq.n	8005044 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e081      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f002 f966 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b04      	cmp	r3, #4
 8004298:	d107      	bne.n	80042aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e06b      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f002 f98e 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00d      	beq.n	8004fce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d107      	bne.n	8004fca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06b      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	781a      	ldrb	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	3b01      	subs	r3, #1
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d11b      	bne.n	8004324 <HAL_I2C_Mem_Write+0x180>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d017      	beq.n	8004324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1aa      	bne.n	8004282 <HAL_I2C_Mem_Write+0xde>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d11b      	bne.n	8005044 <HAL_I2C_Mem_Write+0x180>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	d017      	beq.n	8005044 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1aa      	bne.n	8004fa2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f002 f952 	bl	80065da <I2C_WaitOnBTFFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00d      	beq.n	8004358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	2b04      	cmp	r3, #4
 8004342:	d107      	bne.n	8004354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e016      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f002 f97a 	bl	800734a <I2C_WaitOnBTFFlagUntilTimeout>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00d      	beq.n	8005078 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	2b04      	cmp	r3, #4
 8005062:	d107      	bne.n	8005074 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e016      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_I2C_Mem_Write+0x1e2>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	00100002 	.word	0x00100002
 8004394:	ffff0000 	.word	0xffff0000

08004398 <HAL_I2C_Mem_Read>:
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	00100002 	.word	0x00100002
 80050b4:	ffff0000 	.word	0xffff0000

080050b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08c      	sub	sp, #48	; 0x30
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	817b      	strh	r3, [r7, #10]
 80043aa:	460b      	mov	r3, r1
 80043ac:	813b      	strh	r3, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043b2:	f7fe fa19 	bl	80027e8 <HAL_GetTick>
 80043b6:	6278      	str	r0, [r7, #36]	; 0x24
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08c      	sub	sp, #48	; 0x30
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	460b      	mov	r3, r1
 80050cc:	813b      	strh	r3, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050d2:	f7fe fa19 	bl	8003508 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b20      	cmp	r3, #32
 80043c2:	f040 8208 	bne.w	80047d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2319      	movs	r3, #25
 80043cc:	2201      	movs	r2, #1
 80043ce:	497b      	ldr	r1, [pc, #492]	; (80045bc <HAL_I2C_Mem_Read+0x224>)
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f001 ffeb 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
 80043de:	e1fb      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b20      	cmp	r3, #32
 80050e2:	f040 8208 	bne.w	80054f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2319      	movs	r3, #25
 80050ec:	2201      	movs	r2, #1
 80050ee:	497b      	ldr	r1, [pc, #492]	; (80052dc <HAL_I2C_Mem_Read+0x224>)
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f002 f813 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	e1fb      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_I2C_Mem_Read+0x56>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e1f4      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d007      	beq.n	8004414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2C_Mem_Read+0x56>
 800510a:	2302      	movs	r3, #2
 800510c:	e1f4      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b01      	cmp	r3, #1
 8005122:	d007      	beq.n	8005134 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2222      	movs	r2, #34	; 0x22
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a5b      	ldr	r2, [pc, #364]	; (80045c0 <HAL_I2C_Mem_Read+0x228>)
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004456:	88f8      	ldrh	r0, [r7, #6]
 8004458:	893a      	ldrh	r2, [r7, #8]
 800445a:	8979      	ldrh	r1, [r7, #10]
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	4603      	mov	r3, r0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f001 fe10 	bl	800608c <I2C_RequestMemoryRead>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1b0      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	623b      	str	r3, [r7, #32]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	623b      	str	r3, [r7, #32]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e184      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d11b      	bne.n	80044e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e164      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d11b      	bne.n	8004526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450e:	2300      	movs	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	61bb      	str	r3, [r7, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	e144      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005142:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2222      	movs	r2, #34	; 0x22
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2240      	movs	r2, #64	; 0x40
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005164:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a5b      	ldr	r2, [pc, #364]	; (80052e0 <HAL_I2C_Mem_Read+0x228>)
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005176:	88f8      	ldrh	r0, [r7, #6]
 8005178:	893a      	ldrh	r2, [r7, #8]
 800517a:	8979      	ldrh	r1, [r7, #10]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4603      	mov	r3, r0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f001 fe38 	bl	8006dfc <I2C_RequestMemoryRead>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e1b0      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d113      	bne.n	80051c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e184      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d11b      	bne.n	8005206 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e164      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	2b02      	cmp	r3, #2
 800520c:	d11b      	bne.n	8005246 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800522c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	e144      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800453c:	e138      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b03      	cmp	r3, #3
 8004544:	f200 80f1 	bhi.w	800472a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	2b01      	cmp	r3, #1
 800454e:	d123      	bne.n	8004598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f002 f8b3 	bl	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e139      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800525c:	e138      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005262:	2b03      	cmp	r3, #3
 8005264:	f200 80f1 	bhi.w	800544a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	2b01      	cmp	r3, #1
 800526e:	d123      	bne.n	80052b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f002 f8db 	bl	8007430 <I2C_WaitOnRXNEFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e139      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004596:	e10b      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	2b02      	cmp	r3, #2
 800459e:	d14e      	bne.n	800463e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	2200      	movs	r2, #0
 80045a8:	4906      	ldr	r1, [pc, #24]	; (80045c4 <HAL_I2C_Mem_Read+0x22c>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f001 fefe 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e10e      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 80045ba:	bf00      	nop
 80045bc:	00100002 	.word	0x00100002
 80045c0:	ffff0000 	.word	0xffff0000
 80045c4:	00010004 	.word	0x00010004
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052b6:	e10b      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d14e      	bne.n	800535e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2200      	movs	r2, #0
 80052c8:	4906      	ldr	r1, [pc, #24]	; (80052e4 <HAL_I2C_Mem_Read+0x22c>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f001 ff26 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e10e      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
 80052da:	bf00      	nop
 80052dc:	00100002 	.word	0x00100002
 80052e0:	ffff0000 	.word	0xffff0000
 80052e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800463c:	e0b8      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	1c5a      	adds	r2, r3, #1
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800535c:	e0b8      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2200      	movs	r2, #0
 8004646:	4966      	ldr	r1, [pc, #408]	; (80047e0 <HAL_I2C_Mem_Read+0x448>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f001 feaf 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0bf      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2200      	movs	r2, #0
 8005366:	4966      	ldr	r1, [pc, #408]	; (8005500 <HAL_I2C_Mem_Read+0x448>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f001 fed7 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0bf      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2200      	movs	r2, #0
 80046a2:	494f      	ldr	r1, [pc, #316]	; (80047e0 <HAL_I2C_Mem_Read+0x448>)
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f001 fe81 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e091      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691a      	ldr	r2, [r3, #16]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	2200      	movs	r2, #0
 80053c2:	494f      	ldr	r1, [pc, #316]	; (8005500 <HAL_I2C_Mem_Read+0x448>)
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f001 fea9 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e091      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004728:	e042      	b.n	80047b0 <HAL_I2C_Mem_Read+0x418>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005448:	e042      	b.n	80054d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800472a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f001 ffc6 	bl	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e04c      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 800544a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f001 ffee 	bl	8007430 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e04c      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d118      	bne.n	80047b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	1c5a      	adds	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f aec2 	bne.w	800453e <HAL_I2C_Mem_Read+0x1a6>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b04      	cmp	r3, #4
 800549c:	d118      	bne.n	80054d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f47f aec2 	bne.w	800525e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_I2C_Mem_Read+0x440>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e000      	b.n	80054f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3728      	adds	r7, #40	; 0x28
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	00010004 	.word	0x00010004

080047e4 <HAL_I2C_EV_IRQHandler>:
 80054f6:	2302      	movs	r3, #2
  }
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	; 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	00010004 	.word	0x00010004

08005504 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004804:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d003      	beq.n	800481c <HAL_I2C_EV_IRQHandler+0x38>
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	f040 80b1 	bne.w	800497e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <HAL_I2C_EV_IRQHandler+0x6e>
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800483c:	d003      	beq.n	8004846 <HAL_I2C_EV_IRQHandler+0x62>
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004844:	d101      	bne.n	800484a <HAL_I2C_EV_IRQHandler+0x66>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_I2C_EV_IRQHandler+0x68>
 800484a:	2300      	movs	r3, #0
 800484c:	2b01      	cmp	r3, #1
 800484e:	f000 8114 	beq.w	8004a7a <HAL_I2C_EV_IRQHandler+0x296>
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005524:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b10      	cmp	r3, #16
 8005532:	d003      	beq.n	800553c <HAL_I2C_EV_IRQHandler+0x38>
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	2b40      	cmp	r3, #64	; 0x40
 8005538:	f040 80c1 	bne.w	80056be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <HAL_I2C_EV_IRQHandler+0x6e>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800555c:	d003      	beq.n	8005566 <HAL_I2C_EV_IRQHandler+0x62>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005564:	d101      	bne.n	800556a <HAL_I2C_EV_IRQHandler+0x66>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x68>
 800556a:	2300      	movs	r3, #0
 800556c:	2b01      	cmp	r3, #1
 800556e:	f000 8132 	beq.w	80057d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_I2C_EV_IRQHandler+0x90>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 ffaf 	bl	80067ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fd5e 	bl	800532e <I2C_Master_SB>
 8004872:	e083      	b.n	800497c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0xac>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fdd6 	bl	800543a <I2C_Master_ADD10>
 800488e:	e075      	b.n	800497c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_I2C_EV_IRQHandler+0xc8>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fdf2 	bl	800548e <I2C_Master_ADDR>
 80048aa:	e067      	b.n	800497c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d036      	beq.n	8004924 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	f000 80db 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0x10a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0x10a>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0304 	and.w	r3, r3, #4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9d6 	bl	8004c98 <I2C_MasterTransmit_TXE>
 80048ec:	e046      	b.n	800497c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80c2 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80bc 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b21      	cmp	r3, #33	; 0x21
 800490a:	d103      	bne.n	8004914 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fa5f 	bl	8004dd0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004912:	e0b4      	b.n	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00c      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0x92>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	0a5b      	lsrs	r3, r3, #9
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f001 ffd6 	bl	800753a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fd83 	bl	800609a <I2C_Master_SB>
 8005594:	e092      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	08db      	lsrs	r3, r3, #3
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	0a5b      	lsrs	r3, r3, #9
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fdf9 	bl	80061a6 <I2C_Master_ADD10>
 80055b4:	e082      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	0a5b      	lsrs	r3, r3, #9
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fe13 	bl	80061fa <I2C_Master_ADDR>
 80055d4:	e072      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03b      	beq.n	800565a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f0:	f000 80f3 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	09db      	lsrs	r3, r3, #7
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00f      	beq.n	8005620 <HAL_I2C_EV_IRQHandler+0x11c>
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	0a9b      	lsrs	r3, r3, #10
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d009      	beq.n	8005620 <HAL_I2C_EV_IRQHandler+0x11c>
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 f9f3 	bl	8005a04 <I2C_MasterTransmit_TXE>
 800561e:	e04d      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 80d6 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	0a5b      	lsrs	r3, r3, #9
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 80cf 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	2b21      	cmp	r3, #33	; 0x21
 8005640:	d103      	bne.n	800564a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa7a 	bl	8005b3c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005648:	e0c7      	b.n	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	f040 80b1 	bne.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 facd 	bl	8004ebc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004922:	e0ac      	b.n	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	f040 80c4 	bne.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fae8 	bl	8005c28 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005658:	e0bf      	b.n	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004932:	f000 80a4 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_EV_IRQHandler+0x178>
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004946:	2b00      	cmp	r3, #0
 8004948:	d008      	beq.n	800495c <HAL_I2C_EV_IRQHandler+0x178>
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fb45 	bl	8004fe4 <I2C_MasterReceive_RXNE>
 800495a:	e00f      	b.n	800497c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 808b 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 8085 	beq.w	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fbf0 	bl	800515a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497a:	e080      	b.n	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 800497c:	e07f      	b.n	8004a7e <HAL_I2C_EV_IRQHandler+0x29a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005668:	f000 80b7 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	099b      	lsrs	r3, r3, #6
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00f      	beq.n	8005698 <HAL_I2C_EV_IRQHandler+0x194>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	0a9b      	lsrs	r3, r3, #10
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <HAL_I2C_EV_IRQHandler+0x194>
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb5d 	bl	8005d50 <I2C_MasterReceive_RXNE>
 8005696:	e011      	b.n	80056bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 809a 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	0a5b      	lsrs	r3, r3, #9
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8093 	beq.w	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fc06 	bl	8005ec6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ba:	e08e      	b.n	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
 80056bc:	e08d      	b.n	80057da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e007      	b.n	80049a0 <HAL_I2C_EV_IRQHandler+0x1bc>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e007      	b.n	80056e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	61fb      	str	r3, [r7, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d011      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x1ea>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80049c4:	69b9      	ldr	r1, [r7, #24]
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 ffb0 	bl	800592c <I2C_Slave_ADDR>
 80049cc:	e05a      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x206>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 ffea 	bl	80059bc <I2C_Slave_STOPF>
 80049e8:	e04c      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ea:	7bbb      	ldrb	r3, [r7, #14]
 80049ec:	2b21      	cmp	r3, #33	; 0x21
 80049ee:	d002      	beq.n	80049f6 <HAL_I2C_EV_IRQHandler+0x212>
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b29      	cmp	r3, #41	; 0x29
 80049f4:	d120      	bne.n	8004a38 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00d      	beq.n	8004a1c <HAL_I2C_EV_IRQHandler+0x238>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d008      	beq.n	8004a1c <HAL_I2C_EV_IRQHandler+0x238>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d103      	bne.n	8004a1c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fecb 	bl	80057b0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a1a:	e032      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d02d      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x29e>
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d028      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fefa 	bl	800582a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a36:	e024      	b.n	8004a82 <HAL_I2C_EV_IRQHandler+0x29e>
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	085b      	lsrs	r3, r3, #1
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d012      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x20e>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	0a5b      	lsrs	r3, r3, #9
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00c      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 ffc4 	bl	8006698 <I2C_Slave_ADDR>
 8005710:	e066      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_I2C_EV_IRQHandler+0x22e>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	0a5b      	lsrs	r3, r3, #9
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fffe 	bl	800672c <I2C_Slave_STOPF>
 8005730:	e056      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b21      	cmp	r3, #33	; 0x21
 8005736:	d002      	beq.n	800573e <HAL_I2C_EV_IRQHandler+0x23a>
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	2b29      	cmp	r3, #41	; 0x29
 800573c:	d125      	bne.n	800578a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	09db      	lsrs	r3, r3, #7
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00f      	beq.n	800576a <HAL_I2C_EV_IRQHandler+0x266>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	0a9b      	lsrs	r3, r3, #10
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_I2C_EV_IRQHandler+0x266>
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	089b      	lsrs	r3, r3, #2
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 feda 	bl	800651c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005768:	e039      	b.n	80057de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d033      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0x2da>
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	0a5b      	lsrs	r3, r3, #9
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d02d      	beq.n	80057de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 ff07 	bl	8006596 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005788:	e029      	b.n	80057de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_I2C_EV_IRQHandler+0x27a>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d103      	bne.n	8004a5e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 ff08 	bl	800586c <I2C_SlaveReceive_RXNE>
 8004a5c:	e012      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 ff38 	bl	80058e8 <I2C_SlaveReceive_BTF>
 8004a78:	e004      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004a7a:	bf00      	nop
 8004a7c:	e002      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a7e:	bf00      	nop
 8004a80:	e000      	b.n	8004a84 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a82:	bf00      	nop
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	099b      	lsrs	r3, r3, #6
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00f      	beq.n	80057b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	0a9b      	lsrs	r3, r3, #10
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d009      	beq.n	80057b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 ff12 	bl	80065d8 <I2C_SlaveReceive_RXNE>
 80057b4:	e014      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	0a5b      	lsrs	r3, r3, #9
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 ff40 	bl	8006654 <I2C_SlaveReceive_BTF>
 80057d4:	e004      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_I2C_ER_IRQHandler>:
 80057e0:	3720      	adds	r7, #32
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b08a      	sub	sp, #40	; 0x28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b08a      	sub	sp, #40	; 0x28
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00d      	beq.n	8004ad4 <HAL_I2C_ER_IRQHandler+0x4a>
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d008      	beq.n	8004ad4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ad2:	615a      	str	r2, [r3, #20]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005808:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	0a1b      	lsrs	r3, r3, #8
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <HAL_I2C_ER_IRQHandler+0x4e>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005832:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00d      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0x70>
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f043 0302 	orr.w	r3, r3, #2
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004af8:	615a      	str	r2, [r3, #20]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	0a5b      	lsrs	r3, r3, #9
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <HAL_I2C_ER_IRQHandler+0x78>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f043 0302 	orr.w	r3, r3, #2
 8005852:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800585c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d03e      	beq.n	8004b82 <HAL_I2C_ER_IRQHandler+0xf8>
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d039      	beq.n	8004b82 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004b0e:	7efb      	ldrb	r3, [r7, #27]
 8004b10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004b28:	7ebb      	ldrb	r3, [r7, #26]
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d112      	bne.n	8004b54 <HAL_I2C_ER_IRQHandler+0xca>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10f      	bne.n	8004b54 <HAL_I2C_ER_IRQHandler+0xca>
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	2b21      	cmp	r3, #33	; 0x21
 8004b38:	d008      	beq.n	8004b4c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b29      	cmp	r3, #41	; 0x29
 8004b3e:	d005      	beq.n	8004b4c <HAL_I2C_ER_IRQHandler+0xc2>
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	2b28      	cmp	r3, #40	; 0x28
 8004b44:	d106      	bne.n	8004b54 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b21      	cmp	r3, #33	; 0x21
 8004b4a:	d103      	bne.n	8004b54 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f001 f865 	bl	8005c1c <I2C_Slave_AF>
 8004b52:	e016      	b.n	8004b82 <HAL_I2C_ER_IRQHandler+0xf8>
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	0a9b      	lsrs	r3, r3, #10
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d03f      	beq.n	80058ea <HAL_I2C_ER_IRQHandler+0x104>
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d039      	beq.n	80058ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005876:	7efb      	ldrb	r3, [r7, #27]
 8005878:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005888:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005890:	7ebb      	ldrb	r3, [r7, #26]
 8005892:	2b20      	cmp	r3, #32
 8005894:	d112      	bne.n	80058bc <HAL_I2C_ER_IRQHandler+0xd6>
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10f      	bne.n	80058bc <HAL_I2C_ER_IRQHandler+0xd6>
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b21      	cmp	r3, #33	; 0x21
 80058a0:	d008      	beq.n	80058b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	2b29      	cmp	r3, #41	; 0x29
 80058a6:	d005      	beq.n	80058b4 <HAL_I2C_ER_IRQHandler+0xce>
 80058a8:	7cfb      	ldrb	r3, [r7, #19]
 80058aa:	2b28      	cmp	r3, #40	; 0x28
 80058ac:	d106      	bne.n	80058bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b21      	cmp	r3, #33	; 0x21
 80058b2:	d103      	bne.n	80058bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f869 	bl	800698c <I2C_Slave_AF>
 80058ba:	e016      	b.n	80058ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	f043 0304 	orr.w	r3, r3, #4
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b66:	7efb      	ldrb	r3, [r7, #27]
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d002      	beq.n	8004b72 <HAL_I2C_ER_IRQHandler+0xe8>
 8004b6c:	7efb      	ldrb	r3, [r7, #27]
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d107      	bne.n	8004b82 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b80:	601a      	str	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058ce:	7efb      	ldrb	r3, [r7, #27]
 80058d0:	2b10      	cmp	r3, #16
 80058d2:	d002      	beq.n	80058da <HAL_I2C_ER_IRQHandler+0xf4>
 80058d4:	7efb      	ldrb	r3, [r7, #27]
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d107      	bne.n	80058ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_I2C_ER_IRQHandler+0x11e>
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ba6:	615a      	str	r2, [r3, #20]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	0adb      	lsrs	r3, r3, #11
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <HAL_I2C_ER_IRQHandler+0x12e>
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	f043 0308 	orr.w	r3, r3, #8
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005912:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 f89e 	bl	8005cfc <I2C_ITError>
  }
}
 8004bc0:	bf00      	nop
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_I2C_MasterTxCpltCallback>:
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d008      	beq.n	800592c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 f8a0 	bl	8006a6c <I2C_ITError>
  }
}
 800592c:	bf00      	nop
 800592e:	3728      	adds	r7, #40	; 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_I2C_MasterRxCpltCallback>:
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_I2C_SlaveTxCpltCallback>:
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_I2C_SlaveRxCpltCallback>:
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_I2C_AddrCallback>:
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	803b      	strh	r3, [r7, #0]
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
 8005990:	4613      	mov	r3, r2
 8005992:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_I2C_ListenCpltCallback>:
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2C_MemTxCpltCallback>:
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_I2C_MemRxCpltCallback>:
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_I2C_ErrorCallback>:
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_I2C_AbortCpltCallback>:
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <I2C_MasterTransmit_TXE>:
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d150      	bne.n	8004d60 <I2C_MasterTransmit_TXE+0xc8>
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	2b21      	cmp	r3, #33	; 0x21
 8004cc2:	d14d      	bne.n	8004d60 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b08      	cmp	r3, #8
 8004cc8:	d01d      	beq.n	8004d06 <I2C_MasterTransmit_TXE+0x6e>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d01a      	beq.n	8004d06 <I2C_MasterTransmit_TXE+0x6e>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004cd6:	d016      	beq.n	8004d06 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2211      	movs	r2, #17
 8004cec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d150      	bne.n	8005acc <I2C_MasterTransmit_TXE+0xc8>
 8005a2a:	7bfb      	ldrb	r3, [r7, #15]
 8005a2c:	2b21      	cmp	r3, #33	; 0x21
 8005a2e:	d14d      	bne.n	8005acc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d01d      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d01a      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a42:	d016      	beq.n	8005a72 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a52:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2211      	movs	r2, #17
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff62 	bl	8004bc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d04:	e060      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff ff62 	bl	8005934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a70:	e060      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d14:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d24:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d107      	bne.n	8004d50 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a80:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a90:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b40      	cmp	r3, #64	; 0x40
 8005aaa:	d107      	bne.n	8005abc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff ff7d 	bl	8004c48 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d4e:	e03b      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff7d 	bl	80059b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aba:	e03b      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff ff35 	bl	8004bc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d5e:	e033      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ff35 	bl	8005934 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005aca:	e033      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
 8004d62:	2b21      	cmp	r3, #33	; 0x21
 8004d64:	d005      	beq.n	8004d72 <I2C_MasterTransmit_TXE+0xda>
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d12d      	bne.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b22      	cmp	r3, #34	; 0x22
 8004d70:	d12a      	bne.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d108      	bne.n	8004d8e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8a:	605a      	str	r2, [r3, #4]
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	2b21      	cmp	r3, #33	; 0x21
 8005ad0:	d005      	beq.n	8005ade <I2C_MasterTransmit_TXE+0xda>
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	2b40      	cmp	r3, #64	; 0x40
 8005ad6:	d12d      	bne.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	2b22      	cmp	r3, #34	; 0x22
 8005adc:	d12a      	bne.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d8c:	e01c      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d103      	bne.n	8004da2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f88e 	bl	8004ebc <I2C_MemoryTransmit_TXE_BTF>
}
 8004da0:	e012      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	781a      	ldrb	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dc6:	e7ff      	b.n	8004dc8 <I2C_MasterTransmit_TXE+0x130>
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_MasterTransmit_BTF>:
 8005af8:	e01c      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d103      	bne.n	8005b0e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f88e 	bl	8005c28 <I2C_MemoryTransmit_TXE_BTF>
}
 8005b0c:	e012      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	781a      	ldrb	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b32:	e7ff      	b.n	8005b34 <I2C_MasterTransmit_TXE+0x130>
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b21      	cmp	r3, #33	; 0x21
 8004de8:	d164      	bne.n	8004eb4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	3b01      	subs	r3, #1
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	; 0x21
 8005b54:	d164      	bne.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d012      	beq.n	8005b86 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004e18:	e04c      	b.n	8004eb4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d01d      	beq.n	8004e5c <I2C_MasterTransmit_BTF+0x8c>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d01a      	beq.n	8004e5c <I2C_MasterTransmit_BTF+0x8c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e2c:	d016      	beq.n	8004e5c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e3c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2211      	movs	r2, #17
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff feb7 	bl	8004bc8 <HAL_I2C_MasterTxCpltCallback>
}
 8004e5a:	e02b      	b.n	8004eb4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e6a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b40      	cmp	r3, #64	; 0x40
 8004e94:	d107      	bne.n	8004ea6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff fed2 	bl	8004c48 <HAL_I2C_MemTxCpltCallback>
}
 8004ea4:	e006      	b.n	8004eb4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7ff fe8a 	bl	8004bc8 <HAL_I2C_MasterTxCpltCallback>
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_MemoryTransmit_TXE_BTF>:
 8005b84:	e04c      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d01d      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d01a      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b98:	d016      	beq.n	8005bc8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ba8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2211      	movs	r2, #17
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff feb7 	bl	8005934 <HAL_I2C_MasterTxCpltCallback>
}
 8005bc6:	e02b      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bd6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d107      	bne.n	8005c12 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff fed2 	bl	80059b4 <HAL_I2C_MemTxCpltCallback>
}
 8005c10:	e006      	b.n	8005c20 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff fe8a 	bl	8005934 <HAL_I2C_MasterTxCpltCallback>
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11d      	bne.n	8004f10 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d10b      	bne.n	8004ef4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	651a      	str	r2, [r3, #80]	; 0x50
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11d      	bne.n	8005c7c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10b      	bne.n	8005c60 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c58:	1c9a      	adds	r2, r3, #2
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004ef2:	e073      	b.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	121b      	asrs	r3, r3, #8
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f0e:	e065      	b.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10b      	bne.n	8004f30 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f2e:	e055      	b.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d151      	bne.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b22      	cmp	r3, #34	; 0x22
 8004f3c:	d10d      	bne.n	8004f5a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f4c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f58:	e040      	b.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b21      	cmp	r3, #33	; 0x21
 8004f68:	d112      	bne.n	8004f90 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f8e:	e025      	b.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d120      	bne.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d11d      	bne.n	8004fdc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff fe36 	bl	8004c48 <HAL_I2C_MemTxCpltCallback>
}
 8004fdc:	bf00      	nop
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <I2C_MasterReceive_RXNE>:
 8005c5e:	e073      	b.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	121b      	asrs	r3, r3, #8
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c7a:	e065      	b.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10b      	bne.n	8005c9c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005c9a:	e055      	b.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d151      	bne.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b22      	cmp	r3, #34	; 0x22
 8005ca8:	d10d      	bne.n	8005cc6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cb8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cbe:	1c5a      	adds	r2, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cc4:	e040      	b.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
 8005cd2:	2b21      	cmp	r3, #33	; 0x21
 8005cd4:	d112      	bne.n	8005cfc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cfa:	e025      	b.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d120      	bne.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b21      	cmp	r3, #33	; 0x21
 8005d0a:	d11d      	bne.n	8005d48 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d1a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe36 	bl	80059b4 <HAL_I2C_MemTxCpltCallback>
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b22      	cmp	r3, #34	; 0x22
 8004ff6:	f040 80ac 	bne.w	8005152 <I2C_MasterReceive_RXNE+0x16e>
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b22      	cmp	r3, #34	; 0x22
 8005d62:	f040 80ac 	bne.w	8005ebe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d921      	bls.n	800504c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b03      	cmp	r3, #3
 8005036:	f040 808c 	bne.w	8005152 <I2C_MasterReceive_RXNE+0x16e>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d921      	bls.n	8005db8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	f040 808c 	bne.w	8005ebe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	605a      	str	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005db4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800504a:	e082      	b.n	8005152 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	2b02      	cmp	r3, #2
 8005052:	d075      	beq.n	8005140 <I2C_MasterReceive_RXNE+0x15c>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d002      	beq.n	8005060 <I2C_MasterReceive_RXNE+0x7c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d16f      	bne.n	8005140 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 fafb 	bl	800665c <I2C_WaitOnSTOPRequestThroughIT>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d142      	bne.n	80050f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800507a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800508a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d10a      	bne.n	80050dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff fdc1 	bl	8004c5c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050da:	e03a      	b.n	8005152 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2212      	movs	r2, #18
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff fd76 	bl	8004bdc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050f0:	e02f      	b.n	8005152 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005100:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fd99 	bl	8004c70 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800513e:	e008      	b.n	8005152 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	605a      	str	r2, [r3, #4]
}
 8005150:	e7ff      	b.n	8005152 <I2C_MasterReceive_RXNE+0x16e>
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <I2C_MasterReceive_BTF>:
 8005db6:	e082      	b.n	8005ebe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d075      	beq.n	8005eac <I2C_MasterReceive_RXNE+0x15c>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d002      	beq.n	8005dcc <I2C_MasterReceive_RXNE+0x7c>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d16f      	bne.n	8005eac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 fafd 	bl	80073cc <I2C_WaitOnSTOPRequestThroughIT>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d142      	bne.n	8005e5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005df6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d10a      	bne.n	8005e48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fdc1 	bl	80059c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e46:	e03a      	b.n	8005ebe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2212      	movs	r2, #18
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fd76 	bl	8005948 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005e5c:	e02f      	b.n	8005ebe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff fd99 	bl	80059dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005eaa:	e008      	b.n	8005ebe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eba:	605a      	str	r2, [r3, #4]
}
 8005ebc:	e7ff      	b.n	8005ebe <I2C_MasterReceive_RXNE+0x16e>
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b04      	cmp	r3, #4
 8005170:	d11b      	bne.n	80051aa <I2C_MasterReceive_BTF+0x50>
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d11b      	bne.n	8005f16 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005180:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80051a8:	e0bd      	b.n	8005326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d129      	bne.n	8005208 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00a      	beq.n	80051e0 <I2C_MasterReceive_BTF+0x86>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d007      	beq.n	80051e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005206:	e08e      	b.n	8005326 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d176      	bne.n	8005300 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <I2C_MasterReceive_BTF+0xc4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b10      	cmp	r3, #16
 800521c:	d108      	bne.n	8005230 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e019      	b.n	8005264 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d002      	beq.n	800523c <I2C_MasterReceive_BTF+0xe2>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d108      	bne.n	800524e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e00a      	b.n	8005264 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b10      	cmp	r3, #16
 8005252:	d007      	beq.n	8005264 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005262:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80052be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d10a      	bne.n	80052ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fcba 	bl	8004c5c <HAL_I2C_MemRxCpltCallback>
}
 80052e8:	e01d      	b.n	8005326 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2212      	movs	r2, #18
 80052f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fc6f 	bl	8004bdc <HAL_I2C_MasterRxCpltCallback>
}
 80052fe:	e012      	b.n	8005326 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005326:	bf00      	nop
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <I2C_Master_SB>:
 8005f14:	e0bd      	b.n	8006092 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d129      	bne.n	8005f74 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d00a      	beq.n	8005f4c <I2C_MasterReceive_BTF+0x86>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d007      	beq.n	8005f4c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f72:	e08e      	b.n	8006092 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d176      	bne.n	800606c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d002      	beq.n	8005f8a <I2C_MasterReceive_BTF+0xc4>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b10      	cmp	r3, #16
 8005f88:	d108      	bne.n	8005f9c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	e019      	b.n	8005fd0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d002      	beq.n	8005fa8 <I2C_MasterReceive_BTF+0xe2>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d108      	bne.n	8005fba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e00a      	b.n	8005fd0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d007      	beq.n	8005fd0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800602a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d10a      	bne.n	8006056 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fcba 	bl	80059c8 <HAL_I2C_MemRxCpltCallback>
}
 8006054:	e01d      	b.n	8006092 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2212      	movs	r2, #18
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fc6f 	bl	8005948 <HAL_I2C_MasterRxCpltCallback>
}
 800606a:	e012      	b.n	8006092 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006092:	bf00      	nop
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d117      	bne.n	8005372 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800535a:	611a      	str	r2, [r3, #16]
 800609a:	b480      	push	{r7}
 800609c:	b083      	sub	sp, #12
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b40      	cmp	r3, #64	; 0x40
 80060ac:	d117      	bne.n	80060de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800535c:	e067      	b.n	800542e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	611a      	str	r2, [r3, #16]
}
 8005370:	e05d      	b.n	800542e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800537a:	d133      	bne.n	80053e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b21      	cmp	r3, #33	; 0x21
 8005386:	d109      	bne.n	800539c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	b2db      	uxtb	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005398:	611a      	str	r2, [r3, #16]
 800539a:	e008      	b.n	80053ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <I2C_Master_SB+0x92>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d032      	beq.n	800542e <I2C_Master_SB+0x100>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02d      	beq.n	800542e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e0:	605a      	str	r2, [r3, #4]
}
 80053e2:	e024      	b.n	800542e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	11db      	asrs	r3, r3, #7
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0306 	and.w	r3, r3, #6
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f063 030f 	orn	r3, r3, #15
 8005400:	b2da      	uxtb	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	611a      	str	r2, [r3, #16]
}
 8005408:	e011      	b.n	800542e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10d      	bne.n	800542e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	b29b      	uxth	r3, r3
 8005418:	11db      	asrs	r3, r3, #7
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 0306 	and.w	r3, r3, #6
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f063 030e 	orn	r3, r3, #14
 8005426:	b2da      	uxtb	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	611a      	str	r2, [r3, #16]
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <I2C_Master_ADD10>:
 80060c8:	e067      	b.n	800619a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	611a      	str	r2, [r3, #16]
}
 80060dc:	e05d      	b.n	800619a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060e6:	d133      	bne.n	8006150 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b21      	cmp	r3, #33	; 0x21
 80060f2:	d109      	bne.n	8006108 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006104:	611a      	str	r2, [r3, #16]
 8006106:	e008      	b.n	800611a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f043 0301 	orr.w	r3, r3, #1
 8006112:	b2da      	uxtb	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <I2C_Master_SB+0x92>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	2b00      	cmp	r3, #0
 8006132:	d032      	beq.n	800619a <I2C_Master_SB+0x100>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	2b00      	cmp	r3, #0
 800613c:	d02d      	beq.n	800619a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614c:	605a      	str	r2, [r3, #4]
}
 800614e:	e024      	b.n	800619a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10e      	bne.n	8006176 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	b29b      	uxth	r3, r3
 800615e:	11db      	asrs	r3, r3, #7
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f063 030f 	orn	r3, r3, #15
 800616c:	b2da      	uxtb	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	611a      	str	r2, [r3, #16]
}
 8006174:	e011      	b.n	800619a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10d      	bne.n	800619a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006182:	b29b      	uxth	r3, r3
 8006184:	11db      	asrs	r3, r3, #7
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 0306 	and.w	r3, r3, #6
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f063 030e 	orn	r3, r3, #14
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	611a      	str	r2, [r3, #16]
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	b2da      	uxtb	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <I2C_Master_ADD10+0x26>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00c      	beq.n	8005482 <I2C_Master_ADD10+0x48>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005480:	605a      	str	r2, [r3, #4]
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <I2C_Master_ADDR>:
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <I2C_Master_ADD10+0x26>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d108      	bne.n	80061de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <I2C_Master_ADD10+0x48>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ec:	605a      	str	r2, [r3, #4]
  }
}
 80061ee:	bf00      	nop
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800548e:	b480      	push	{r7}
 8005490:	b091      	sub	sp, #68	; 0x44
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b22      	cmp	r3, #34	; 0x22
 80054b6:	f040 8169 	bne.w	800578c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10f      	bne.n	80054e2 <I2C_Master_ADDR+0x54>
 80054c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d10b      	bne.n	80054e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ca:	2300      	movs	r3, #0
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	633b      	str	r3, [r7, #48]	; 0x30
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	e160      	b.n	80057a4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d11d      	bne.n	8005526 <I2C_Master_ADDR+0x98>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054f2:	d118      	bne.n	8005526 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005518:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	651a      	str	r2, [r3, #80]	; 0x50
 8005524:	e13e      	b.n	80057a4 <I2C_Master_ADDR+0x316>
 80061fa:	b480      	push	{r7}
 80061fc:	b091      	sub	sp, #68	; 0x44
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006208:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b22      	cmp	r3, #34	; 0x22
 8006222:	f040 8169 	bne.w	80064f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10f      	bne.n	800624e <I2C_Master_ADDR+0x54>
 800622e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d10b      	bne.n	800624e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006236:	2300      	movs	r3, #0
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	633b      	str	r3, [r7, #48]	; 0x30
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	633b      	str	r3, [r7, #48]	; 0x30
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	e160      	b.n	8006510 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11d      	bne.n	8006292 <I2C_Master_ADDR+0x98>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800625e:	d118      	bne.n	8006292 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006260:	2300      	movs	r3, #0
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006284:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	651a      	str	r2, [r3, #80]	; 0x50
 8006290:	e13e      	b.n	8006510 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d113      	bne.n	8005558 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005530:	2300      	movs	r3, #0
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	e115      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	f040 808a 	bne.w	8005678 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005566:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800556a:	d137      	bne.n	80055dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800557a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558a:	d113      	bne.n	80055b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800559a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	e0e7      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d113      	bne.n	80062c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800629c:	2300      	movs	r3, #0
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e115      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	f040 808a 	bne.w	80063e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80062d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062d6:	d137      	bne.n	8006348 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f6:	d113      	bne.n	8006320 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006306:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006308:	2300      	movs	r3, #0
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	627b      	str	r3, [r7, #36]	; 0x24
 800631c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631e:	e0e7      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b4:	2300      	movs	r3, #0
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	e0d3      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
 8006320:	2300      	movs	r3, #0
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	623b      	str	r3, [r7, #32]
 8006334:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e0d3      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d02e      	beq.n	8005640 <I2C_Master_ADDR+0x1b2>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d02b      	beq.n	8005640 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	2b12      	cmp	r3, #18
 80055ec:	d102      	bne.n	80055f4 <I2C_Master_ADDR+0x166>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d125      	bne.n	8005640 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00e      	beq.n	8005618 <I2C_Master_ADDR+0x18a>
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d00b      	beq.n	8005618 <I2C_Master_ADDR+0x18a>
 8005600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005602:	2b10      	cmp	r3, #16
 8005604:	d008      	beq.n	8005618 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e007      	b.n	8005628 <I2C_Master_ADDR+0x19a>
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	2b08      	cmp	r3, #8
 800634c:	d02e      	beq.n	80063ac <I2C_Master_ADDR+0x1b2>
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	2b20      	cmp	r3, #32
 8006352:	d02b      	beq.n	80063ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006356:	2b12      	cmp	r3, #18
 8006358:	d102      	bne.n	8006360 <I2C_Master_ADDR+0x166>
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b01      	cmp	r3, #1
 800635e:	d125      	bne.n	80063ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	2b04      	cmp	r3, #4
 8006364:	d00e      	beq.n	8006384 <I2C_Master_ADDR+0x18a>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	2b02      	cmp	r3, #2
 800636a:	d00b      	beq.n	8006384 <I2C_Master_ADDR+0x18a>
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	2b10      	cmp	r3, #16
 8006370:	d008      	beq.n	8006384 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e007      	b.n	8006394 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005626:	601a      	str	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006392:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	e0a1      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	e0a1      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	61bb      	str	r3, [r7, #24]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e085      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d14d      	bne.n	800571e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	2b04      	cmp	r3, #4
 8005686:	d016      	beq.n	80056b6 <I2C_Master_ADDR+0x228>
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	2b02      	cmp	r3, #2
 800568c:	d013      	beq.n	80056b6 <I2C_Master_ADDR+0x228>
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	2b10      	cmp	r3, #16
 8005692:	d010      	beq.n	80056b6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056b2:	601a      	str	r2, [r3, #0]
 80056b4:	e007      	b.n	80056c6 <I2C_Master_ADDR+0x238>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063bc:	2300      	movs	r3, #0
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	e085      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d14d      	bne.n	800648a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d016      	beq.n	8006422 <I2C_Master_ADDR+0x228>
 80063f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d013      	beq.n	8006422 <I2C_Master_ADDR+0x228>
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d010      	beq.n	8006422 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800640e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	e007      	b.n	8006432 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056c4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d117      	bne.n	8005706 <I2C_Master_ADDR+0x278>
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056dc:	d00b      	beq.n	80056f6 <I2C_Master_ADDR+0x268>
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d008      	beq.n	80056f6 <I2C_Master_ADDR+0x268>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d005      	beq.n	80056f6 <I2C_Master_ADDR+0x268>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d002      	beq.n	80056f6 <I2C_Master_ADDR+0x268>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d107      	bne.n	8005706 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005704:	605a      	str	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006430:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800643c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006440:	d117      	bne.n	8006472 <I2C_Master_ADDR+0x278>
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006448:	d00b      	beq.n	8006462 <I2C_Master_ADDR+0x268>
 800644a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644c:	2b01      	cmp	r3, #1
 800644e:	d008      	beq.n	8006462 <I2C_Master_ADDR+0x268>
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	2b08      	cmp	r3, #8
 8006454:	d005      	beq.n	8006462 <I2C_Master_ADDR+0x268>
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	2b10      	cmp	r3, #16
 800645a:	d002      	beq.n	8006462 <I2C_Master_ADDR+0x268>
 800645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645e:	2b20      	cmp	r3, #32
 8006460:	d107      	bne.n	8006472 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006470:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	e032      	b.n	8005784 <I2C_Master_ADDR+0x2f6>
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	e032      	b.n	80064f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800572c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800573c:	d117      	bne.n	800576e <I2C_Master_ADDR+0x2e0>
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005744:	d00b      	beq.n	800575e <I2C_Master_ADDR+0x2d0>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	2b01      	cmp	r3, #1
 800574a:	d008      	beq.n	800575e <I2C_Master_ADDR+0x2d0>
 800574c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574e:	2b08      	cmp	r3, #8
 8005750:	d005      	beq.n	800575e <I2C_Master_ADDR+0x2d0>
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2b10      	cmp	r3, #16
 8005756:	d002      	beq.n	800575e <I2C_Master_ADDR+0x2d0>
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	2b20      	cmp	r3, #32
 800575c:	d107      	bne.n	800576e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800576c:	605a      	str	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006498:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a8:	d117      	bne.n	80064da <I2C_Master_ADDR+0x2e0>
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064b0:	d00b      	beq.n	80064ca <I2C_Master_ADDR+0x2d0>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d008      	beq.n	80064ca <I2C_Master_ADDR+0x2d0>
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d005      	beq.n	80064ca <I2C_Master_ADDR+0x2d0>
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	2b10      	cmp	r3, #16
 80064c2:	d002      	beq.n	80064ca <I2C_Master_ADDR+0x2d0>
 80064c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	d107      	bne.n	80064da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576e:	2300      	movs	r3, #0
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	613b      	str	r3, [r7, #16]
 8005782:	693b      	ldr	r3, [r7, #16]
 80064da:	2300      	movs	r3, #0
 80064dc:	613b      	str	r3, [r7, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	651a      	str	r2, [r3, #80]	; 0x50
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800578a:	e00b      	b.n	80057a4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578c:	2300      	movs	r3, #0
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	e7ff      	b.n	80057a4 <I2C_Master_ADDR+0x316>
 80057a4:	bf00      	nop
 80057a6:	3744      	adds	r7, #68	; 0x44
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <I2C_SlaveTransmit_TXE>:
 80064f6:	e00b      	b.n	8006510 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f8:	2300      	movs	r3, #0
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
}
 800650e:	e7ff      	b.n	8006510 <I2C_Master_ADDR+0x316>
 8006510:	bf00      	nop
 8006512:	3744      	adds	r7, #68	; 0x44
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d02b      	beq.n	8005822 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	781a      	ldrb	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d114      	bne.n	8005822 <I2C_SlaveTransmit_TXE+0x72>
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b29      	cmp	r3, #41	; 0x29
 80057fc:	d111      	bne.n	8005822 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2221      	movs	r2, #33	; 0x21
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2228      	movs	r2, #40	; 0x28
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800652a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02b      	beq.n	800658e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	781a      	ldrb	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	3b01      	subs	r3, #1
 8006554:	b29a      	uxth	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d114      	bne.n	800658e <I2C_SlaveTransmit_TXE+0x72>
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b29      	cmp	r3, #41	; 0x29
 8006568:	d111      	bne.n	800658e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006578:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2221      	movs	r2, #33	; 0x21
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2228      	movs	r2, #40	; 0x28
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff f9e7 	bl	8004bf0 <HAL_I2C_SlaveTxCpltCallback>
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff f9e7 	bl	800595c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <I2C_SlaveTransmit_BTF>:
 800658e:	bf00      	nop
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	2b00      	cmp	r3, #0
 800583a:	d011      	beq.n	8005860 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	781a      	ldrb	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <I2C_SlaveReceive_RXNE>:
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d011      	beq.n	80065cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	781a      	ldrb	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02c      	beq.n	80058e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	3b01      	subs	r3, #1
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d114      	bne.n	80058e0 <I2C_SlaveReceive_RXNE+0x74>
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b2a      	cmp	r3, #42	; 0x2a
 80058ba:	d111      	bne.n	80058e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2222      	movs	r2, #34	; 0x22
 80058d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2228      	movs	r2, #40	; 0x28
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02c      	beq.n	800664c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d114      	bne.n	800664c <I2C_SlaveReceive_RXNE+0x74>
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b2a      	cmp	r3, #42	; 0x2a
 8006626:	d111      	bne.n	800664c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006636:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2222      	movs	r2, #34	; 0x22
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2228      	movs	r2, #40	; 0x28
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff f992 	bl	8004c04 <HAL_I2C_SlaveRxCpltCallback>
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff f992 	bl	8005970 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_SlaveReceive_BTF>:
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <I2C_Slave_ADDR>:
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29b      	uxth	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d012      	beq.n	800668c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005936:	2300      	movs	r3, #0
 8005938:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005946:	2b28      	cmp	r3, #40	; 0x28
 8005948:	d125      	bne.n	8005996 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	81bb      	strh	r3, [r7, #12]
 8005978:	e002      	b.n	8005980 <I2C_Slave_ADDR+0x54>
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80066b2:	2b28      	cmp	r3, #40	; 0x28
 80066b4:	d127      	bne.n	8006706 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	089b      	lsrs	r3, r3, #2
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	09db      	lsrs	r3, r3, #7
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d103      	bne.n	80066ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	81bb      	strh	r3, [r7, #12]
 80066e8:	e002      	b.n	80066f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	81bb      	strh	r3, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005988:	89ba      	ldrh	r2, [r7, #12]
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff f942 	bl	8004c18 <HAL_I2C_AddrCallback>
 80066f8:	89ba      	ldrh	r2, [r7, #12]
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff f940 	bl	8005984 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005994:	e00e      	b.n	80059b4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005996:	2300      	movs	r3, #0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <I2C_Slave_STOPF>:
 8006704:	e00e      	b.n	8006724 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80059dc:	2300      	movs	r3, #0
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	60bb      	str	r3, [r7, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a18:	d172      	bne.n	8005b00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	2b22      	cmp	r3, #34	; 0x22
 8005a1e:	d002      	beq.n	8005a26 <I2C_Slave_STOPF+0x6a>
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b2a      	cmp	r3, #42	; 0x2a
 8005a24:	d135      	bne.n	8005a92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d005      	beq.n	8005a4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800673a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800674a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800674c:	2300      	movs	r3, #0
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006778:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006788:	d172      	bne.n	8006870 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800678a:	7bfb      	ldrb	r3, [r7, #15]
 800678c:	2b22      	cmp	r3, #34	; 0x22
 800678e:	d002      	beq.n	8006796 <I2C_Slave_STOPF+0x6a>
 8006790:	7bfb      	ldrb	r3, [r7, #15]
 8006792:	2b2a      	cmp	r3, #42	; 0x2a
 8006794:	d135      	bne.n	8006802 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f043 0204 	orr.w	r2, r3, #4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fd ffb8 	bl	80039d4 <HAL_DMA_GetState>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d049      	beq.n	8005afe <I2C_Slave_STOPF+0x142>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd ff90 	bl	80046f4 <HAL_DMA_GetState>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d049      	beq.n	800686e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	4a69      	ldr	r2, [pc, #420]	; (8005c14 <I2C_Slave_STOPF+0x258>)
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fd fe00 	bl	800367c <HAL_DMA_Abort_IT>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d03d      	beq.n	8005afe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a90:	e035      	b.n	8005afe <I2C_Slave_STOPF+0x142>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	4a69      	ldr	r2, [pc, #420]	; (8006984 <I2C_Slave_STOPF+0x258>)
 80067e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fd fdd8 	bl	800439c <HAL_DMA_Abort_IT>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d03d      	beq.n	800686e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006800:	e035      	b.n	800686e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	b29a      	uxth	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681e:	f043 0204 	orr.w	r2, r3, #4
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fd ff82 	bl	80039d4 <HAL_DMA_GetState>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d014      	beq.n	8005b00 <I2C_Slave_STOPF+0x144>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006834:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd ff5a 	bl	80046f4 <HAL_DMA_GetState>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d014      	beq.n	8006870 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ada:	4a4e      	ldr	r2, [pc, #312]	; (8005c14 <I2C_Slave_STOPF+0x258>)
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fd fdca 	bl	800367c <HAL_DMA_Abort_IT>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005af8:	4610      	mov	r0, r2
 8005afa:	4798      	blx	r3
 8005afc:	e000      	b.n	8005b00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005afe:	bf00      	nop
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	4a4e      	ldr	r2, [pc, #312]	; (8006984 <I2C_Slave_STOPF+0x258>)
 800684c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd fda2 	bl	800439c <HAL_DMA_Abort_IT>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006868:	4610      	mov	r0, r2
 800686a:	4798      	blx	r3
 800686c:	e000      	b.n	8006870 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800686e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d03e      	beq.n	8005b88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d112      	bne.n	8005b3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691a      	ldr	r2, [r3, #16]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d03e      	beq.n	80068f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d112      	bne.n	80068ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d112      	bne.n	8005b72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	f043 0204 	orr.w	r2, r3, #4
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d112      	bne.n	80068e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f043 0204 	orr.w	r2, r3, #4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8b3 	bl	8005cfc <I2C_ITError>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f8b3 	bl	8006a6c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b96:	e039      	b.n	8005c0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b9c:	d109      	bne.n	8005bb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2228      	movs	r2, #40	; 0x28
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff f829 	bl	8004c04 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b28      	cmp	r3, #40	; 0x28
 8005bbc:	d111      	bne.n	8005be2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <I2C_Slave_STOPF+0x25c>)
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff f82a 	bl	8004c34 <HAL_I2C_ListenCpltCallback>
}
 8005be0:	e014      	b.n	8005c0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	2b22      	cmp	r3, #34	; 0x22
 8005be8:	d002      	beq.n	8005bf0 <I2C_Slave_STOPF+0x234>
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b22      	cmp	r3, #34	; 0x22
 8005bee:	d10d      	bne.n	8005c0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fe fffc 	bl	8004c04 <HAL_I2C_SlaveRxCpltCallback>
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	0800625d 	.word	0x0800625d
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_Slave_AF>:
 8006906:	e039      	b.n	800697c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b2a      	cmp	r3, #42	; 0x2a
 800690c:	d109      	bne.n	8006922 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2228      	movs	r2, #40	; 0x28
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff f827 	bl	8005970 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b28      	cmp	r3, #40	; 0x28
 800692c:	d111      	bne.n	8006952 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <I2C_Slave_STOPF+0x25c>)
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff f828 	bl	80059a0 <HAL_I2C_ListenCpltCallback>
}
 8006950:	e014      	b.n	800697c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	2b22      	cmp	r3, #34	; 0x22
 8006958:	d002      	beq.n	8006960 <I2C_Slave_STOPF+0x234>
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b22      	cmp	r3, #34	; 0x22
 800695e:	d10d      	bne.n	800697c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fe fffa 	bl	8005970 <HAL_I2C_SlaveRxCpltCallback>
}
 800697c:	bf00      	nop
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	08006fcd 	.word	0x08006fcd
 8006988:	ffff0000 	.word	0xffff0000

0800698c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d002      	beq.n	8005c3e <I2C_Slave_AF+0x22>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d129      	bne.n	8005c92 <I2C_Slave_AF+0x76>
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b28      	cmp	r3, #40	; 0x28
 8005c42:	d126      	bne.n	8005c92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <I2C_Slave_AF+0xdc>)
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2220      	movs	r2, #32
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d002      	beq.n	80069ae <I2C_Slave_AF+0x22>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d129      	bne.n	8006a02 <I2C_Slave_AF+0x76>
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b28      	cmp	r3, #40	; 0x28
 80069b2:	d126      	bne.n	8006a02 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <I2C_Slave_AF+0xdc>)
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fe ffd2 	bl	8004c34 <HAL_I2C_ListenCpltCallback>
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7fe ffd0 	bl	80059a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c90:	e02e      	b.n	8005cf0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	2b21      	cmp	r3, #33	; 0x21
 8005c96:	d126      	bne.n	8005ce6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <I2C_Slave_AF+0xdc>)
 8005c9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2221      	movs	r2, #33	; 0x21
 8005ca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ccc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fe ff86 	bl	8004bf0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ce4:	e004      	b.n	8005cf0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cee:	615a      	str	r2, [r3, #20]
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	ffff0000 	.word	0xffff0000

08005cfc <I2C_ITError>:
 8006a00:	e02e      	b.n	8006a60 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	2b21      	cmp	r3, #33	; 0x21
 8006a06:	d126      	bne.n	8006a56 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a17      	ldr	r2, [pc, #92]	; (8006a68 <I2C_Slave_AF+0xdc>)
 8006a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2221      	movs	r2, #33	; 0x21
 8006a12:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a32:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a3c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fe ff84 	bl	800595c <HAL_I2C_SlaveTxCpltCallback>
}
 8006a54:	e004      	b.n	8006a60 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a5e:	615a      	str	r2, [r3, #20]
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	ffff0000 	.word	0xffff0000

08006a6c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	2b10      	cmp	r3, #16
 8005d18:	d002      	beq.n	8005d20 <I2C_ITError+0x24>
 8005d1a:	7bbb      	ldrb	r3, [r7, #14]
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d10a      	bne.n	8005d36 <I2C_ITError+0x3a>
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b22      	cmp	r3, #34	; 0x22
 8005d24:	d107      	bne.n	8005d36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d3c:	2b28      	cmp	r3, #40	; 0x28
 8005d3e:	d107      	bne.n	8005d50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2228      	movs	r2, #40	; 0x28
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d4e:	e015      	b.n	8005d7c <I2C_ITError+0x80>
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	2b10      	cmp	r3, #16
 8006a88:	d002      	beq.n	8006a90 <I2C_ITError+0x24>
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d10a      	bne.n	8006aa6 <I2C_ITError+0x3a>
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b22      	cmp	r3, #34	; 0x22
 8006a94:	d107      	bne.n	8006aa6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aac:	2b28      	cmp	r3, #40	; 0x28
 8006aae:	d107      	bne.n	8006ac0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2228      	movs	r2, #40	; 0x28
 8006aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006abe:	e015      	b.n	8006aec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d5e:	d00a      	beq.n	8005d76 <I2C_ITError+0x7a>
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b60      	cmp	r3, #96	; 0x60
 8005d64:	d007      	beq.n	8005d76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ace:	d00a      	beq.n	8006ae6 <I2C_ITError+0x7a>
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b60      	cmp	r3, #96	; 0x60
 8006ad4:	d007      	beq.n	8006ae6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8a:	d162      	bne.n	8005e52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d020      	beq.n	8005dec <I2C_ITError+0xf0>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006afa:	d162      	bne.n	8006bc2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b0a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d020      	beq.n	8006b5c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	4a6a      	ldr	r2, [pc, #424]	; (8005f58 <I2C_ITError+0x25c>)
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fd fc60 	bl	800367c <HAL_DMA_Abort_IT>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8089 	beq.w	8005ed6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005de6:	4610      	mov	r0, r2
 8005de8:	4798      	blx	r3
 8005dea:	e074      	b.n	8005ed6 <I2C_ITError+0x1da>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	4a6a      	ldr	r2, [pc, #424]	; (8006cc8 <I2C_ITError+0x25c>)
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fd fc38 	bl	800439c <HAL_DMA_Abort_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8089 	beq.w	8006c46 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b56:	4610      	mov	r0, r2
 8006b58:	4798      	blx	r3
 8006b5a:	e074      	b.n	8006c46 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	4a59      	ldr	r2, [pc, #356]	; (8005f58 <I2C_ITError+0x25c>)
 8005df2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fd fc3f 	bl	800367c <HAL_DMA_Abort_IT>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d068      	beq.n	8005ed6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d10b      	bne.n	8005e2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	691a      	ldr	r2, [r3, #16]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	4a59      	ldr	r2, [pc, #356]	; (8006cc8 <I2C_ITError+0x25c>)
 8006b62:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fd fc17 	bl	800439c <HAL_DMA_Abort_IT>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d068      	beq.n	8006c46 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d10b      	bne.n	8006b9a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	e041      	b.n	8005ed6 <I2C_ITError+0x1da>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4798      	blx	r3
 8006bc0:	e041      	b.n	8006c46 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b60      	cmp	r3, #96	; 0x60
 8005e5c:	d125      	bne.n	8005eaa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d10b      	bne.n	8005e92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	b2d2      	uxtb	r2, r2
 8005e86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b60      	cmp	r3, #96	; 0x60
 8006bcc:	d125      	bne.n	8006c1a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d10b      	bne.n	8006c02 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0201 	bic.w	r2, r2, #1
 8006c10:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fe feee 	bl	8004c84 <HAL_I2C_AbortCpltCallback>
 8005ea8:	e015      	b.n	8005ed6 <I2C_ITError+0x1da>
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fe feec 	bl	80059f0 <HAL_I2C_AbortCpltCallback>
 8006c18:	e015      	b.n	8006c46 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb4:	2b40      	cmp	r3, #64	; 0x40
 8005eb6:	d10b      	bne.n	8005ed0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b40      	cmp	r3, #64	; 0x40
 8006c26:	d10b      	bne.n	8006c40 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691a      	ldr	r2, [r3, #16]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	b2d2      	uxtb	r2, r2
 8006c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fe fecd 	bl	8004c70 <HAL_I2C_ErrorCallback>
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f7fe fecb 	bl	80059dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10e      	bne.n	8005f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d109      	bne.n	8005f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f12:	605a      	str	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10e      	bne.n	8006c74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c82:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d113      	bne.n	8005f50 <I2C_ITError+0x254>
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b28      	cmp	r3, #40	; 0x28
 8005f2c:	d110      	bne.n	8005f50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a0a      	ldr	r2, [pc, #40]	; (8005f5c <I2C_ITError+0x260>)
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c8a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b04      	cmp	r3, #4
 8006c96:	d113      	bne.n	8006cc0 <I2C_ITError+0x254>
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	2b28      	cmp	r3, #40	; 0x28
 8006c9c:	d110      	bne.n	8006cc0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a0a      	ldr	r2, [pc, #40]	; (8006ccc <I2C_ITError+0x260>)
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fe fe72 	bl	8004c34 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	0800625d 	.word	0x0800625d
 8005f5c:	ffff0000 	.word	0xffff0000

08005f60 <I2C_RequestMemoryWrite>:
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fe fe70 	bl	80059a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	08006fcd 	.word	0x08006fcd
 8006ccc:	ffff0000 	.word	0xffff0000

08006cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	817b      	strh	r3, [r7, #10]
 8005f72:	460b      	mov	r3, r1
 8005f74:	813b      	strh	r3, [r7, #8]
 8005f76:	4613      	mov	r3, r2
 8005f78:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 fa08 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00d      	beq.n	8005fbe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb0:	d103      	bne.n	8005fba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e05f      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	817b      	strh	r3, [r7, #10]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	813b      	strh	r3, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 fa08 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00d      	beq.n	8006d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d20:	d103      	bne.n	8006d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e05f      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	492d      	ldr	r1, [pc, #180]	; (8006088 <I2C_RequestMemoryWrite+0x128>)
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 fa40 	bl	800645a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e04c      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
 8006d2e:	897b      	ldrh	r3, [r7, #10]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	6a3a      	ldr	r2, [r7, #32]
 8006d42:	492d      	ldr	r1, [pc, #180]	; (8006df8 <I2C_RequestMemoryWrite+0x128>)
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fa40 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d001      	beq.n	8006d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e04c      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	6a39      	ldr	r1, [r7, #32]
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 faaa 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b04      	cmp	r3, #4
 8006010:	d107      	bne.n	8006022 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006020:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e02b      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6c:	6a39      	ldr	r1, [r7, #32]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 faaa 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00d      	beq.n	8006d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d107      	bne.n	8006d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e02b      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800602c:	893b      	ldrh	r3, [r7, #8]
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	e021      	b.n	800607c <I2C_RequestMemoryWrite+0x11c>
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d105      	bne.n	8006da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d9c:	893b      	ldrh	r3, [r7, #8]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	611a      	str	r2, [r3, #16]
 8006da6:	e021      	b.n	8006dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006038:	893b      	ldrh	r3, [r7, #8]
 800603a:	0a1b      	lsrs	r3, r3, #8
 800603c:	b29b      	uxth	r3, r3
 800603e:	b2da      	uxtb	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006048:	6a39      	ldr	r1, [r7, #32]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fa84 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	2b04      	cmp	r3, #4
 800605c:	d107      	bne.n	800606e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800606c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e005      	b.n	800607e <I2C_RequestMemoryWrite+0x11e>
 8006da8:	893b      	ldrh	r3, [r7, #8]
 8006daa:	0a1b      	lsrs	r3, r3, #8
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6a39      	ldr	r1, [r7, #32]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fa84 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00d      	beq.n	8006de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d107      	bne.n	8006dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e005      	b.n	8006dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006072:	893b      	ldrh	r3, [r7, #8]
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	00010002 	.word	0x00010002

0800608c <I2C_RequestMemoryRead>:
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	00010002 	.word	0x00010002

08006dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	4603      	mov	r3, r0
 800609c:	817b      	strh	r3, [r7, #10]
 800609e:	460b      	mov	r3, r1
 80060a0:	813b      	strh	r3, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f96a 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00d      	beq.n	80060fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ec:	d103      	bne.n	80060f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0aa      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	817b      	strh	r3, [r7, #10]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	813b      	strh	r3, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 f96a 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00d      	beq.n	8006e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5c:	d103      	bne.n	8006e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e0aa      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060fa:	897b      	ldrh	r3, [r7, #10]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	461a      	mov	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006108:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	4952      	ldr	r1, [pc, #328]	; (8006258 <I2C_RequestMemoryRead+0x1cc>)
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f9a2 	bl	800645a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e097      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	461a      	mov	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	6a3a      	ldr	r2, [r7, #32]
 8006e7e:	4952      	ldr	r1, [pc, #328]	; (8006fc8 <I2C_RequestMemoryRead+0x1cc>)
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f9a2 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e097      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006120:	2300      	movs	r3, #0
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	617b      	str	r3, [r7, #20]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6a39      	ldr	r1, [r7, #32]
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fa0c 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614a:	2b04      	cmp	r3, #4
 800614c:	d107      	bne.n	800615e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e076      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006e90:	2300      	movs	r3, #0
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea8:	6a39      	ldr	r1, [r7, #32]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fa0c 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d107      	bne.n	8006ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e076      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d105      	bne.n	8006174 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	611a      	str	r2, [r3, #16]
 8006172:	e021      	b.n	80061b8 <I2C_RequestMemoryRead+0x12c>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d105      	bne.n	8006ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ed8:	893b      	ldrh	r3, [r7, #8]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	611a      	str	r2, [r3, #16]
 8006ee2:	e021      	b.n	8006f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	b29b      	uxth	r3, r3
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006184:	6a39      	ldr	r1, [r7, #32]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f9e6 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b04      	cmp	r3, #4
 8006198:	d107      	bne.n	80061aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e050      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006ee4:	893b      	ldrh	r3, [r7, #8]
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f9e6 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d107      	bne.n	8006f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e050      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ae:	893b      	ldrh	r3, [r7, #8]
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]
 8006f1e:	893b      	ldrh	r3, [r7, #8]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	6a39      	ldr	r1, [r7, #32]
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f9cb 	bl	8006558 <I2C_WaitOnTXEFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d107      	bne.n	80061e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e035      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	6a39      	ldr	r1, [r7, #32]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f9cb 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d107      	bne.n	8006f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e035      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f8d3 	bl	80063ac <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621a:	d103      	bne.n	8006224 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e013      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f8d3 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00d      	beq.n	8006f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d103      	bne.n	8006f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e013      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006228:	897b      	ldrh	r3, [r7, #10]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	4906      	ldr	r1, [pc, #24]	; (8006258 <I2C_RequestMemoryRead+0x1cc>)
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f90b 	bl	800645a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	00010002 	.word	0x00010002

0800625c <I2C_DMAAbort>:
 8006f98:	897b      	ldrh	r3, [r7, #10]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f043 0301 	orr.w	r3, r3, #1
 8006fa0:	b2da      	uxtb	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	6a3a      	ldr	r2, [r7, #32]
 8006fac:	4906      	ldr	r1, [pc, #24]	; (8006fc8 <I2C_RequestMemoryRead+0x1cc>)
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 f90b 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e000      	b.n	8006fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	00010002 	.word	0x00010002

08006fcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	74fb      	strb	r3, [r7, #19]
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fe4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006276:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <I2C_DMAAbort+0x148>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	08db      	lsrs	r3, r3, #3
 800627c:	4a4a      	ldr	r2, [pc, #296]	; (80063a8 <I2C_DMAAbort+0x14c>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	0a1a      	lsrs	r2, r3, #8
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00da      	lsls	r2, r3, #3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80062a2:	e00a      	b.n	80062ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d0ea      	beq.n	8006290 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	2200      	movs	r2, #0
 80062c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	2200      	movs	r2, #0
 80062d8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006fe6:	4b4b      	ldr	r3, [pc, #300]	; (8007114 <I2C_DMAAbort+0x148>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	08db      	lsrs	r3, r3, #3
 8006fec:	4a4a      	ldr	r2, [pc, #296]	; (8007118 <I2C_DMAAbort+0x14c>)
 8006fee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff2:	0a1a      	lsrs	r2, r3, #8
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	00da      	lsls	r2, r3, #3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d106      	bne.n	8007014 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f043 0220 	orr.w	r2, r3, #32
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007012:	e00a      	b.n	800702a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3b01      	subs	r3, #1
 8007018:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d0ea      	beq.n	8007000 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	2200      	movs	r2, #0
 8007038:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	2200      	movs	r2, #0
 8007048:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	2200      	movs	r2, #0
 80062fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	2200      	movs	r2, #0
 800630e:	651a      	str	r2, [r3, #80]	; 0x50
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007058:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2200      	movs	r2, #0
 800705e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706c:	2200      	movs	r2, #0
 800706e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707c:	2200      	movs	r2, #0
 800707e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b60      	cmp	r3, #96	; 0x60
 800632a:	d10e      	bne.n	800634a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2220      	movs	r2, #32
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2200      	movs	r2, #0
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b60      	cmp	r3, #96	; 0x60
 800709a:	d10e      	bne.n	80070ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2200      	movs	r2, #0
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006342:	6978      	ldr	r0, [r7, #20]
 8006344:	f7fe fc9e 	bl	8004c84 <HAL_I2C_AbortCpltCallback>
 80070b2:	6978      	ldr	r0, [r7, #20]
 80070b4:	f7fe fc9c 	bl	80059f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006348:	e027      	b.n	800639a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006350:	2b28      	cmp	r3, #40	; 0x28
 8006352:	d117      	bne.n	8006384 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006372:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2200      	movs	r2, #0
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	2228      	movs	r2, #40	; 0x28
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006382:	e007      	b.n	8006394 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006394:	6978      	ldr	r0, [r7, #20]
 8006396:	f7fe fc6b 	bl	8004c70 <HAL_I2C_ErrorCallback>
}
 800639a:	bf00      	nop
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000004 	.word	0x20000004
 80063a8:	14f8b589 	.word	0x14f8b589

080063ac <I2C_WaitOnFlagUntilTimeout>:
 80070b8:	e027      	b.n	800710a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ba:	7cfb      	ldrb	r3, [r7, #19]
 80070bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80070c0:	2b28      	cmp	r3, #40	; 0x28
 80070c2:	d117      	bne.n	80070f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2200      	movs	r2, #0
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2228      	movs	r2, #40	; 0x28
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070f2:	e007      	b.n	8007104 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2220      	movs	r2, #32
 80070f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007104:	6978      	ldr	r0, [r7, #20]
 8007106:	f7fe fc69 	bl	80059dc <HAL_I2C_ErrorCallback>
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000004 	.word	0x20000004
 8007118:	14f8b589 	.word	0x14f8b589

0800711c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063bc:	e025      	b.n	800640a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c4:	d021      	beq.n	800640a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c6:	f7fc fa0f 	bl	80027e8 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d116      	bne.n	800640a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f043 0220 	orr.w	r2, r3, #32
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e023      	b.n	8006452 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	0c1b      	lsrs	r3, r3, #16
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b01      	cmp	r3, #1
 8006412:	d10d      	bne.n	8006430 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	43da      	mvns	r2, r3
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	4013      	ands	r3, r2
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	bf0c      	ite	eq
 8006426:	2301      	moveq	r3, #1
 8006428:	2300      	movne	r3, #0
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	e00c      	b.n	800644a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	43da      	mvns	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4013      	ands	r3, r2
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	429a      	cmp	r2, r3
 800644e:	d0b6      	beq.n	80063be <I2C_WaitOnFlagUntilTimeout+0x12>
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800712c:	e025      	b.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d021      	beq.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007136:	f7fc f9e7 	bl	8003508 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d302      	bcc.n	800714c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d116      	bne.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e023      	b.n	80071c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10d      	bne.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	43da      	mvns	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4013      	ands	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf0c      	ite	eq
 8007196:	2301      	moveq	r3, #1
 8007198:	2300      	movne	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	e00c      	b.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	43da      	mvns	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0b6      	beq.n	800712e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006468:	e051      	b.n	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006478:	d123      	bne.n	80064c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006488:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006492:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f043 0204 	orr.w	r2, r3, #4
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e046      	b.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071d8:	e051      	b.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e8:	d123      	bne.n	8007232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f043 0204 	orr.w	r2, r3, #4
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e046      	b.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c8:	d021      	beq.n	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ca:	f7fc f98d 	bl	80027e8 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d302      	bcc.n	80064e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d116      	bne.n	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e020      	b.n	8006550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	0c1b      	lsrs	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d10c      	bne.n	8006532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	43da      	mvns	r2, r3
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4013      	ands	r3, r2
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	bf14      	ite	ne
 800652a:	2301      	movne	r3, #1
 800652c:	2300      	moveq	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	e00b      	b.n	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	43da      	mvns	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d18d      	bne.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007238:	d021      	beq.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723a:	f7fc f965 	bl	8003508 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d116      	bne.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e020      	b.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d10c      	bne.n	80072a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	43da      	mvns	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4013      	ands	r3, r2
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf14      	ite	ne
 800729a:	2301      	movne	r3, #1
 800729c:	2300      	moveq	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	e00b      	b.n	80072ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	43da      	mvns	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d18d      	bne.n	80071da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <I2C_WaitOnTXEFlagUntilTimeout>:
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006564:	e02d      	b.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f900 	bl	800676c <I2C_IsAcknowledgeFailed>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e02d      	b.n	80065d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072d4:	e02d      	b.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f900 	bl	80074dc <I2C_IsAcknowledgeFailed>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02d      	b.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800657c:	d021      	beq.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fc f933 	bl	80027e8 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d116      	bne.n	80065c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e007      	b.n	80065d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b80      	cmp	r3, #128	; 0x80
 80065ce:	d1ca      	bne.n	8006566 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d021      	beq.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fc f90b 	bl	8003508 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d116      	bne.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e007      	b.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d1ca      	bne.n	80072d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <I2C_WaitOnBTFFlagUntilTimeout>:
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065e6:	e02d      	b.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f8bf 	bl	800676c <I2C_IsAcknowledgeFailed>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e02d      	b.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007356:	e02d      	b.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f8bf 	bl	80074dc <I2C_IsAcknowledgeFailed>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e02d      	b.n	80073c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065fe:	d021      	beq.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006600:	f7fc f8f2 	bl	80027e8 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	429a      	cmp	r2, r3
 800660e:	d302      	bcc.n	8006616 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d116      	bne.n	8006644 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	f043 0220 	orr.w	r2, r3, #32
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e007      	b.n	8006654 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0304 	and.w	r3, r3, #4
 800664e:	2b04      	cmp	r3, #4
 8006650:	d1ca      	bne.n	80065e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d021      	beq.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007370:	f7fc f8ca 	bl	8003508 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d116      	bne.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	f043 0220 	orr.w	r2, r3, #32
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e007      	b.n	80073c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d1ca      	bne.n	8007358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <I2C_WaitOnSTOPRequestThroughIT>:
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006668:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	4a13      	ldr	r2, [pc, #76]	; (80066bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006670:	fba2 2303 	umull	r2, r3, r2, r3
 8006674:	0a1a      	lsrs	r2, r3, #8
 8006676:	4613      	mov	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b01      	subs	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d107      	bne.n	800669a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e008      	b.n	80066ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a8:	d0e9      	beq.n	800667e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	20000004 	.word	0x20000004
 80066bc:	14f8b589 	.word	0x14f8b589

080066c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80073d8:	4b13      	ldr	r3, [pc, #76]	; (8007428 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	0a1a      	lsrs	r2, r3, #8
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f043 0220 	orr.w	r2, r3, #32
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e008      	b.n	800741c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007418:	d0e9      	beq.n	80073ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20000004 	.word	0x20000004
 800742c:	14f8b589 	.word	0x14f8b589

08007430 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066cc:	e042      	b.n	8006754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d119      	bne.n	8006710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0210 	mvn.w	r2, #16
 80066e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e029      	b.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800743c:	e042      	b.n	80074c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b10      	cmp	r3, #16
 800744a:	d119      	bne.n	8007480 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f06f 0210 	mvn.w	r2, #16
 8007454:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e029      	b.n	80074d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006710:	f7fc f86a 	bl	80027e8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d116      	bne.n	8006754 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e007      	b.n	8006764 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d1b5      	bne.n	80066ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <I2C_IsAcknowledgeFailed>:
 8007480:	f7fc f842 	bl	8003508 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	429a      	cmp	r2, r3
 800748e:	d302      	bcc.n	8007496 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d116      	bne.n	80074c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2220      	movs	r2, #32
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	f043 0220 	orr.w	r2, r3, #32
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e007      	b.n	80074d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d1b5      	bne.n	800743e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006782:	d11b      	bne.n	80067bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800678c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	f043 0204 	orr.w	r2, r3, #4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <I2C_ConvertOtherXferOptions>:
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074f2:	d11b      	bne.n	800752c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	f043 0204 	orr.w	r2, r3, #4
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80067da:	d103      	bne.n	80067e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800754a:	d103      	bne.n	8007554 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80067e2:	e007      	b.n	80067f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80067ec:	d102      	bne.n	80067f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2208      	movs	r2, #8
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_RCC_OscConfig>:
 8007552:	e007      	b.n	8007564 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800755c:	d102      	bne.n	8007564 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2208      	movs	r2, #8
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e267      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e267      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d075      	beq.n	800690a <HAL_RCC_OscConfig+0x10a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d075      	beq.n	800767a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800681e:	4b88      	ldr	r3, [pc, #544]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b04      	cmp	r3, #4
 8006828:	d00c      	beq.n	8006844 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800682a:	4b85      	ldr	r3, [pc, #532]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006832:	2b08      	cmp	r3, #8
 8006834:	d112      	bne.n	800685c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006836:	4b82      	ldr	r3, [pc, #520]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006842:	d10b      	bne.n	800685c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006844:	4b7e      	ldr	r3, [pc, #504]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d05b      	beq.n	8006908 <HAL_RCC_OscConfig+0x108>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d157      	bne.n	8006908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e242      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 800758e:	4b88      	ldr	r3, [pc, #544]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 030c 	and.w	r3, r3, #12
 8007596:	2b04      	cmp	r3, #4
 8007598:	d00c      	beq.n	80075b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800759a:	4b85      	ldr	r3, [pc, #532]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075a2:	2b08      	cmp	r3, #8
 80075a4:	d112      	bne.n	80075cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075a6:	4b82      	ldr	r3, [pc, #520]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075b2:	d10b      	bne.n	80075cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075b4:	4b7e      	ldr	r3, [pc, #504]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d05b      	beq.n	8007678 <HAL_RCC_OscConfig+0x108>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d157      	bne.n	8007678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e242      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006864:	d106      	bne.n	8006874 <HAL_RCC_OscConfig+0x74>
 8006866:	4b76      	ldr	r3, [pc, #472]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a75      	ldr	r2, [pc, #468]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800686c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e01d      	b.n	80068b0 <HAL_RCC_OscConfig+0xb0>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0x98>
 800687e:	4b70      	ldr	r3, [pc, #448]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a6f      	ldr	r2, [pc, #444]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b6d      	ldr	r3, [pc, #436]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a6c      	ldr	r2, [pc, #432]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e00b      	b.n	80068b0 <HAL_RCC_OscConfig+0xb0>
 8006898:	4b69      	ldr	r3, [pc, #420]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a68      	ldr	r2, [pc, #416]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800689e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a65      	ldr	r2, [pc, #404]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80068aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d013      	beq.n	80068e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fb ff96 	bl	80027e8 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fb ff92 	bl	80027e8 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e207      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	4b5b      	ldr	r3, [pc, #364]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0xc0>
 80068de:	e014      	b.n	800690a <HAL_RCC_OscConfig+0x10a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d4:	d106      	bne.n	80075e4 <HAL_RCC_OscConfig+0x74>
 80075d6:	4b76      	ldr	r3, [pc, #472]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a75      	ldr	r2, [pc, #468]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e01d      	b.n	8007620 <HAL_RCC_OscConfig+0xb0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075ec:	d10c      	bne.n	8007608 <HAL_RCC_OscConfig+0x98>
 80075ee:	4b70      	ldr	r3, [pc, #448]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a6f      	ldr	r2, [pc, #444]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	4b6d      	ldr	r3, [pc, #436]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a6c      	ldr	r2, [pc, #432]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	e00b      	b.n	8007620 <HAL_RCC_OscConfig+0xb0>
 8007608:	4b69      	ldr	r3, [pc, #420]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a68      	ldr	r2, [pc, #416]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800760e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4b66      	ldr	r3, [pc, #408]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a65      	ldr	r2, [pc, #404]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800761a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d013      	beq.n	8007650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007628:	f7fb ff6e 	bl	8003508 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007630:	f7fb ff6a 	bl	8003508 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	; 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e207      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007642:	4b5b      	ldr	r3, [pc, #364]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0f0      	beq.n	8007630 <HAL_RCC_OscConfig+0xc0>
 800764e:	e014      	b.n	800767a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fb ff82 	bl	80027e8 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068e8:	f7fb ff7e 	bl	80027e8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	; 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1f3      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fa:	4b51      	ldr	r3, [pc, #324]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0xe8>
 8006906:	e000      	b.n	800690a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006908:	bf00      	nop
 8007650:	f7fb ff5a 	bl	8003508 <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007656:	e008      	b.n	800766a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007658:	f7fb ff56 	bl	8003508 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	2b64      	cmp	r3, #100	; 0x64
 8007664:	d901      	bls.n	800766a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e1f3      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800766a:	4b51      	ldr	r3, [pc, #324]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <HAL_RCC_OscConfig+0xe8>
 8007676:	e000      	b.n	800767a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d063      	beq.n	80069de <HAL_RCC_OscConfig+0x1de>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d063      	beq.n	800774e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006916:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006922:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692a:	2b08      	cmp	r3, #8
 800692c:	d11c      	bne.n	8006968 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800692e:	4b44      	ldr	r3, [pc, #272]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d116      	bne.n	8006968 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x152>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e1c7      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 8007686:	4b4a      	ldr	r3, [pc, #296]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00b      	beq.n	80076aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007692:	4b47      	ldr	r3, [pc, #284]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800769a:	2b08      	cmp	r3, #8
 800769c:	d11c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800769e:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076aa:	4b41      	ldr	r3, [pc, #260]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <HAL_RCC_OscConfig+0x152>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d001      	beq.n	80076c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e1c7      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	4b3b      	ldr	r3, [pc, #236]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4937      	ldr	r1, [pc, #220]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006966:	e03a      	b.n	80069de <HAL_RCC_OscConfig+0x1de>
 80076c2:	4b3b      	ldr	r3, [pc, #236]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4937      	ldr	r1, [pc, #220]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d6:	e03a      	b.n	800774e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <HAL_RCC_OscConfig+0x244>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fb ff37 	bl	80027e8 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800697e:	f7fb ff33 	bl	80027e8 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e1a8      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006990:	4b2b      	ldr	r3, [pc, #172]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x17e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d020      	beq.n	8007722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076e0:	4b34      	ldr	r3, [pc, #208]	; (80077b4 <HAL_RCC_OscConfig+0x244>)
 80076e2:	2201      	movs	r2, #1
 80076e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e6:	f7fb ff0f 	bl	8003508 <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ec:	e008      	b.n	8007700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076ee:	f7fb ff0b 	bl	8003508 <HAL_GetTick>
 80076f2:	4602      	mov	r2, r0
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	1ad3      	subs	r3, r2, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d901      	bls.n	8007700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e1a8      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d0f0      	beq.n	80076ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	4b28      	ldr	r3, [pc, #160]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4925      	ldr	r1, [pc, #148]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
 80069b0:	e015      	b.n	80069de <HAL_RCC_OscConfig+0x1de>
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	4925      	ldr	r1, [pc, #148]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 800771c:	4313      	orrs	r3, r2
 800771e:	600b      	str	r3, [r1, #0]
 8007720:	e015      	b.n	800774e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <HAL_RCC_OscConfig+0x244>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fb ff16 	bl	80027e8 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fb ff12 	bl	80027e8 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e187      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	4b1b      	ldr	r3, [pc, #108]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x1c0>
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <HAL_RCC_OscConfig+0x244>)
 8007724:	2200      	movs	r2, #0
 8007726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fb feee 	bl	8003508 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007730:	f7fb feea 	bl	8003508 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e187      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d036      	beq.n	8006a58 <HAL_RCC_OscConfig+0x258>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0308 	and.w	r3, r3, #8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d036      	beq.n	80077c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <HAL_RCC_OscConfig+0x248>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f8:	f7fb fef6 	bl	80027e8 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a00:	f7fb fef2 	bl	80027e8 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e167      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCC_OscConfig+0x240>)
 8006a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x200>
 8006a1e:	e01b      	b.n	8006a58 <HAL_RCC_OscConfig+0x258>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d016      	beq.n	8007790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007762:	4b15      	ldr	r3, [pc, #84]	; (80077b8 <HAL_RCC_OscConfig+0x248>)
 8007764:	2201      	movs	r2, #1
 8007766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007768:	f7fb fece 	bl	8003508 <HAL_GetTick>
 800776c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776e:	e008      	b.n	8007782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007770:	f7fb feca 	bl	8003508 <HAL_GetTick>
 8007774:	4602      	mov	r2, r0
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	2b02      	cmp	r3, #2
 800777c:	d901      	bls.n	8007782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e167      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007782:	4b0b      	ldr	r3, [pc, #44]	; (80077b0 <HAL_RCC_OscConfig+0x240>)
 8007784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0f0      	beq.n	8007770 <HAL_RCC_OscConfig+0x200>
 800778e:	e01b      	b.n	80077c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <HAL_RCC_OscConfig+0x248>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a26:	f7fb fedf 	bl	80027e8 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	e00e      	b.n	8006a4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a2e:	f7fb fedb 	bl	80027e8 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d907      	bls.n	8006a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e150      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 8006a40:	40023800 	.word	0x40023800
 8006a44:	42470000 	.word	0x42470000
 8006a48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a4c:	4b88      	ldr	r3, [pc, #544]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1ea      	bne.n	8006a2e <HAL_RCC_OscConfig+0x22e>
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <HAL_RCC_OscConfig+0x248>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007796:	f7fb feb7 	bl	8003508 <HAL_GetTick>
 800779a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800779c:	e00e      	b.n	80077bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779e:	f7fb feb3 	bl	8003508 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d907      	bls.n	80077bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e150      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
 80077b0:	40023800 	.word	0x40023800
 80077b4:	42470000 	.word	0x42470000
 80077b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077bc:	4b88      	ldr	r3, [pc, #544]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80077be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1ea      	bne.n	800779e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8097 	beq.w	8006b94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0304 	and.w	r3, r3, #4
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 8097 	beq.w	8007904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a6a:	4b81      	ldr	r3, [pc, #516]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10f      	bne.n	8006a96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	4b7d      	ldr	r3, [pc, #500]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a7c      	ldr	r2, [pc, #496]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
 8006a86:	4b7a      	ldr	r3, [pc, #488]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a92:	2301      	movs	r3, #1
 8006a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a96:	4b77      	ldr	r3, [pc, #476]	; (8006c74 <HAL_RCC_OscConfig+0x474>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d118      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa2:	4b74      	ldr	r3, [pc, #464]	; (8006c74 <HAL_RCC_OscConfig+0x474>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a73      	ldr	r2, [pc, #460]	; (8006c74 <HAL_RCC_OscConfig+0x474>)
 8006aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aae:	f7fb fe9b 	bl	80027e8 <HAL_GetTick>
 8006ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ab6:	f7fb fe97 	bl	80027e8 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e10c      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac8:	4b6a      	ldr	r3, [pc, #424]	; (8006c74 <HAL_RCC_OscConfig+0x474>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d0f0      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x2b6>
 80077da:	4b81      	ldr	r3, [pc, #516]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10f      	bne.n	8007806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	4b7d      	ldr	r3, [pc, #500]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	4a7c      	ldr	r2, [pc, #496]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6413      	str	r3, [r2, #64]	; 0x40
 80077f6:	4b7a      	ldr	r3, [pc, #488]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007802:	2301      	movs	r3, #1
 8007804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007806:	4b77      	ldr	r3, [pc, #476]	; (80079e4 <HAL_RCC_OscConfig+0x474>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d118      	bne.n	8007844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007812:	4b74      	ldr	r3, [pc, #464]	; (80079e4 <HAL_RCC_OscConfig+0x474>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a73      	ldr	r2, [pc, #460]	; (80079e4 <HAL_RCC_OscConfig+0x474>)
 8007818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800781e:	f7fb fe73 	bl	8003508 <HAL_GetTick>
 8007822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007824:	e008      	b.n	8007838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007826:	f7fb fe6f 	bl	8003508 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e10c      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007838:	4b6a      	ldr	r3, [pc, #424]	; (80079e4 <HAL_RCC_OscConfig+0x474>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0f0      	beq.n	8007826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x2ea>
 8006adc:	4b64      	ldr	r3, [pc, #400]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	4a63      	ldr	r2, [pc, #396]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	f043 0301 	orr.w	r3, r3, #1
 8006ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae8:	e01c      	b.n	8006b24 <HAL_RCC_OscConfig+0x324>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x30c>
 8006af2:	4b5f      	ldr	r3, [pc, #380]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a5e      	ldr	r2, [pc, #376]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006af8:	f043 0304 	orr.w	r3, r3, #4
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	4b5c      	ldr	r3, [pc, #368]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a5b      	ldr	r2, [pc, #364]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0x324>
 8006b0c:	4b58      	ldr	r3, [pc, #352]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4a57      	ldr	r2, [pc, #348]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	6713      	str	r3, [r2, #112]	; 0x70
 8006b18:	4b55      	ldr	r3, [pc, #340]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	4a54      	ldr	r2, [pc, #336]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b1e:	f023 0304 	bic.w	r3, r3, #4
 8006b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d015      	beq.n	8006b58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fb fe5c 	bl	80027e8 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fb fe58 	bl	80027e8 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e0cb      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4a:	4b49      	ldr	r3, [pc, #292]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0ee      	beq.n	8006b34 <HAL_RCC_OscConfig+0x334>
 8006b56:	e014      	b.n	8006b82 <HAL_RCC_OscConfig+0x382>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d106      	bne.n	800785a <HAL_RCC_OscConfig+0x2ea>
 800784c:	4b64      	ldr	r3, [pc, #400]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007850:	4a63      	ldr	r2, [pc, #396]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	6713      	str	r3, [r2, #112]	; 0x70
 8007858:	e01c      	b.n	8007894 <HAL_RCC_OscConfig+0x324>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b05      	cmp	r3, #5
 8007860:	d10c      	bne.n	800787c <HAL_RCC_OscConfig+0x30c>
 8007862:	4b5f      	ldr	r3, [pc, #380]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a5e      	ldr	r2, [pc, #376]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007868:	f043 0304 	orr.w	r3, r3, #4
 800786c:	6713      	str	r3, [r2, #112]	; 0x70
 800786e:	4b5c      	ldr	r3, [pc, #368]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007872:	4a5b      	ldr	r2, [pc, #364]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	6713      	str	r3, [r2, #112]	; 0x70
 800787a:	e00b      	b.n	8007894 <HAL_RCC_OscConfig+0x324>
 800787c:	4b58      	ldr	r3, [pc, #352]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	4a57      	ldr	r2, [pc, #348]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007882:	f023 0301 	bic.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	; 0x70
 8007888:	4b55      	ldr	r3, [pc, #340]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 800788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788c:	4a54      	ldr	r2, [pc, #336]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 800788e:	f023 0304 	bic.w	r3, r3, #4
 8007892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d015      	beq.n	80078c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fb fe34 	bl	8003508 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a2:	e00a      	b.n	80078ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078a4:	f7fb fe30 	bl	8003508 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d901      	bls.n	80078ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e0cb      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ba:	4b49      	ldr	r3, [pc, #292]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ee      	beq.n	80078a4 <HAL_RCC_OscConfig+0x334>
 80078c6:	e014      	b.n	80078f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b58:	f7fb fe46 	bl	80027e8 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5e:	e00a      	b.n	8006b76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fb fe42 	bl	80027e8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e0b5      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b76:	4b3e      	ldr	r3, [pc, #248]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1ee      	bne.n	8006b60 <HAL_RCC_OscConfig+0x360>
 80078c8:	f7fb fe1e 	bl	8003508 <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fb fe1a 	bl	8003508 <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	; 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e0b5      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078e6:	4b3e      	ldr	r3, [pc, #248]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1ee      	bne.n	80078d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4b39      	ldr	r3, [pc, #228]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	4a38      	ldr	r2, [pc, #224]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b92:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d105      	bne.n	8007904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078f8:	4b39      	ldr	r3, [pc, #228]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80078fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fc:	4a38      	ldr	r2, [pc, #224]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80078fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 80a1 	beq.w	8006ce0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b9e:	4b34      	ldr	r3, [pc, #208]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d05c      	beq.n	8006c64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d141      	bne.n	8006c36 <HAL_RCC_OscConfig+0x436>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 80a1 	beq.w	8007a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800790e:	4b34      	ldr	r3, [pc, #208]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 030c 	and.w	r3, r3, #12
 8007916:	2b08      	cmp	r3, #8
 8007918:	d05c      	beq.n	80079d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d141      	bne.n	80079a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb2:	4b31      	ldr	r3, [pc, #196]	; (8006c78 <HAL_RCC_OscConfig+0x478>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fb fe16 	bl	80027e8 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc0:	f7fb fe12 	bl	80027e8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e087      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd2:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f0      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x3c0>
 8007922:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <HAL_RCC_OscConfig+0x478>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007928:	f7fb fdee 	bl	8003508 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007930:	f7fb fdea 	bl	8003508 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e087      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	4b27      	ldr	r3, [pc, #156]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1f0      	bne.n	8007930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	019b      	lsls	r3, r3, #6
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	061b      	lsls	r3, r3, #24
 8006c02:	491b      	ldr	r1, [pc, #108]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69da      	ldr	r2, [r3, #28]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	019b      	lsls	r3, r3, #6
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	3b01      	subs	r3, #1
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	061b      	lsls	r3, r3, #24
 8007972:	491b      	ldr	r1, [pc, #108]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 8007974:	4313      	orrs	r3, r2
 8007976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c08:	4b1b      	ldr	r3, [pc, #108]	; (8006c78 <HAL_RCC_OscConfig+0x478>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c0e:	f7fb fdeb 	bl	80027e8 <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c16:	f7fb fde7 	bl	80027e8 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e05c      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c28:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0f0      	beq.n	8006c16 <HAL_RCC_OscConfig+0x416>
 8006c34:	e054      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4e0>
 8007978:	4b1b      	ldr	r3, [pc, #108]	; (80079e8 <HAL_RCC_OscConfig+0x478>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797e:	f7fb fdc3 	bl	8003508 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007986:	f7fb fdbf 	bl	8003508 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e05c      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007998:	4b11      	ldr	r3, [pc, #68]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <HAL_RCC_OscConfig+0x416>
 80079a4:	e054      	b.n	8007a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <HAL_RCC_OscConfig+0x478>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fb fdd4 	bl	80027e8 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fb fdd0 	bl	80027e8 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e045      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <HAL_RCC_OscConfig+0x470>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x444>
 8006c62:	e03d      	b.n	8006ce0 <HAL_RCC_OscConfig+0x4e0>
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <HAL_RCC_OscConfig+0x478>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ac:	f7fb fdac 	bl	8003508 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b4:	f7fb fda8 	bl	8003508 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e045      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_RCC_OscConfig+0x470>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0x444>
 80079d2:	e03d      	b.n	8007a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d107      	bne.n	8006c7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e038      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 8006c70:	40023800 	.word	0x40023800
 8006c74:	40007000 	.word	0x40007000
 8006c78:	42470060 	.word	0x42470060
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d107      	bne.n	80079ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e038      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
 80079e0:	40023800 	.word	0x40023800
 80079e4:	40007000 	.word	0x40007000
 80079e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c7c:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <HAL_RCC_OscConfig+0x4ec>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <HAL_RCC_OscConfig+0x4ec>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d028      	beq.n	8006cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d121      	bne.n	8006cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d11a      	bne.n	8006cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cac:	4013      	ands	r3, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d111      	bne.n	8006cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d107      	bne.n	8006cdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e000      	b.n	8006ce2 <HAL_RCC_OscConfig+0x4e2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d028      	beq.n	8007a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d121      	bne.n	8007a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d11a      	bne.n	8007a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d111      	bne.n	8007a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	085b      	lsrs	r3, r3, #1
 8007a34:	3b01      	subs	r3, #1
 8007a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800

08006cf0 <HAL_RCC_ClockConfig>:
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40023800 	.word	0x40023800

08007a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0cc      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0cc      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d04:	4b68      	ldr	r3, [pc, #416]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d90c      	bls.n	8006d2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d12:	4b65      	ldr	r3, [pc, #404]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
 8007a74:	4b68      	ldr	r3, [pc, #416]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d90c      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a82:	4b65      	ldr	r3, [pc, #404]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1a:	4b63      	ldr	r3, [pc, #396]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d001      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0b8      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007a8a:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d001      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0b8      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d020      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x8a>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d44:	4b59      	ldr	r3, [pc, #356]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a58      	ldr	r2, [pc, #352]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d5c:	4b53      	ldr	r3, [pc, #332]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	4a52      	ldr	r2, [pc, #328]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d66:	6093      	str	r3, [r2, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a58      	ldr	r2, [pc, #352]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007acc:	4b53      	ldr	r3, [pc, #332]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a52      	ldr	r2, [pc, #328]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d68:	4b50      	ldr	r3, [pc, #320]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	494d      	ldr	r1, [pc, #308]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]
 8007ad8:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	494d      	ldr	r1, [pc, #308]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d044      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x120>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d044      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d8e:	4b47      	ldr	r3, [pc, #284]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d119      	bne.n	8006dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e07f      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d107      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d119      	bne.n	8007b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e07f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d003      	beq.n	8006dae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d107      	bne.n	8006dbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dae:	4b3f      	ldr	r3, [pc, #252]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e06f      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d003      	beq.n	8007b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e06f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dbe:	4b3b      	ldr	r3, [pc, #236]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e067      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e067      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dce:	4b37      	ldr	r3, [pc, #220]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f023 0203 	bic.w	r2, r3, #3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4934      	ldr	r1, [pc, #208]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006de0:	f7fb fd02 	bl	80027e8 <HAL_GetTick>
 8006de4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de6:	e00a      	b.n	8006dfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de8:	f7fb fcfe 	bl	80027e8 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e04f      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfe:	4b2b      	ldr	r3, [pc, #172]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 020c 	and.w	r2, r3, #12
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d1eb      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xf8>
 8007b3e:	4b37      	ldr	r3, [pc, #220]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f023 0203 	bic.w	r2, r3, #3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	4934      	ldr	r1, [pc, #208]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b50:	f7fb fcda 	bl	8003508 <HAL_GetTick>
 8007b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b56:	e00a      	b.n	8007b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b58:	f7fb fcd6 	bl	8003508 <HAL_GetTick>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	1ad3      	subs	r3, r2, r3
 8007b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e04f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	4b2b      	ldr	r3, [pc, #172]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 020c 	and.w	r2, r3, #12
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d1eb      	bne.n	8007b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d20c      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e1e:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d20c      	bcs.n	8007ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8e:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	b2d2      	uxtb	r2, r2
 8007b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e26:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d001      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e032      	b.n	8006e9e <HAL_RCC_ClockConfig+0x1ae>
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <HAL_RCC_ClockConfig+0x1b8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e032      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e44:	4b19      	ldr	r3, [pc, #100]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	4916      	ldr	r1, [pc, #88]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4916      	ldr	r1, [pc, #88]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e62:	4b12      	ldr	r3, [pc, #72]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	490e      	ldr	r1, [pc, #56]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	608b      	str	r3, [r1, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	490e      	ldr	r1, [pc, #56]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e76:	f000 f821 	bl	8006ebc <HAL_RCC_GetSysClockFreq>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 030f 	and.w	r3, r3, #15
 8006e86:	490a      	ldr	r1, [pc, #40]	; (8006eb0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e88:	5ccb      	ldrb	r3, [r1, r3]
 8006e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e92:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fb fc62 	bl	8002760 <HAL_InitTick>

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023c00 	.word	0x40023c00
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	08008a54 	.word	0x08008a54
 8006eb4:	20000004 	.word	0x20000004
 8006eb8:	20000008 	.word	0x20000008

08006ebc <HAL_RCC_GetSysClockFreq>:
 8007be6:	f000 f821 	bl	8007c2c <HAL_RCC_GetSysClockFreq>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_ClockConfig+0x1bc>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	490a      	ldr	r1, [pc, #40]	; (8007c20 <HAL_RCC_ClockConfig+0x1c0>)
 8007bf8:	5ccb      	ldrb	r3, [r1, r3]
 8007bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1c4>)
 8007c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_ClockConfig+0x1c8>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fb fc3a 	bl	8003480 <HAL_InitTick>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40023c00 	.word	0x40023c00
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	08009510 	.word	0x08009510
 8007c24:	20000004 	.word	0x20000004
 8007c28:	20000008 	.word	0x20000008

08007c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec0:	b090      	sub	sp, #64	; 0x40
 8006ec2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec8:	2300      	movs	r3, #0
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ecc:	2300      	movs	r3, #0
 8006ece:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ed4:	4b59      	ldr	r3, [pc, #356]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f003 030c 	and.w	r3, r3, #12
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d00d      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0x40>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	f200 80a1 	bhi.w	8007028 <HAL_RCC_GetSysClockFreq+0x16c>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006eee:	e09b      	b.n	8007028 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c30:	b090      	sub	sp, #64	; 0x40
 8007c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	637b      	str	r3, [r7, #52]	; 0x34
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c44:	4b59      	ldr	r3, [pc, #356]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 030c 	and.w	r3, r3, #12
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d00d      	beq.n	8007c6c <HAL_RCC_GetSysClockFreq+0x40>
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	f200 80a1 	bhi.w	8007d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <HAL_RCC_GetSysClockFreq+0x34>
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d003      	beq.n	8007c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c5e:	e09b      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ef0:	4b53      	ldr	r3, [pc, #332]	; (8007040 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ef2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ef4:	e09b      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x172>
 8007c60:	4b53      	ldr	r3, [pc, #332]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c64:	e09b      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ef6:	4b53      	ldr	r3, [pc, #332]	; (8007044 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ef8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006efa:	e098      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x172>
 8007c66:	4b53      	ldr	r3, [pc, #332]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c6a:	e098      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006efc:	4b4f      	ldr	r3, [pc, #316]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f06:	4b4d      	ldr	r3, [pc, #308]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d028      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f12:	4b4a      	ldr	r3, [pc, #296]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	2200      	movs	r2, #0
 8006f1a:	623b      	str	r3, [r7, #32]
 8006f1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f24:	2100      	movs	r1, #0
 8006f26:	4b47      	ldr	r3, [pc, #284]	; (8007044 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f28:	fb03 f201 	mul.w	r2, r3, r1
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	fb00 f303 	mul.w	r3, r0, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	4a43      	ldr	r2, [pc, #268]	; (8007044 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f36:	fba0 1202 	umull	r1, r2, r0, r2
 8006f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3c:	460a      	mov	r2, r1
 8006f3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f42:	4413      	add	r3, r2
 8006f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f48:	2200      	movs	r2, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
 8006f4c:	61fa      	str	r2, [r7, #28]
 8006f4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f56:	f7f9 fd95 	bl	8000a84 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4613      	mov	r3, r2
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f62:	e053      	b.n	800700c <HAL_RCC_GetSysClockFreq+0x150>
 8007c6c:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c76:	4b4d      	ldr	r3, [pc, #308]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d028      	beq.n	8007cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c82:	4b4a      	ldr	r3, [pc, #296]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	099b      	lsrs	r3, r3, #6
 8007c88:	2200      	movs	r2, #0
 8007c8a:	623b      	str	r3, [r7, #32]
 8007c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007c94:	2100      	movs	r1, #0
 8007c96:	4b47      	ldr	r3, [pc, #284]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c98:	fb03 f201 	mul.w	r2, r3, r1
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	fb00 f303 	mul.w	r3, r0, r3
 8007ca2:	4413      	add	r3, r2
 8007ca4:	4a43      	ldr	r2, [pc, #268]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8007caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cac:	460a      	mov	r2, r1
 8007cae:	62ba      	str	r2, [r7, #40]	; 0x28
 8007cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb2:	4413      	add	r3, r2
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb8:	2200      	movs	r2, #0
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	61fa      	str	r2, [r7, #28]
 8007cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cc6:	f7f8 fefd 	bl	8000ac4 <__aeabi_uldivmod>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4613      	mov	r3, r2
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cd2:	e053      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	099b      	lsrs	r3, r3, #6
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	617a      	str	r2, [r7, #20]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006f76:	f04f 0b00 	mov.w	fp, #0
 8006f7a:	4652      	mov	r2, sl
 8006f7c:	465b      	mov	r3, fp
 8006f7e:	f04f 0000 	mov.w	r0, #0
 8006f82:	f04f 0100 	mov.w	r1, #0
 8006f86:	0159      	lsls	r1, r3, #5
 8006f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8c:	0150      	lsls	r0, r2, #5
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	ebb2 080a 	subs.w	r8, r2, sl
 8006f96:	eb63 090b 	sbc.w	r9, r3, fp
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fa6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006faa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fae:	ebb2 0408 	subs.w	r4, r2, r8
 8006fb2:	eb63 0509 	sbc.w	r5, r3, r9
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	00eb      	lsls	r3, r5, #3
 8006fc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc4:	00e2      	lsls	r2, r4, #3
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461d      	mov	r5, r3
 8006fca:	eb14 030a 	adds.w	r3, r4, sl
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	eb45 030b 	adc.w	r3, r5, fp
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	028b      	lsls	r3, r1, #10
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006fec:	4621      	mov	r1, r4
 8006fee:	028a      	lsls	r2, r1, #10
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	60fa      	str	r2, [r7, #12]
 8006ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007000:	f7f9 fd40 	bl	8000a84 <__aeabi_uldivmod>
 8007004:	4602      	mov	r2, r0
 8007006:	460b      	mov	r3, r1
 8007008:	4613      	mov	r3, r2
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <HAL_RCC_GetSysClockFreq+0x180>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	3301      	adds	r3, #1
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800701c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007026:	e002      	b.n	800702e <HAL_RCC_GetSysClockFreq+0x172>
 8007cd4:	4b35      	ldr	r3, [pc, #212]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	099b      	lsrs	r3, r3, #6
 8007cda:	2200      	movs	r2, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	617a      	str	r2, [r7, #20]
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ce6:	f04f 0b00 	mov.w	fp, #0
 8007cea:	4652      	mov	r2, sl
 8007cec:	465b      	mov	r3, fp
 8007cee:	f04f 0000 	mov.w	r0, #0
 8007cf2:	f04f 0100 	mov.w	r1, #0
 8007cf6:	0159      	lsls	r1, r3, #5
 8007cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cfc:	0150      	lsls	r0, r2, #5
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	ebb2 080a 	subs.w	r8, r2, sl
 8007d06:	eb63 090b 	sbc.w	r9, r3, fp
 8007d0a:	f04f 0200 	mov.w	r2, #0
 8007d0e:	f04f 0300 	mov.w	r3, #0
 8007d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8007d22:	eb63 0509 	sbc.w	r5, r3, r9
 8007d26:	f04f 0200 	mov.w	r2, #0
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	00eb      	lsls	r3, r5, #3
 8007d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d34:	00e2      	lsls	r2, r4, #3
 8007d36:	4614      	mov	r4, r2
 8007d38:	461d      	mov	r5, r3
 8007d3a:	eb14 030a 	adds.w	r3, r4, sl
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	eb45 030b 	adc.w	r3, r5, fp
 8007d44:	607b      	str	r3, [r7, #4]
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d52:	4629      	mov	r1, r5
 8007d54:	028b      	lsls	r3, r1, #10
 8007d56:	4621      	mov	r1, r4
 8007d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	028a      	lsls	r2, r1, #10
 8007d60:	4610      	mov	r0, r2
 8007d62:	4619      	mov	r1, r3
 8007d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d66:	2200      	movs	r2, #0
 8007d68:	60bb      	str	r3, [r7, #8]
 8007d6a:	60fa      	str	r2, [r7, #12]
 8007d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d70:	f7f8 fea8 	bl	8000ac4 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCC_GetSysClockFreq+0x180>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <HAL_RCC_GetSysClockFreq+0x184>)
 800702a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800702c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007030:	4618      	mov	r0, r3
 8007032:	3740      	adds	r7, #64	; 0x40
 8007034:	46bd      	mov	sp, r7
 8007036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703a:	bf00      	nop
 800703c:	40023800 	.word	0x40023800
 8007040:	00f42400 	.word	0x00f42400
 8007044:	017d7840 	.word	0x017d7840

08007048 <HAL_RCC_GetHCLKFreq>:
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3740      	adds	r7, #64	; 0x40
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
 8007db0:	00f42400 	.word	0x00f42400
 8007db4:	017d7840 	.word	0x017d7840

08007db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007048:	b480      	push	{r7}
 800704a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800704c:	4b03      	ldr	r3, [pc, #12]	; (800705c <HAL_RCC_GetHCLKFreq+0x14>)
 800704e:	681b      	ldr	r3, [r3, #0]
}
 8007050:	4618      	mov	r0, r3
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000004 	.word	0x20000004

08007060 <HAL_RCC_GetPCLK1Freq>:
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000004 	.word	0x20000004

08007dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007064:	f7ff fff0 	bl	8007048 <HAL_RCC_GetHCLKFreq>
 8007068:	4602      	mov	r2, r0
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	0a9b      	lsrs	r3, r3, #10
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	4903      	ldr	r1, [pc, #12]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007076:	5ccb      	ldrb	r3, [r1, r3]
 8007078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40023800 	.word	0x40023800
 8007084:	08008a64 	.word	0x08008a64

08007088 <HAL_SPI_Init>:
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd4:	f7ff fff0 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0a9b      	lsrs	r3, r3, #10
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	08009520 	.word	0x08009520

08007df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e07b      	b.n	8007192 <HAL_SPI_Init+0x10a>
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e07b      	b.n	8007f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d108      	bne.n	80070b4 <HAL_SPI_Init+0x2c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d108      	bne.n	8007e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070aa:	d009      	beq.n	80070c0 <HAL_SPI_Init+0x38>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e1a:	d009      	beq.n	8007e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	61da      	str	r2, [r3, #28]
 80070b2:	e005      	b.n	80070c0 <HAL_SPI_Init+0x38>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	61da      	str	r2, [r3, #28]
 8007e22:	e005      	b.n	8007e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	615a      	str	r2, [r3, #20]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fb f832 	bl	8002144 <HAL_SPI_MspInit>
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fb f80a 	bl	8002e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f6:	601a      	str	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	431a      	orrs	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	431a      	orrs	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007130:	431a      	orrs	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007144:	ea42 0103 	orr.w	r1, r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	601a      	str	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb4:	ea42 0103 	orr.w	r1, r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	f003 0104 	and.w	r1, r3, #4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	f003 0210 	and.w	r2, r3, #16
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	f003 0104 	and.w	r1, r3, #4
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	f003 0210 	and.w	r2, r3, #16
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007180:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_SPI_TransmitReceive_DMA>:
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	69da      	ldr	r2, [r3, #28]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3708      	adds	r7, #8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_SPI_TransmitReceive_DMA+0x20>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e0e3      	b.n	8007384 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80071d2:	7dbb      	ldrb	r3, [r7, #22]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d00d      	beq.n	80071f4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071de:	d106      	bne.n	80071ee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_TransmitReceive_DMA+0x52>
 80071e8:	7dbb      	ldrb	r3, [r7, #22]
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d002      	beq.n	80071f4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80071ee:	2302      	movs	r3, #2
 80071f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071f2:	e0c2      	b.n	800737a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800720a:	e0b6      	b.n	800737a <HAL_SPI_TransmitReceive_DMA+0x1de>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e0e3      	b.n	80080f4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f3a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007f42:	7dbb      	ldrb	r3, [r7, #22]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d00d      	beq.n	8007f64 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f4e:	d106      	bne.n	8007f5e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007f58:	7dbb      	ldrb	r3, [r7, #22]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d002      	beq.n	8007f64 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f62:	e0c2      	b.n	80080ea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f7a:	e0b6      	b.n	80080ea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b04      	cmp	r3, #4
 8007216:	d003      	beq.n	8007220 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2205      	movs	r2, #5
 800721c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d003      	beq.n	8007f90 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	887a      	ldrh	r2, [r7, #2]
 8007230:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	887a      	ldrh	r2, [r7, #2]
 8007236:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	887a      	ldrh	r2, [r7, #2]
 8007242:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	887a      	ldrh	r2, [r7, #2]
 8007248:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	645a      	str	r2, [r3, #68]	; 0x44
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	887a      	ldrh	r2, [r7, #2]
 8007fa0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	887a      	ldrh	r2, [r7, #2]
 8007fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	887a      	ldrh	r2, [r7, #2]
 8007fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	887a      	ldrh	r2, [r7, #2]
 8007fb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b04      	cmp	r3, #4
 8007260:	d108      	bne.n	8007274 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007266:	4a49      	ldr	r2, [pc, #292]	; (800738c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	4a48      	ldr	r2, [pc, #288]	; (8007390 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c
 8007272:	e007      	b.n	8007284 <HAL_SPI_TransmitReceive_DMA+0xe8>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b04      	cmp	r3, #4
 8007fd0:	d108      	bne.n	8007fe4 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd6:	4a49      	ldr	r2, [pc, #292]	; (80080fc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007fd8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fde:	4a48      	ldr	r2, [pc, #288]	; (8008100 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007fe0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007fe2:	e007      	b.n	8007ff4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007278:	4a46      	ldr	r2, [pc, #280]	; (8007394 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800727a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	4a45      	ldr	r2, [pc, #276]	; (8007398 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007282:	63da      	str	r2, [r3, #60]	; 0x3c
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe8:	4a46      	ldr	r2, [pc, #280]	; (8008104 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8007fea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff0:	4a45      	ldr	r2, [pc, #276]	; (8008108 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	4a44      	ldr	r2, [pc, #272]	; (800739c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	2200      	movs	r2, #0
 8007292:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	330c      	adds	r3, #12
 800729e:	4619      	mov	r1, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072ac:	f7fc f98e 	bl	80035cc <HAL_DMA_Start_IT>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00c      	beq.n	80072d0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f043 0210 	orr.w	r2, r3, #16
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80072ce:	e054      	b.n	800737a <HAL_SPI_TransmitReceive_DMA+0x1de>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff8:	4a44      	ldr	r2, [pc, #272]	; (800810c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8007ffa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008000:	2200      	movs	r2, #0
 8008002:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	330c      	adds	r3, #12
 800800e:	4619      	mov	r1, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800801c:	f7fc f966 	bl	80042ec <HAL_DMA_Start_IT>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00c      	beq.n	8008040 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802a:	f043 0210 	orr.w	r2, r3, #16
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800803e:	e054      	b.n	80080ea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0201 	orr.w	r2, r2, #1
 80072de:	605a      	str	r2, [r3, #4]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e4:	2200      	movs	r2, #0
 80072e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ec:	2200      	movs	r2, #0
 80072ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072f4:	2200      	movs	r2, #0
 80072f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fc:	2200      	movs	r2, #0
 80072fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	4619      	mov	r1, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007316:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007318:	f7fc f958 	bl	80035cc <HAL_DMA_Start_IT>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007326:	f043 0210 	orr.w	r2, r3, #16
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800733a:	e01e      	b.n	800737a <HAL_SPI_TransmitReceive_DMA+0x1de>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008054:	2200      	movs	r2, #0
 8008056:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800805c:	2200      	movs	r2, #0
 800805e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008064:	2200      	movs	r2, #0
 8008066:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806c:	2200      	movs	r2, #0
 800806e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008078:	4619      	mov	r1, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	330c      	adds	r3, #12
 8008080:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008086:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008088:	f7fc f930 	bl	80042ec <HAL_DMA_Start_IT>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00c      	beq.n	80080ac <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	f043 0210 	orr.w	r2, r3, #16
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80080aa:	e01e      	b.n	80080ea <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d007      	beq.n	800735a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007358:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0220 	orr.w	r2, r2, #32
 8007368:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0202 	orr.w	r2, r2, #2
 8007378:	605a      	str	r2, [r3, #4]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b40      	cmp	r3, #64	; 0x40
 80080b8:	d007      	beq.n	80080ca <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080c8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0220 	orr.w	r2, r2, #32
 80080d8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0202 	orr.w	r2, r2, #2
 80080e8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	08007711 	.word	0x08007711
 8007390:	080075d9 	.word	0x080075d9
 8007394:	0800772d 	.word	0x0800772d
 8007398:	08007681 	.word	0x08007681
 800739c:	08007749 	.word	0x08007749

080073a0 <HAL_SPI_IRQHandler>:
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	08008499 	.word	0x08008499
 8008100:	08008361 	.word	0x08008361
 8008104:	080084b5 	.word	0x080084b5
 8008108:	08008409 	.word	0x08008409
 800810c:	080084d1 	.word	0x080084d1

08008110 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10e      	bne.n	80073e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d009      	beq.n	80073e0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
    return;
 80073de:	e0ce      	b.n	800757e <HAL_SPI_IRQHandler+0x1de>
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	099b      	lsrs	r3, r3, #6
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10f      	bne.n	8008154 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	099b      	lsrs	r3, r3, #6
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
    return;
 8008152:	e0d7      	b.n	8008304 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d009      	beq.n	80073fe <HAL_SPI_IRQHandler+0x5e>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
    return;
 80073fc:	e0bf      	b.n	800757e <HAL_SPI_IRQHandler+0x1de>
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	085b      	lsrs	r3, r3, #1
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_SPI_IRQHandler+0x66>
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	09db      	lsrs	r3, r3, #7
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
    return;
 8008174:	e0c6      	b.n	8008304 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f003 0320 	and.w	r3, r3, #32
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <HAL_SPI_IRQHandler+0x7e>
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80b0 	beq.w	800757e <HAL_SPI_IRQHandler+0x1de>
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80aa 	beq.w	800757e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d023      	beq.n	800747c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d011      	beq.n	8007464 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007444:	f043 0204 	orr.w	r2, r3, #4
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	617b      	str	r3, [r7, #20]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	e00b      	b.n	800747c <HAL_SPI_IRQHandler+0xdc>
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	095b      	lsrs	r3, r3, #5
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10c      	bne.n	800819c <HAL_SPI_IRQHandler+0x8c>
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	099b      	lsrs	r3, r3, #6
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80b4 	beq.w	8008304 <HAL_SPI_IRQHandler+0x1f4>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 80ad 	beq.w	8008304 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	099b      	lsrs	r3, r3, #6
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d023      	beq.n	80081fe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d011      	beq.n	80081e6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f043 0204 	orr.w	r2, r3, #4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	e00b      	b.n	80081fe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007464:	2300      	movs	r3, #0
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	613b      	str	r3, [r7, #16]
 8007478:	693b      	ldr	r3, [r7, #16]
        return;
 800747a:	e080      	b.n	800757e <HAL_SPI_IRQHandler+0x1de>
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	693b      	ldr	r3, [r7, #16]
        return;
 80081fc:	e082      	b.n	8008304 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	095b      	lsrs	r3, r3, #5
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d014      	beq.n	8008234 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820e:	f043 0201 	orr.w	r2, r3, #1
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008216:	2300      	movs	r3, #0
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00c      	beq.n	80074d4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f043 0208 	orr.w	r2, r3, #8
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d04f      	beq.n	800757c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d104      	bne.n	8007508 <HAL_SPI_IRQHandler+0x168>
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d034      	beq.n	8007572 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 0203 	bic.w	r2, r2, #3
 8007516:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d011      	beq.n	8007544 <HAL_SPI_IRQHandler+0x1a4>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00c      	beq.n	800825a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008244:	f043 0208 	orr.w	r2, r3, #8
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800824c:	2300      	movs	r3, #0
 800824e:	60bb      	str	r3, [r7, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	2b00      	cmp	r3, #0
 8008260:	d04f      	beq.n	8008302 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008270:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d104      	bne.n	800828e <HAL_SPI_IRQHandler+0x17e>
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d034      	beq.n	80082f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0203 	bic.w	r2, r2, #3
 800829c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d011      	beq.n	80082ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_SPI_IRQHandler+0x1e4>)
 8007526:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752c:	4618      	mov	r0, r3
 800752e:	f7fc f8a5 	bl	800367c <HAL_DMA_Abort_IT>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	655a      	str	r2, [r3, #84]	; 0x54
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	4a18      	ldr	r2, [pc, #96]	; (800830c <HAL_SPI_IRQHandler+0x1fc>)
 80082ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fc f872 	bl	800439c <HAL_DMA_Abort_IT>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007548:	2b00      	cmp	r3, #0
 800754a:	d016      	beq.n	800757a <HAL_SPI_IRQHandler+0x1da>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d016      	beq.n	8008300 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007550:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <HAL_SPI_IRQHandler+0x1e4>)
 8007552:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	4618      	mov	r0, r3
 800755a:	f7fc f88f 	bl	800367c <HAL_DMA_Abort_IT>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007568:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007570:	e003      	b.n	800757a <HAL_SPI_IRQHandler+0x1da>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	4a0d      	ldr	r2, [pc, #52]	; (800830c <HAL_SPI_IRQHandler+0x1fc>)
 80082d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fc f85c 	bl	800439c <HAL_DMA_Abort_IT>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00a      	beq.n	8008300 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80082f6:	e003      	b.n	8008300 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f826 	bl	80075c4 <HAL_SPI_ErrorCallback>
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f827 	bl	800834c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007578:	e000      	b.n	800757c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800757a:	bf00      	nop
    return;
 800757c:	bf00      	nop
  }
}
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	08007789 	.word	0x08007789

08007588 <HAL_SPI_RxCpltCallback>:
 80082fe:	e000      	b.n	8008302 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008300:	bf00      	nop
    return;
 8008302:	bf00      	nop
  }
}
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	08008511 	.word	0x08008511

08008310 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_SPI_RxHalfCpltCallback>:
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_SPI_TxRxHalfCpltCallback>:
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_SPI_ErrorCallback>:
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <SPI_DMAReceiveCplt>:
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075e6:	f7fb f8ff 	bl	80027e8 <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fa:	d03b      	beq.n	8007674 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0220 	bic.w	r2, r2, #32
 800760a:	605a      	str	r2, [r3, #4]
 800836e:	f7fb f8cb 	bl	8003508 <HAL_GetTick>
 8008372:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008382:	d03b      	beq.n	80083fc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685a      	ldr	r2, [r3, #4]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0220 	bic.w	r2, r2, #32
 8008392:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10d      	bne.n	8007630 <SPI_DMAReceiveCplt+0x58>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800761c:	d108      	bne.n	8007630 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0203 	bic.w	r2, r2, #3
 800762c:	605a      	str	r2, [r3, #4]
 800762e:	e007      	b.n	8007640 <SPI_DMAReceiveCplt+0x68>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10d      	bne.n	80083b8 <SPI_DMAReceiveCplt+0x58>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083a4:	d108      	bne.n	80083b8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0203 	bic.w	r2, r2, #3
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	e007      	b.n	80083c8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	605a      	str	r2, [r3, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	2164      	movs	r1, #100	; 0x64
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f000 f93b 	bl	80078c0 <SPI_EndRxTransaction>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2220      	movs	r2, #32
 8007654:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	2164      	movs	r1, #100	; 0x64
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f93b 	bl	8008648 <SPI_EndRxTransaction>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2220      	movs	r2, #32
 80083dc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <SPI_DMAReceiveCplt+0x9c>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff ffa9 	bl	80075c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007672:	e002      	b.n	800767a <SPI_DMAReceiveCplt+0xa2>
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff ffa9 	bl	800834c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80083fa:	e002      	b.n	8008402 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff87 	bl	8007588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <SPI_DMATransmitReceiveCplt>:
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f7ff ff87 	bl	8008310 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	60fb      	str	r3, [r7, #12]
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800768e:	f7fb f8ab 	bl	80027e8 <HAL_GetTick>
 8007692:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076a2:	d02f      	beq.n	8007704 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0220 	bic.w	r2, r2, #32
 80076b2:	605a      	str	r2, [r3, #4]
 8008416:	f7fb f877 	bl	8003508 <HAL_GetTick>
 800841a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842a:	d02f      	beq.n	800848c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0220 	bic.w	r2, r2, #32
 800843a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f967 	bl	800798c <SPI_EndRxTxTransaction>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c8:	f043 0220 	orr.w	r2, r3, #32
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	655a      	str	r2, [r3, #84]	; 0x54
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	2164      	movs	r1, #100	; 0x64
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f967 	bl	8008714 <SPI_EndRxTxTransaction>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	f043 0220 	orr.w	r2, r3, #32
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0203 	bic.w	r2, r2, #3
 80076de:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0203 	bic.w	r2, r2, #3
 8008466:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <SPI_DMATransmitReceiveCplt+0x84>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff ff61 	bl	80075c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007702:	e002      	b.n	800770a <SPI_DMATransmitReceiveCplt+0x8a>
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff ff61 	bl	800834c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800848a:	e002      	b.n	8008492 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f7fa fb37 	bl	8001d78 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SPI_DMAHalfReceiveCplt>:
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f7fa fb09 	bl	8002aa4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771c:	60fb      	str	r3, [r7, #12]
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff ff3c 	bl	800759c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <SPI_DMAHalfTransmitReceiveCplt>:
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ff3c 	bl	8008324 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	60fb      	str	r3, [r7, #12]
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800773a:	68f8      	ldr	r0, [r7, #12]
 800773c:	f7ff ff38 	bl	80075b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <SPI_DMAError>:
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff ff38 	bl	8008338 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084c8:	bf00      	nop
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0203 	bic.w	r2, r2, #3
 8007764:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f043 0210 	orr.w	r2, r3, #16
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0203 	bic.w	r2, r2, #3
 80084ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f2:	f043 0210 	orr.w	r2, r3, #16
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff ff22 	bl	80075c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007780:	bf00      	nop
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <SPI_DMAAbortOnError>:
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff ff22 	bl	800834c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008508:	bf00      	nop
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007794:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	86da      	strh	r2, [r3, #54]	; 0x36
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff ff0e 	bl	80075c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <SPI_WaitFlagStateUntilTimeout>:
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f7ff ff0e 	bl	800834c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	4613      	mov	r3, r2
 80077be:	71fb      	strb	r3, [r7, #7]
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077c0:	f7fb f812 	bl	80027e8 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4413      	add	r3, r2
 80077ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077d0:	f7fb f80a 	bl	80027e8 <HAL_GetTick>
 80077d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077d6:	4b39      	ldr	r3, [pc, #228]	; (80078bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	015b      	lsls	r3, r3, #5
 80077dc:	0d1b      	lsrs	r3, r3, #20
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
 80077e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077e6:	e054      	b.n	8007892 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ee:	d050      	beq.n	8007892 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077f0:	f7fa fffa 	bl	80027e8 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	69fa      	ldr	r2, [r7, #28]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d902      	bls.n	8007806 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d13d      	bne.n	8007882 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8008548:	f7fa ffde 	bl	8003508 <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	1a9b      	subs	r3, r3, r2
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	4413      	add	r3, r2
 8008556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008558:	f7fa ffd6 	bl	8003508 <HAL_GetTick>
 800855c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800855e:	4b39      	ldr	r3, [pc, #228]	; (8008644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	015b      	lsls	r3, r3, #5
 8008564:	0d1b      	lsrs	r3, r3, #20
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	fb02 f303 	mul.w	r3, r2, r3
 800856c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800856e:	e054      	b.n	800861a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d050      	beq.n	800861a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008578:	f7fa ffc6 	bl	8003508 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	429a      	cmp	r2, r3
 8008586:	d902      	bls.n	800858e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d13d      	bne.n	800860a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800781e:	d111      	bne.n	8007844 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007828:	d004      	beq.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007832:	d107      	bne.n	8007844 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007842:	601a      	str	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800859c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085a6:	d111      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b0:	d004      	beq.n	80085bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ba:	d107      	bne.n	80085cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784c:	d10f      	bne.n	800786e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800786c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e017      	b.n	80078b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007888:	2300      	movs	r3, #0
 800788a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	3b01      	subs	r3, #1
 8007890:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	429a      	cmp	r2, r3
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d19b      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0x38>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d4:	d10f      	bne.n	80085f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e017      	b.n	800863a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	3b01      	subs	r3, #1
 8008618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	4013      	ands	r3, r2
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	429a      	cmp	r2, r3
 8008628:	bf0c      	ite	eq
 800862a:	2301      	moveq	r3, #1
 800862c:	2300      	movne	r3, #0
 800862e:	b2db      	uxtb	r3, r3
 8008630:	461a      	mov	r2, r3
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	429a      	cmp	r2, r3
 8008636:	d19b      	bne.n	8008570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	20000004 	.word	0x20000004

080078c0 <SPI_EndRxTransaction>:
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3720      	adds	r7, #32
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000004 	.word	0x20000004

08008648 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078d4:	d111      	bne.n	80078fa <SPI_EndRxTransaction+0x3a>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078de:	d004      	beq.n	80078ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e8:	d107      	bne.n	80078fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078f8:	601a      	str	r2, [r3, #0]
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af02      	add	r7, sp, #8
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800865c:	d111      	bne.n	8008682 <SPI_EndRxTransaction+0x3a>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008666:	d004      	beq.n	8008672 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008670:	d107      	bne.n	8008682 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008680:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007902:	d12a      	bne.n	800795a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790c:	d012      	beq.n	8007934 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	2180      	movs	r1, #128	; 0x80
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff ff49 	bl	80077b0 <SPI_WaitFlagStateUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d02d      	beq.n	8007980 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007928:	f043 0220 	orr.w	r2, r3, #32
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e026      	b.n	8007982 <SPI_EndRxTransaction+0xc2>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800868a:	d12a      	bne.n	80086e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008694:	d012      	beq.n	80086bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7ff ff49 	bl	8008538 <SPI_WaitFlagStateUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02d      	beq.n	8008708 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b0:	f043 0220 	orr.w	r2, r3, #32
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e026      	b.n	800870a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	2101      	movs	r1, #1
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff ff36 	bl	80077b0 <SPI_WaitFlagStateUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01a      	beq.n	8007980 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f043 0220 	orr.w	r2, r3, #32
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e013      	b.n	8007982 <SPI_EndRxTransaction+0xc2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	2101      	movs	r1, #1
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ff36 	bl	8008538 <SPI_WaitFlagStateUntilTimeout>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01a      	beq.n	8008708 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f043 0220 	orr.w	r2, r3, #32
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e013      	b.n	800870a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2200      	movs	r2, #0
 8007962:	2101      	movs	r1, #1
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f7ff ff23 	bl	80077b0 <SPI_WaitFlagStateUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007974:	f043 0220 	orr.w	r2, r3, #32
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e000      	b.n	8007982 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <SPI_EndRxTxTransaction>:
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2200      	movs	r2, #0
 80086ea:	2101      	movs	r1, #1
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f7ff ff23 	bl	8008538 <SPI_WaitFlagStateUntilTimeout>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	f043 0220 	orr.w	r2, r3, #32
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e000      	b.n	800870a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <SPI_EndRxTxTransaction+0x7c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <SPI_EndRxTxTransaction+0x80>)
 800799e:	fba2 2303 	umull	r2, r3, r2, r3
 80079a2:	0d5b      	lsrs	r3, r3, #21
 80079a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079a8:	fb02 f303 	mul.w	r3, r2, r3
 80079ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b6:	d112      	bne.n	80079de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2200      	movs	r2, #0
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f7ff fef4 	bl	80077b0 <SPI_WaitFlagStateUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d016      	beq.n	80079fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f043 0220 	orr.w	r2, r3, #32
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e00f      	b.n	80079fe <SPI_EndRxTxTransaction+0x72>
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af02      	add	r7, sp, #8
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008720:	4b1b      	ldr	r3, [pc, #108]	; (8008790 <SPI_EndRxTxTransaction+0x7c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a1b      	ldr	r2, [pc, #108]	; (8008794 <SPI_EndRxTxTransaction+0x80>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	0d5b      	lsrs	r3, r3, #21
 800872c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008730:	fb02 f303 	mul.w	r3, r2, r3
 8008734:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800873e:	d112      	bne.n	8008766 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2200      	movs	r2, #0
 8008748:	2180      	movs	r1, #128	; 0x80
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff fef4 	bl	8008538 <SPI_WaitFlagStateUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d016      	beq.n	8008784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	f043 0220 	orr.w	r2, r3, #32
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e00f      	b.n	8008786 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00a      	beq.n	80079fa <SPI_EndRxTxTransaction+0x6e>
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f4:	2b80      	cmp	r3, #128	; 0x80
 80079f6:	d0f2      	beq.n	80079de <SPI_EndRxTxTransaction+0x52>
 80079f8:	e000      	b.n	80079fc <SPI_EndRxTxTransaction+0x70>
        break;
 80079fa:	bf00      	nop
  }

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000004 	.word	0x20000004
 8007a0c:	165e9f81 	.word	0x165e9f81

08007a10 <HAL_TIM_Base_Init>:
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	3b01      	subs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877c:	2b80      	cmp	r3, #128	; 0x80
 800877e:	d0f2      	beq.n	8008766 <SPI_EndRxTxTransaction+0x52>
 8008780:	e000      	b.n	8008784 <SPI_EndRxTxTransaction+0x70>
        break;
 8008782:	bf00      	nop
  }

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000004 	.word	0x20000004
 8008794:	165e9f81 	.word	0x165e9f81

08008798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e041      	b.n	8007aa6 <HAL_TIM_Base_Init+0x96>
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e041      	b.n	800882e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d106      	bne.n	80087c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa fdf4 	bl	8002624 <HAL_TIM_Base_MspInit>
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f7fa fdc0 	bl	8003344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2202      	movs	r2, #2
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f000 fae2 	bl	8008018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <HAL_TIM_Base_Start>:
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f000 fae2 	bl	8008da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d001      	beq.n	8007ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e03c      	b.n	8007b42 <HAL_TIM_Base_Start+0x92>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b01      	cmp	r3, #1
 800884a:	d001      	beq.n	8008850 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e03c      	b.n	80088ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a1e      	ldr	r2, [pc, #120]	; (8007b50 <HAL_TIM_Base_Start+0xa0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_TIM_Base_Start+0x5c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae2:	d013      	beq.n	8007b0c <HAL_TIM_Base_Start+0x5c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <HAL_TIM_Base_Start+0xa4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_TIM_Base_Start+0x5c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <HAL_TIM_Base_Start+0xa8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_TIM_Base_Start+0x5c>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a17      	ldr	r2, [pc, #92]	; (8007b5c <HAL_TIM_Base_Start+0xac>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_TIM_Base_Start+0x5c>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a16      	ldr	r2, [pc, #88]	; (8007b60 <HAL_TIM_Base_Start+0xb0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d111      	bne.n	8007b30 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b06      	cmp	r3, #6
 8007b1c:	d010      	beq.n	8007b40 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0201 	orr.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2e:	e007      	b.n	8007b40 <HAL_TIM_Base_Start+0x90>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <HAL_TIM_Base_Start+0xa0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d018      	beq.n	8008894 <HAL_TIM_Base_Start+0x5c>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800886a:	d013      	beq.n	8008894 <HAL_TIM_Base_Start+0x5c>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1a      	ldr	r2, [pc, #104]	; (80088dc <HAL_TIM_Base_Start+0xa4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00e      	beq.n	8008894 <HAL_TIM_Base_Start+0x5c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a19      	ldr	r2, [pc, #100]	; (80088e0 <HAL_TIM_Base_Start+0xa8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_TIM_Base_Start+0x5c>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a17      	ldr	r2, [pc, #92]	; (80088e4 <HAL_TIM_Base_Start+0xac>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIM_Base_Start+0x5c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a16      	ldr	r2, [pc, #88]	; (80088e8 <HAL_TIM_Base_Start+0xb0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d111      	bne.n	80088b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d010      	beq.n	80088c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b6:	e007      	b.n	80088c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 0201 	orr.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40014000 	.word	0x40014000

08007b64 <HAL_TIM_Base_Start_IT>:
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40014000 	.word	0x40014000

080088ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 80088ec:	b480      	push	{r7}
 80088ee:	b085      	sub	sp, #20
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d001      	beq.n	8007b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e044      	b.n	8007c06 <HAL_TIM_Base_Start_IT+0xa2>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d001      	beq.n	8008904 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e044      	b.n	800898e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0201 	orr.w	r2, r2, #1
 8007b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a1e      	ldr	r2, [pc, #120]	; (8007c14 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d018      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba6:	d013      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a1a      	ldr	r2, [pc, #104]	; (8007c18 <HAL_TIM_Base_Start_IT+0xb4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d00e      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_TIM_Base_Start_IT+0xb8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d009      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <HAL_TIM_Base_Start_IT+0xbc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d004      	beq.n	8007bd0 <HAL_TIM_Base_Start_IT+0x6c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a16      	ldr	r2, [pc, #88]	; (8007c24 <HAL_TIM_Base_Start_IT+0xc0>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d111      	bne.n	8007bf4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b06      	cmp	r3, #6
 8007be0:	d010      	beq.n	8007c04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f042 0201 	orr.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf2:	e007      	b.n	8007c04 <HAL_TIM_Base_Start_IT+0xa0>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2202      	movs	r2, #2
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a1e      	ldr	r2, [pc, #120]	; (800899c <HAL_TIM_Base_Start_IT+0xb0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d018      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x6c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800892e:	d013      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x6c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1a      	ldr	r2, [pc, #104]	; (80089a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00e      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x6c>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a19      	ldr	r2, [pc, #100]	; (80089a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d009      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x6c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a17      	ldr	r2, [pc, #92]	; (80089a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d004      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x6c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a16      	ldr	r2, [pc, #88]	; (80089ac <HAL_TIM_Base_Start_IT+0xc0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d111      	bne.n	800897c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b06      	cmp	r3, #6
 8008968:	d010      	beq.n	800898c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f042 0201 	orr.w	r2, r2, #1
 8008978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800897a:	e007      	b.n	800898c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f042 0201 	orr.w	r2, r2, #1
 800898a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010000 	.word	0x40010000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	40014000 	.word	0x40014000

08007c28 <HAL_TIM_IRQHandler>:
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	40010000 	.word	0x40010000
 80089a0:	40000400 	.word	0x40000400
 80089a4:	40000800 	.word	0x40000800
 80089a8:	40000c00 	.word	0x40000c00
 80089ac:	40014000 	.word	0x40014000

080089b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d122      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0202 	mvn.w	r2, #2
 8007c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_TIM_IRQHandler+0x4a>
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d122      	bne.n	8008a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d11b      	bne.n	8008a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f06f 0202 	mvn.w	r2, #2
 80089dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d003      	beq.n	80089fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9b5 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007c70:	e005      	b.n	8007c7e <HAL_TIM_IRQHandler+0x56>
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9b5 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 80089f8:	e005      	b.n	8008a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9a7 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f9b8 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	771a      	strb	r2, [r3, #28]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9a7 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f9b8 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d122      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d11b      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0204 	mvn.w	r2, #4
 8007ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d003      	beq.n	8007cc6 <HAL_TIM_IRQHandler+0x9e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0304 	and.w	r3, r3, #4
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d122      	bne.n	8008a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d11b      	bne.n	8008a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0204 	mvn.w	r2, #4
 8008a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2202      	movs	r2, #2
 8008a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f98b 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007cc4:	e005      	b.n	8007cd2 <HAL_TIM_IRQHandler+0xaa>
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f98b 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008a4c:	e005      	b.n	8008a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f97d 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f98e 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	771a      	strb	r2, [r3, #28]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f97d 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f98e 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d122      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d11b      	bne.n	8007d2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0208 	mvn.w	r2, #8
 8007cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2204      	movs	r2, #4
 8007d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	69db      	ldr	r3, [r3, #28]
 8007d0a:	f003 0303 	and.w	r3, r3, #3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d003      	beq.n	8007d1a <HAL_TIM_IRQHandler+0xf2>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b08      	cmp	r3, #8
 8008a6c:	d122      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0208 	mvn.w	r2, #8
 8008a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f961 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007d18:	e005      	b.n	8007d26 <HAL_TIM_IRQHandler+0xfe>
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f961 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008aa0:	e005      	b.n	8008aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f953 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f964 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	771a      	strb	r2, [r3, #28]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f953 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f964 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d122      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b10      	cmp	r3, #16
 8007d46:	d11b      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0210 	mvn.w	r2, #16
 8007d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2208      	movs	r2, #8
 8007d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0x146>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d122      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b10      	cmp	r3, #16
 8008ace:	d11b      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0210 	mvn.w	r2, #16
 8008ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2208      	movs	r2, #8
 8008ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f937 	bl	8007fda <HAL_TIM_IC_CaptureCallback>
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_IRQHandler+0x152>
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f937 	bl	8008d62 <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f929 	bl	8007fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f93a 	bl	8007fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	771a      	strb	r2, [r3, #28]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f929 	bl	8008d4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f93a 	bl	8008d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d10e      	bne.n	8007dac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d107      	bne.n	8007dac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0201 	mvn.w	r2, #1
 8007da4:	611a      	str	r2, [r3, #16]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d10e      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d107      	bne.n	8008b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0201 	mvn.w	r2, #1
 8008b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7f9 fe5c 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f7f9 f8dc 	bl	8001cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d10e      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc4:	2b80      	cmp	r3, #128	; 0x80
 8007dc6:	d107      	bne.n	8007dd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dd0:	611a      	str	r2, [r3, #16]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3e:	2b80      	cmp	r3, #128	; 0x80
 8008b40:	d10e      	bne.n	8008b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4c:	2b80      	cmp	r3, #128	; 0x80
 8008b4e:	d107      	bne.n	8008b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fab2 	bl	800833c <HAL_TIMEx_BreakCallback>
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fab2 	bl	80090c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d10e      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dfc:	611a      	str	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d10e      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d107      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f8ff 	bl	8008002 <HAL_TIM_TriggerCallback>
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f8ff 	bl	8008d8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	d10e      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d107      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0220 	mvn.w	r2, #32
 8007e28:	611a      	str	r2, [r3, #16]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d10e      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d107      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0220 	mvn.w	r2, #32
 8008bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fa7c 	bl	8008328 <HAL_TIMEx_CommutCallback>
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fa7c 	bl	80090b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_ConfigClockSource>:
 8008bb8:	bf00      	nop
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d101      	bne.n	8007e54 <HAL_TIM_ConfigClockSource+0x1c>
 8007e50:	2302      	movs	r3, #2
 8007e52:	e0b4      	b.n	8007fbe <HAL_TIM_ConfigClockSource+0x186>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d101      	bne.n	8008bdc <HAL_TIM_ConfigClockSource+0x1c>
 8008bd8:	2302      	movs	r3, #2
 8008bda:	e0b4      	b.n	8008d46 <HAL_TIM_ConfigClockSource+0x186>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8c:	d03e      	beq.n	8007f0c <HAL_TIM_ConfigClockSource+0xd4>
 8007e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e92:	f200 8087 	bhi.w	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9a:	f000 8086 	beq.w	8007faa <HAL_TIM_ConfigClockSource+0x172>
 8007e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea2:	d87f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ea4:	2b70      	cmp	r3, #112	; 0x70
 8007ea6:	d01a      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0xa6>
 8007ea8:	2b70      	cmp	r3, #112	; 0x70
 8007eaa:	d87b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eac:	2b60      	cmp	r3, #96	; 0x60
 8007eae:	d050      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0x11a>
 8007eb0:	2b60      	cmp	r3, #96	; 0x60
 8007eb2:	d877      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb4:	2b50      	cmp	r3, #80	; 0x50
 8007eb6:	d03c      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0xfa>
 8007eb8:	2b50      	cmp	r3, #80	; 0x50
 8007eba:	d873      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d058      	beq.n	8007f72 <HAL_TIM_ConfigClockSource+0x13a>
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d86f      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec4:	2b30      	cmp	r3, #48	; 0x30
 8007ec6:	d064      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d86b      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	d060      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d867      	bhi.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d05c      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d05a      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x15a>
 8007edc:	e062      	b.n	8007fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c14:	d03e      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0xd4>
 8008c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c1a:	f200 8087 	bhi.w	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c22:	f000 8086 	beq.w	8008d32 <HAL_TIM_ConfigClockSource+0x172>
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2a:	d87f      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c2c:	2b70      	cmp	r3, #112	; 0x70
 8008c2e:	d01a      	beq.n	8008c66 <HAL_TIM_ConfigClockSource+0xa6>
 8008c30:	2b70      	cmp	r3, #112	; 0x70
 8008c32:	d87b      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c34:	2b60      	cmp	r3, #96	; 0x60
 8008c36:	d050      	beq.n	8008cda <HAL_TIM_ConfigClockSource+0x11a>
 8008c38:	2b60      	cmp	r3, #96	; 0x60
 8008c3a:	d877      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c3c:	2b50      	cmp	r3, #80	; 0x50
 8008c3e:	d03c      	beq.n	8008cba <HAL_TIM_ConfigClockSource+0xfa>
 8008c40:	2b50      	cmp	r3, #80	; 0x50
 8008c42:	d873      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c44:	2b40      	cmp	r3, #64	; 0x40
 8008c46:	d058      	beq.n	8008cfa <HAL_TIM_ConfigClockSource+0x13a>
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	d86f      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c4c:	2b30      	cmp	r3, #48	; 0x30
 8008c4e:	d064      	beq.n	8008d1a <HAL_TIM_ConfigClockSource+0x15a>
 8008c50:	2b30      	cmp	r3, #48	; 0x30
 8008c52:	d86b      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c54:	2b20      	cmp	r3, #32
 8008c56:	d060      	beq.n	8008d1a <HAL_TIM_ConfigClockSource+0x15a>
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d867      	bhi.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d05c      	beq.n	8008d1a <HAL_TIM_ConfigClockSource+0x15a>
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d05a      	beq.n	8008d1a <HAL_TIM_ConfigClockSource+0x15a>
 8008c64:	e062      	b.n	8008d2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6899      	ldr	r1, [r3, #8]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f000 f98d 	bl	800820c <TIM_ETR_SetConfig>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6818      	ldr	r0, [r3, #0]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	6899      	ldr	r1, [r3, #8]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f000 f98d 	bl	8008f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	609a      	str	r2, [r3, #8]
      break;
 8007f0a:	e04f      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	609a      	str	r2, [r3, #8]
      break;
 8008c92:	e04f      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	6899      	ldr	r1, [r3, #8]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f000 f976 	bl	800820c <TIM_ETR_SetConfig>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	6899      	ldr	r1, [r3, #8]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f000 f976 	bl	8008f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f2e:	609a      	str	r2, [r3, #8]
      break;
 8007f30:	e03c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cb6:	609a      	str	r2, [r3, #8]
      break;
 8008cb8:	e03c      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6859      	ldr	r1, [r3, #4]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f000 f8ea 	bl	8008118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2150      	movs	r1, #80	; 0x50
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f943 	bl	80081d6 <TIM_ITRx_SetConfig>
      break;
 8007f50:	e02c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	6859      	ldr	r1, [r3, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f000 f8ea 	bl	8008ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2150      	movs	r1, #80	; 0x50
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f943 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 8008cd8:	e02c      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6859      	ldr	r1, [r3, #4]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 f909 	bl	8008176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2160      	movs	r1, #96	; 0x60
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f933 	bl	80081d6 <TIM_ITRx_SetConfig>
      break;
 8007f70:	e01c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	6859      	ldr	r1, [r3, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	f000 f909 	bl	8008efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2160      	movs	r1, #96	; 0x60
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f933 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 8008cf8:	e01c      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f000 f8ca 	bl	8008118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2140      	movs	r1, #64	; 0x40
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f923 	bl	80081d6 <TIM_ITRx_SetConfig>
      break;
 8007f90:	e00c      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	6859      	ldr	r1, [r3, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f000 f8ca 	bl	8008ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2140      	movs	r1, #64	; 0x40
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 f923 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 8008d18:	e00c      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f000 f91a 	bl	80081d6 <TIM_ITRx_SetConfig>
      break;
 8007fa2:	e003      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4619      	mov	r1, r3
 8008d24:	4610      	mov	r0, r2
 8008d26:	f000 f91a 	bl	8008f5e <TIM_ITRx_SetConfig>
      break;
 8008d2a:	e003      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa8:	e000      	b.n	8007fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <HAL_TIM_OC_DelayElapsedCallback>:
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d30:	e000      	b.n	8008d34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fce:	bf00      	nop
 8007fd0:	370c      	adds	r7, #12
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <HAL_TIM_IC_CaptureCallback>:
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <HAL_TIM_PWM_PulseFinishedCallback>:
 8008d6a:	bf00      	nop
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <HAL_TIM_TriggerCallback>:
 8008d7e:	bf00      	nop
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <TIM_Base_SetConfig>:
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a34      	ldr	r2, [pc, #208]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00f      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008036:	d00b      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a31      	ldr	r2, [pc, #196]	; (8008100 <TIM_Base_SetConfig+0xe8>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d007      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a30      	ldr	r2, [pc, #192]	; (8008104 <TIM_Base_SetConfig+0xec>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0x38>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a2f      	ldr	r2, [pc, #188]	; (8008108 <TIM_Base_SetConfig+0xf0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d108      	bne.n	8008062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a25      	ldr	r2, [pc, #148]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d017      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a22      	ldr	r2, [pc, #136]	; (8008100 <TIM_Base_SetConfig+0xe8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a21      	ldr	r2, [pc, #132]	; (8008104 <TIM_Base_SetConfig+0xec>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a20      	ldr	r2, [pc, #128]	; (8008108 <TIM_Base_SetConfig+0xf0>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a1f      	ldr	r2, [pc, #124]	; (800810c <TIM_Base_SetConfig+0xf4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a1e      	ldr	r2, [pc, #120]	; (8008110 <TIM_Base_SetConfig+0xf8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x8a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <TIM_Base_SetConfig+0xfc>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a34      	ldr	r2, [pc, #208]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00f      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dbe:	d00b      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a31      	ldr	r2, [pc, #196]	; (8008e88 <TIM_Base_SetConfig+0xe8>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d007      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a30      	ldr	r2, [pc, #192]	; (8008e8c <TIM_Base_SetConfig+0xec>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <TIM_Base_SetConfig+0x38>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a2f      	ldr	r2, [pc, #188]	; (8008e90 <TIM_Base_SetConfig+0xf0>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d108      	bne.n	8008dea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01b      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008df8:	d017      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <TIM_Base_SetConfig+0xe8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a21      	ldr	r2, [pc, #132]	; (8008e8c <TIM_Base_SetConfig+0xec>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00f      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a20      	ldr	r2, [pc, #128]	; (8008e90 <TIM_Base_SetConfig+0xf0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00b      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a1f      	ldr	r2, [pc, #124]	; (8008e94 <TIM_Base_SetConfig+0xf4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a1e      	ldr	r2, [pc, #120]	; (8008e98 <TIM_Base_SetConfig+0xf8>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_Base_SetConfig+0x8a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1d      	ldr	r2, [pc, #116]	; (8008e9c <TIM_Base_SetConfig+0xfc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d108      	bne.n	8008e3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a08      	ldr	r2, [pc, #32]	; (80080fc <TIM_Base_SetConfig+0xe4>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d103      	bne.n	80080e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <TIM_Base_SetConfig+0xe4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d103      	bne.n	8008e70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	691a      	ldr	r2, [r3, #16]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	615a      	str	r2, [r3, #20]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800
 8008108:	40000c00 	.word	0x40000c00
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800

08008118 <TIM_TI1_ConfigInputStage>:
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	615a      	str	r2, [r3, #20]
}
 8008e76:	bf00      	nop
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	40010000 	.word	0x40010000
 8008e88:	40000400 	.word	0x40000400
 8008e8c:	40000800 	.word	0x40000800
 8008e90:	40000c00 	.word	0x40000c00
 8008e94:	40014000 	.word	0x40014000
 8008e98:	40014400 	.word	0x40014400
 8008e9c:	40014800 	.word	0x40014800

08008ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	f023 0201 	bic.w	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f023 030a 	bic.w	r3, r3, #10
 8008154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <TIM_TI2_ConfigInputStage>:
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0201 	bic.w	r2, r3, #1
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	011b      	lsls	r3, r3, #4
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f023 030a 	bic.w	r3, r3, #10
 8008edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	621a      	str	r2, [r3, #32]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008176:	b480      	push	{r7}
 8008178:	b087      	sub	sp, #28
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008efe:	b480      	push	{r7}
 8008f00:	b087      	sub	sp, #28
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f023 0210 	bic.w	r2, r3, #16
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	031b      	lsls	r3, r3, #12
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	621a      	str	r2, [r3, #32]
}
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <TIM_ITRx_SetConfig>:
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	f023 0210 	bic.w	r2, r3, #16
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	031b      	lsls	r3, r3, #12
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	621a      	str	r2, [r3, #32]
}
 8008f52:	bf00      	nop
 8008f54:	371c      	adds	r7, #28
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f043 0307 	orr.w	r3, r3, #7
 80081f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	609a      	str	r2, [r3, #8]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <TIM_ETR_SetConfig>:
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f043 0307 	orr.w	r3, r3, #7
 8008f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	609a      	str	r2, [r3, #8]
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800820c:	b480      	push	{r7}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
 8008218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	021a      	lsls	r2, r3, #8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	431a      	orrs	r2, r3
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4313      	orrs	r3, r2
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	609a      	str	r2, [r3, #8]
}
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIMEx_MasterConfigSynchronization>:
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	021a      	lsls	r2, r3, #8
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	697a      	ldr	r2, [r7, #20]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	609a      	str	r2, [r3, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008260:	2302      	movs	r3, #2
 8008262:	e050      	b.n	8008306 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1c      	ldr	r2, [pc, #112]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d018      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b0:	d013      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00e      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d009      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a15      	ldr	r2, [pc, #84]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d004      	beq.n	80082da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a13      	ldr	r2, [pc, #76]	; (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d10c      	bne.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	609a      	str	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e050      	b.n	800908e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1c      	ldr	r2, [pc, #112]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d018      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009038:	d013      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00e      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a16      	ldr	r2, [pc, #88]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d009      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a13      	ldr	r2, [pc, #76]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d10c      	bne.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4313      	orrs	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3714      	adds	r7, #20
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40010000 	.word	0x40010000
 8008318:	40000400 	.word	0x40000400
 800831c:	40000800 	.word	0x40000800
 8008320:	40000c00 	.word	0x40000c00
 8008324:	40014000 	.word	0x40014000

08008328 <HAL_TIMEx_CommutCallback>:
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40010000 	.word	0x40010000
 80090a0:	40000400 	.word	0x40000400
 80090a4:	40000800 	.word	0x40000800
 80090a8:	40000c00 	.word	0x40000c00
 80090ac:	40014000 	.word	0x40014000

080090b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_TIMEx_BreakCallback>:
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <__libc_init_array>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	4d0d      	ldr	r5, [pc, #52]	; (8008388 <__libc_init_array+0x38>)
 8008354:	4c0d      	ldr	r4, [pc, #52]	; (800838c <__libc_init_array+0x3c>)
 8008356:	1b64      	subs	r4, r4, r5
 8008358:	10a4      	asrs	r4, r4, #2
 800835a:	2600      	movs	r6, #0
 800835c:	42a6      	cmp	r6, r4
 800835e:	d109      	bne.n	8008374 <__libc_init_array+0x24>
 8008360:	4d0b      	ldr	r5, [pc, #44]	; (8008390 <__libc_init_array+0x40>)
 8008362:	4c0c      	ldr	r4, [pc, #48]	; (8008394 <__libc_init_array+0x44>)
 8008364:	f000 fa6a 	bl	800883c <_init>
 8008368:	1b64      	subs	r4, r4, r5
 800836a:	10a4      	asrs	r4, r4, #2
 800836c:	2600      	movs	r6, #0
 800836e:	42a6      	cmp	r6, r4
 8008370:	d105      	bne.n	800837e <__libc_init_array+0x2e>
 8008372:	bd70      	pop	{r4, r5, r6, pc}
 8008374:	f855 3b04 	ldr.w	r3, [r5], #4
 8008378:	4798      	blx	r3
 800837a:	3601      	adds	r6, #1
 800837c:	e7ee      	b.n	800835c <__libc_init_array+0xc>
 800837e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008382:	4798      	blx	r3
 8008384:	3601      	adds	r6, #1
 8008386:	e7f2      	b.n	800836e <__libc_init_array+0x1e>
 8008388:	08008a7c 	.word	0x08008a7c
 800838c:	08008a7c 	.word	0x08008a7c
 8008390:	08008a7c 	.word	0x08008a7c
 8008394:	08008a80 	.word	0x08008a80

08008398 <memcpy>:
 8008398:	440a      	add	r2, r1
 800839a:	4291      	cmp	r1, r2
 800839c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083a0:	d100      	bne.n	80083a4 <memcpy+0xc>
 80083a2:	4770      	bx	lr
 80083a4:	b510      	push	{r4, lr}
 80083a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ae:	4291      	cmp	r1, r2
 80083b0:	d1f9      	bne.n	80083a6 <memcpy+0xe>
 80083b2:	bd10      	pop	{r4, pc}

080083b4 <calloc>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <calloc+0xc>)
 80083b6:	460a      	mov	r2, r1
 80083b8:	4601      	mov	r1, r0
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	f000 b802 	b.w	80083c4 <_calloc_r>
 80083c0:	2000005c 	.word	0x2000005c

080083c4 <_calloc_r>:
 80083c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083c6:	fba1 2402 	umull	r2, r4, r1, r2
 80083ca:	b94c      	cbnz	r4, 80083e0 <_calloc_r+0x1c>
 80083cc:	4611      	mov	r1, r2
 80083ce:	9201      	str	r2, [sp, #4]
 80083d0:	f000 f83e 	bl	8008450 <_malloc_r>
 80083d4:	9a01      	ldr	r2, [sp, #4]
 80083d6:	4605      	mov	r5, r0
 80083d8:	b930      	cbnz	r0, 80083e8 <_calloc_r+0x24>
 80083da:	4628      	mov	r0, r5
 80083dc:	b003      	add	sp, #12
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	220c      	movs	r2, #12
 80083e2:	6002      	str	r2, [r0, #0]
 80083e4:	2500      	movs	r5, #0
 80083e6:	e7f8      	b.n	80083da <_calloc_r+0x16>
 80083e8:	4621      	mov	r1, r4
 80083ea:	f000 f807 	bl	80083fc <memset>
 80083ee:	e7f4      	b.n	80083da <_calloc_r+0x16>

080083f0 <__errno>:
 80083f0:	4b01      	ldr	r3, [pc, #4]	; (80083f8 <__errno+0x8>)
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000005c 	.word	0x2000005c

080083fc <memset>:
 80083fc:	4402      	add	r2, r0
 80083fe:	4603      	mov	r3, r0
 8008400:	4293      	cmp	r3, r2
 8008402:	d100      	bne.n	8008406 <memset+0xa>
 8008404:	4770      	bx	lr
 8008406:	f803 1b01 	strb.w	r1, [r3], #1
 800840a:	e7f9      	b.n	8008400 <memset+0x4>

0800840c <__retarget_lock_acquire_recursive>:
 800840c:	4770      	bx	lr

0800840e <__retarget_lock_release_recursive>:
 800840e:	4770      	bx	lr

08008410 <sbrk_aligned>:
 8008410:	b570      	push	{r4, r5, r6, lr}
 8008412:	4e0e      	ldr	r6, [pc, #56]	; (800844c <sbrk_aligned+0x3c>)
 8008414:	460c      	mov	r4, r1
 8008416:	6831      	ldr	r1, [r6, #0]
 8008418:	4605      	mov	r5, r0
 800841a:	b911      	cbnz	r1, 8008422 <sbrk_aligned+0x12>
 800841c:	f000 f89a 	bl	8008554 <_sbrk_r>
 8008420:	6030      	str	r0, [r6, #0]
 8008422:	4621      	mov	r1, r4
 8008424:	4628      	mov	r0, r5
 8008426:	f000 f895 	bl	8008554 <_sbrk_r>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d00a      	beq.n	8008444 <sbrk_aligned+0x34>
 800842e:	1cc4      	adds	r4, r0, #3
 8008430:	f024 0403 	bic.w	r4, r4, #3
 8008434:	42a0      	cmp	r0, r4
 8008436:	d007      	beq.n	8008448 <sbrk_aligned+0x38>
 8008438:	1a21      	subs	r1, r4, r0
 800843a:	4628      	mov	r0, r5
 800843c:	f000 f88a 	bl	8008554 <_sbrk_r>
 8008440:	3001      	adds	r0, #1
 8008442:	d101      	bne.n	8008448 <sbrk_aligned+0x38>
 8008444:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008448:	4620      	mov	r0, r4
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	2000090c 	.word	0x2000090c

08008450 <_malloc_r>:
 8008450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008454:	1ccd      	adds	r5, r1, #3
 8008456:	f025 0503 	bic.w	r5, r5, #3
 800845a:	3508      	adds	r5, #8
 800845c:	2d0c      	cmp	r5, #12
 800845e:	bf38      	it	cc
 8008460:	250c      	movcc	r5, #12
 8008462:	2d00      	cmp	r5, #0
 8008464:	4607      	mov	r7, r0
 8008466:	db01      	blt.n	800846c <_malloc_r+0x1c>
 8008468:	42a9      	cmp	r1, r5
 800846a:	d905      	bls.n	8008478 <_malloc_r+0x28>
 800846c:	230c      	movs	r3, #12
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	2600      	movs	r6, #0
 8008472:	4630      	mov	r0, r6
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	4e2f      	ldr	r6, [pc, #188]	; (8008538 <_malloc_r+0xe8>)
 800847a:	f000 f85f 	bl	800853c <__malloc_lock>
 800847e:	6833      	ldr	r3, [r6, #0]
 8008480:	461c      	mov	r4, r3
 8008482:	bb44      	cbnz	r4, 80084d6 <_malloc_r+0x86>
 8008484:	4629      	mov	r1, r5
 8008486:	4638      	mov	r0, r7
 8008488:	f7ff ffc2 	bl	8008410 <sbrk_aligned>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	4604      	mov	r4, r0
 8008490:	d14f      	bne.n	8008532 <_malloc_r+0xe2>
 8008492:	6834      	ldr	r4, [r6, #0]
 8008494:	4626      	mov	r6, r4
 8008496:	2e00      	cmp	r6, #0
 8008498:	d142      	bne.n	8008520 <_malloc_r+0xd0>
 800849a:	2c00      	cmp	r4, #0
 800849c:	d043      	beq.n	8008526 <_malloc_r+0xd6>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	4631      	mov	r1, r6
 80084a2:	4638      	mov	r0, r7
 80084a4:	eb04 0803 	add.w	r8, r4, r3
 80084a8:	f000 f854 	bl	8008554 <_sbrk_r>
 80084ac:	4580      	cmp	r8, r0
 80084ae:	d13a      	bne.n	8008526 <_malloc_r+0xd6>
 80084b0:	6823      	ldr	r3, [r4, #0]
 80084b2:	3503      	adds	r5, #3
 80084b4:	1aed      	subs	r5, r5, r3
 80084b6:	f025 0503 	bic.w	r5, r5, #3
 80084ba:	3508      	adds	r5, #8
 80084bc:	2d0c      	cmp	r5, #12
 80084be:	bf38      	it	cc
 80084c0:	250c      	movcc	r5, #12
 80084c2:	4629      	mov	r1, r5
 80084c4:	4638      	mov	r0, r7
 80084c6:	f7ff ffa3 	bl	8008410 <sbrk_aligned>
 80084ca:	3001      	adds	r0, #1
 80084cc:	d02b      	beq.n	8008526 <_malloc_r+0xd6>
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	442b      	add	r3, r5
 80084d2:	6023      	str	r3, [r4, #0]
 80084d4:	e00e      	b.n	80084f4 <_malloc_r+0xa4>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	1b52      	subs	r2, r2, r5
 80084da:	d41e      	bmi.n	800851a <_malloc_r+0xca>
 80084dc:	2a0b      	cmp	r2, #11
 80084de:	d916      	bls.n	800850e <_malloc_r+0xbe>
 80084e0:	1961      	adds	r1, r4, r5
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	6025      	str	r5, [r4, #0]
 80084e6:	bf18      	it	ne
 80084e8:	6059      	strne	r1, [r3, #4]
 80084ea:	6863      	ldr	r3, [r4, #4]
 80084ec:	bf08      	it	eq
 80084ee:	6031      	streq	r1, [r6, #0]
 80084f0:	5162      	str	r2, [r4, r5]
 80084f2:	604b      	str	r3, [r1, #4]
 80084f4:	4638      	mov	r0, r7
 80084f6:	f104 060b 	add.w	r6, r4, #11
 80084fa:	f000 f825 	bl	8008548 <__malloc_unlock>
 80084fe:	f026 0607 	bic.w	r6, r6, #7
 8008502:	1d23      	adds	r3, r4, #4
 8008504:	1af2      	subs	r2, r6, r3
 8008506:	d0b4      	beq.n	8008472 <_malloc_r+0x22>
 8008508:	1b9b      	subs	r3, r3, r6
 800850a:	50a3      	str	r3, [r4, r2]
 800850c:	e7b1      	b.n	8008472 <_malloc_r+0x22>
 800850e:	6862      	ldr	r2, [r4, #4]
 8008510:	42a3      	cmp	r3, r4
 8008512:	bf0c      	ite	eq
 8008514:	6032      	streq	r2, [r6, #0]
 8008516:	605a      	strne	r2, [r3, #4]
 8008518:	e7ec      	b.n	80084f4 <_malloc_r+0xa4>
 800851a:	4623      	mov	r3, r4
 800851c:	6864      	ldr	r4, [r4, #4]
 800851e:	e7b0      	b.n	8008482 <_malloc_r+0x32>
 8008520:	4634      	mov	r4, r6
 8008522:	6876      	ldr	r6, [r6, #4]
 8008524:	e7b7      	b.n	8008496 <_malloc_r+0x46>
 8008526:	230c      	movs	r3, #12
 8008528:	603b      	str	r3, [r7, #0]
 800852a:	4638      	mov	r0, r7
 800852c:	f000 f80c 	bl	8008548 <__malloc_unlock>
 8008530:	e79f      	b.n	8008472 <_malloc_r+0x22>
 8008532:	6025      	str	r5, [r4, #0]
 8008534:	e7de      	b.n	80084f4 <_malloc_r+0xa4>
 8008536:	bf00      	nop
 8008538:	20000908 	.word	0x20000908

0800853c <__malloc_lock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_lock+0x8>)
 800853e:	f7ff bf65 	b.w	800840c <__retarget_lock_acquire_recursive>
 8008542:	bf00      	nop
 8008544:	20000900 	.word	0x20000900

08008548 <__malloc_unlock>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__malloc_unlock+0x8>)
 800854a:	f7ff bf60 	b.w	800840e <__retarget_lock_release_recursive>
 800854e:	bf00      	nop
 8008550:	20000900 	.word	0x20000900

08008554 <_sbrk_r>:
 8008554:	b538      	push	{r3, r4, r5, lr}
 8008556:	4d06      	ldr	r5, [pc, #24]	; (8008570 <_sbrk_r+0x1c>)
 8008558:	2300      	movs	r3, #0
 800855a:	4604      	mov	r4, r0
 800855c:	4608      	mov	r0, r1
 800855e:	602b      	str	r3, [r5, #0]
 8008560:	f7f9 ff5c 	bl	800241c <_sbrk>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_sbrk_r+0x1a>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_sbrk_r+0x1a>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	20000904 	.word	0x20000904

08008574 <__udivmoddi4>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	9e08      	ldr	r6, [sp, #32]
 800857a:	460d      	mov	r5, r1
 800857c:	4604      	mov	r4, r0
 800857e:	460f      	mov	r7, r1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d14a      	bne.n	800861a <__udivmoddi4+0xa6>
 8008584:	428a      	cmp	r2, r1
 8008586:	4694      	mov	ip, r2
 8008588:	d965      	bls.n	8008656 <__udivmoddi4+0xe2>
 800858a:	fab2 f382 	clz	r3, r2
 800858e:	b143      	cbz	r3, 80085a2 <__udivmoddi4+0x2e>
 8008590:	fa02 fc03 	lsl.w	ip, r2, r3
 8008594:	f1c3 0220 	rsb	r2, r3, #32
 8008598:	409f      	lsls	r7, r3
 800859a:	fa20 f202 	lsr.w	r2, r0, r2
 800859e:	4317      	orrs	r7, r2
 80085a0:	409c      	lsls	r4, r3
 80085a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80085a6:	fa1f f58c 	uxth.w	r5, ip
 80085aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80085ae:	0c22      	lsrs	r2, r4, #16
 80085b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80085b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80085b8:	fb01 f005 	mul.w	r0, r1, r5
 80085bc:	4290      	cmp	r0, r2
 80085be:	d90a      	bls.n	80085d6 <__udivmoddi4+0x62>
 80085c0:	eb1c 0202 	adds.w	r2, ip, r2
 80085c4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80085c8:	f080 811c 	bcs.w	8008804 <__udivmoddi4+0x290>
 80085cc:	4290      	cmp	r0, r2
 80085ce:	f240 8119 	bls.w	8008804 <__udivmoddi4+0x290>
 80085d2:	3902      	subs	r1, #2
 80085d4:	4462      	add	r2, ip
 80085d6:	1a12      	subs	r2, r2, r0
 80085d8:	b2a4      	uxth	r4, r4
 80085da:	fbb2 f0fe 	udiv	r0, r2, lr
 80085de:	fb0e 2210 	mls	r2, lr, r0, r2
 80085e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80085e6:	fb00 f505 	mul.w	r5, r0, r5
 80085ea:	42a5      	cmp	r5, r4
 80085ec:	d90a      	bls.n	8008604 <__udivmoddi4+0x90>
 80085ee:	eb1c 0404 	adds.w	r4, ip, r4
 80085f2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80085f6:	f080 8107 	bcs.w	8008808 <__udivmoddi4+0x294>
 80085fa:	42a5      	cmp	r5, r4
 80085fc:	f240 8104 	bls.w	8008808 <__udivmoddi4+0x294>
 8008600:	4464      	add	r4, ip
 8008602:	3802      	subs	r0, #2
 8008604:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008608:	1b64      	subs	r4, r4, r5
 800860a:	2100      	movs	r1, #0
 800860c:	b11e      	cbz	r6, 8008616 <__udivmoddi4+0xa2>
 800860e:	40dc      	lsrs	r4, r3
 8008610:	2300      	movs	r3, #0
 8008612:	e9c6 4300 	strd	r4, r3, [r6]
 8008616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861a:	428b      	cmp	r3, r1
 800861c:	d908      	bls.n	8008630 <__udivmoddi4+0xbc>
 800861e:	2e00      	cmp	r6, #0
 8008620:	f000 80ed 	beq.w	80087fe <__udivmoddi4+0x28a>
 8008624:	2100      	movs	r1, #0
 8008626:	e9c6 0500 	strd	r0, r5, [r6]
 800862a:	4608      	mov	r0, r1
 800862c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008630:	fab3 f183 	clz	r1, r3
 8008634:	2900      	cmp	r1, #0
 8008636:	d149      	bne.n	80086cc <__udivmoddi4+0x158>
 8008638:	42ab      	cmp	r3, r5
 800863a:	d302      	bcc.n	8008642 <__udivmoddi4+0xce>
 800863c:	4282      	cmp	r2, r0
 800863e:	f200 80f8 	bhi.w	8008832 <__udivmoddi4+0x2be>
 8008642:	1a84      	subs	r4, r0, r2
 8008644:	eb65 0203 	sbc.w	r2, r5, r3
 8008648:	2001      	movs	r0, #1
 800864a:	4617      	mov	r7, r2
 800864c:	2e00      	cmp	r6, #0
 800864e:	d0e2      	beq.n	8008616 <__udivmoddi4+0xa2>
 8008650:	e9c6 4700 	strd	r4, r7, [r6]
 8008654:	e7df      	b.n	8008616 <__udivmoddi4+0xa2>
 8008656:	b902      	cbnz	r2, 800865a <__udivmoddi4+0xe6>
 8008658:	deff      	udf	#255	; 0xff
 800865a:	fab2 f382 	clz	r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 8090 	bne.w	8008784 <__udivmoddi4+0x210>
 8008664:	1a8a      	subs	r2, r1, r2
 8008666:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800866a:	fa1f fe8c 	uxth.w	lr, ip
 800866e:	2101      	movs	r1, #1
 8008670:	fbb2 f5f7 	udiv	r5, r2, r7
 8008674:	fb07 2015 	mls	r0, r7, r5, r2
 8008678:	0c22      	lsrs	r2, r4, #16
 800867a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800867e:	fb0e f005 	mul.w	r0, lr, r5
 8008682:	4290      	cmp	r0, r2
 8008684:	d908      	bls.n	8008698 <__udivmoddi4+0x124>
 8008686:	eb1c 0202 	adds.w	r2, ip, r2
 800868a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800868e:	d202      	bcs.n	8008696 <__udivmoddi4+0x122>
 8008690:	4290      	cmp	r0, r2
 8008692:	f200 80cb 	bhi.w	800882c <__udivmoddi4+0x2b8>
 8008696:	4645      	mov	r5, r8
 8008698:	1a12      	subs	r2, r2, r0
 800869a:	b2a4      	uxth	r4, r4
 800869c:	fbb2 f0f7 	udiv	r0, r2, r7
 80086a0:	fb07 2210 	mls	r2, r7, r0, r2
 80086a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80086a8:	fb0e fe00 	mul.w	lr, lr, r0
 80086ac:	45a6      	cmp	lr, r4
 80086ae:	d908      	bls.n	80086c2 <__udivmoddi4+0x14e>
 80086b0:	eb1c 0404 	adds.w	r4, ip, r4
 80086b4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80086b8:	d202      	bcs.n	80086c0 <__udivmoddi4+0x14c>
 80086ba:	45a6      	cmp	lr, r4
 80086bc:	f200 80bb 	bhi.w	8008836 <__udivmoddi4+0x2c2>
 80086c0:	4610      	mov	r0, r2
 80086c2:	eba4 040e 	sub.w	r4, r4, lr
 80086c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80086ca:	e79f      	b.n	800860c <__udivmoddi4+0x98>
 80086cc:	f1c1 0720 	rsb	r7, r1, #32
 80086d0:	408b      	lsls	r3, r1
 80086d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80086d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80086da:	fa05 f401 	lsl.w	r4, r5, r1
 80086de:	fa20 f307 	lsr.w	r3, r0, r7
 80086e2:	40fd      	lsrs	r5, r7
 80086e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80086e8:	4323      	orrs	r3, r4
 80086ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80086ee:	fa1f fe8c 	uxth.w	lr, ip
 80086f2:	fb09 5518 	mls	r5, r9, r8, r5
 80086f6:	0c1c      	lsrs	r4, r3, #16
 80086f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80086fc:	fb08 f50e 	mul.w	r5, r8, lr
 8008700:	42a5      	cmp	r5, r4
 8008702:	fa02 f201 	lsl.w	r2, r2, r1
 8008706:	fa00 f001 	lsl.w	r0, r0, r1
 800870a:	d90b      	bls.n	8008724 <__udivmoddi4+0x1b0>
 800870c:	eb1c 0404 	adds.w	r4, ip, r4
 8008710:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008714:	f080 8088 	bcs.w	8008828 <__udivmoddi4+0x2b4>
 8008718:	42a5      	cmp	r5, r4
 800871a:	f240 8085 	bls.w	8008828 <__udivmoddi4+0x2b4>
 800871e:	f1a8 0802 	sub.w	r8, r8, #2
 8008722:	4464      	add	r4, ip
 8008724:	1b64      	subs	r4, r4, r5
 8008726:	b29d      	uxth	r5, r3
 8008728:	fbb4 f3f9 	udiv	r3, r4, r9
 800872c:	fb09 4413 	mls	r4, r9, r3, r4
 8008730:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008734:	fb03 fe0e 	mul.w	lr, r3, lr
 8008738:	45a6      	cmp	lr, r4
 800873a:	d908      	bls.n	800874e <__udivmoddi4+0x1da>
 800873c:	eb1c 0404 	adds.w	r4, ip, r4
 8008740:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008744:	d26c      	bcs.n	8008820 <__udivmoddi4+0x2ac>
 8008746:	45a6      	cmp	lr, r4
 8008748:	d96a      	bls.n	8008820 <__udivmoddi4+0x2ac>
 800874a:	3b02      	subs	r3, #2
 800874c:	4464      	add	r4, ip
 800874e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008752:	fba3 9502 	umull	r9, r5, r3, r2
 8008756:	eba4 040e 	sub.w	r4, r4, lr
 800875a:	42ac      	cmp	r4, r5
 800875c:	46c8      	mov	r8, r9
 800875e:	46ae      	mov	lr, r5
 8008760:	d356      	bcc.n	8008810 <__udivmoddi4+0x29c>
 8008762:	d053      	beq.n	800880c <__udivmoddi4+0x298>
 8008764:	b156      	cbz	r6, 800877c <__udivmoddi4+0x208>
 8008766:	ebb0 0208 	subs.w	r2, r0, r8
 800876a:	eb64 040e 	sbc.w	r4, r4, lr
 800876e:	fa04 f707 	lsl.w	r7, r4, r7
 8008772:	40ca      	lsrs	r2, r1
 8008774:	40cc      	lsrs	r4, r1
 8008776:	4317      	orrs	r7, r2
 8008778:	e9c6 7400 	strd	r7, r4, [r6]
 800877c:	4618      	mov	r0, r3
 800877e:	2100      	movs	r1, #0
 8008780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008784:	f1c3 0120 	rsb	r1, r3, #32
 8008788:	fa02 fc03 	lsl.w	ip, r2, r3
 800878c:	fa20 f201 	lsr.w	r2, r0, r1
 8008790:	fa25 f101 	lsr.w	r1, r5, r1
 8008794:	409d      	lsls	r5, r3
 8008796:	432a      	orrs	r2, r5
 8008798:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800879c:	fa1f fe8c 	uxth.w	lr, ip
 80087a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80087a4:	fb07 1510 	mls	r5, r7, r0, r1
 80087a8:	0c11      	lsrs	r1, r2, #16
 80087aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80087ae:	fb00 f50e 	mul.w	r5, r0, lr
 80087b2:	428d      	cmp	r5, r1
 80087b4:	fa04 f403 	lsl.w	r4, r4, r3
 80087b8:	d908      	bls.n	80087cc <__udivmoddi4+0x258>
 80087ba:	eb1c 0101 	adds.w	r1, ip, r1
 80087be:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80087c2:	d22f      	bcs.n	8008824 <__udivmoddi4+0x2b0>
 80087c4:	428d      	cmp	r5, r1
 80087c6:	d92d      	bls.n	8008824 <__udivmoddi4+0x2b0>
 80087c8:	3802      	subs	r0, #2
 80087ca:	4461      	add	r1, ip
 80087cc:	1b49      	subs	r1, r1, r5
 80087ce:	b292      	uxth	r2, r2
 80087d0:	fbb1 f5f7 	udiv	r5, r1, r7
 80087d4:	fb07 1115 	mls	r1, r7, r5, r1
 80087d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80087dc:	fb05 f10e 	mul.w	r1, r5, lr
 80087e0:	4291      	cmp	r1, r2
 80087e2:	d908      	bls.n	80087f6 <__udivmoddi4+0x282>
 80087e4:	eb1c 0202 	adds.w	r2, ip, r2
 80087e8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80087ec:	d216      	bcs.n	800881c <__udivmoddi4+0x2a8>
 80087ee:	4291      	cmp	r1, r2
 80087f0:	d914      	bls.n	800881c <__udivmoddi4+0x2a8>
 80087f2:	3d02      	subs	r5, #2
 80087f4:	4462      	add	r2, ip
 80087f6:	1a52      	subs	r2, r2, r1
 80087f8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80087fc:	e738      	b.n	8008670 <__udivmoddi4+0xfc>
 80087fe:	4631      	mov	r1, r6
 8008800:	4630      	mov	r0, r6
 8008802:	e708      	b.n	8008616 <__udivmoddi4+0xa2>
 8008804:	4639      	mov	r1, r7
 8008806:	e6e6      	b.n	80085d6 <__udivmoddi4+0x62>
 8008808:	4610      	mov	r0, r2
 800880a:	e6fb      	b.n	8008604 <__udivmoddi4+0x90>
 800880c:	4548      	cmp	r0, r9
 800880e:	d2a9      	bcs.n	8008764 <__udivmoddi4+0x1f0>
 8008810:	ebb9 0802 	subs.w	r8, r9, r2
 8008814:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008818:	3b01      	subs	r3, #1
 800881a:	e7a3      	b.n	8008764 <__udivmoddi4+0x1f0>
 800881c:	4645      	mov	r5, r8
 800881e:	e7ea      	b.n	80087f6 <__udivmoddi4+0x282>
 8008820:	462b      	mov	r3, r5
 8008822:	e794      	b.n	800874e <__udivmoddi4+0x1da>
 8008824:	4640      	mov	r0, r8
 8008826:	e7d1      	b.n	80087cc <__udivmoddi4+0x258>
 8008828:	46d0      	mov	r8, sl
 800882a:	e77b      	b.n	8008724 <__udivmoddi4+0x1b0>
 800882c:	3d02      	subs	r5, #2
 800882e:	4462      	add	r2, ip
 8008830:	e732      	b.n	8008698 <__udivmoddi4+0x124>
 8008832:	4608      	mov	r0, r1
 8008834:	e70a      	b.n	800864c <__udivmoddi4+0xd8>
 8008836:	4464      	add	r4, ip
 8008838:	3802      	subs	r0, #2
 800883a:	e742      	b.n	80086c2 <__udivmoddi4+0x14e>

0800883c <_init>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	bf00      	nop
 8008840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008842:	bc08      	pop	{r3}
 8008844:	469e      	mov	lr, r3
 8008846:	4770      	bx	lr

08008848 <_fini>:
 8008848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800884a:	bf00      	nop
 800884c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800884e:	bc08      	pop	{r3}
 8008850:	469e      	mov	lr, r3
 8008852:	4770      	bx	lr
 80090cc:	bf00      	nop
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <calloc>:
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <calloc+0xc>)
 80090da:	460a      	mov	r2, r1
 80090dc:	4601      	mov	r1, r0
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	f000 b842 	b.w	8009168 <_calloc_r>
 80090e4:	20000010 	.word	0x20000010

080090e8 <__errno>:
 80090e8:	4b01      	ldr	r3, [pc, #4]	; (80090f0 <__errno+0x8>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000010 	.word	0x20000010

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	; (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	; (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	; (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	; (8009138 <__libc_init_array+0x44>)
 8009108:	f000 f8f6 	bl	80092f8 <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	08009538 	.word	0x08009538
 8009130:	08009538 	.word	0x08009538
 8009134:	08009538 	.word	0x08009538
 8009138:	0800953c 	.word	0x0800953c

0800913c <memcpy>:
 800913c:	440a      	add	r2, r1
 800913e:	4291      	cmp	r1, r2
 8009140:	f100 33ff 	add.w	r3, r0, #4294967295
 8009144:	d100      	bne.n	8009148 <memcpy+0xc>
 8009146:	4770      	bx	lr
 8009148:	b510      	push	{r4, lr}
 800914a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800914e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009152:	4291      	cmp	r1, r2
 8009154:	d1f9      	bne.n	800914a <memcpy+0xe>
 8009156:	bd10      	pop	{r4, pc}

08009158 <memset>:
 8009158:	4402      	add	r2, r0
 800915a:	4603      	mov	r3, r0
 800915c:	4293      	cmp	r3, r2
 800915e:	d100      	bne.n	8009162 <memset+0xa>
 8009160:	4770      	bx	lr
 8009162:	f803 1b01 	strb.w	r1, [r3], #1
 8009166:	e7f9      	b.n	800915c <memset+0x4>

08009168 <_calloc_r>:
 8009168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800916a:	fba1 2402 	umull	r2, r4, r1, r2
 800916e:	b94c      	cbnz	r4, 8009184 <_calloc_r+0x1c>
 8009170:	4611      	mov	r1, r2
 8009172:	9201      	str	r2, [sp, #4]
 8009174:	f000 f82e 	bl	80091d4 <_malloc_r>
 8009178:	9a01      	ldr	r2, [sp, #4]
 800917a:	4605      	mov	r5, r0
 800917c:	b930      	cbnz	r0, 800918c <_calloc_r+0x24>
 800917e:	4628      	mov	r0, r5
 8009180:	b003      	add	sp, #12
 8009182:	bd30      	pop	{r4, r5, pc}
 8009184:	220c      	movs	r2, #12
 8009186:	6002      	str	r2, [r0, #0]
 8009188:	2500      	movs	r5, #0
 800918a:	e7f8      	b.n	800917e <_calloc_r+0x16>
 800918c:	4621      	mov	r1, r4
 800918e:	f7ff ffe3 	bl	8009158 <memset>
 8009192:	e7f4      	b.n	800917e <_calloc_r+0x16>

08009194 <sbrk_aligned>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0e      	ldr	r6, [pc, #56]	; (80091d0 <sbrk_aligned+0x3c>)
 8009198:	460c      	mov	r4, r1
 800919a:	6831      	ldr	r1, [r6, #0]
 800919c:	4605      	mov	r5, r0
 800919e:	b911      	cbnz	r1, 80091a6 <sbrk_aligned+0x12>
 80091a0:	f000 f88c 	bl	80092bc <_sbrk_r>
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 f887 	bl	80092bc <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d00a      	beq.n	80091c8 <sbrk_aligned+0x34>
 80091b2:	1cc4      	adds	r4, r0, #3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d007      	beq.n	80091cc <sbrk_aligned+0x38>
 80091bc:	1a21      	subs	r1, r4, r0
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f87c 	bl	80092bc <_sbrk_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d101      	bne.n	80091cc <sbrk_aligned+0x38>
 80091c8:	f04f 34ff 	mov.w	r4, #4294967295
 80091cc:	4620      	mov	r0, r4
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	200007e4 	.word	0x200007e4

080091d4 <_malloc_r>:
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	1ccd      	adds	r5, r1, #3
 80091da:	f025 0503 	bic.w	r5, r5, #3
 80091de:	3508      	adds	r5, #8
 80091e0:	2d0c      	cmp	r5, #12
 80091e2:	bf38      	it	cc
 80091e4:	250c      	movcc	r5, #12
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	4607      	mov	r7, r0
 80091ea:	db01      	blt.n	80091f0 <_malloc_r+0x1c>
 80091ec:	42a9      	cmp	r1, r5
 80091ee:	d905      	bls.n	80091fc <_malloc_r+0x28>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	2600      	movs	r6, #0
 80091f6:	4630      	mov	r0, r6
 80091f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fc:	4e2e      	ldr	r6, [pc, #184]	; (80092b8 <_malloc_r+0xe4>)
 80091fe:	f000 f86d 	bl	80092dc <__malloc_lock>
 8009202:	6833      	ldr	r3, [r6, #0]
 8009204:	461c      	mov	r4, r3
 8009206:	bb34      	cbnz	r4, 8009256 <_malloc_r+0x82>
 8009208:	4629      	mov	r1, r5
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff ffc2 	bl	8009194 <sbrk_aligned>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	4604      	mov	r4, r0
 8009214:	d14d      	bne.n	80092b2 <_malloc_r+0xde>
 8009216:	6834      	ldr	r4, [r6, #0]
 8009218:	4626      	mov	r6, r4
 800921a:	2e00      	cmp	r6, #0
 800921c:	d140      	bne.n	80092a0 <_malloc_r+0xcc>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	4631      	mov	r1, r6
 8009222:	4638      	mov	r0, r7
 8009224:	eb04 0803 	add.w	r8, r4, r3
 8009228:	f000 f848 	bl	80092bc <_sbrk_r>
 800922c:	4580      	cmp	r8, r0
 800922e:	d13a      	bne.n	80092a6 <_malloc_r+0xd2>
 8009230:	6821      	ldr	r1, [r4, #0]
 8009232:	3503      	adds	r5, #3
 8009234:	1a6d      	subs	r5, r5, r1
 8009236:	f025 0503 	bic.w	r5, r5, #3
 800923a:	3508      	adds	r5, #8
 800923c:	2d0c      	cmp	r5, #12
 800923e:	bf38      	it	cc
 8009240:	250c      	movcc	r5, #12
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ffa5 	bl	8009194 <sbrk_aligned>
 800924a:	3001      	adds	r0, #1
 800924c:	d02b      	beq.n	80092a6 <_malloc_r+0xd2>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	442b      	add	r3, r5
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	e00e      	b.n	8009274 <_malloc_r+0xa0>
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	1b52      	subs	r2, r2, r5
 800925a:	d41e      	bmi.n	800929a <_malloc_r+0xc6>
 800925c:	2a0b      	cmp	r2, #11
 800925e:	d916      	bls.n	800928e <_malloc_r+0xba>
 8009260:	1961      	adds	r1, r4, r5
 8009262:	42a3      	cmp	r3, r4
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	bf18      	it	ne
 8009268:	6059      	strne	r1, [r3, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	bf08      	it	eq
 800926e:	6031      	streq	r1, [r6, #0]
 8009270:	5162      	str	r2, [r4, r5]
 8009272:	604b      	str	r3, [r1, #4]
 8009274:	4638      	mov	r0, r7
 8009276:	f104 060b 	add.w	r6, r4, #11
 800927a:	f000 f835 	bl	80092e8 <__malloc_unlock>
 800927e:	f026 0607 	bic.w	r6, r6, #7
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	1af2      	subs	r2, r6, r3
 8009286:	d0b6      	beq.n	80091f6 <_malloc_r+0x22>
 8009288:	1b9b      	subs	r3, r3, r6
 800928a:	50a3      	str	r3, [r4, r2]
 800928c:	e7b3      	b.n	80091f6 <_malloc_r+0x22>
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	42a3      	cmp	r3, r4
 8009292:	bf0c      	ite	eq
 8009294:	6032      	streq	r2, [r6, #0]
 8009296:	605a      	strne	r2, [r3, #4]
 8009298:	e7ec      	b.n	8009274 <_malloc_r+0xa0>
 800929a:	4623      	mov	r3, r4
 800929c:	6864      	ldr	r4, [r4, #4]
 800929e:	e7b2      	b.n	8009206 <_malloc_r+0x32>
 80092a0:	4634      	mov	r4, r6
 80092a2:	6876      	ldr	r6, [r6, #4]
 80092a4:	e7b9      	b.n	800921a <_malloc_r+0x46>
 80092a6:	230c      	movs	r3, #12
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4638      	mov	r0, r7
 80092ac:	f000 f81c 	bl	80092e8 <__malloc_unlock>
 80092b0:	e7a1      	b.n	80091f6 <_malloc_r+0x22>
 80092b2:	6025      	str	r5, [r4, #0]
 80092b4:	e7de      	b.n	8009274 <_malloc_r+0xa0>
 80092b6:	bf00      	nop
 80092b8:	200007e0 	.word	0x200007e0

080092bc <_sbrk_r>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4d06      	ldr	r5, [pc, #24]	; (80092d8 <_sbrk_r+0x1c>)
 80092c0:	2300      	movs	r3, #0
 80092c2:	4604      	mov	r4, r0
 80092c4:	4608      	mov	r0, r1
 80092c6:	602b      	str	r3, [r5, #0]
 80092c8:	f7f9 ff38 	bl	800313c <_sbrk>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_sbrk_r+0x1a>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_sbrk_r+0x1a>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	200007e8 	.word	0x200007e8

080092dc <__malloc_lock>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__malloc_lock+0x8>)
 80092de:	f000 b809 	b.w	80092f4 <__retarget_lock_acquire_recursive>
 80092e2:	bf00      	nop
 80092e4:	200007ec 	.word	0x200007ec

080092e8 <__malloc_unlock>:
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <__malloc_unlock+0x8>)
 80092ea:	f000 b804 	b.w	80092f6 <__retarget_lock_release_recursive>
 80092ee:	bf00      	nop
 80092f0:	200007ec 	.word	0x200007ec

080092f4 <__retarget_lock_acquire_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <__retarget_lock_release_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <_init>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr

08009304 <_fini>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr