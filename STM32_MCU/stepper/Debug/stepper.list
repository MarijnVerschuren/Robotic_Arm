
stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b0  080055b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055b0  080055b0  000155b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b8  080055b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055bc  080055bc  000155bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08005630  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005630  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f2a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272b  00000000  00000000  00030fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  000336f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  000346e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f20  00000000  00000000  00035598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001385c  00000000  00000000  0004c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea25  00000000  00000000  0005fd14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee739  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004460  00000000  00000000  000ee78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005578 	.word	0x08005578

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005578 	.word	0x08005578

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <AS5600_New>:

#include "as5600.h"
/**********************    GLOBAL VARIABLES    ***********************/

/*******************    FUNCTION IMPLEMENTATIONS    ********************/
AS5600_TypeDef *AS5600_New(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
    AS5600_TypeDef *a = (AS5600_TypeDef *)calloc(1, sizeof(AS5600_TypeDef));
 80004e2:	2118      	movs	r1, #24
 80004e4:	2001      	movs	r0, #1
 80004e6:	f004 ff45 	bl	8005374 <calloc>
 80004ea:	4603      	mov	r3, r0
 80004ec:	607b      	str	r3, [r7, #4]
    return a;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <AS5600_Init>:

HAL_StatusTypeDef AS5600_Init(AS5600_TypeDef *a) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000500:	2300      	movs	r3, #0
 8000502:	73bb      	strb	r3, [r7, #14]
    uint8_t pwm = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_status = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	737b      	strb	r3, [r7, #13]
    /* Set configuration defaults for uninitialized values. */
    if (!(a->PositiveRotationDirection)) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7b9b      	ldrb	r3, [r3, #14]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <AS5600_Init+0x22>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2201      	movs	r2, #1
 8000518:	739a      	strb	r2, [r3, #14]
    }
    if (!(a->LowPowerMode)) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7bdb      	ldrb	r3, [r3, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d102      	bne.n	8000528 <AS5600_Init+0x30>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2201      	movs	r2, #1
 8000526:	73da      	strb	r2, [r3, #15]
    }
    if (!(a->Hysteresis)) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	7c1b      	ldrb	r3, [r3, #16]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <AS5600_Init+0x3e>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2201      	movs	r2, #1
 8000534:	741a      	strb	r2, [r3, #16]
    }
    if (!(a->OutputMode)) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7c5b      	ldrb	r3, [r3, #17]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d102      	bne.n	8000544 <AS5600_Init+0x4c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2201      	movs	r2, #1
 8000542:	745a      	strb	r2, [r3, #17]
    }
    if (!(a->PWMFrequency)) {
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	7c9b      	ldrb	r3, [r3, #18]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <AS5600_Init+0x5a>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2201      	movs	r2, #1
 8000550:	749a      	strb	r2, [r3, #18]
    }
    if (!(a->SlowFilter)) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7cdb      	ldrb	r3, [r3, #19]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d102      	bne.n	8000560 <AS5600_Init+0x68>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2201      	movs	r2, #1
 800055e:	74da      	strb	r2, [r3, #19]
    }
    if (!(a->FastFilterThreshold)) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7d1b      	ldrb	r3, [r3, #20]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <AS5600_Init+0x76>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	751a      	strb	r2, [r3, #20]
    }
    if (!(a->WatchdogTimer)) {
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7d5b      	ldrb	r3, [r3, #21]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d102      	bne.n	800057c <AS5600_Init+0x84>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	755a      	strb	r2, [r3, #21]
    }
    /* Write configuration settings.
       Do this in single write instead of using functions below to avoid
       overhead of multiple calls to HAL_I2C_Mem_Write_IT */
    switch (a->LowPowerMode) {
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	7bdb      	ldrb	r3, [r3, #15]
 8000580:	3b01      	subs	r3, #1
 8000582:	2b03      	cmp	r3, #3
 8000584:	d83e      	bhi.n	8000604 <AS5600_Init+0x10c>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <AS5600_Init+0x94>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	0800059d 	.word	0x0800059d
 8000590:	080005af 	.word	0x080005af
 8000594:	080005d1 	.word	0x080005d1
 8000598:	080005f3 	.word	0x080005f3
        case AS5600_POWER_MODE_NOM:
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7ddb      	ldrb	r3, [r3, #23]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f023 0303 	bic.w	r3, r3, #3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	75da      	strb	r2, [r3, #23]
            break;
 80005ac:	e02e      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM1:
            a->confRegister[1] |= (1UL << 0);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	7ddb      	ldrb	r3, [r3, #23]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7ddb      	ldrb	r3, [r3, #23]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f023 0302 	bic.w	r3, r3, #2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	75da      	strb	r2, [r3, #23]
            break;
 80005ce:	e01d      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM2:
            a->confRegister[1] |= (1UL << 1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7ddb      	ldrb	r3, [r3, #23]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= (1UL << 0);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	7ddb      	ldrb	r3, [r3, #23]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	75da      	strb	r2, [r3, #23]
            break;
 80005f0:	e00c      	b.n	800060c <AS5600_Init+0x114>
        case AS5600_POWER_MODE_LPM3:
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7ddb      	ldrb	r3, [r3, #23]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f043 0303 	orr.w	r3, r3, #3
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	75da      	strb	r2, [r3, #23]
            break;
 8000602:	e003      	b.n	800060c <AS5600_Init+0x114>
        default:
            /* Invalid low power mode specified */
            status = HAL_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
            return status;
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	e20a      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->Hysteresis) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7c1b      	ldrb	r3, [r3, #16]
 8000610:	3b01      	subs	r3, #1
 8000612:	2b03      	cmp	r3, #3
 8000614:	d83e      	bhi.n	8000694 <AS5600_Init+0x19c>
 8000616:	a201      	add	r2, pc, #4	; (adr r2, 800061c <AS5600_Init+0x124>)
 8000618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800063f 	.word	0x0800063f
 8000624:	08000661 	.word	0x08000661
 8000628:	08000683 	.word	0x08000683
        case AS5600_HYSTERESIS_OFF:
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7ddb      	ldrb	r3, [r3, #23]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	f023 030c 	bic.w	r3, r3, #12
 8000636:	b2da      	uxtb	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	75da      	strb	r2, [r3, #23]
            break;
 800063c:	e02e      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_1LSB:
            a->confRegister[1] |= (1UL << 2);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7ddb      	ldrb	r3, [r3, #23]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	b2da      	uxtb	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 3);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7ddb      	ldrb	r3, [r3, #23]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f023 0308 	bic.w	r3, r3, #8
 8000658:	b2da      	uxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	75da      	strb	r2, [r3, #23]
            break;
 800065e:	e01d      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_2LSB:
            a->confRegister[1] &= ~(1UL << 2);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	7ddb      	ldrb	r3, [r3, #23]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	f023 0304 	bic.w	r3, r3, #4
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 3);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	7ddb      	ldrb	r3, [r3, #23]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f043 0308 	orr.w	r3, r3, #8
 800067a:	b2da      	uxtb	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	75da      	strb	r2, [r3, #23]
            break;
 8000680:	e00c      	b.n	800069c <AS5600_Init+0x1a4>
        case AS5600_HYSTERESIS_3LSB:
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	7ddb      	ldrb	r3, [r3, #23]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f043 030c 	orr.w	r3, r3, #12
 800068c:	b2da      	uxtb	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	75da      	strb	r2, [r3, #23]
            break;
 8000692:	e003      	b.n	800069c <AS5600_Init+0x1a4>
        default:
            /* Invalid hysteresis mode specified */
            status = HAL_ERROR;
 8000694:	2301      	movs	r3, #1
 8000696:	73bb      	strb	r3, [r7, #14]
            return status;
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	e1c2      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->OutputMode) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7c5b      	ldrb	r3, [r3, #17]
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d020      	beq.n	80006e6 <AS5600_Init+0x1ee>
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	dc31      	bgt.n	800070c <AS5600_Init+0x214>
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d002      	beq.n	80006b2 <AS5600_Init+0x1ba>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d009      	beq.n	80006c4 <AS5600_Init+0x1cc>
 80006b0:	e02c      	b.n	800070c <AS5600_Init+0x214>
        case AS5600_OUTPUT_STAGE_FULL:
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7ddb      	ldrb	r3, [r3, #23]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	75da      	strb	r2, [r3, #23]
            break;
 80006c2:	e027      	b.n	8000714 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_REDUCED:
            a->confRegister[1] |= (1UL << 4);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7ddb      	ldrb	r3, [r3, #23]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] &= ~(1UL << 5);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7ddb      	ldrb	r3, [r3, #23]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f023 0320 	bic.w	r3, r3, #32
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	75da      	strb	r2, [r3, #23]
            break;
 80006e4:	e016      	b.n	8000714 <AS5600_Init+0x21c>
        case AS5600_OUTPUT_STAGE_PWM:
            a->confRegister[1] &= (1UL << 4);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7ddb      	ldrb	r3, [r3, #23]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0310 	and.w	r3, r3, #16
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	75da      	strb	r2, [r3, #23]
            a->confRegister[1] |= (1UL << 5);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7ddb      	ldrb	r3, [r3, #23]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f043 0320 	orr.w	r3, r3, #32
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	75da      	strb	r2, [r3, #23]
            pwm = 1;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
            break;
 800070a:	e003      	b.n	8000714 <AS5600_Init+0x21c>
        default:
            /* Invalid output mode specified */
            status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	73bb      	strb	r3, [r7, #14]
            return status;
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	e186      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if (pwm) {
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d048      	beq.n	80007ac <AS5600_Init+0x2b4>
        switch (a->PWMFrequency) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	7c9b      	ldrb	r3, [r3, #18]
 800071e:	3b01      	subs	r3, #1
 8000720:	2b03      	cmp	r3, #3
 8000722:	d83f      	bhi.n	80007a4 <AS5600_Init+0x2ac>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <AS5600_Init+0x234>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074f 	.word	0x0800074f
 8000734:	08000771 	.word	0x08000771
 8000738:	08000793 	.word	0x08000793
            case AS5600_PWM_FREQUENCY_115HZ:
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7ddb      	ldrb	r3, [r3, #23]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000746:	b2da      	uxtb	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	75da      	strb	r2, [r3, #23]
                break;
 800074c:	e02f      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_230HZ:
                a->confRegister[1] |= (1UL << 6);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7ddb      	ldrb	r3, [r3, #23]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] &= ~(1UL << 7);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	7ddb      	ldrb	r3, [r3, #23]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000768:	b2da      	uxtb	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	75da      	strb	r2, [r3, #23]
                break;
 800076e:	e01e      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_460HZ:
                a->confRegister[1] &= ~(1UL << 6);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7ddb      	ldrb	r3, [r3, #23]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800077a:	b2da      	uxtb	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	75da      	strb	r2, [r3, #23]
                a->confRegister[1] |= (1UL << 7);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7ddb      	ldrb	r3, [r3, #23]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800078a:	b2da      	uxtb	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	75da      	strb	r2, [r3, #23]
                break;
 8000790:	e00d      	b.n	80007ae <AS5600_Init+0x2b6>
            case AS5600_PWM_FREQUENCY_920HZ:
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7ddb      	ldrb	r3, [r3, #23]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800079c:	b2da      	uxtb	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	75da      	strb	r2, [r3, #23]
                break;
 80007a2:	e004      	b.n	80007ae <AS5600_Init+0x2b6>
            default:
                /* Invalid PWM frequency specified. */
                status = HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	73bb      	strb	r3, [r7, #14]
                return status;
 80007a8:	7bbb      	ldrb	r3, [r7, #14]
 80007aa:	e13a      	b.n	8000a22 <AS5600_Init+0x52a>
        }
    }
 80007ac:	bf00      	nop
    switch (a->SlowFilter) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7cdb      	ldrb	r3, [r3, #19]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d83f      	bhi.n	8000838 <AS5600_Init+0x340>
 80007b8:	a201      	add	r2, pc, #4	; (adr r2, 80007c0 <AS5600_Init+0x2c8>)
 80007ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007be:	bf00      	nop
 80007c0:	080007d1 	.word	0x080007d1
 80007c4:	080007e3 	.word	0x080007e3
 80007c8:	08000805 	.word	0x08000805
 80007cc:	08000827 	.word	0x08000827
        case AS5600_SLOW_FILTER_16X:
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	7d9b      	ldrb	r3, [r3, #22]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f023 0303 	bic.w	r3, r3, #3
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	759a      	strb	r2, [r3, #22]
            break;
 80007e0:	e02e      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_8X:
            a->confRegister[0] |= (1UL << 0);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7d9b      	ldrb	r3, [r3, #22]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7d9b      	ldrb	r3, [r3, #22]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	f023 0302 	bic.w	r3, r3, #2
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	759a      	strb	r2, [r3, #22]
            break;
 8000802:	e01d      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_4X:
            a->confRegister[0] &= ~(1UL << 0);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7d9b      	ldrb	r3, [r3, #22]
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f023 0301 	bic.w	r3, r3, #1
 800080e:	b2da      	uxtb	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 1);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	7d9b      	ldrb	r3, [r3, #22]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f043 0302 	orr.w	r3, r3, #2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	759a      	strb	r2, [r3, #22]
            break;
 8000824:	e00c      	b.n	8000840 <AS5600_Init+0x348>
        case AS5600_SLOW_FILTER_2X:
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7d9b      	ldrb	r3, [r3, #22]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f043 0303 	orr.w	r3, r3, #3
 8000830:	b2da      	uxtb	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	759a      	strb	r2, [r3, #22]
            break;
 8000836:	e003      	b.n	8000840 <AS5600_Init+0x348>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	73bb      	strb	r3, [r7, #14]
            return status;
 800083c:	7bbb      	ldrb	r3, [r7, #14]
 800083e:	e0f0      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->FastFilterThreshold) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7d1b      	ldrb	r3, [r3, #20]
 8000844:	3b01      	subs	r3, #1
 8000846:	2b07      	cmp	r3, #7
 8000848:	f200 808c 	bhi.w	8000964 <AS5600_Init+0x46c>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <AS5600_Init+0x35c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000875 	.word	0x08000875
 8000858:	08000887 	.word	0x08000887
 800085c:	080008a9 	.word	0x080008a9
 8000860:	080008cb 	.word	0x080008cb
 8000864:	080008ed 	.word	0x080008ed
 8000868:	0800090f 	.word	0x0800090f
 800086c:	08000931 	.word	0x08000931
 8000870:	08000953 	.word	0x08000953
        case AS5600_FAST_FILTER_SLOW_ONLY:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	7d9b      	ldrb	r3, [r3, #22]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f023 031c 	bic.w	r3, r3, #28
 800087e:	b2da      	uxtb	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	759a      	strb	r2, [r3, #22]
            break;
 8000884:	e072      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_6LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7d9b      	ldrb	r3, [r3, #22]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	f023 0318 	bic.w	r3, r3, #24
 8000890:	b2da      	uxtb	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 2);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	7d9b      	ldrb	r3, [r3, #22]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	759a      	strb	r2, [r3, #22]
            break;
 80008a6:	e061      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_7LSB:
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7d9b      	ldrb	r3, [r3, #22]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	f023 0314 	bic.w	r3, r3, #20
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 3);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7d9b      	ldrb	r3, [r3, #22]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f043 0308 	orr.w	r3, r3, #8
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	759a      	strb	r2, [r3, #22]
            break;
 80008c8:	e050      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_9LSB:
            a->confRegister[0] &= ~(1UL << 4);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7d9b      	ldrb	r3, [r3, #22]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f023 0310 	bic.w	r3, r3, #16
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7d9b      	ldrb	r3, [r3, #22]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f043 030c 	orr.w	r3, r3, #12
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	759a      	strb	r2, [r3, #22]
            break;
 80008ea:	e03f      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_18LSB:
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7d9b      	ldrb	r3, [r3, #22]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f023 030c 	bic.w	r3, r3, #12
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= (1UL << 4);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7d9b      	ldrb	r3, [r3, #22]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	b2da      	uxtb	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	759a      	strb	r2, [r3, #22]
            break;
 800090c:	e02e      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_21LSB:
            a->confRegister[0] &= ~(1UL << 3);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7d9b      	ldrb	r3, [r3, #22]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f023 0308 	bic.w	r3, r3, #8
 8000918:	b2da      	uxtb	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7d9b      	ldrb	r3, [r3, #22]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	f043 0314 	orr.w	r3, r3, #20
 8000928:	b2da      	uxtb	r2, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	759a      	strb	r2, [r3, #22]
            break;
 800092e:	e01d      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_24LSB:
            a->confRegister[0] &= ~(1UL << 2);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7d9b      	ldrb	r3, [r3, #22]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	f023 0304 	bic.w	r3, r3, #4
 800093a:	b2da      	uxtb	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	759a      	strb	r2, [r3, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7d9b      	ldrb	r3, [r3, #22]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f043 0318 	orr.w	r3, r3, #24
 800094a:	b2da      	uxtb	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	759a      	strb	r2, [r3, #22]
            break;
 8000950:	e00c      	b.n	800096c <AS5600_Init+0x474>
        case AS5600_FAST_FILTER_10LSB:
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7d9b      	ldrb	r3, [r3, #22]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f043 031c 	orr.w	r3, r3, #28
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	759a      	strb	r2, [r3, #22]
            break;
 8000962:	e003      	b.n	800096c <AS5600_Init+0x474>
        default:
            /* Invalid slow filter mode specified */
            status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73bb      	strb	r3, [r7, #14]
            return status;
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	e05a      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    switch (a->WatchdogTimer) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7d5b      	ldrb	r3, [r3, #21]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d002      	beq.n	800097a <AS5600_Init+0x482>
 8000974:	2b02      	cmp	r3, #2
 8000976:	d009      	beq.n	800098c <AS5600_Init+0x494>
 8000978:	e011      	b.n	800099e <AS5600_Init+0x4a6>
        case AS5600_WATCHDOG_OFF:
            a->confRegister[0] &= ~(1UL << 6);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7d9b      	ldrb	r3, [r3, #22]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000984:	b2da      	uxtb	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	759a      	strb	r2, [r3, #22]
            break;
 800098a:	e00c      	b.n	80009a6 <AS5600_Init+0x4ae>
        case AS5600_WATCHDOG_ON:
            a->confRegister[0] |= (1UL << 6);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7d9b      	ldrb	r3, [r3, #22]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000996:	b2da      	uxtb	r2, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	759a      	strb	r2, [r3, #22]
            break;
 800099c:	e003      	b.n	80009a6 <AS5600_Init+0x4ae>
        default:
            /* Invalid watchdog state specified */
            status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73bb      	strb	r3, [r7, #14]
            return status;
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	e03d      	b.n	8000a22 <AS5600_Init+0x52a>
    }

    if (HAL_I2C_Mem_Write_IT(a->i2cHandle, a->i2cAddr,
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6818      	ldr	r0, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	b299      	uxth	r1, r3
                             AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT,
                             a->confRegister, 2) != HAL_OK) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3316      	adds	r3, #22
    if (HAL_I2C_Mem_Write_IT(a->i2cHandle, a->i2cAddr,
 80009b4:	2202      	movs	r2, #2
 80009b6:	9201      	str	r2, [sp, #4]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2301      	movs	r3, #1
 80009bc:	2207      	movs	r2, #7
 80009be:	f001 fda7 	bl	8002510 <HAL_I2C_Mem_Write_IT>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <AS5600_Init+0x4d8>
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73bb      	strb	r3, [r7, #14]
        return status;
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	e028      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    /* Check magnet status */
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80009d0:	f107 030d 	add.w	r3, r7, #13
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f000 f828 	bl	8000a2c <AS5600_GetMagnetStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <AS5600_Init+0x4f2>
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73bb      	strb	r3, [r7, #14]
        return status;
 80009e6:	7bbb      	ldrb	r3, [r7, #14]
 80009e8:	e01b      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80009ea:	7b7b      	ldrb	r3, [r7, #13]
 80009ec:	f003 0320 	and.w	r3, r3, #32
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <AS5600_Init+0x504>
        /* Magnet not detected */
        status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
        return status;
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	e012      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	f003 0308 	and.w	r3, r3, #8
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <AS5600_Init+0x516>
        /* B-field is too strong */
        status = HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	73bb      	strb	r3, [r7, #14]
        return status;
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	e009      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 8000a0e:	7b7b      	ldrb	r3, [r7, #13]
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <AS5600_Init+0x528>
        /* B-field is too weak */
        status = HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73bb      	strb	r3, [r7, #14]
        return status;
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	e000      	b.n	8000a22 <AS5600_Init+0x52a>
    }
    /* Write */

    return status;
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <AS5600_GetMagnetStatus>:

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a,
                                         uint8_t *const stat) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	73fb      	strb	r3, [r7, #15]
    if (HAL_I2C_Mem_Read_IT(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	b299      	uxth	r1, r3
 8000a44:	2301      	movs	r3, #1
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	220b      	movs	r2, #11
 8000a50:	f001 fe10 	bl	8002674 <HAL_I2C_Mem_Read_IT>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <AS5600_GetMagnetStatus+0x32>
                            I2C_MEMADD_SIZE_8BIT, stat, 1) != HAL_OK) {
        status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_DMA_Init+0x4c>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_DMA_Init+0x4c>)
 8000a78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_DMA_Init+0x4c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2038      	movs	r0, #56	; 0x38
 8000a90:	f000 fef1 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a94:	2038      	movs	r0, #56	; 0x38
 8000a96:	f000 ff0a 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	203b      	movs	r0, #59	; 0x3b
 8000aa0:	f000 fee9 	bl	8001876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa4:	203b      	movs	r0, #59	; 0x3b
 8000aa6:	f000 ff02 	bl	80018ae <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a3c      	ldr	r2, [pc, #240]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x110>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0c:	482f      	ldr	r0, [pc, #188]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b0e:	f001 fb87 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEPPER_STP_Pin|STEPPER_DIR_Pin|STEPPER_SRD_Pin|SENSOR_DIR_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f24e 0120 	movw	r1, #57376	; 0xe020
 8000b18:	482c      	ldr	r0, [pc, #176]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b1a:	f001 fb81 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEPPER_MS2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b24:	482a      	ldr	r0, [pc, #168]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b26:	f001 fb7b 	bl	8002220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STEPPER_NEN_Pin|STEPPER_DIR_Pin;
 8000b2a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b30:	2311      	movs	r3, #17
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b44:	f001 f9e8 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_STP_Pin;
 8000b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b4e:	2311      	movs	r3, #17
 8000b50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_STP_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481a      	ldr	r0, [pc, #104]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b62:	f001 f9d9 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STEPPER_SRD_Pin;
 8000b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b6c:	2311      	movs	r3, #17
 8000b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STEPPER_SRD_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000b80:	f001 f9ca 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = STEPPER_MS2_Pin|STEPPER_MS1_Pin;
 8000b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b8a:	2311      	movs	r3, #17
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_GPIO_Init+0x118>)
 8000b9e:	f001 f9bb 	bl	8001f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_DIR_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SENSOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_GPIO_Init+0x114>)
 8000bba:	f001 f9ad 	bl	8001f18 <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bda:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000be0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000be4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bf4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000c14:	f001 fb38 	bl	8002288 <HAL_I2C_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 fa55 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000008c 	.word	0x2000008c
 8000c2c:	40005400 	.word	0x40005400

08000c30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <HAL_I2C_MspInit+0xa4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d13b      	bne.n	8000cca <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_SCL_Pin|SENSOR_SDA_Pin;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c72:	2312      	movs	r3, #18
 8000c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4814      	ldr	r0, [pc, #80]	; (8000cdc <HAL_I2C_MspInit+0xac>)
 8000c8a:	f001 f945 	bl	8001f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a10      	ldr	r2, [pc, #64]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_I2C_MspInit+0xa8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	201f      	movs	r0, #31
 8000cb0:	f000 fde1 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000cb4:	201f      	movs	r0, #31
 8000cb6:	f000 fdfa 	bl	80018ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2020      	movs	r0, #32
 8000cc0:	f000 fdd9 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	f000 fdf2 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40005400 	.word	0x40005400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <delay_us>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t n) { TIM1->CNT = 0; while(TIM1->CNT < n); }
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <delay_us+0x2c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24
 8000cf0:	bf00      	nop
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <delay_us+0x2c>)
 8000cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3fa      	bcc.n	8000cf2 <delay_us+0x12>
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40010000 	.word	0x40010000

08000d10 <set_motor_setting>:
void set_motor_setting(MCU_Instruction* instruction) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= RST;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <set_motor_setting+0x7c>)
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	491b      	ldr	r1, [pc, #108]	; (8000d8c <set_motor_setting+0x7c>)
 8000d1e:	f64f 636f 	movw	r3, #65135	; 0xfe6f
 8000d22:	4013      	ands	r3, r2
 8000d24:	614b      	str	r3, [r1, #20]
	switch(instruction->settings.micro_step) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b1b      	ldrb	r3, [r3, #12]
 8000d2a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b03      	cmp	r3, #3
 8000d32:	d014      	beq.n	8000d5e <set_motor_setting+0x4e>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	dc19      	bgt.n	8000d6c <set_motor_setting+0x5c>
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <set_motor_setting+0x32>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d007      	beq.n	8000d50 <set_motor_setting+0x40>
 8000d40:	e014      	b.n	8000d6c <set_motor_setting+0x5c>
	case 0: GPIOA->ODR |= M2; break;
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <set_motor_setting+0x7c>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <set_motor_setting+0x7c>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	e00d      	b.n	8000d6c <set_motor_setting+0x5c>
	case 1: GPIOA->ODR |= M4; break;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <set_motor_setting+0x7c>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <set_motor_setting+0x7c>)
 8000d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5a:	6153      	str	r3, [r2, #20]
 8000d5c:	e006      	b.n	8000d6c <set_motor_setting+0x5c>
	// case 2: GPIOA->ODR |= M8; break;  // default is 1/8 micro stepping
	case 3: GPIOA->ODR |= M16; break;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <set_motor_setting+0x7c>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <set_motor_setting+0x7c>)
 8000d64:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000d68:	6153      	str	r3, [r2, #20]
 8000d6a:	bf00      	nop
	}
	HAL_GPIO_WritePin(STEPPER_SRD_GPIO_Port, STEPPER_SRD_Pin, instruction->settings.spread_mode);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7b1b      	ldrb	r3, [r3, #12]
 8000d70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <set_motor_setting+0x80>)
 8000d7e:	f001 fa4f 	bl	8002220 <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	40020400 	.word	0x40020400
 8000d94:	00000000 	.word	0x00000000

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d9c:	b08e      	sub	sp, #56	; 0x38
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	state.pos = 0;							// the current position
 8000da0:	498f      	ldr	r1, [pc, #572]	; (8000fe0 <main+0x248>)
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	e9c1 2300 	strd	r2, r3, [r1]
	state.job = 0;							// the future position
 8000dae:	498c      	ldr	r1, [pc, #560]	; (8000fe0 <main+0x248>)
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	instruction.steps = 0;					// the instruction from master computer
 8000dbc:	4989      	ldr	r1, [pc, #548]	; (8000fe4 <main+0x24c>)
 8000dbe:	f04f 0200 	mov.w	r2, #0
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	e9c1 2300 	strd	r2, r3, [r1]

	sensor = AS5600_New();
 8000dca:	f7ff fb87 	bl	80004dc <AS5600_New>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4a85      	ldr	r2, [pc, #532]	; (8000fe8 <main+0x250>)
 8000dd2:	6013      	str	r3, [r2, #0]
	sensor->i2cHandle = &hi2c1;
 8000dd4:	4b84      	ldr	r3, [pc, #528]	; (8000fe8 <main+0x250>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a84      	ldr	r2, [pc, #528]	; (8000fec <main+0x254>)
 8000dda:	601a      	str	r2, [r3, #0]
	sensor->i2cAddr = 0x36;
 8000ddc:	4b82      	ldr	r3, [pc, #520]	; (8000fe8 <main+0x250>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2336      	movs	r3, #54	; 0x36
 8000de2:	7113      	strb	r3, [r2, #4]
	sensor->DirPort = SENSOR_DIR_GPIO_Port;
 8000de4:	4b80      	ldr	r3, [pc, #512]	; (8000fe8 <main+0x250>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a81      	ldr	r2, [pc, #516]	; (8000ff0 <main+0x258>)
 8000dea:	609a      	str	r2, [r3, #8]
	sensor->DirPin = SENSOR_DIR_Pin;
 8000dec:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <main+0x250>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	2320      	movs	r3, #32
 8000df2:	8193      	strh	r3, [r2, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fbce 	bl	8001594 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f900 	bl	8000ffc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f7ff fe5c 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f7ff fe32 	bl	8000a68 <MX_DMA_Init>
  MX_SPI1_Init();
 8000e04:	f000 f96a 	bl	80010dc <MX_SPI1_Init>
  MX_TIM1_Init();
 8000e08:	f000 fb28 	bl	800145c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e0c:	f7ff fee2 	bl	8000bd4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);  // start timer_1
 8000e10:	4878      	ldr	r0, [pc, #480]	; (8000ff4 <main+0x25c>)
 8000e12:	f004 f805 	bl	8004e20 <HAL_TIM_Base_Start>
	// buffers
	uint64_t	iter			= 0;
 8000e16:	f04f 0200 	mov.w	r2, #0
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int8_t		mult			= 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint64_t	pulse_delay_us	= 0;
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	e9c7 2306 	strd	r2, r3, [r7, #24]
	//HAL_I2C_MspInit(&hi2c1);
	//HAL_I2C_DeInit(&hi2c1);
	//HAL_I2C_Init(&hi2c1);

	// force reset (doesnt work?)
	__HAL_RCC_I2C1_FORCE_RESET(); HAL_Delay(2); __HAL_RCC_I2C1_RELEASE_RESET();
 8000e34:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <main+0x260>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a6f      	ldr	r2, [pc, #444]	; (8000ff8 <main+0x260>)
 8000e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3e:	6213      	str	r3, [r2, #32]
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fc19 	bl	8001678 <HAL_Delay>
 8000e46:	4b6c      	ldr	r3, [pc, #432]	; (8000ff8 <main+0x260>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a6b      	ldr	r2, [pc, #428]	; (8000ff8 <main+0x260>)
 8000e4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e50:	6213      	str	r3, [r2, #32]

	while (AS5600_Init(sensor) == HAL_ERROR) {
 8000e52:	e003      	b.n	8000e5c <main+0xc4>
		HAL_GPIO_TogglePin(SENSOR_DIR_GPIO_Port, SENSOR_DIR_Pin);
 8000e54:	2120      	movs	r1, #32
 8000e56:	4866      	ldr	r0, [pc, #408]	; (8000ff0 <main+0x258>)
 8000e58:	f001 f9fb 	bl	8002252 <HAL_GPIO_TogglePin>
	while (AS5600_Init(sensor) == HAL_ERROR) {
 8000e5c:	4b62      	ldr	r3, [pc, #392]	; (8000fe8 <main+0x250>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb49 	bl	80004f8 <AS5600_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0f3      	beq.n	8000e54 <main+0xbc>

	// HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, pData, Size)
	// TODO: ADD PWM / DIGITAL INPUT FROM AS5600 & ADD PROGRAMMING CAPABILITY <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	// some pin names have changed <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< (also add i2c support for mae(magnetic angle encoder) idealy with dma)
	instruction.steps = -100000000;
 8000e6c:	495d      	ldr	r1, [pc, #372]	; (8000fe4 <main+0x24c>)
 8000e6e:	a35a      	add	r3, pc, #360	; (adr r3, 8000fd8 <main+0x240>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	e9c1 2300 	strd	r2, r3, [r1]
	instruction.pulse_delay = 74; // 74;  // safe operating range is from 75us and up
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <main+0x24c>)
 8000e7a:	224a      	movs	r2, #74	; 0x4a
 8000e7c:	609a      	str	r2, [r3, #8]
	instruction.settings.micro_step = 3;
 8000e7e:	4a59      	ldr	r2, [pc, #356]	; (8000fe4 <main+0x24c>)
 8000e80:	7b13      	ldrb	r3, [r2, #12]
 8000e82:	f043 0303 	orr.w	r3, r3, #3
 8000e86:	7313      	strb	r3, [r2, #12]
	instruction.settings.spread_mode = 0;
 8000e88:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <main+0x24c>)
 8000e8a:	7b13      	ldrb	r3, [r2, #12]
 8000e8c:	f36f 0382 	bfc	r3, #2, #1
 8000e90:	7313      	strb	r3, [r2, #12]

	while (1) {
		if (instruction.steps == 0) { continue; }
 8000e92:	4b54      	ldr	r3, [pc, #336]	; (8000fe4 <main+0x24c>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	f000 8099 	beq.w	8000fd0 <main+0x238>
		set_motor_setting(&instruction);
 8000e9e:	4851      	ldr	r0, [pc, #324]	; (8000fe4 <main+0x24c>)
 8000ea0:	f7ff ff36 	bl	8000d10 <set_motor_setting>

		state.job = instruction.steps;
 8000ea4:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <main+0x24c>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	494d      	ldr	r1, [pc, #308]	; (8000fe0 <main+0x248>)
 8000eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
		pulse_delay_us = instruction.pulse_delay + 1;
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <main+0x24c>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	60fa      	str	r2, [r7, #12]
 8000ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		instruction.steps = 0;
 8000ec4:	4947      	ldr	r1, [pc, #284]	; (8000fe4 <main+0x24c>)
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	4845      	ldr	r0, [pc, #276]	; (8000ff0 <main+0x258>)
 8000eda:	f001 f9a1 	bl	8002220 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STEPPER_DIR_GPIO_Port, STEPPER_DIR_Pin, state.job > 0);
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <main+0x248>)
 8000ee0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ee4:	2a01      	cmp	r2, #1
 8000ee6:	f173 0300 	sbcs.w	r3, r3, #0
 8000eea:	bfac      	ite	ge
 8000eec:	2301      	movge	r3, #1
 8000eee:	2300      	movlt	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef8:	483d      	ldr	r0, [pc, #244]	; (8000ff0 <main+0x258>)
 8000efa:	f001 f991 	bl	8002220 <HAL_GPIO_WritePin>
		// capture the current job (this can change via interrupt)
		mult = state.job > 0 ? 1 : -1;
 8000efe:	4b38      	ldr	r3, [pc, #224]	; (8000fe0 <main+0x248>)
 8000f00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	f173 0300 	sbcs.w	r3, r3, #0
 8000f0a:	db01      	blt.n	8000f10 <main+0x178>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e001      	b.n	8000f14 <main+0x17c>
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		iter = abs_64(state.job);
 8000f18:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <main+0x248>)
 8000f1a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (uint64_t i = 0; i < iter; i++) {  // iterate this job for max 4096 iterations at the time before SPI receive
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000f2e:	e040      	b.n	8000fb2 <main+0x21a>
			// update variables first because the SPI DMA transmit has a almost 100% chance to happen during pulse delay
			state.pos += mult;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <main+0x248>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 8000f3a:	17c8      	asrs	r0, r1, #31
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	4605      	mov	r5, r0
 8000f40:	eb12 0a04 	adds.w	sl, r2, r4
 8000f44:	eb43 0b05 	adc.w	fp, r3, r5
 8000f48:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <main+0x248>)
 8000f4a:	e9c3 ab00 	strd	sl, fp, [r3]
			state.job -= mult;
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <main+0x248>)
 8000f50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f54:	f997 1027 	ldrsb.w	r1, [r7, #39]	; 0x27
 8000f58:	17c8      	asrs	r0, r1, #31
 8000f5a:	4688      	mov	r8, r1
 8000f5c:	4681      	mov	r9, r0
 8000f5e:	ebb2 0108 	subs.w	r1, r2, r8
 8000f62:	6139      	str	r1, [r7, #16]
 8000f64:	eb63 0309 	sbc.w	r3, r3, r9
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <main+0x248>)
 8000f6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f70:	e9c3 1202 	strd	r1, r2, [r3, #8]
			HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <main+0x258>)
 8000f7c:	f001 f950 	bl	8002220 <HAL_GPIO_WritePin>
			delay_us(pulse_delay_us);
 8000f80:	8b3b      	ldrh	r3, [r7, #24]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff feac 	bl	8000ce0 <delay_us>
			HAL_GPIO_WritePin(STEPPER_STP_GPIO_Port, STEPPER_STP_Pin, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <main+0x258>)
 8000f90:	f001 f946 	bl	8002220 <HAL_GPIO_WritePin>
			delay_us(pulse_delay_us);
 8000f94:	8b3b      	ldrh	r3, [r7, #24]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fea2 	bl	8000ce0 <delay_us>
		for (uint64_t i = 0; i < iter; i++) {  // iterate this job for max 4096 iterations at the time before SPI receive
 8000f9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fa0:	1c51      	adds	r1, r2, #1
 8000fa2:	6039      	str	r1, [r7, #0]
 8000fa4:	f143 0300 	adc.w	r3, r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000fb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000fb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000fba:	4290      	cmp	r0, r2
 8000fbc:	eb71 0303 	sbcs.w	r3, r1, r3
 8000fc0:	d3b6      	bcc.n	8000f30 <main+0x198>
		}
		HAL_GPIO_WritePin(STEPPER_NEN_GPIO_Port, STEPPER_NEN_Pin, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <main+0x258>)
 8000fca:	f001 f929 	bl	8002220 <HAL_GPIO_WritePin>
 8000fce:	e760      	b.n	8000e92 <main+0xfa>
		if (instruction.steps == 0) { continue; }
 8000fd0:	bf00      	nop
 8000fd2:	e75e      	b.n	8000e92 <main+0xfa>
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	fa0a1f00 	.word	0xfa0a1f00
 8000fdc:	ffffffff 	.word	0xffffffff
 8000fe0:	200000e0 	.word	0x200000e0
 8000fe4:	200000f0 	.word	0x200000f0
 8000fe8:	20000100 	.word	0x20000100
 8000fec:	2000008c 	.word	0x2000008c
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	20000220 	.word	0x20000220
 8000ff8:	40023800 	.word	0x40023800

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b094      	sub	sp, #80	; 0x50
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2230      	movs	r2, #48	; 0x30
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f004 f9e4 	bl	80053d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <SystemClock_Config+0xc8>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <SystemClock_Config+0xc8>)
 800102a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemClock_Config+0xc8>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <SystemClock_Config+0xcc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <SystemClock_Config+0xcc>)
 8001046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <SystemClock_Config+0xcc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001058:	2302      	movs	r3, #2
 800105a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105c:	2301      	movs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001060:	2310      	movs	r3, #16
 8001062:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800106c:	2310      	movs	r3, #16
 800106e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001070:	23c0      	movs	r3, #192	; 0xc0
 8001072:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001074:	2302      	movs	r3, #2
 8001076:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001078:	2304      	movs	r3, #4
 800107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f891 	bl	80041a8 <HAL_RCC_OscConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800108c:	f000 f81e 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001090:	230f      	movs	r3, #15
 8001092:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001094:	2302      	movs	r3, #2
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2103      	movs	r1, #3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 faf3 	bl	8004698 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010b8:	f000 f808 	bl	80010cc <Error_Handler>
  }
}
 80010bc:	bf00      	nop
 80010be:	3750      	adds	r7, #80	; 0x50
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_SPI1_Init+0x5c>)
 80010e2:	4a16      	ldr	r2, [pc, #88]	; (800113c <MX_SPI1_Init+0x60>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SPI1_Init+0x5c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_SPI1_Init+0x5c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SPI1_Init+0x5c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_SPI1_Init+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI1_Init+0x5c>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SPI1_Init+0x5c>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <MX_SPI1_Init+0x5c>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001110:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SPI1_Init+0x5c>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <MX_SPI1_Init+0x5c>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SPI1_Init+0x5c>)
 800111e:	220a      	movs	r2, #10
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_SPI1_Init+0x5c>)
 8001124:	f003 fc84 	bl	8004a30 <HAL_SPI_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800112e:	f7ff ffcd 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000104 	.word	0x20000104
 800113c:	40013000 	.word	0x40013000

08001140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a52      	ldr	r2, [pc, #328]	; (80012a8 <HAL_SPI_MspInit+0x168>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f040 809d 	bne.w	800129e <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	4a4f      	ldr	r2, [pc, #316]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 800116e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001172:	6453      	str	r3, [r2, #68]	; 0x44
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a48      	ldr	r2, [pc, #288]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <HAL_SPI_MspInit+0x16c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NSS_Pin|SCK_Pin|MISO_Pin|MOSI_Pin;
 800119c:	23f0      	movs	r3, #240	; 0xf0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011ac:	2305      	movs	r3, #5
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	483e      	ldr	r0, [pc, #248]	; (80012b0 <HAL_SPI_MspInit+0x170>)
 80011b8:	f000 feae 	bl	8001f18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80011bc:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011be:	4a3e      	ldr	r2, [pc, #248]	; (80012b8 <HAL_SPI_MspInit+0x178>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80011c2:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011c4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ca:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011de:	4b35      	ldr	r3, [pc, #212]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011e4:	4b33      	ldr	r3, [pc, #204]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80011ea:	4b32      	ldr	r3, [pc, #200]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011f2:	4b30      	ldr	r3, [pc, #192]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fa:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001200:	482c      	ldr	r0, [pc, #176]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 8001202:	f000 fb6f 	bl	80018e4 <HAL_DMA_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 800120c:	f7ff ff5e 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 8001214:	649a      	str	r2, [r3, #72]	; 0x48
 8001216:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <HAL_SPI_MspInit+0x174>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800121e:	4a28      	ldr	r2, [pc, #160]	; (80012c0 <HAL_SPI_MspInit+0x180>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001224:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001228:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122a:	4b24      	ldr	r3, [pc, #144]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800123e:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800124c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001250:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001254:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001258:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800125c:	2204      	movs	r2, #4
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001260:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001262:	2203      	movs	r2, #3
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800126e:	2200      	movs	r2, #0
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001272:	4812      	ldr	r0, [pc, #72]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001274:	f000 fb36 	bl	80018e4 <HAL_DMA_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 800127e:	f7ff ff25 	bl	80010cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 8001286:	64da      	str	r2, [r3, #76]	; 0x4c
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_SPI_MspInit+0x17c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2023      	movs	r0, #35	; 0x23
 8001294:	f000 faef 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001298:	2023      	movs	r0, #35	; 0x23
 800129a:	f000 fb08 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40013000 	.word	0x40013000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	2000015c 	.word	0x2000015c
 80012b8:	40026458 	.word	0x40026458
 80012bc:	200001bc 	.word	0x200001bc
 80012c0:	40026410 	.word	0x40026410

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	; (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <NMI_Handler+0x4>

0800131a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131e:	e7fe      	b.n	800131e <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <MemManage_Handler+0x4>

08001326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <BusFault_Handler+0x4>

0800132c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <UsageFault_Handler+0x4>

08001332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001360:	f000 f96a 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <I2C1_EV_IRQHandler+0x10>)
 800136e:	f001 fa3f 	bl	80027f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000008c 	.word	0x2000008c

0800137c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <I2C1_ER_IRQHandler+0x10>)
 8001382:	f001 fba6 	bl	8002ad2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000008c 	.word	0x2000008c

08001390 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <SPI1_IRQHandler+0x10>)
 8001396:	f003 fbd5 	bl	8004b44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000104 	.word	0x20000104

080013a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80013a8:	4802      	ldr	r0, [pc, #8]	; (80013b4 <DMA2_Stream0_IRQHandler+0x10>)
 80013aa:	f000 fb6b 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001bc 	.word	0x200001bc

080013b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <DMA2_Stream3_IRQHandler+0x10>)
 80013be:	f000 fb61 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000015c 	.word	0x2000015c

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f003 ffc2 	bl	8005384 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20020000 	.word	0x20020000
 800142c:	00000400 	.word	0x00000400
 8001430:	2000021c 	.word	0x2000021c
 8001434:	20000280 	.word	0x20000280

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM1_Init+0x98>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <MX_TIM1_Init+0x9c>)
 800147c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001480:	225f      	movs	r2, #95	; 0x5f
 8001482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM1_Init+0x98>)
 800148c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_TIM1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014a6:	f003 fc6b 	bl	8004d80 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014b0:	f7ff fe0c 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014c2:	f003 fd07 	bl	8004ed4 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014cc:	f7ff fdfe 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014de:	f003 fedb 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014e8:	f7ff fdf0 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000220 	.word	0x20000220
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_Base_MspInit+0x3c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10d      	bne.n	800152a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_Base_MspInit+0x40>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40010000 	.word	0x40010000
 800153c:	40023800 	.word	0x40023800

08001540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopFillZerobss+0x26>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800156a:	f7ff ff65 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f003 ff0f 	bl	8005390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001572:	f7ff fc11 	bl	8000d98 <main>
  bx  lr    
 8001576:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001584:	080055c0 	.word	0x080055c0
  ldr r2, =_sbss
 8001588:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800158c:	2000027c 	.word	0x2000027c

08001590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC_IRQHandler>
	...

08001594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_Init+0x40>)
 800159e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_Init+0x40>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <HAL_Init+0x40>)
 80015b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f94f 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff fe7c 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f967 	bl	80018ca <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f92f 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	20000008 	.word	0x20000008
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x20>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_IncTick+0x24>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <HAL_IncTick+0x24>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008
 800165c:	20000268 	.word	0x20000268

08001660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return uwTick;
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_GetTick+0x14>)
 8001666:	681b      	ldr	r3, [r3, #0]
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000268 	.word	0x20000268

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001680:	f7ff ffee 	bl	8001660 <HAL_GetTick>
 8001684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001690:	d005      	beq.n	800169e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_Delay+0x44>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	461a      	mov	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800169e:	bf00      	nop
 80016a0:	f7ff ffde 	bl	8001660 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d8f7      	bhi.n	80016a0 <HAL_Delay+0x28>
  {
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000008 	.word	0x20000008

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff feb6 	bl	8001660 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e099      	b.n	8001a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001920:	e00f      	b.n	8001942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001922:	f7ff fe9d 	bl	8001660 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b05      	cmp	r3, #5
 800192e:	d908      	bls.n	8001942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2220      	movs	r2, #32
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2203      	movs	r2, #3
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e078      	b.n	8001a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e8      	bne.n	8001922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_DMA_Init+0x158>)
 800195c:	4013      	ands	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800197a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	4313      	orrs	r3, r2
 8001992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2b04      	cmp	r3, #4
 800199a:	d107      	bne.n	80019ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4313      	orrs	r3, r2
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f023 0307 	bic.w	r3, r3, #7
 80019c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d117      	bne.n	8001a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4313      	orrs	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fa19 	bl	8001e20 <DMA_CheckFifoParam>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a02:	2301      	movs	r3, #1
 8001a04:	e016      	b.n	8001a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f9d0 	bl	8001db4 <DMA_CalcBaseAndBitshift>
 8001a14:	4603      	mov	r3, r0
 8001a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1c:	223f      	movs	r2, #63	; 0x3f
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	f010803f 	.word	0xf010803f

08001a40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d004      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00c      	b.n	8001a78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2205      	movs	r2, #5
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a90:	4b8e      	ldr	r3, [pc, #568]	; (8001ccc <HAL_DMA_IRQHandler+0x248>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a8e      	ldr	r2, [pc, #568]	; (8001cd0 <HAL_DMA_IRQHandler+0x24c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2208      	movs	r2, #8
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2208      	movs	r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2204      	movs	r2, #4
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	2210      	movs	r2, #16
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2210      	movs	r2, #16
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 808f 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8087 	beq.w	8001d24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d136      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0216 	bic.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x1da>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	223f      	movs	r2, #63	; 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07e      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
        }
        return;
 8001c9a:	e079      	b.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01d      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d031      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e02c      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
 8001cca:	bf00      	nop
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e01e      	b.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d032      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0201 	bic.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d307      	bcc.n	8001d6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f2      	bne.n	8001d50 <HAL_DMA_IRQHandler+0x2cc>
 8001d6a:	e000      	b.n	8001d6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d90:	bf00      	nop
    }
  }
}
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001da6:	b2db      	uxtb	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	3b10      	subs	r3, #16
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <DMA_CalcBaseAndBitshift+0x64>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	091b      	lsrs	r3, r3, #4
 8001dcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <DMA_CalcBaseAndBitshift+0x68>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d909      	bls.n	8001df6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dea:	f023 0303 	bic.w	r3, r3, #3
 8001dee:	1d1a      	adds	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	659a      	str	r2, [r3, #88]	; 0x58
 8001df4:	e007      	b.n	8001e06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dfe:	f023 0303 	bic.w	r3, r3, #3
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	aaaaaaab 	.word	0xaaaaaaab
 8001e1c:	080055a8 	.word	0x080055a8

08001e20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11f      	bne.n	8001e7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d856      	bhi.n	8001eee <DMA_CheckFifoParam+0xce>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <DMA_CheckFifoParam+0x28>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e6b 	.word	0x08001e6b
 8001e50:	08001e59 	.word	0x08001e59
 8001e54:	08001eef 	.word	0x08001eef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d046      	beq.n	8001ef2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e68:	e043      	b.n	8001ef2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e72:	d140      	bne.n	8001ef6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e78:	e03d      	b.n	8001ef6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e82:	d121      	bne.n	8001ec8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d837      	bhi.n	8001efa <DMA_CheckFifoParam+0xda>
 8001e8a:	a201      	add	r2, pc, #4	; (adr r2, 8001e90 <DMA_CheckFifoParam+0x70>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001ea7 	.word	0x08001ea7
 8001e98:	08001ea1 	.word	0x08001ea1
 8001e9c:	08001eb9 	.word	0x08001eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea4:	e030      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d025      	beq.n	8001efe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb6:	e022      	b.n	8001efe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ec0:	d11f      	bne.n	8001f02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ec6:	e01c      	b.n	8001f02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d903      	bls.n	8001ed6 <DMA_CheckFifoParam+0xb6>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d003      	beq.n	8001edc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ed4:	e018      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8001eda:	e015      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00e      	beq.n	8001f06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      break;
 8001eec:	e00b      	b.n	8001f06 <DMA_CheckFifoParam+0xe6>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e00a      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e008      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e006      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e004      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001efe:	bf00      	nop
 8001f00:	e002      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f02:	bf00      	nop
 8001f04:	e000      	b.n	8001f08 <DMA_CheckFifoParam+0xe8>
      break;
 8001f06:	bf00      	nop
    }
  } 
  
  return status; 
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	e159      	b.n	80021e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	f040 8148 	bne.w	80021e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d005      	beq.n	8001f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d130      	bne.n	8001fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 0201 	and.w	r2, r3, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d017      	beq.n	8002008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d123      	bne.n	800205c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3208      	adds	r2, #8
 800201c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0203 	and.w	r2, r3, #3
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80a2 	beq.w	80021e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	4b57      	ldr	r3, [pc, #348]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 80020a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ac:	6453      	str	r3, [r2, #68]	; 0x44
 80020ae:	4b54      	ldr	r3, [pc, #336]	; (8002200 <HAL_GPIO_Init+0x2e8>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_GPIO_Init+0x2ec>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a49      	ldr	r2, [pc, #292]	; (8002208 <HAL_GPIO_Init+0x2f0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d019      	beq.n	800211a <HAL_GPIO_Init+0x202>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a48      	ldr	r2, [pc, #288]	; (800220c <HAL_GPIO_Init+0x2f4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <HAL_GPIO_Init+0x1fe>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <HAL_GPIO_Init+0x2f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00d      	beq.n	8002112 <HAL_GPIO_Init+0x1fa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a46      	ldr	r2, [pc, #280]	; (8002214 <HAL_GPIO_Init+0x2fc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <HAL_GPIO_Init+0x1f6>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_GPIO_Init+0x300>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d101      	bne.n	800210a <HAL_GPIO_Init+0x1f2>
 8002106:	2304      	movs	r3, #4
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x204>
 800210a:	2307      	movs	r3, #7
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x204>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x204>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x204>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x204>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_GPIO_Init+0x2ec>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213a:	4b38      	ldr	r3, [pc, #224]	; (800221c <HAL_GPIO_Init+0x304>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215e:	4a2f      	ldr	r2, [pc, #188]	; (800221c <HAL_GPIO_Init+0x304>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_GPIO_Init+0x304>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <HAL_GPIO_Init+0x304>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218e:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_GPIO_Init+0x304>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b2:	4a1a      	ldr	r2, [pc, #104]	; (800221c <HAL_GPIO_Init+0x304>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <HAL_GPIO_Init+0x304>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021dc:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_GPIO_Init+0x304>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f aea2 	bls.w	8001f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40013800 	.word	0x40013800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021000 	.word	0x40021000
 800221c:	40013c00 	.word	0x40013c00

08002220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	807b      	strh	r3, [r7, #2]
 800222c:	4613      	mov	r3, r2
 800222e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002230:	787b      	ldrb	r3, [r7, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800223c:	e003      	b.n	8002246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	887b      	ldrh	r3, [r7, #2]
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002264:	887a      	ldrh	r2, [r7, #2]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	041a      	lsls	r2, r3, #16
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43d9      	mvns	r1, r3
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	400b      	ands	r3, r1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e12b      	b.n	80024f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fcbe 	bl	8000c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2224      	movs	r2, #36	; 0x24
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0201 	bic.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ec:	f002 fb8c 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a81      	ldr	r2, [pc, #516]	; (80024fc <HAL_I2C_Init+0x274>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d807      	bhi.n	800230c <HAL_I2C_Init+0x84>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_I2C_Init+0x278>)
 8002300:	4293      	cmp	r3, r2
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e006      	b.n	800231a <HAL_I2C_Init+0x92>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a7d      	ldr	r2, [pc, #500]	; (8002504 <HAL_I2C_Init+0x27c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	bf94      	ite	ls
 8002314:	2301      	movls	r3, #1
 8002316:	2300      	movhi	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0e7      	b.n	80024f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a78      	ldr	r2, [pc, #480]	; (8002508 <HAL_I2C_Init+0x280>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_I2C_Init+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d802      	bhi.n	800235c <HAL_I2C_Init+0xd4>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	3301      	adds	r3, #1
 800235a:	e009      	b.n	8002370 <HAL_I2C_Init+0xe8>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	4a69      	ldr	r2, [pc, #420]	; (800250c <HAL_I2C_Init+0x284>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	3301      	adds	r3, #1
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	430b      	orrs	r3, r1
 8002376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	495c      	ldr	r1, [pc, #368]	; (80024fc <HAL_I2C_Init+0x274>)
 800238c:	428b      	cmp	r3, r1
 800238e:	d819      	bhi.n	80023c4 <HAL_I2C_Init+0x13c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1e59      	subs	r1, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	fbb1 f3f3 	udiv	r3, r1, r3
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023a4:	400b      	ands	r3, r1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_I2C_Init+0x138>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1e59      	subs	r1, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023be:	e051      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e04f      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <HAL_I2C_Init+0x168>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1e58      	subs	r0, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e012      	b.n	8002416 <HAL_I2C_Init+0x18e>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e58      	subs	r0, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	0099      	lsls	r1, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	fbb0 f3f3 	udiv	r3, r0, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf0c      	ite	eq
 8002410:	2301      	moveq	r3, #1
 8002412:	2300      	movne	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Init+0x196>
 800241a:	2301      	movs	r3, #1
 800241c:	e022      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10e      	bne.n	8002444 <HAL_I2C_Init+0x1bc>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1e58      	subs	r0, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	440b      	add	r3, r1
 8002434:	fbb0 f3f3 	udiv	r3, r0, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002442:	e00f      	b.n	8002464 <HAL_I2C_Init+0x1dc>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	0099      	lsls	r1, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	6809      	ldr	r1, [r1, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6911      	ldr	r1, [r2, #16]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2220      	movs	r2, #32
 80024de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	000186a0 	.word	0x000186a0
 8002500:	001e847f 	.word	0x001e847f
 8002504:	003d08ff 	.word	0x003d08ff
 8002508:	431bde83 	.word	0x431bde83
 800250c:	10624dd3 	.word	0x10624dd3

08002510 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	817b      	strh	r3, [r7, #10]
 8002522:	460b      	mov	r3, r1
 8002524:	813b      	strh	r3, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	f040 808e 	bne.w	8002658 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800253c:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_I2C_Mem_Write_IT+0x158>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	4a4a      	ldr	r2, [pc, #296]	; (800266c <HAL_I2C_Mem_Write_IT+0x15c>)
 8002544:	fba2 2303 	umull	r2, r3, r2, r3
 8002548:	0a1a      	lsrs	r2, r3, #8
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009a      	lsls	r2, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3b01      	subs	r3, #1
 800255a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e064      	b.n	800265a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b02      	cmp	r3, #2
 800259c:	d0db      	beq.n	8002556 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_I2C_Mem_Write_IT+0x9c>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e056      	b.n	800265a <HAL_I2C_Mem_Write_IT+0x14a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d007      	beq.n	80025d2 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2240      	movs	r2, #64	; 0x40
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4a17      	ldr	r2, [pc, #92]	; (8002670 <HAL_I2C_Mem_Write_IT+0x160>)
 8002612:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002614:	897a      	ldrh	r2, [r7, #10]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800261a:	893a      	ldrh	r2, [r7, #8]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002652:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	371c      	adds	r7, #28
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000000 	.word	0x20000000
 800266c:	14f8b589 	.word	0x14f8b589
 8002670:	ffff0000 	.word	0xffff0000

08002674 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b20      	cmp	r3, #32
 800269c:	f040 809a 	bne.w	80027d4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026a0:	4b50      	ldr	r3, [pc, #320]	; (80027e4 <HAL_I2C_Mem_Read_IT+0x170>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	4a50      	ldr	r2, [pc, #320]	; (80027e8 <HAL_I2C_Mem_Read_IT+0x174>)
 80026a8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ac:	0a1a      	lsrs	r2, r3, #8
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3b01      	subs	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d116      	bne.n	80026f4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0220 	orr.w	r2, r3, #32
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e070      	b.n	80027d6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d0db      	beq.n	80026ba <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_I2C_Mem_Read_IT+0x9c>
 800270c:	2302      	movs	r3, #2
 800270e:	e062      	b.n	80027d6 <HAL_I2C_Mem_Read_IT+0x162>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d007      	beq.n	8002736 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002744:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2222      	movs	r2, #34	; 0x22
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2240      	movs	r2, #64	; 0x40
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a3a      	ldr	r2, [r7, #32]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <HAL_I2C_Mem_Read_IT+0x178>)
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002778:	897a      	ldrh	r2, [r7, #10]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800277e:	893a      	ldrh	r2, [r7, #8]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800279e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ae:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80027ce:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	14f8b589 	.word	0x14f8b589
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002810:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002818:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b10      	cmp	r3, #16
 800281e:	d003      	beq.n	8002828 <HAL_I2C_EV_IRQHandler+0x38>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	f040 80c1 	bne.w	80029aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_I2C_EV_IRQHandler+0x6e>
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002848:	d003      	beq.n	8002852 <HAL_I2C_EV_IRQHandler+0x62>
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002850:	d101      	bne.n	8002856 <HAL_I2C_EV_IRQHandler+0x66>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_I2C_EV_IRQHandler+0x68>
 8002856:	2300      	movs	r3, #0
 8002858:	2b01      	cmp	r3, #1
 800285a:	f000 8132 	beq.w	8002ac2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00c      	beq.n	8002882 <HAL_I2C_EV_IRQHandler+0x92>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	0a5b      	lsrs	r3, r3, #9
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f001 fc7b 	bl	8004170 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fd83 	bl	8003386 <I2C_Master_SB>
 8002880:	e092      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	0a5b      	lsrs	r3, r3, #9
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fdf9 	bl	8003492 <I2C_Master_ADD10>
 80028a0:	e082      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	085b      	lsrs	r3, r3, #1
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	0a5b      	lsrs	r3, r3, #9
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fe13 	bl	80034e6 <I2C_Master_ADDR>
 80028c0:	e072      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03b      	beq.n	8002946 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028dc:	f000 80f3 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	09db      	lsrs	r3, r3, #7
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00f      	beq.n	800290c <HAL_I2C_EV_IRQHandler+0x11c>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_I2C_EV_IRQHandler+0x11c>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f9f3 	bl	8002cf0 <I2C_MasterTransmit_TXE>
 800290a:	e04d      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80d6 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	0a5b      	lsrs	r3, r3, #9
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80cf 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	2b21      	cmp	r3, #33	; 0x21
 800292c:	d103      	bne.n	8002936 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa7a 	bl	8002e28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002934:	e0c7      	b.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	f040 80c4 	bne.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fae8 	bl	8002f14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002944:	e0bf      	b.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	f000 80b7 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00f      	beq.n	8002984 <HAL_I2C_EV_IRQHandler+0x194>
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	0a9b      	lsrs	r3, r3, #10
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_I2C_EV_IRQHandler+0x194>
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 fb5d 	bl	800303c <I2C_MasterReceive_RXNE>
 8002982:	e011      	b.n	80029a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 809a 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8093 	beq.w	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fc06 	bl	80031b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029a6:	e08e      	b.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029a8:	e08d      	b.n	8002ac6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e007      	b.n	80029cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x20e>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 ffc4 	bl	8003984 <I2C_Slave_ADDR>
 80029fc:	e066      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_I2C_EV_IRQHandler+0x22e>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	0a5b      	lsrs	r3, r3, #9
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fffe 	bl	8003a18 <I2C_Slave_STOPF>
 8002a1c:	e056      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a1e:	7bbb      	ldrb	r3, [r7, #14]
 8002a20:	2b21      	cmp	r3, #33	; 0x21
 8002a22:	d002      	beq.n	8002a2a <HAL_I2C_EV_IRQHandler+0x23a>
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	2b29      	cmp	r3, #41	; 0x29
 8002a28:	d125      	bne.n	8002a76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	09db      	lsrs	r3, r3, #7
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00f      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0x266>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0a9b      	lsrs	r3, r3, #10
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_I2C_EV_IRQHandler+0x266>
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 feda 	bl	8003808 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a54:	e039      	b.n	8002aca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d033      	beq.n	8002aca <HAL_I2C_EV_IRQHandler+0x2da>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	0a5b      	lsrs	r3, r3, #9
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d02d      	beq.n	8002aca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 ff07 	bl	8003882 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a74:	e029      	b.n	8002aca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00f      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	0a9b      	lsrs	r3, r3, #10
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 ff12 	bl	80038c4 <I2C_SlaveReceive_RXNE>
 8002aa0:	e014      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	0a5b      	lsrs	r3, r3, #9
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 ff40 	bl	8003940 <I2C_SlaveReceive_BTF>
 8002ac0:	e004      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08a      	sub	sp, #40	; 0x28
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x4e>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	0a5b      	lsrs	r3, r3, #9
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00e      	beq.n	8002b4a <HAL_I2C_ER_IRQHandler+0x78>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	0a9b      	lsrs	r3, r3, #10
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03f      	beq.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x104>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d039      	beq.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002b62:	7efb      	ldrb	r3, [r7, #27]
 8002b64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002b7c:	7ebb      	ldrb	r3, [r7, #26]
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d112      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10f      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xd6>
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b21      	cmp	r3, #33	; 0x21
 8002b8c:	d008      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b29      	cmp	r3, #41	; 0x29
 8002b92:	d005      	beq.n	8002ba0 <HAL_I2C_ER_IRQHandler+0xce>
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b28      	cmp	r3, #40	; 0x28
 8002b98:	d106      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b21      	cmp	r3, #33	; 0x21
 8002b9e:	d103      	bne.n	8002ba8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f001 f869 	bl	8003c78 <I2C_Slave_AF>
 8002ba6:	e016      	b.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002bba:	7efb      	ldrb	r3, [r7, #27]
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d002      	beq.n	8002bc6 <HAL_I2C_ER_IRQHandler+0xf4>
 8002bc0:	7efb      	ldrb	r3, [r7, #27]
 8002bc2:	2b40      	cmp	r3, #64	; 0x40
 8002bc4:	d107      	bne.n	8002bd6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	0adb      	lsrs	r3, r3, #11
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00e      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0x12e>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002bfe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f001 f8a0 	bl	8003d58 <I2C_ITError>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d150      	bne.n	8002db8 <I2C_MasterTransmit_TXE+0xc8>
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	2b21      	cmp	r3, #33	; 0x21
 8002d1a:	d14d      	bne.n	8002db8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d01d      	beq.n	8002d5e <I2C_MasterTransmit_TXE+0x6e>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d01a      	beq.n	8002d5e <I2C_MasterTransmit_TXE+0x6e>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d2e:	d016      	beq.n	8002d5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2211      	movs	r2, #17
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff62 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d5c:	e060      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b40      	cmp	r3, #64	; 0x40
 8002d96:	d107      	bne.n	8002da8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff7d 	bl	8002ca0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002da6:	e03b      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff35 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002db6:	e033      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b21      	cmp	r3, #33	; 0x21
 8002dbc:	d005      	beq.n	8002dca <I2C_MasterTransmit_TXE+0xda>
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d12d      	bne.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b22      	cmp	r3, #34	; 0x22
 8002dc8:	d12a      	bne.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d108      	bne.n	8002de6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002de4:	e01c      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d103      	bne.n	8002dfa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f88e 	bl	8002f14 <I2C_MemoryTransmit_TXE_BTF>
}
 8002df8:	e012      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e1e:	e7ff      	b.n	8002e20 <I2C_MasterTransmit_TXE+0x130>
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b21      	cmp	r3, #33	; 0x21
 8002e40:	d164      	bne.n	8002f0c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002e70:	e04c      	b.n	8002f0c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d01d      	beq.n	8002eb4 <I2C_MasterTransmit_BTF+0x8c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d01a      	beq.n	8002eb4 <I2C_MasterTransmit_BTF+0x8c>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e84:	d016      	beq.n	8002eb4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2211      	movs	r2, #17
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff feb7 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
}
 8002eb2:	e02b      	b.n	8002f0c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ec2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d107      	bne.n	8002efe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fed2 	bl	8002ca0 <HAL_I2C_MemTxCpltCallback>
}
 8002efc:	e006      	b.n	8002f0c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fe8a 	bl	8002c20 <HAL_I2C_MasterTxCpltCallback>
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11d      	bne.n	8002f68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10b      	bne.n	8002f4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f44:	1c9a      	adds	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f4a:	e073      	b.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	121b      	asrs	r3, r3, #8
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f66:	e065      	b.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10b      	bne.n	8002f88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f86:	e055      	b.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d151      	bne.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b22      	cmp	r3, #34	; 0x22
 8002f94:	d10d      	bne.n	8002fb2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fb0:	e040      	b.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d015      	beq.n	8002fe8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b21      	cmp	r3, #33	; 0x21
 8002fc0:	d112      	bne.n	8002fe8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fe6:	e025      	b.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d120      	bne.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b21      	cmp	r3, #33	; 0x21
 8002ff6:	d11d      	bne.n	8003034 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003006:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003016:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff fe36 	bl	8002ca0 <HAL_I2C_MemTxCpltCallback>
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b22      	cmp	r3, #34	; 0x22
 800304e:	f040 80ac 	bne.w	80031aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d921      	bls.n	80030a4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	1c5a      	adds	r2, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b03      	cmp	r3, #3
 800308e:	f040 808c 	bne.w	80031aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80030a2:	e082      	b.n	80031aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d075      	beq.n	8003198 <I2C_MasterReceive_RXNE+0x15c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d002      	beq.n	80030b8 <I2C_MasterReceive_RXNE+0x7c>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d16f      	bne.n	8003198 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f001 f827 	bl	800410c <I2C_WaitOnSTOPRequestThroughIT>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d142      	bne.n	800314a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b40      	cmp	r3, #64	; 0x40
 800311c:	d10a      	bne.n	8003134 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fdc1 	bl	8002cb4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003132:	e03a      	b.n	80031aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2212      	movs	r2, #18
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fd76 	bl	8002c34 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003148:	e02f      	b.n	80031aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003158:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	691a      	ldr	r2, [r3, #16]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fd99 	bl	8002cc8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003196:	e008      	b.n	80031aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a6:	605a      	str	r2, [r3, #4]
}
 80031a8:	e7ff      	b.n	80031aa <I2C_MasterReceive_RXNE+0x16e>
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d11b      	bne.n	8003202 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003200:	e0bd      	b.n	800337e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d129      	bne.n	8003260 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d00a      	beq.n	8003238 <I2C_MasterReceive_BTF+0x86>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d007      	beq.n	8003238 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003236:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800325e:	e08e      	b.n	800337e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d176      	bne.n	8003358 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d002      	beq.n	8003276 <I2C_MasterReceive_BTF+0xc4>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2b10      	cmp	r3, #16
 8003274:	d108      	bne.n	8003288 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e019      	b.n	80032bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d002      	beq.n	8003294 <I2C_MasterReceive_BTF+0xe2>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d108      	bne.n	80032a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e00a      	b.n	80032bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d007      	beq.n	80032bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003316:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d10a      	bne.n	8003342 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7ff fcba 	bl	8002cb4 <HAL_I2C_MemRxCpltCallback>
}
 8003340:	e01d      	b.n	800337e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2212      	movs	r2, #18
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fc6f 	bl	8002c34 <HAL_I2C_MasterRxCpltCallback>
}
 8003356:	e012      	b.n	800337e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d117      	bne.n	80033ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033b4:	e067      	b.n	8003486 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]
}
 80033c8:	e05d      	b.n	8003486 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d2:	d133      	bne.n	800343c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b21      	cmp	r3, #33	; 0x21
 80033de:	d109      	bne.n	80033f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	e008      	b.n	8003406 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <I2C_Master_SB+0x92>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	2b00      	cmp	r3, #0
 800341e:	d032      	beq.n	8003486 <I2C_Master_SB+0x100>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	2b00      	cmp	r3, #0
 8003428:	d02d      	beq.n	8003486 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003438:	605a      	str	r2, [r3, #4]
}
 800343a:	e024      	b.n	8003486 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10e      	bne.n	8003462 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	b29b      	uxth	r3, r3
 800344a:	11db      	asrs	r3, r3, #7
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f063 030f 	orn	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]
}
 8003460:	e011      	b.n	8003486 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10d      	bne.n	8003486 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	b29b      	uxth	r3, r3
 8003470:	11db      	asrs	r3, r3, #7
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 0306 	and.w	r3, r3, #6
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f063 030e 	orn	r3, r3, #14
 800347e:	b2da      	uxtb	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <I2C_Master_ADD10+0x26>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00c      	beq.n	80034da <I2C_Master_ADD10+0x48>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d8:	605a      	str	r2, [r3, #4]
  }
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b091      	sub	sp, #68	; 0x44
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b22      	cmp	r3, #34	; 0x22
 800350e:	f040 8169 	bne.w	80037e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <I2C_Master_ADDR+0x54>
 800351a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d10b      	bne.n	800353a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	2300      	movs	r3, #0
 8003524:	633b      	str	r3, [r7, #48]	; 0x30
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	e160      	b.n	80037fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d11d      	bne.n	800357e <I2C_Master_ADDR+0x98>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800354a:	d118      	bne.n	800357e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354c:	2300      	movs	r3, #0
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003570:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	651a      	str	r2, [r3, #80]	; 0x50
 800357c:	e13e      	b.n	80037fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d113      	bne.n	80035b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003588:	2300      	movs	r3, #0
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	62bb      	str	r3, [r7, #40]	; 0x28
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e115      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	f040 808a 	bne.w	80036d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035c2:	d137      	bne.n	8003634 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e2:	d113      	bne.n	800360c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	e0e7      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360c:	2300      	movs	r3, #0
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	623b      	str	r3, [r7, #32]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e0d3      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	2b08      	cmp	r3, #8
 8003638:	d02e      	beq.n	8003698 <I2C_Master_ADDR+0x1b2>
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	2b20      	cmp	r3, #32
 800363e:	d02b      	beq.n	8003698 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003642:	2b12      	cmp	r3, #18
 8003644:	d102      	bne.n	800364c <I2C_Master_ADDR+0x166>
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	2b01      	cmp	r3, #1
 800364a:	d125      	bne.n	8003698 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	2b04      	cmp	r3, #4
 8003650:	d00e      	beq.n	8003670 <I2C_Master_ADDR+0x18a>
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	2b02      	cmp	r3, #2
 8003656:	d00b      	beq.n	8003670 <I2C_Master_ADDR+0x18a>
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	2b10      	cmp	r3, #16
 800365c:	d008      	beq.n	8003670 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800367e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	61fb      	str	r3, [r7, #28]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	e0a1      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a8:	2300      	movs	r3, #0
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e085      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d14d      	bne.n	8003776 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d016      	beq.n	800370e <I2C_Master_ADDR+0x228>
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d013      	beq.n	800370e <I2C_Master_ADDR+0x228>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	2b10      	cmp	r3, #16
 80036ea:	d010      	beq.n	800370e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	e007      	b.n	800371e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800371c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d117      	bne.n	800375e <I2C_Master_ADDR+0x278>
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003734:	d00b      	beq.n	800374e <I2C_Master_ADDR+0x268>
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b01      	cmp	r3, #1
 800373a:	d008      	beq.n	800374e <I2C_Master_ADDR+0x268>
 800373c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373e:	2b08      	cmp	r3, #8
 8003740:	d005      	beq.n	800374e <I2C_Master_ADDR+0x268>
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	2b10      	cmp	r3, #16
 8003746:	d002      	beq.n	800374e <I2C_Master_ADDR+0x268>
 8003748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374a:	2b20      	cmp	r3, #32
 800374c:	d107      	bne.n	800375e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800375c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	e032      	b.n	80037dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d117      	bne.n	80037c6 <I2C_Master_ADDR+0x2e0>
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379c:	d00b      	beq.n	80037b6 <I2C_Master_ADDR+0x2d0>
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d008      	beq.n	80037b6 <I2C_Master_ADDR+0x2d0>
 80037a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d005      	beq.n	80037b6 <I2C_Master_ADDR+0x2d0>
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d002      	beq.n	80037b6 <I2C_Master_ADDR+0x2d0>
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d107      	bne.n	80037c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80037e2:	e00b      	b.n	80037fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
}
 80037fa:	e7ff      	b.n	80037fc <I2C_Master_ADDR+0x316>
 80037fc:	bf00      	nop
 80037fe:	3744      	adds	r7, #68	; 0x44
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003816:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02b      	beq.n	800387a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d114      	bne.n	800387a <I2C_SlaveTransmit_TXE+0x72>
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b29      	cmp	r3, #41	; 0x29
 8003854:	d111      	bne.n	800387a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2221      	movs	r2, #33	; 0x21
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2228      	movs	r2, #40	; 0x28
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff f9e7 	bl	8002c48 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d011      	beq.n	80038b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d02c      	beq.n	8003938 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d114      	bne.n	8003938 <I2C_SlaveReceive_RXNE+0x74>
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b2a      	cmp	r3, #42	; 0x2a
 8003912:	d111      	bne.n	8003938 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2222      	movs	r2, #34	; 0x22
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2228      	movs	r2, #40	; 0x28
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff f992 	bl	8002c5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800399e:	2b28      	cmp	r3, #40	; 0x28
 80039a0:	d127      	bne.n	80039f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	09db      	lsrs	r3, r3, #7
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	81bb      	strh	r3, [r7, #12]
 80039d4:	e002      	b.n	80039dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039e4:	89ba      	ldrh	r2, [r7, #12]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff f940 	bl	8002c70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039f0:	e00e      	b.n	8003a10 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d172      	bne.n	8003b5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b22      	cmp	r3, #34	; 0x22
 8003a7a:	d002      	beq.n	8003a82 <I2C_Slave_STOPF+0x6a>
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a80:	d135      	bne.n	8003aee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe f96c 	bl	8001d98 <HAL_DMA_GetState>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d049      	beq.n	8003b5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <I2C_Slave_STOPF+0x258>)
 8003acc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd ffb4 	bl	8001a40 <HAL_DMA_Abort_IT>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03d      	beq.n	8003b5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003aec:	e035      	b.n	8003b5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f043 0204 	orr.w	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe f936 	bl	8001d98 <HAL_DMA_GetState>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d014      	beq.n	8003b5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	4a4e      	ldr	r2, [pc, #312]	; (8003c70 <I2C_Slave_STOPF+0x258>)
 8003b38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd ff7e 	bl	8001a40 <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b54:	4610      	mov	r0, r2
 8003b56:	4798      	blx	r3
 8003b58:	e000      	b.n	8003b5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03e      	beq.n	8003be4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d112      	bne.n	8003b9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d112      	bne.n	8003bce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	f043 0204 	orr.w	r2, r3, #4
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8b3 	bl	8003d58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003bf2:	e039      	b.n	8003c68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf8:	d109      	bne.n	8003c0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2228      	movs	r2, #40	; 0x28
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff f827 	bl	8002c5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b28      	cmp	r3, #40	; 0x28
 8003c18:	d111      	bne.n	8003c3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <I2C_Slave_STOPF+0x25c>)
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff f828 	bl	8002c8c <HAL_I2C_ListenCpltCallback>
}
 8003c3c:	e014      	b.n	8003c68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	2b22      	cmp	r3, #34	; 0x22
 8003c44:	d002      	beq.n	8003c4c <I2C_Slave_STOPF+0x234>
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	2b22      	cmp	r3, #34	; 0x22
 8003c4a:	d10d      	bne.n	8003c68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fe fffa 	bl	8002c5c <HAL_I2C_SlaveRxCpltCallback>
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	08003fbd 	.word	0x08003fbd
 8003c74:	ffff0000 	.word	0xffff0000

08003c78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d002      	beq.n	8003c9a <I2C_Slave_AF+0x22>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d129      	bne.n	8003cee <I2C_Slave_AF+0x76>
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	2b28      	cmp	r3, #40	; 0x28
 8003c9e:	d126      	bne.n	8003cee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <I2C_Slave_AF+0xdc>)
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cbe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe ffd0 	bl	8002c8c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003cec:	e02e      	b.n	8003d4c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b21      	cmp	r3, #33	; 0x21
 8003cf2:	d126      	bne.n	8003d42 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <I2C_Slave_AF+0xdc>)
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2221      	movs	r2, #33	; 0x21
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe ff84 	bl	8002c48 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d40:	e004      	b.n	8003d4c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d4a:	615a      	str	r2, [r3, #20]
}
 8003d4c:	bf00      	nop
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	ffff0000 	.word	0xffff0000

08003d58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d002      	beq.n	8003d7c <I2C_ITError+0x24>
 8003d76:	7bbb      	ldrb	r3, [r7, #14]
 8003d78:	2b40      	cmp	r3, #64	; 0x40
 8003d7a:	d10a      	bne.n	8003d92 <I2C_ITError+0x3a>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b22      	cmp	r3, #34	; 0x22
 8003d80:	d107      	bne.n	8003d92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d98:	2b28      	cmp	r3, #40	; 0x28
 8003d9a:	d107      	bne.n	8003dac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2228      	movs	r2, #40	; 0x28
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003daa:	e015      	b.n	8003dd8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d00a      	beq.n	8003dd2 <I2C_ITError+0x7a>
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b60      	cmp	r3, #96	; 0x60
 8003dc0:	d007      	beq.n	8003dd2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de6:	d162      	bne.n	8003eae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d020      	beq.n	8003e48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <I2C_ITError+0x25c>)
 8003e0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fe14 	bl	8001a40 <HAL_DMA_Abort_IT>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8089 	beq.w	8003f32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e42:	4610      	mov	r0, r2
 8003e44:	4798      	blx	r3
 8003e46:	e074      	b.n	8003f32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	4a59      	ldr	r2, [pc, #356]	; (8003fb4 <I2C_ITError+0x25c>)
 8003e4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd fdf3 	bl	8001a40 <HAL_DMA_Abort_IT>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d068      	beq.n	8003f32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b40      	cmp	r3, #64	; 0x40
 8003e6c:	d10b      	bne.n	8003e86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	4798      	blx	r3
 8003eac:	e041      	b.n	8003f32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b60      	cmp	r3, #96	; 0x60
 8003eb8:	d125      	bne.n	8003f06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10b      	bne.n	8003eee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0201 	bic.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe feec 	bl	8002cdc <HAL_I2C_AbortCpltCallback>
 8003f04:	e015      	b.n	8003f32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d10b      	bne.n	8003f2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe fecb 	bl	8002cc8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10e      	bne.n	8003f60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d109      	bne.n	8003f60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d113      	bne.n	8003fac <I2C_ITError+0x254>
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b28      	cmp	r3, #40	; 0x28
 8003f88:	d110      	bne.n	8003fac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <I2C_ITError+0x260>)
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fe fe70 	bl	8002c8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fac:	bf00      	nop
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	08003fbd 	.word	0x08003fbd
 8003fb8:	ffff0000 	.word	0xffff0000

08003fbc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd6:	4b4b      	ldr	r3, [pc, #300]	; (8004104 <I2C_DMAAbort+0x148>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	08db      	lsrs	r3, r3, #3
 8003fdc:	4a4a      	ldr	r2, [pc, #296]	; (8004108 <I2C_DMAAbort+0x14c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a1a      	lsrs	r2, r3, #8
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00da      	lsls	r2, r3, #3
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004002:	e00a      	b.n	800401a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d0ea      	beq.n	8003ff0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004026:	2200      	movs	r2, #0
 8004028:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	2200      	movs	r2, #0
 8004038:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2200      	movs	r2, #0
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	2200      	movs	r2, #0
 800406e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b60      	cmp	r3, #96	; 0x60
 800408a:	d10e      	bne.n	80040aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f7fe fe1a 	bl	8002cdc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040a8:	e027      	b.n	80040fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040b0:	2b28      	cmp	r3, #40	; 0x28
 80040b2:	d117      	bne.n	80040e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2228      	movs	r2, #40	; 0x28
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040e2:	e007      	b.n	80040f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7fe fde7 	bl	8002cc8 <HAL_I2C_ErrorCallback>
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000
 8004108:	14f8b589 	.word	0x14f8b589

0800410c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004118:	4b13      	ldr	r3, [pc, #76]	; (8004168 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	08db      	lsrs	r3, r3, #3
 800411e:	4a13      	ldr	r2, [pc, #76]	; (800416c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	0a1a      	lsrs	r2, r3, #8
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3b01      	subs	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e008      	b.n	800415c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d0e9      	beq.n	800412e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	20000000 	.word	0x20000000
 800416c:	14f8b589 	.word	0x14f8b589

08004170 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004180:	d103      	bne.n	800418a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004188:	e007      	b.n	800419a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004192:	d102      	bne.n	800419a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2208      	movs	r2, #8
 8004198:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e267      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d075      	beq.n	80042b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041c6:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00c      	beq.n	80041ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d2:	4b85      	ldr	r3, [pc, #532]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041de:	4b82      	ldr	r3, [pc, #520]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ea:	d10b      	bne.n	8004204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	4b7e      	ldr	r3, [pc, #504]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d05b      	beq.n	80042b0 <HAL_RCC_OscConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d157      	bne.n	80042b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e242      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x74>
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	e01d      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x98>
 8004226:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6f      	ldr	r2, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a6c      	ldr	r2, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0xb0>
 8004240:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a68      	ldr	r2, [pc, #416]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a65      	ldr	r2, [pc, #404]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d013      	beq.n	8004288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fd f9fe 	bl	8001660 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004268:	f7fd f9fa 	bl	8001660 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e207      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b5b      	ldr	r3, [pc, #364]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0xc0>
 8004286:	e014      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004288:	f7fd f9ea 	bl	8001660 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004290:	f7fd f9e6 	bl	8001660 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b64      	cmp	r3, #100	; 0x64
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e1f3      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a2:	4b51      	ldr	r3, [pc, #324]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xe8>
 80042ae:	e000      	b.n	80042b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1c7      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fd f99f 	bl	8001660 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7fd f99b 	bl	8001660 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1a8      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4925      	ldr	r1, [pc, #148]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x244>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd f97e 	bl	8001660 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7fd f97a 	bl	8001660 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e187      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7fd f95e 	bl	8001660 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7fd f95a 	bl	8001660 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e167      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x200>
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x248>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fd f947 	bl	8001660 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	e00e      	b.n	80043f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fd f943 	bl	8001660 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d907      	bls.n	80043f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e150      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470000 	.word	0x42470000
 80043f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ea      	bne.n	80043d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8097 	beq.w	800453c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b7d      	ldr	r3, [pc, #500]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a7c      	ldr	r2, [pc, #496]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b7a      	ldr	r3, [pc, #488]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b77      	ldr	r3, [pc, #476]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <HAL_RCC_OscConfig+0x474>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a73      	ldr	r2, [pc, #460]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004456:	f7fd f903 	bl	8001660 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445e:	f7fd f8ff 	bl	8001660 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e10c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	4b6a      	ldr	r3, [pc, #424]	; (800461c <HAL_RCC_OscConfig+0x474>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x2ea>
 8004484:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a63      	ldr	r2, [pc, #396]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e01c      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x30c>
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a5e      	ldr	r2, [pc, #376]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a5b      	ldr	r2, [pc, #364]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x324>
 80044b4:	4b58      	ldr	r3, [pc, #352]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a57      	ldr	r2, [pc, #348]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	4b55      	ldr	r3, [pc, #340]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a54      	ldr	r2, [pc, #336]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd f8c4 	bl	8001660 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fd f8c0 	bl	8001660 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0cb      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	4b49      	ldr	r3, [pc, #292]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <HAL_RCC_OscConfig+0x334>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004500:	f7fd f8ae 	bl	8001660 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fd f8aa 	bl	8001660 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0b5      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ee      	bne.n	8004508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a38      	ldr	r2, [pc, #224]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a1 	beq.w	8004688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d05c      	beq.n	800460c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d141      	bne.n	80045de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fd f87e 	bl	8001660 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fd f87a 	bl	8001660 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e087      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b27      	ldr	r3, [pc, #156]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	491b      	ldr	r1, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b6:	f7fd f853 	bl	8001660 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045be:	f7fd f84f 	bl	8001660 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e05c      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x416>
 80045dc:	e054      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_RCC_OscConfig+0x478>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd f83c 	bl	8001660 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fd f838 	bl	8001660 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e045      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_RCC_OscConfig+0x470>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x444>
 800460a:	e03d      	b.n	8004688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e038      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <HAL_RCC_OscConfig+0x4ec>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d028      	beq.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d121      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d11a      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d111      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0cc      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b68      	ldr	r3, [pc, #416]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d90c      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b65      	ldr	r3, [pc, #404]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b63      	ldr	r3, [pc, #396]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0b8      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b59      	ldr	r3, [pc, #356]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a58      	ldr	r2, [pc, #352]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004704:	4b53      	ldr	r3, [pc, #332]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800470e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	494d      	ldr	r1, [pc, #308]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d044      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d119      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e07f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b02      	cmp	r3, #2
 800474c:	d003      	beq.n	8004756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004752:	2b03      	cmp	r3, #3
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e06f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b3b      	ldr	r3, [pc, #236]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e067      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4934      	ldr	r1, [pc, #208]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004788:	f7fc ff6a 	bl	8001660 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fc ff66 	bl	8001660 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e04f      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d20c      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_RCC_ClockConfig+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d001      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ec:	4b19      	ldr	r3, [pc, #100]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4916      	ldr	r1, [pc, #88]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	490e      	ldr	r1, [pc, #56]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800481e:	f000 f821 	bl	8004864 <HAL_RCC_GetSysClockFreq>
 8004822:	4602      	mov	r2, r0
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	490a      	ldr	r1, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	5ccb      	ldrb	r3, [r1, r3]
 8004832:	fa22 f303 	lsr.w	r3, r2, r3
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1c4>)
 8004838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCC_ClockConfig+0x1c8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc feca 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00
 8004854:	40023800 	.word	0x40023800
 8004858:	08005590 	.word	0x08005590
 800485c:	20000000 	.word	0x20000000
 8004860:	20000004 	.word	0x20000004

08004864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b090      	sub	sp, #64	; 0x40
 800486a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	637b      	str	r3, [r7, #52]	; 0x34
 8004870:	2300      	movs	r3, #0
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004874:	2300      	movs	r3, #0
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800487c:	4b59      	ldr	r3, [pc, #356]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d00d      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004888:	2b08      	cmp	r3, #8
 800488a:	f200 80a1 	bhi.w	80049d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_RCC_GetSysClockFreq+0x34>
 8004892:	2b04      	cmp	r3, #4
 8004894:	d003      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x3a>
 8004896:	e09b      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800489c:	e09b      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800489e:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048a2:	e098      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048a4:	4b4f      	ldr	r3, [pc, #316]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ae:	4b4d      	ldr	r3, [pc, #308]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d028      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ba:	4b4a      	ldr	r3, [pc, #296]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	099b      	lsrs	r3, r3, #6
 80048c0:	2200      	movs	r2, #0
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	627a      	str	r2, [r7, #36]	; 0x24
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048cc:	2100      	movs	r1, #0
 80048ce:	4b47      	ldr	r3, [pc, #284]	; (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048d0:	fb03 f201 	mul.w	r2, r3, r1
 80048d4:	2300      	movs	r3, #0
 80048d6:	fb00 f303 	mul.w	r3, r0, r3
 80048da:	4413      	add	r3, r2
 80048dc:	4a43      	ldr	r2, [pc, #268]	; (80049ec <HAL_RCC_GetSysClockFreq+0x188>)
 80048de:	fba0 1202 	umull	r1, r2, r0, r2
 80048e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e4:	460a      	mov	r2, r1
 80048e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80048e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ea:	4413      	add	r3, r2
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	2200      	movs	r2, #0
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	61fa      	str	r2, [r7, #28]
 80048f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048fe:	f7fb fc6b 	bl	80001d8 <__aeabi_uldivmod>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4613      	mov	r3, r2
 8004908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800490a:	e053      	b.n	80049b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490c:	4b35      	ldr	r3, [pc, #212]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	099b      	lsrs	r3, r3, #6
 8004912:	2200      	movs	r2, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	617a      	str	r2, [r7, #20]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	4652      	mov	r2, sl
 8004924:	465b      	mov	r3, fp
 8004926:	f04f 0000 	mov.w	r0, #0
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	0159      	lsls	r1, r3, #5
 8004930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004934:	0150      	lsls	r0, r2, #5
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	ebb2 080a 	subs.w	r8, r2, sl
 800493e:	eb63 090b 	sbc.w	r9, r3, fp
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800494e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004952:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004956:	ebb2 0408 	subs.w	r4, r2, r8
 800495a:	eb63 0509 	sbc.w	r5, r3, r9
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	00eb      	lsls	r3, r5, #3
 8004968:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800496c:	00e2      	lsls	r2, r4, #3
 800496e:	4614      	mov	r4, r2
 8004970:	461d      	mov	r5, r3
 8004972:	eb14 030a 	adds.w	r3, r4, sl
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	eb45 030b 	adc.w	r3, r5, fp
 800497c:	607b      	str	r3, [r7, #4]
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800498a:	4629      	mov	r1, r5
 800498c:	028b      	lsls	r3, r1, #10
 800498e:	4621      	mov	r1, r4
 8004990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004994:	4621      	mov	r1, r4
 8004996:	028a      	lsls	r2, r1, #10
 8004998:	4610      	mov	r0, r2
 800499a:	4619      	mov	r1, r3
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	2200      	movs	r2, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a8:	f7fb fc16 	bl	80001d8 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	3301      	adds	r3, #1
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3740      	adds	r7, #64	; 0x40
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	017d7840 	.word	0x017d7840

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	20000000 	.word	0x20000000

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a0c:	f7ff fff0 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	080055a0 	.word	0x080055a0

08004a30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e07b      	b.n	8004b3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d108      	bne.n	8004a5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a52:	d009      	beq.n	8004a68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	61da      	str	r2, [r3, #28]
 8004a5a:	e005      	b.n	8004a68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc fb5c 	bl	8001140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aec:	ea42 0103 	orr.w	r1, r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0104 	and.w	r1, r3, #4
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	f003 0210 	and.w	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
    return;
 8004b86:	e0d7      	b.n	8004d38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_SPI_IRQHandler+0x66>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	09db      	lsrs	r3, r3, #7
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
    return;
 8004ba8:	e0c6      	b.n	8004d38 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_SPI_IRQHandler+0x8c>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80b4 	beq.w	8004d38 <HAL_SPI_IRQHandler+0x1f4>
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 80ad 	beq.w	8004d38 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d023      	beq.n	8004c32 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d011      	beq.n	8004c1a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f043 0204 	orr.w	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	e00b      	b.n	8004c32 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	693b      	ldr	r3, [r7, #16]
        return;
 8004c30:	e082      	b.n	8004d38 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d014      	beq.n	8004c68 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f043 0208 	orr.w	r2, r3, #8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	60bb      	str	r3, [r7, #8]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d04f      	beq.n	8004d36 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_SPI_IRQHandler+0x17e>
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d034      	beq.n	8004d2c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0203 	bic.w	r2, r2, #3
 8004cd0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d011      	beq.n	8004cfe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_SPI_IRQHandler+0x1fc>)
 8004ce0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc feaa 	bl	8001a40 <HAL_DMA_Abort_IT>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0a:	4a0d      	ldr	r2, [pc, #52]	; (8004d40 <HAL_SPI_IRQHandler+0x1fc>)
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fe94 	bl	8001a40 <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d2a:	e003      	b.n	8004d34 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f809 	bl	8004d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d32:	e000      	b.n	8004d36 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d34:	bf00      	nop
    return;
 8004d36:	bf00      	nop
  }
}
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08004d59 	.word	0x08004d59

08004d44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff ffe6 	bl	8004d44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e041      	b.n	8004e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc fba8 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 f950 	bl	8005064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d001      	beq.n	8004e38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e03c      	b.n	8004eb2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <HAL_TIM_Base_Start+0xa0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d013      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_TIM_Base_Start+0xa4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d00e      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_Base_Start+0xa8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_TIM_Base_Start+0xac>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d004      	beq.n	8004e7c <HAL_TIM_Base_Start+0x5c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_TIM_Base_Start+0xb0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d111      	bne.n	8004ea0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b06      	cmp	r3, #6
 8004e8c:	d010      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e007      	b.n	8004eb0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40014000 	.word	0x40014000

08004ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e0b4      	b.n	800505a <HAL_TIM_ConfigClockSource+0x186>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f28:	d03e      	beq.n	8004fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2e:	f200 8087 	bhi.w	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	f000 8086 	beq.w	8005046 <HAL_TIM_ConfigClockSource+0x172>
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d87f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d01a      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xa6>
 8004f44:	2b70      	cmp	r3, #112	; 0x70
 8004f46:	d87b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b60      	cmp	r3, #96	; 0x60
 8004f4a:	d050      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x11a>
 8004f4c:	2b60      	cmp	r3, #96	; 0x60
 8004f4e:	d877      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b50      	cmp	r3, #80	; 0x50
 8004f52:	d03c      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0xfa>
 8004f54:	2b50      	cmp	r3, #80	; 0x50
 8004f56:	d873      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	d058      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x13a>
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d86f      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d064      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b30      	cmp	r3, #48	; 0x30
 8004f66:	d86b      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d060      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d867      	bhi.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d05a      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x15a>
 8004f78:	e062      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 f965 	bl	8005258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	609a      	str	r2, [r3, #8]
      break;
 8004fa6:	e04f      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6899      	ldr	r1, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f000 f94e 	bl	8005258 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689a      	ldr	r2, [r3, #8]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fca:	609a      	str	r2, [r3, #8]
      break;
 8004fcc:	e03c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 f8c2 	bl	8005164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2150      	movs	r1, #80	; 0x50
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f91b 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e02c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 f8e1 	bl	80051c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2160      	movs	r1, #96	; 0x60
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f90b 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 800500c:	e01c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 f8a2 	bl	8005164 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f8fb 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 800502c:	e00c      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4619      	mov	r1, r3
 8005038:	4610      	mov	r0, r2
 800503a:	f000 f8f2 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 800503e:	e003      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e000      	b.n	8005048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a34      	ldr	r2, [pc, #208]	; (8005148 <TIM_Base_SetConfig+0xe4>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_Base_SetConfig+0x38>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005082:	d00b      	beq.n	800509c <TIM_Base_SetConfig+0x38>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a31      	ldr	r2, [pc, #196]	; (800514c <TIM_Base_SetConfig+0xe8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_Base_SetConfig+0x38>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a30      	ldr	r2, [pc, #192]	; (8005150 <TIM_Base_SetConfig+0xec>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0x38>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <TIM_Base_SetConfig+0xf0>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d108      	bne.n	80050ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a25      	ldr	r2, [pc, #148]	; (8005148 <TIM_Base_SetConfig+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01b      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050bc:	d017      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <TIM_Base_SetConfig+0xe8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a21      	ldr	r2, [pc, #132]	; (8005150 <TIM_Base_SetConfig+0xec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00f      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a20      	ldr	r2, [pc, #128]	; (8005154 <TIM_Base_SetConfig+0xf0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00b      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <TIM_Base_SetConfig+0xf4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d007      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a1e      	ldr	r2, [pc, #120]	; (800515c <TIM_Base_SetConfig+0xf8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d003      	beq.n	80050ee <TIM_Base_SetConfig+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a1d      	ldr	r2, [pc, #116]	; (8005160 <TIM_Base_SetConfig+0xfc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d108      	bne.n	8005100 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a08      	ldr	r2, [pc, #32]	; (8005148 <TIM_Base_SetConfig+0xe4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000
 800514c:	40000400 	.word	0x40000400
 8005150:	40000800 	.word	0x40000800
 8005154:	40000c00 	.word	0x40000c00
 8005158:	40014000 	.word	0x40014000
 800515c:	40014400 	.word	0x40014400
 8005160:	40014800 	.word	0x40014800

08005164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800518e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 030a 	bic.w	r3, r3, #10
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b087      	sub	sp, #28
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	f023 0210 	bic.w	r2, r3, #16
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	031b      	lsls	r3, r3, #12
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	f043 0307 	orr.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	431a      	orrs	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e050      	b.n	8005352 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1c      	ldr	r2, [pc, #112]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d018      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d013      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a18      	ldr	r2, [pc, #96]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00e      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a16      	ldr	r2, [pc, #88]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10c      	bne.n	8005340 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4313      	orrs	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40010000 	.word	0x40010000
 8005364:	40000400 	.word	0x40000400
 8005368:	40000800 	.word	0x40000800
 800536c:	40000c00 	.word	0x40000c00
 8005370:	40014000 	.word	0x40014000

08005374 <calloc>:
 8005374:	4b02      	ldr	r3, [pc, #8]	; (8005380 <calloc+0xc>)
 8005376:	460a      	mov	r2, r1
 8005378:	4601      	mov	r1, r0
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	f000 b834 	b.w	80053e8 <_calloc_r>
 8005380:	2000000c 	.word	0x2000000c

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	; (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	2000000c 	.word	0x2000000c

08005390 <__libc_init_array>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	4d0d      	ldr	r5, [pc, #52]	; (80053c8 <__libc_init_array+0x38>)
 8005394:	4c0d      	ldr	r4, [pc, #52]	; (80053cc <__libc_init_array+0x3c>)
 8005396:	1b64      	subs	r4, r4, r5
 8005398:	10a4      	asrs	r4, r4, #2
 800539a:	2600      	movs	r6, #0
 800539c:	42a6      	cmp	r6, r4
 800539e:	d109      	bne.n	80053b4 <__libc_init_array+0x24>
 80053a0:	4d0b      	ldr	r5, [pc, #44]	; (80053d0 <__libc_init_array+0x40>)
 80053a2:	4c0c      	ldr	r4, [pc, #48]	; (80053d4 <__libc_init_array+0x44>)
 80053a4:	f000 f8e8 	bl	8005578 <_init>
 80053a8:	1b64      	subs	r4, r4, r5
 80053aa:	10a4      	asrs	r4, r4, #2
 80053ac:	2600      	movs	r6, #0
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d105      	bne.n	80053be <__libc_init_array+0x2e>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b8:	4798      	blx	r3
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7ee      	b.n	800539c <__libc_init_array+0xc>
 80053be:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c2:	4798      	blx	r3
 80053c4:	3601      	adds	r6, #1
 80053c6:	e7f2      	b.n	80053ae <__libc_init_array+0x1e>
 80053c8:	080055b8 	.word	0x080055b8
 80053cc:	080055b8 	.word	0x080055b8
 80053d0:	080055b8 	.word	0x080055b8
 80053d4:	080055bc 	.word	0x080055bc

080053d8 <memset>:
 80053d8:	4402      	add	r2, r0
 80053da:	4603      	mov	r3, r0
 80053dc:	4293      	cmp	r3, r2
 80053de:	d100      	bne.n	80053e2 <memset+0xa>
 80053e0:	4770      	bx	lr
 80053e2:	f803 1b01 	strb.w	r1, [r3], #1
 80053e6:	e7f9      	b.n	80053dc <memset+0x4>

080053e8 <_calloc_r>:
 80053e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ea:	fba1 2402 	umull	r2, r4, r1, r2
 80053ee:	b94c      	cbnz	r4, 8005404 <_calloc_r+0x1c>
 80053f0:	4611      	mov	r1, r2
 80053f2:	9201      	str	r2, [sp, #4]
 80053f4:	f000 f82e 	bl	8005454 <_malloc_r>
 80053f8:	9a01      	ldr	r2, [sp, #4]
 80053fa:	4605      	mov	r5, r0
 80053fc:	b930      	cbnz	r0, 800540c <_calloc_r+0x24>
 80053fe:	4628      	mov	r0, r5
 8005400:	b003      	add	sp, #12
 8005402:	bd30      	pop	{r4, r5, pc}
 8005404:	220c      	movs	r2, #12
 8005406:	6002      	str	r2, [r0, #0]
 8005408:	2500      	movs	r5, #0
 800540a:	e7f8      	b.n	80053fe <_calloc_r+0x16>
 800540c:	4621      	mov	r1, r4
 800540e:	f7ff ffe3 	bl	80053d8 <memset>
 8005412:	e7f4      	b.n	80053fe <_calloc_r+0x16>

08005414 <sbrk_aligned>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	4e0e      	ldr	r6, [pc, #56]	; (8005450 <sbrk_aligned+0x3c>)
 8005418:	460c      	mov	r4, r1
 800541a:	6831      	ldr	r1, [r6, #0]
 800541c:	4605      	mov	r5, r0
 800541e:	b911      	cbnz	r1, 8005426 <sbrk_aligned+0x12>
 8005420:	f000 f88c 	bl	800553c <_sbrk_r>
 8005424:	6030      	str	r0, [r6, #0]
 8005426:	4621      	mov	r1, r4
 8005428:	4628      	mov	r0, r5
 800542a:	f000 f887 	bl	800553c <_sbrk_r>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	d00a      	beq.n	8005448 <sbrk_aligned+0x34>
 8005432:	1cc4      	adds	r4, r0, #3
 8005434:	f024 0403 	bic.w	r4, r4, #3
 8005438:	42a0      	cmp	r0, r4
 800543a:	d007      	beq.n	800544c <sbrk_aligned+0x38>
 800543c:	1a21      	subs	r1, r4, r0
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f87c 	bl	800553c <_sbrk_r>
 8005444:	3001      	adds	r0, #1
 8005446:	d101      	bne.n	800544c <sbrk_aligned+0x38>
 8005448:	f04f 34ff 	mov.w	r4, #4294967295
 800544c:	4620      	mov	r0, r4
 800544e:	bd70      	pop	{r4, r5, r6, pc}
 8005450:	20000270 	.word	0x20000270

08005454 <_malloc_r>:
 8005454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005458:	1ccd      	adds	r5, r1, #3
 800545a:	f025 0503 	bic.w	r5, r5, #3
 800545e:	3508      	adds	r5, #8
 8005460:	2d0c      	cmp	r5, #12
 8005462:	bf38      	it	cc
 8005464:	250c      	movcc	r5, #12
 8005466:	2d00      	cmp	r5, #0
 8005468:	4607      	mov	r7, r0
 800546a:	db01      	blt.n	8005470 <_malloc_r+0x1c>
 800546c:	42a9      	cmp	r1, r5
 800546e:	d905      	bls.n	800547c <_malloc_r+0x28>
 8005470:	230c      	movs	r3, #12
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	2600      	movs	r6, #0
 8005476:	4630      	mov	r0, r6
 8005478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800547c:	4e2e      	ldr	r6, [pc, #184]	; (8005538 <_malloc_r+0xe4>)
 800547e:	f000 f86d 	bl	800555c <__malloc_lock>
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	461c      	mov	r4, r3
 8005486:	bb34      	cbnz	r4, 80054d6 <_malloc_r+0x82>
 8005488:	4629      	mov	r1, r5
 800548a:	4638      	mov	r0, r7
 800548c:	f7ff ffc2 	bl	8005414 <sbrk_aligned>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	4604      	mov	r4, r0
 8005494:	d14d      	bne.n	8005532 <_malloc_r+0xde>
 8005496:	6834      	ldr	r4, [r6, #0]
 8005498:	4626      	mov	r6, r4
 800549a:	2e00      	cmp	r6, #0
 800549c:	d140      	bne.n	8005520 <_malloc_r+0xcc>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	4631      	mov	r1, r6
 80054a2:	4638      	mov	r0, r7
 80054a4:	eb04 0803 	add.w	r8, r4, r3
 80054a8:	f000 f848 	bl	800553c <_sbrk_r>
 80054ac:	4580      	cmp	r8, r0
 80054ae:	d13a      	bne.n	8005526 <_malloc_r+0xd2>
 80054b0:	6821      	ldr	r1, [r4, #0]
 80054b2:	3503      	adds	r5, #3
 80054b4:	1a6d      	subs	r5, r5, r1
 80054b6:	f025 0503 	bic.w	r5, r5, #3
 80054ba:	3508      	adds	r5, #8
 80054bc:	2d0c      	cmp	r5, #12
 80054be:	bf38      	it	cc
 80054c0:	250c      	movcc	r5, #12
 80054c2:	4629      	mov	r1, r5
 80054c4:	4638      	mov	r0, r7
 80054c6:	f7ff ffa5 	bl	8005414 <sbrk_aligned>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d02b      	beq.n	8005526 <_malloc_r+0xd2>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	442b      	add	r3, r5
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	e00e      	b.n	80054f4 <_malloc_r+0xa0>
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	1b52      	subs	r2, r2, r5
 80054da:	d41e      	bmi.n	800551a <_malloc_r+0xc6>
 80054dc:	2a0b      	cmp	r2, #11
 80054de:	d916      	bls.n	800550e <_malloc_r+0xba>
 80054e0:	1961      	adds	r1, r4, r5
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	bf18      	it	ne
 80054e8:	6059      	strne	r1, [r3, #4]
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	bf08      	it	eq
 80054ee:	6031      	streq	r1, [r6, #0]
 80054f0:	5162      	str	r2, [r4, r5]
 80054f2:	604b      	str	r3, [r1, #4]
 80054f4:	4638      	mov	r0, r7
 80054f6:	f104 060b 	add.w	r6, r4, #11
 80054fa:	f000 f835 	bl	8005568 <__malloc_unlock>
 80054fe:	f026 0607 	bic.w	r6, r6, #7
 8005502:	1d23      	adds	r3, r4, #4
 8005504:	1af2      	subs	r2, r6, r3
 8005506:	d0b6      	beq.n	8005476 <_malloc_r+0x22>
 8005508:	1b9b      	subs	r3, r3, r6
 800550a:	50a3      	str	r3, [r4, r2]
 800550c:	e7b3      	b.n	8005476 <_malloc_r+0x22>
 800550e:	6862      	ldr	r2, [r4, #4]
 8005510:	42a3      	cmp	r3, r4
 8005512:	bf0c      	ite	eq
 8005514:	6032      	streq	r2, [r6, #0]
 8005516:	605a      	strne	r2, [r3, #4]
 8005518:	e7ec      	b.n	80054f4 <_malloc_r+0xa0>
 800551a:	4623      	mov	r3, r4
 800551c:	6864      	ldr	r4, [r4, #4]
 800551e:	e7b2      	b.n	8005486 <_malloc_r+0x32>
 8005520:	4634      	mov	r4, r6
 8005522:	6876      	ldr	r6, [r6, #4]
 8005524:	e7b9      	b.n	800549a <_malloc_r+0x46>
 8005526:	230c      	movs	r3, #12
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4638      	mov	r0, r7
 800552c:	f000 f81c 	bl	8005568 <__malloc_unlock>
 8005530:	e7a1      	b.n	8005476 <_malloc_r+0x22>
 8005532:	6025      	str	r5, [r4, #0]
 8005534:	e7de      	b.n	80054f4 <_malloc_r+0xa0>
 8005536:	bf00      	nop
 8005538:	2000026c 	.word	0x2000026c

0800553c <_sbrk_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4d06      	ldr	r5, [pc, #24]	; (8005558 <_sbrk_r+0x1c>)
 8005540:	2300      	movs	r3, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	602b      	str	r3, [r5, #0]
 8005548:	f7fb ff40 	bl	80013cc <_sbrk>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_sbrk_r+0x1a>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_sbrk_r+0x1a>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20000274 	.word	0x20000274

0800555c <__malloc_lock>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__malloc_lock+0x8>)
 800555e:	f000 b809 	b.w	8005574 <__retarget_lock_acquire_recursive>
 8005562:	bf00      	nop
 8005564:	20000278 	.word	0x20000278

08005568 <__malloc_unlock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_unlock+0x8>)
 800556a:	f000 b804 	b.w	8005576 <__retarget_lock_release_recursive>
 800556e:	bf00      	nop
 8005570:	20000278 	.word	0x20000278

08005574 <__retarget_lock_acquire_recursive>:
 8005574:	4770      	bx	lr

08005576 <__retarget_lock_release_recursive>:
 8005576:	4770      	bx	lr

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
